
/Users/johnzet/projects/Home/HomeAutomation/IoT/Weather/target/1.5.2/argon/Weather.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006030  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000da050  000da050  0000a050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000da058  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  2003e1e4  000da05c  0001e1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005a4  2003e24c  2003e24c  0002e24c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000da0c4  000da0c4  0002a0c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000da0ec  000da0ec  0002a0ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f6291  00000000  00000000  0002a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00012e10  00000000  00000000  00120381  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000229d1  00000000  00000000  00133191  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002c88  00000000  00000000  00155b62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005000  00000000  00000000  001587ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00038cd4  00000000  00000000  0015d7ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002d823  00000000  00000000  001964be  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010b894  00000000  00000000  001c3ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e40c  00000000  00000000  002cf578  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fb1c 	bl	d966e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fb3c 	bl	d96ba <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1e4 	.word	0x2003e1e4
   d404c:	000da05c 	.word	0x000da05c
   d4050:	2003e24c 	.word	0x2003e24c
   d4054:	2003e24c 	.word	0x2003e24c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 ff33 	bl	d7ec8 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000da04c 	.word	0x000da04c
   d4084:	000da00c 	.word	0x000da00c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f001 b91e 	b.w	d52c8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f001 f9a3 	bl	d53d8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 bed9 	b.w	d7e4c <_post_loop>

000d409a <_Znwj>:
   d409a:	f002 b817 	b.w	d60cc <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 b81d 	b.w	d60dc <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 b81b 	b.w	d60dc <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40b6:	6803      	ldr	r3, [r0, #0]
   d40b8:	b2c9      	uxtb	r1, r1
   d40ba:	689b      	ldr	r3, [r3, #8]
   d40bc:	4718      	bx	r3
	...

000d40c0 <_ZN8MLX90393C1Ev>:
#include <MLX90393.h>

MLX90393::
MLX90393()
{
  I2C_address = 0;
   d40c0:	2200      	movs	r2, #0
   d40c2:	7082      	strb	r2, [r0, #2]

void
MLX90393::
cache_invalidate()
{
  cache.dirty = cache_t::ALL_DIRTY_MASK;
   d40c4:	2208      	movs	r2, #8
   d40c6:	7202      	strb	r2, [r0, #8]
  I2C_address = 0;

  cache_invalidate();

  // gain steps derived from datasheet section 15.1.4 tables
  gain_multipliers[0] = 5.f;
   d40c8:	4a0d      	ldr	r2, [pc, #52]	; (d4100 <_ZN8MLX90393C1Ev+0x40>)
   d40ca:	6102      	str	r2, [r0, #16]
  gain_multipliers[1] = 4.f;
   d40cc:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
   d40d0:	6142      	str	r2, [r0, #20]
  gain_multipliers[2] = 3.f;
   d40d2:	4a0c      	ldr	r2, [pc, #48]	; (d4104 <_ZN8MLX90393C1Ev+0x44>)
   d40d4:	6182      	str	r2, [r0, #24]
  gain_multipliers[3] = 2.5f;
   d40d6:	4a0c      	ldr	r2, [pc, #48]	; (d4108 <_ZN8MLX90393C1Ev+0x48>)
   d40d8:	61c2      	str	r2, [r0, #28]
  gain_multipliers[4] = 2.f;
   d40da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d40de:	6202      	str	r2, [r0, #32]
  gain_multipliers[5] = 1.66666667f;
   d40e0:	4a0a      	ldr	r2, [pc, #40]	; (d410c <_ZN8MLX90393C1Ev+0x4c>)
   d40e2:	6242      	str	r2, [r0, #36]	; 0x24
  gain_multipliers[6] = 1.33333333f;
   d40e4:	4a0a      	ldr	r2, [pc, #40]	; (d4110 <_ZN8MLX90393C1Ev+0x50>)
   d40e6:	6282      	str	r2, [r0, #40]	; 0x28
  gain_multipliers[7] = 1.f;
   d40e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   d40ec:	62c2      	str	r2, [r0, #44]	; 0x2c

  // from datasheet
  // for hallconf = 0
  base_xy_sens_hc0 = 0.196f;
   d40ee:	4a09      	ldr	r2, [pc, #36]	; (d4114 <_ZN8MLX90393C1Ev+0x54>)
   d40f0:	6302      	str	r2, [r0, #48]	; 0x30
  base_z_sens_hc0 = 0.316f;
   d40f2:	4a09      	ldr	r2, [pc, #36]	; (d4118 <_ZN8MLX90393C1Ev+0x58>)
   d40f4:	6342      	str	r2, [r0, #52]	; 0x34
  // for hallconf = 0xc
  base_xy_sens_hc0xc = 0.150f;
   d40f6:	4a09      	ldr	r2, [pc, #36]	; (d411c <_ZN8MLX90393C1Ev+0x5c>)
   d40f8:	6382      	str	r2, [r0, #56]	; 0x38
  base_z_sens_hc0xc = 0.242f;
   d40fa:	4a09      	ldr	r2, [pc, #36]	; (d4120 <_ZN8MLX90393C1Ev+0x60>)
   d40fc:	63c2      	str	r2, [r0, #60]	; 0x3c
}
   d40fe:	4770      	bx	lr
   d4100:	40a00000 	.word	0x40a00000
   d4104:	40400000 	.word	0x40400000
   d4108:	40200000 	.word	0x40200000
   d410c:	3fd55555 	.word	0x3fd55555
   d4110:	3faaaaab 	.word	0x3faaaaab
   d4114:	3e48b439 	.word	0x3e48b439
   d4118:	3ea1cac1 	.word	0x3ea1cac1
   d411c:	3e19999a 	.word	0x3e19999a
   d4120:	3e77ced9 	.word	0x3e77ced9

000d4124 <_ZN8MLX9039316cache_invalidateEh>:

void
MLX90393::
cache_invalidate(uint8_t address)
{
  cache.dirty |= cache_t::ALL_DIRTY_MASK & (1<<address);
   d4124:	2301      	movs	r3, #1
   d4126:	fa03 f101 	lsl.w	r1, r3, r1
   d412a:	7a03      	ldrb	r3, [r0, #8]
   d412c:	f001 0108 	and.w	r1, r1, #8
   d4130:	4319      	orrs	r1, r3
   d4132:	7201      	strb	r1, [r0, #8]
   d4134:	4770      	bx	lr

000d4136 <_ZN8MLX903939cache_setEht>:
}

void
MLX90393::
cache_set(uint8_t address, uint16_t data){
  if (address < cache_t::SIZE){
   d4136:	2902      	cmp	r1, #2
   d4138:	d809      	bhi.n	d414e <_ZN8MLX903939cache_setEht+0x18>
    cache.reg[address] = data;
   d413a:	eb00 0341 	add.w	r3, r0, r1, lsl #1
   d413e:	815a      	strh	r2, [r3, #10]
    cache.dirty &= ~(1 << address);
   d4140:	2301      	movs	r3, #1
   d4142:	fa03 f101 	lsl.w	r1, r3, r1
   d4146:	7a03      	ldrb	r3, [r0, #8]
   d4148:	ea23 0101 	bic.w	r1, r3, r1
   d414c:	7201      	strb	r1, [r0, #8]
   d414e:	4770      	bx	lr

000d4150 <_ZN8MLX9039311sendCommandEh>:


uint8_t
MLX90393::
sendCommand(uint8_t cmd)
{
   d4150:	b538      	push	{r3, r4, r5, lr}
   d4152:	4604      	mov	r4, r0
   d4154:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(I2C_address);
   d4156:	7881      	ldrb	r1, [r0, #2]
   d4158:	6c00      	ldr	r0, [r0, #64]	; 0x40
   d415a:	f003 f942 	bl	d73e2 <_ZN7TwoWire17beginTransmissionEh>
  if (_i2cPort->write(cmd) != 1){ return STATUS_ERROR; }
   d415e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d4160:	6803      	ldr	r3, [r0, #0]
   d4162:	4629      	mov	r1, r5
   d4164:	689b      	ldr	r3, [r3, #8]
   d4166:	4798      	blx	r3
   d4168:	2801      	cmp	r0, #1
   d416a:	4605      	mov	r5, r0
   d416c:	d001      	beq.n	d4172 <_ZN8MLX9039311sendCommandEh+0x22>
   d416e:	20ff      	movs	r0, #255	; 0xff
   d4170:	bd38      	pop	{r3, r4, r5, pc}
  if (_i2cPort->endTransmission()){ return STATUS_ERROR; }
   d4172:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d4174:	f003 f93d 	bl	d73f2 <_ZN7TwoWire15endTransmissionEv>
   d4178:	2800      	cmp	r0, #0
   d417a:	d1f8      	bne.n	d416e <_ZN8MLX9039311sendCommandEh+0x1e>
  if (_i2cPort->requestFrom(I2C_address, uint8_t(1)) != 1){ return STATUS_ERROR; }
   d417c:	462a      	mov	r2, r5
   d417e:	78a1      	ldrb	r1, [r4, #2]
   d4180:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d4182:	f003 f92b 	bl	d73dc <_ZN7TwoWire11requestFromEhj>
   d4186:	2801      	cmp	r0, #1
   d4188:	d1f1      	bne.n	d416e <_ZN8MLX9039311sendCommandEh+0x1e>

  return _i2cPort->read();
   d418a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d418c:	6803      	ldr	r3, [r0, #0]
   d418e:	695b      	ldr	r3, [r3, #20]
   d4190:	4798      	blx	r3
   d4192:	b2c0      	uxtb	r0, r0
}
   d4194:	bd38      	pop	{r3, r4, r5, pc}

000d4196 <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE>:
}

uint8_t
MLX90393::
readMeasurement(uint8_t zyxt_flags, txyzRaw& txyz_result)
{
   d4196:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d419a:	4680      	mov	r8, r0
   d419c:	b085      	sub	sp, #20
   d419e:	460d      	mov	r5, r1
  uint8_t cmd = CMD_READ_MEASUREMENT | (zyxt_flags & 0xf);
  _i2cPort->beginTransmission(I2C_address);
   d41a0:	7881      	ldrb	r1, [r0, #2]
   d41a2:	6c00      	ldr	r0, [r0, #64]	; 0x40
}

uint8_t
MLX90393::
readMeasurement(uint8_t zyxt_flags, txyzRaw& txyz_result)
{
   d41a4:	4616      	mov	r6, r2
  uint8_t cmd = CMD_READ_MEASUREMENT | (zyxt_flags & 0xf);
  _i2cPort->beginTransmission(I2C_address);
   d41a6:	f003 f91c 	bl	d73e2 <_ZN7TwoWire17beginTransmissionEh>
  if(_i2cPort->write(cmd) != 1){
   d41aa:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
   d41ae:	6803      	ldr	r3, [r0, #0]
   d41b0:	f005 010f 	and.w	r1, r5, #15
   d41b4:	689b      	ldr	r3, [r3, #8]
   d41b6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   d41ba:	4798      	blx	r3
   d41bc:	2801      	cmp	r0, #1
   d41be:	d12c      	bne.n	d421a <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0x84>
    return STATUS_ERROR;
  }
  if (_i2cPort->endTransmission()){
   d41c0:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
   d41c4:	f003 f915 	bl	d73f2 <_ZN7TwoWire15endTransmissionEv>
   d41c8:	4683      	mov	fp, r0
   d41ca:	bb30      	cbnz	r0, d421a <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0x84>
   d41cc:	f005 0308 	and.w	r3, r5, #8

  uint8_t buffer[9];
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
                       ((zyxt_flags & Y_FLAG)?2:0) +
                       ((zyxt_flags & X_FLAG)?2:0) +
                       ((zyxt_flags & T_FLAG)?2:0) );
   d41d0:	f005 0a02 	and.w	sl, r5, #2
   d41d4:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   d41d8:	fa5f fa8a 	uxtb.w	sl, sl
   d41dc:	2b00      	cmp	r3, #0
   d41de:	bf14      	ite	ne
   d41e0:	2302      	movne	r3, #2
   d41e2:	2300      	moveq	r3, #0
   d41e4:	f005 0404 	and.w	r4, r5, #4
   d41e8:	4453      	add	r3, sl
   d41ea:	3301      	adds	r3, #1
   d41ec:	f004 09ff 	and.w	r9, r4, #255	; 0xff
   d41f0:	2c00      	cmp	r4, #0
   d41f2:	bf14      	ite	ne
   d41f4:	2402      	movne	r4, #2
   d41f6:	2400      	moveq	r4, #0
   d41f8:	f015 0501 	ands.w	r5, r5, #1
   d41fc:	bf14      	ite	ne
   d41fe:	2202      	movne	r2, #2
   d4200:	2200      	moveq	r2, #0
   d4202:	441c      	add	r4, r3
   d4204:	4414      	add	r4, r2
   d4206:	b2e4      	uxtb	r4, r4

  if(_i2cPort->requestFrom(I2C_address, count) != count){
   d4208:	4622      	mov	r2, r4
   d420a:	f898 1002 	ldrb.w	r1, [r8, #2]
   d420e:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
   d4212:	f003 f8e3 	bl	d73dc <_ZN7TwoWire11requestFromEhj>
   d4216:	4284      	cmp	r4, r0
   d4218:	d00f      	beq.n	d423a <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0xa4>
    return STATUS_ERROR;
   d421a:	20ff      	movs	r0, #255	; 0xff
   d421c:	e051      	b.n	d42c2 <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0x12c>
  }
  for (uint8_t i=0; i < count; i++){
    if (_i2cPort->available()){
      buffer[i] = _i2cPort->read();
   d421e:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
   d4222:	6803      	ldr	r3, [r0, #0]
   d4224:	695b      	ldr	r3, [r3, #20]
   d4226:	4798      	blx	r3
   d4228:	ab01      	add	r3, sp, #4
   d422a:	f803 000b 	strb.w	r0, [r3, fp]
   d422e:	f10b 0b01 	add.w	fp, fp, #1
                       ((zyxt_flags & T_FLAG)?2:0) );

  if(_i2cPort->requestFrom(I2C_address, count) != count){
    return STATUS_ERROR;
  }
  for (uint8_t i=0; i < count; i++){
   d4232:	fa5f f38b 	uxtb.w	r3, fp
   d4236:	42a3      	cmp	r3, r4
   d4238:	d207      	bcs.n	d424a <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0xb4>
    if (_i2cPort->available()){
   d423a:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
   d423e:	6803      	ldr	r3, [r0, #0]
   d4240:	691b      	ldr	r3, [r3, #16]
   d4242:	4798      	blx	r3
   d4244:	2800      	cmp	r0, #0
   d4246:	d1ea      	bne.n	d421e <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0x88>
   d4248:	e7e7      	b.n	d421a <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0x84>
      return STATUS_ERROR;
    }
  }

  uint8_t i = 1;
  if (zyxt_flags & T_FLAG){
   d424a:	b145      	cbz	r5, d425e <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0xc8>
    txyz_result.t =  (uint16_t(buffer[i])<<8) | buffer[i+1];
   d424c:	f89d 2005 	ldrb.w	r2, [sp, #5]
   d4250:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d4254:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4258:	8033      	strh	r3, [r6, #0]
    i += 2;
   d425a:	2303      	movs	r3, #3
   d425c:	e001      	b.n	d4262 <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0xcc>
  } else {
    txyz_result.t = 0;
   d425e:	8035      	strh	r5, [r6, #0]
    } else {
      return STATUS_ERROR;
    }
  }

  uint8_t i = 1;
   d4260:	2301      	movs	r3, #1
    txyz_result.t =  (uint16_t(buffer[i])<<8) | buffer[i+1];
    i += 2;
  } else {
    txyz_result.t = 0;
  }
  if (zyxt_flags & X_FLAG){
   d4262:	f1ba 0f00 	cmp.w	sl, #0
   d4266:	d00b      	beq.n	d4280 <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0xea>
    txyz_result.x =  (uint16_t(buffer[i])<<8) | buffer[i+1];
   d4268:	aa04      	add	r2, sp, #16
   d426a:	18d1      	adds	r1, r2, r3
    i += 2;
   d426c:	3302      	adds	r3, #2
    i += 2;
  } else {
    txyz_result.t = 0;
  }
  if (zyxt_flags & X_FLAG){
    txyz_result.x =  (uint16_t(buffer[i])<<8) | buffer[i+1];
   d426e:	f811 0c0c 	ldrb.w	r0, [r1, #-12]
   d4272:	f811 2c0b 	ldrb.w	r2, [r1, #-11]
   d4276:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   d427a:	8072      	strh	r2, [r6, #2]
    i += 2;
   d427c:	b2db      	uxtb	r3, r3
   d427e:	e001      	b.n	d4284 <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0xee>
  } else {
    txyz_result.x = 0;
   d4280:	f8a6 a002 	strh.w	sl, [r6, #2]
  }
  if (zyxt_flags & Y_FLAG){
   d4284:	f1b9 0f00 	cmp.w	r9, #0
   d4288:	d00b      	beq.n	d42a2 <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0x10c>
    txyz_result.y =  (uint16_t(buffer[i])<<8) | buffer[i+1];
   d428a:	aa04      	add	r2, sp, #16
   d428c:	18d1      	adds	r1, r2, r3
    i += 2;
   d428e:	3302      	adds	r3, #2
    i += 2;
  } else {
    txyz_result.x = 0;
  }
  if (zyxt_flags & Y_FLAG){
    txyz_result.y =  (uint16_t(buffer[i])<<8) | buffer[i+1];
   d4290:	f811 0c0c 	ldrb.w	r0, [r1, #-12]
   d4294:	f811 2c0b 	ldrb.w	r2, [r1, #-11]
   d4298:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   d429c:	80b2      	strh	r2, [r6, #4]
    i += 2;
   d429e:	b2db      	uxtb	r3, r3
   d42a0:	e001      	b.n	d42a6 <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0x110>
  } else {
    txyz_result.y = 0;
   d42a2:	f8a6 9004 	strh.w	r9, [r6, #4]
  }
  if (zyxt_flags & Z_FLAG){
   d42a6:	b14f      	cbz	r7, d42bc <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0x126>
    txyz_result.z =  (uint16_t(buffer[i])<<8) | buffer[i+1];
   d42a8:	aa04      	add	r2, sp, #16
   d42aa:	4413      	add	r3, r2
   d42ac:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
   d42b0:	f813 3c0b 	ldrb.w	r3, [r3, #-11]
   d42b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d42b8:	80f3      	strh	r3, [r6, #6]
   d42ba:	e000      	b.n	d42be <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0x128>
    i += 2;
  } else {
    txyz_result.z = 0;
   d42bc:	80f7      	strh	r7, [r6, #6]
  }

  return buffer[0];
   d42be:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
   d42c2:	b005      	add	sp, #20
   d42c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d42c8 <_ZN8MLX9039312readRegisterEhRt>:

uint8_t
MLX90393::
readRegister(uint8_t address, uint16_t& data)
{
   d42c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d42cc:	4604      	mov	r4, r0
   d42ce:	460f      	mov	r7, r1
  _i2cPort->beginTransmission(I2C_address);
   d42d0:	7881      	ldrb	r1, [r0, #2]
   d42d2:	6c00      	ldr	r0, [r0, #64]	; 0x40
}

uint8_t
MLX90393::
readRegister(uint8_t address, uint16_t& data)
{
   d42d4:	4690      	mov	r8, r2
  _i2cPort->beginTransmission(I2C_address);
   d42d6:	f003 f884 	bl	d73e2 <_ZN7TwoWire17beginTransmissionEh>
  if (_i2cPort->write(CMD_READ_REGISTER) != 1){ return STATUS_ERROR; }
   d42da:	2150      	movs	r1, #80	; 0x50
   d42dc:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d42de:	f7ff feea 	bl	d40b6 <_ZN7TwoWire5writeEi>
   d42e2:	2801      	cmp	r0, #1
   d42e4:	d002      	beq.n	d42ec <_ZN8MLX9039312readRegisterEhRt+0x24>
   d42e6:	20ff      	movs	r0, #255	; 0xff
   d42e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (_i2cPort->write((address & 0x3f)<<2) != 1){ return STATUS_ERROR; }
   d42ec:	00b9      	lsls	r1, r7, #2
   d42ee:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   d42f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d42f4:	f7ff fedf 	bl	d40b6 <_ZN7TwoWire5writeEi>
   d42f8:	2801      	cmp	r0, #1
   d42fa:	d1f4      	bne.n	d42e6 <_ZN8MLX9039312readRegisterEhRt+0x1e>
  if (_i2cPort->endTransmission()){ return STATUS_ERROR; }
   d42fc:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d42fe:	f003 f878 	bl	d73f2 <_ZN7TwoWire15endTransmissionEv>
   d4302:	2800      	cmp	r0, #0
   d4304:	d1ef      	bne.n	d42e6 <_ZN8MLX9039312readRegisterEhRt+0x1e>
  if (_i2cPort->requestFrom(I2C_address, uint8_t(3)) != 3){ return STATUS_ERROR; }
   d4306:	2203      	movs	r2, #3
   d4308:	78a1      	ldrb	r1, [r4, #2]
   d430a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d430c:	f003 f866 	bl	d73dc <_ZN7TwoWire11requestFromEhj>
   d4310:	2803      	cmp	r0, #3
   d4312:	d1e8      	bne.n	d42e6 <_ZN8MLX9039312readRegisterEhRt+0x1e>

  uint8_t status;
  if (!_i2cPort->available()){ return STATUS_ERROR; }
   d4314:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d4316:	6803      	ldr	r3, [r0, #0]
   d4318:	691b      	ldr	r3, [r3, #16]
   d431a:	4798      	blx	r3
   d431c:	2800      	cmp	r0, #0
   d431e:	d0e2      	beq.n	d42e6 <_ZN8MLX9039312readRegisterEhRt+0x1e>
  status = _i2cPort->read();
   d4320:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d4322:	6803      	ldr	r3, [r0, #0]
   d4324:	695b      	ldr	r3, [r3, #20]
   d4326:	4798      	blx	r3
   d4328:	b2c6      	uxtb	r6, r0

  uint8_t b_h;
  if (!_i2cPort->available()){ return STATUS_ERROR; }
   d432a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d432c:	6803      	ldr	r3, [r0, #0]
   d432e:	691b      	ldr	r3, [r3, #16]
   d4330:	4798      	blx	r3
   d4332:	2800      	cmp	r0, #0
   d4334:	d0d7      	beq.n	d42e6 <_ZN8MLX9039312readRegisterEhRt+0x1e>
  b_h = _i2cPort->read();
   d4336:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d4338:	6803      	ldr	r3, [r0, #0]
   d433a:	695b      	ldr	r3, [r3, #20]
   d433c:	4798      	blx	r3
   d433e:	4605      	mov	r5, r0

  uint8_t b_l;
  if (!_i2cPort->available()){ return STATUS_ERROR; }
   d4340:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d4342:	6803      	ldr	r3, [r0, #0]
   d4344:	691b      	ldr	r3, [r3, #16]
   d4346:	4798      	blx	r3
   d4348:	2800      	cmp	r0, #0
   d434a:	d0cc      	beq.n	d42e6 <_ZN8MLX9039312readRegisterEhRt+0x1e>
  b_l = _i2cPort->read();
   d434c:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d434e:	6803      	ldr	r3, [r0, #0]
   d4350:	695b      	ldr	r3, [r3, #20]
   d4352:	4798      	blx	r3

  data = (uint16_t(b_h)<<8) | b_l;
   d4354:	022d      	lsls	r5, r5, #8
   d4356:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   d435a:	b2c0      	uxtb	r0, r0
   d435c:	ea40 0205 	orr.w	r2, r0, r5
   d4360:	f8a8 2000 	strh.w	r2, [r8]
  cache_set(address, data);
   d4364:	4620      	mov	r0, r4
   d4366:	4639      	mov	r1, r7
   d4368:	f7ff fee5 	bl	d4136 <_ZN8MLX903939cache_setEht>
  return status;
   d436c:	4630      	mov	r0, r6
}
   d436e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4372 <_ZN8MLX9039313writeRegisterEht>:

uint8_t
MLX90393::
writeRegister(uint8_t address, uint16_t data)
{
   d4372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4374:	4604      	mov	r4, r0
   d4376:	4616      	mov	r6, r2
   d4378:	460f      	mov	r7, r1
  cache_invalidate(address);
   d437a:	f7ff fed3 	bl	d4124 <_ZN8MLX9039316cache_invalidateEh>

  _i2cPort->beginTransmission(I2C_address);
   d437e:	7881      	ldrb	r1, [r0, #2]
   d4380:	6c00      	ldr	r0, [r0, #64]	; 0x40
   d4382:	f003 f82e 	bl	d73e2 <_ZN7TwoWire17beginTransmissionEh>
  if (_i2cPort->write(CMD_WRITE_REGISTER) != 1){ return STATUS_ERROR; }
   d4386:	2160      	movs	r1, #96	; 0x60
   d4388:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d438a:	f7ff fe94 	bl	d40b6 <_ZN7TwoWire5writeEi>
   d438e:	2801      	cmp	r0, #1
   d4390:	d001      	beq.n	d4396 <_ZN8MLX9039313writeRegisterEht+0x24>
   d4392:	20ff      	movs	r0, #255	; 0xff
   d4394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (_i2cPort->write((data & 0xff00) >> 8) != 1){ return STATUS_ERROR; }
   d4396:	0a31      	lsrs	r1, r6, #8
   d4398:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d439a:	f7ff fe8c 	bl	d40b6 <_ZN7TwoWire5writeEi>
   d439e:	2801      	cmp	r0, #1
   d43a0:	d1f7      	bne.n	d4392 <_ZN8MLX9039313writeRegisterEht+0x20>
  if (_i2cPort->write(data & 0x00ff) != 1){ return STATUS_ERROR; }
   d43a2:	b2f1      	uxtb	r1, r6
   d43a4:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d43a6:	f7ff fe86 	bl	d40b6 <_ZN7TwoWire5writeEi>
   d43aa:	2801      	cmp	r0, #1
   d43ac:	d1f1      	bne.n	d4392 <_ZN8MLX9039313writeRegisterEht+0x20>
  if (_i2cPort->write((address & 0x3f)<<2) != 1){ return STATUS_ERROR; }
   d43ae:	00b9      	lsls	r1, r7, #2
   d43b0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   d43b4:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d43b6:	f7ff fe7e 	bl	d40b6 <_ZN7TwoWire5writeEi>
   d43ba:	2801      	cmp	r0, #1
   d43bc:	4605      	mov	r5, r0
   d43be:	d1e8      	bne.n	d4392 <_ZN8MLX9039313writeRegisterEht+0x20>
  if (_i2cPort->endTransmission()){ return STATUS_ERROR; }
   d43c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d43c2:	f003 f816 	bl	d73f2 <_ZN7TwoWire15endTransmissionEv>
   d43c6:	2800      	cmp	r0, #0
   d43c8:	d1e3      	bne.n	d4392 <_ZN8MLX9039313writeRegisterEht+0x20>
  if (_i2cPort->requestFrom(I2C_address, uint8_t(1)) != 1){ return STATUS_ERROR; }
   d43ca:	462a      	mov	r2, r5
   d43cc:	78a1      	ldrb	r1, [r4, #2]
   d43ce:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d43d0:	f003 f804 	bl	d73dc <_ZN7TwoWire11requestFromEhj>
   d43d4:	2801      	cmp	r0, #1
   d43d6:	d1dc      	bne.n	d4392 <_ZN8MLX9039313writeRegisterEht+0x20>
  if (!_i2cPort->available()){ return STATUS_ERROR; }
   d43d8:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d43da:	6803      	ldr	r3, [r0, #0]
   d43dc:	691b      	ldr	r3, [r3, #16]
   d43de:	4798      	blx	r3
   d43e0:	2800      	cmp	r0, #0
   d43e2:	d0d6      	beq.n	d4392 <_ZN8MLX9039313writeRegisterEht+0x20>

  const uint8_t status = _i2cPort->read();
   d43e4:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d43e6:	6803      	ldr	r3, [r0, #0]
   d43e8:	695b      	ldr	r3, [r3, #20]
   d43ea:	4798      	blx	r3
   d43ec:	b2c5      	uxtb	r5, r0
  if (isOK(status)) {
   d43ee:	06eb      	lsls	r3, r5, #27
   d43f0:	d404      	bmi.n	d43fc <_ZN8MLX9039313writeRegisterEht+0x8a>
    cache_set(address, data);
   d43f2:	4632      	mov	r2, r6
   d43f4:	4639      	mov	r1, r7
   d43f6:	4620      	mov	r0, r4
   d43f8:	f7ff fe9d 	bl	d4136 <_ZN8MLX903939cache_setEht>
  if (_i2cPort->endTransmission()){ return STATUS_ERROR; }
  if (_i2cPort->requestFrom(I2C_address, uint8_t(1)) != 1){ return STATUS_ERROR; }
  if (!_i2cPort->available()){ return STATUS_ERROR; }

  const uint8_t status = _i2cPort->read();
  if (isOK(status)) {
   d43fc:	4628      	mov	r0, r5
    cache_set(address, data);
  }
  return status;
}
   d43fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4400 <_ZN8MLX903935resetEv>:

void
MLX90393::
cache_invalidate()
{
  cache.dirty = cache_t::ALL_DIRTY_MASK;
   d4400:	2308      	movs	r3, #8
}

uint8_t
MLX90393::
reset()
{
   d4402:	b510      	push	{r4, lr}
  cache_invalidate();

  uint8_t status = sendCommand(CMD_RESET);
   d4404:	21f0      	movs	r1, #240	; 0xf0

void
MLX90393::
cache_invalidate()
{
  cache.dirty = cache_t::ALL_DIRTY_MASK;
   d4406:	7203      	strb	r3, [r0, #8]
MLX90393::
reset()
{
  cache_invalidate();

  uint8_t status = sendCommand(CMD_RESET);
   d4408:	f7ff fea2 	bl	d4150 <_ZN8MLX9039311sendCommandEh>
   d440c:	4604      	mov	r4, r0
  //Device now resets. We must give it time to complete
  delay(2);
   d440e:	2002      	movs	r0, #2
   d4410:	f001 fe7c 	bl	d610c <delay>
  // POR is 1.6ms max. Software reset time limit is not specified.
  // 2ms was found to be good.

  return status;
}
   d4414:	4620      	mov	r0, r4
   d4416:	bd10      	pop	{r4, pc}

000d4418 <_ZN8MLX9039310setGainSelEh>:
}

uint8_t
MLX90393::
setGainSel(uint8_t gain_sel)
{
   d4418:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d441a:	460c      	mov	r4, r1
  uint16_t old_val;
  uint8_t status1 = readRegister(GAIN_SEL_REG, old_val);
   d441c:	f10d 0206 	add.w	r2, sp, #6
   d4420:	2100      	movs	r1, #0
}

uint8_t
MLX90393::
setGainSel(uint8_t gain_sel)
{
   d4422:	4606      	mov	r6, r0
  uint16_t old_val;
  uint8_t status1 = readRegister(GAIN_SEL_REG, old_val);
   d4424:	f7ff ff50 	bl	d42c8 <_ZN8MLX9039312readRegisterEhRt>

  uint8_t status2 = writeRegister(GAIN_SEL_REG,
                                  (old_val & ~GAIN_SEL_MASK) |
                                  ((uint16_t(gain_sel) << GAIN_SEL_SHIFT) &
                                   GAIN_SEL_MASK));
   d4428:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d442c:	0124      	lsls	r4, r4, #4
   d442e:	f004 0470 	and.w	r4, r4, #112	; 0x70
   d4432:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   d4436:	4322      	orrs	r2, r4
uint8_t
MLX90393::
setGainSel(uint8_t gain_sel)
{
  uint16_t old_val;
  uint8_t status1 = readRegister(GAIN_SEL_REG, old_val);
   d4438:	4605      	mov	r5, r0

  uint8_t status2 = writeRegister(GAIN_SEL_REG,
                                  (old_val & ~GAIN_SEL_MASK) |
                                  ((uint16_t(gain_sel) << GAIN_SEL_SHIFT) &
                                   GAIN_SEL_MASK));
   d443a:	b292      	uxth	r2, r2
   d443c:	2100      	movs	r1, #0
   d443e:	4630      	mov	r0, r6
   d4440:	f7ff ff97 	bl	d4372 <_ZN8MLX9039313writeRegisterEht>
  return checkStatus(status1) | checkStatus(status2);
   d4444:	4328      	orrs	r0, r5
   d4446:	f340 1000 	sbfx	r0, r0, #4, #1
}
   d444a:	b2c0      	uxtb	r0, r0
   d444c:	b002      	add	sp, #8
   d444e:	bd70      	pop	{r4, r5, r6, pc}

000d4450 <_ZN8MLX9039315setOverSamplingEh>:
}

uint8_t
MLX90393::
setOverSampling(uint8_t osr)
{
   d4450:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4452:	460d      	mov	r5, r1
  uint16_t old_val;
  uint8_t status1 = readRegister(OSR_REG, old_val);
   d4454:	f10d 0206 	add.w	r2, sp, #6
   d4458:	2102      	movs	r1, #2
}

uint8_t
MLX90393::
setOverSampling(uint8_t osr)
{
   d445a:	4606      	mov	r6, r0
  uint16_t old_val;
  uint8_t status1 = readRegister(OSR_REG, old_val);
   d445c:	f7ff ff34 	bl	d42c8 <_ZN8MLX9039312readRegisterEhRt>
  uint8_t status2 = writeRegister(OSR_REG,
                                  (old_val & ~OSR_MASK) |
                                  ((uint16_t(osr) << OSR_SHIFT) & OSR_MASK));
   d4460:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d4464:	f022 0303 	bic.w	r3, r2, #3
   d4468:	f005 0203 	and.w	r2, r5, #3
   d446c:	431a      	orrs	r2, r3
uint8_t
MLX90393::
setOverSampling(uint8_t osr)
{
  uint16_t old_val;
  uint8_t status1 = readRegister(OSR_REG, old_val);
   d446e:	4604      	mov	r4, r0
  uint8_t status2 = writeRegister(OSR_REG,
                                  (old_val & ~OSR_MASK) |
                                  ((uint16_t(osr) << OSR_SHIFT) & OSR_MASK));
   d4470:	b292      	uxth	r2, r2
   d4472:	2102      	movs	r1, #2
   d4474:	4630      	mov	r0, r6
   d4476:	f7ff ff7c 	bl	d4372 <_ZN8MLX9039313writeRegisterEht>
  return checkStatus(status1) | checkStatus(status2);
   d447a:	4320      	orrs	r0, r4
   d447c:	f340 1000 	sbfx	r0, r0, #4, #1
}
   d4480:	b2c0      	uxtb	r0, r0
   d4482:	b002      	add	sp, #8
   d4484:	bd70      	pop	{r4, r5, r6, pc}

000d4486 <_ZN8MLX9039319setDigitalFilteringEh>:
}

uint8_t
MLX90393::
setDigitalFiltering(uint8_t dig_flt)
{
   d4486:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4488:	460c      	mov	r4, r1
  uint16_t old_val;
  uint8_t status1 = readRegister(DIG_FLT_REG, old_val);
   d448a:	f10d 0206 	add.w	r2, sp, #6
   d448e:	2102      	movs	r1, #2
}

uint8_t
MLX90393::
setDigitalFiltering(uint8_t dig_flt)
{
   d4490:	4606      	mov	r6, r0
  uint16_t old_val;
  uint8_t status1 = readRegister(DIG_FLT_REG, old_val);
   d4492:	f7ff ff19 	bl	d42c8 <_ZN8MLX9039312readRegisterEhRt>
  uint8_t status2 = writeRegister(DIG_FLT_REG,
                                  (old_val & ~DIG_FLT_MASK) |
                                  ((uint16_t(dig_flt) << DIG_FLT_SHIFT) &
                                   DIG_FLT_MASK));
   d4496:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d449a:	00a4      	lsls	r4, r4, #2
   d449c:	f004 041c 	and.w	r4, r4, #28
   d44a0:	f022 021c 	bic.w	r2, r2, #28
   d44a4:	4322      	orrs	r2, r4
uint8_t
MLX90393::
setDigitalFiltering(uint8_t dig_flt)
{
  uint16_t old_val;
  uint8_t status1 = readRegister(DIG_FLT_REG, old_val);
   d44a6:	4605      	mov	r5, r0
  uint8_t status2 = writeRegister(DIG_FLT_REG,
                                  (old_val & ~DIG_FLT_MASK) |
                                  ((uint16_t(dig_flt) << DIG_FLT_SHIFT) &
                                   DIG_FLT_MASK));
   d44a8:	b292      	uxth	r2, r2
   d44aa:	2102      	movs	r1, #2
   d44ac:	4630      	mov	r0, r6
   d44ae:	f7ff ff60 	bl	d4372 <_ZN8MLX9039313writeRegisterEht>
  return checkStatus(status1) | checkStatus(status2);
   d44b2:	4328      	orrs	r0, r5
   d44b4:	f340 1000 	sbfx	r0, r0, #4, #1
}
   d44b8:	b2c0      	uxtb	r0, r0
   d44ba:	b002      	add	sp, #8
   d44bc:	bd70      	pop	{r4, r5, r6, pc}

000d44be <_ZN8MLX9039313setResolutionEhhh>:
}

uint8_t
MLX90393::
setResolution(uint8_t res_x, uint8_t res_y, uint8_t res_z)
{
   d44be:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint16_t res_xyz = ((res_z & 0x3)<<4) | ((res_y & 0x3)<<2) | (res_x & 0x3);
   d44c0:	0092      	lsls	r2, r2, #2
   d44c2:	f001 0103 	and.w	r1, r1, #3
   d44c6:	f002 020c 	and.w	r2, r2, #12
   d44ca:	011b      	lsls	r3, r3, #4
   d44cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
   d44d0:	430a      	orrs	r2, r1
   d44d2:	ea42 0503 	orr.w	r5, r2, r3
  uint16_t old_val;
  uint8_t status1 = readRegister(RES_XYZ_REG, old_val);
   d44d6:	2102      	movs	r1, #2
   d44d8:	f10d 0206 	add.w	r2, sp, #6
}

uint8_t
MLX90393::
setResolution(uint8_t res_x, uint8_t res_y, uint8_t res_z)
{
   d44dc:	4606      	mov	r6, r0
  uint16_t res_xyz = ((res_z & 0x3)<<4) | ((res_y & 0x3)<<2) | (res_x & 0x3);
  uint16_t old_val;
  uint8_t status1 = readRegister(RES_XYZ_REG, old_val);
   d44de:	f7ff fef3 	bl	d42c8 <_ZN8MLX9039312readRegisterEhRt>
  uint8_t status2 = writeRegister(RES_XYZ_REG,
                                  (old_val & ~RES_XYZ_MASK) |
                                  (res_xyz << RES_XYZ_SHIFT) & RES_XYZ_MASK);
   d44e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d44e6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
   d44ea:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
MLX90393::
setResolution(uint8_t res_x, uint8_t res_y, uint8_t res_z)
{
  uint16_t res_xyz = ((res_z & 0x3)<<4) | ((res_y & 0x3)<<2) | (res_x & 0x3);
  uint16_t old_val;
  uint8_t status1 = readRegister(RES_XYZ_REG, old_val);
   d44ee:	4604      	mov	r4, r0
  uint8_t status2 = writeRegister(RES_XYZ_REG,
                                  (old_val & ~RES_XYZ_MASK) |
                                  (res_xyz << RES_XYZ_SHIFT) & RES_XYZ_MASK);
   d44f0:	b292      	uxth	r2, r2
   d44f2:	2102      	movs	r1, #2
   d44f4:	4630      	mov	r0, r6
   d44f6:	f7ff ff3c 	bl	d4372 <_ZN8MLX9039313writeRegisterEht>
  return checkStatus(status1) | checkStatus(status2);
   d44fa:	4320      	orrs	r0, r4
   d44fc:	f340 1000 	sbfx	r0, r0, #4, #1
}
   d4500:	b2c0      	uxtb	r0, r0
   d4502:	b002      	add	sp, #8
   d4504:	bd70      	pop	{r4, r5, r6, pc}

000d4506 <_ZN8MLX9039326setTemperatureCompensationEh>:
}

uint8_t
MLX90393::
setTemperatureCompensation(uint8_t enabled)
{
   d4506:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4508:	460d      	mov	r5, r1
  uint8_t tcmp_en = enabled?1:0;
  uint16_t old_val;
  uint8_t status1 = readRegister(TCMP_EN_REG, old_val);
   d450a:	f10d 0206 	add.w	r2, sp, #6
   d450e:	2101      	movs	r1, #1
}

uint8_t
MLX90393::
setTemperatureCompensation(uint8_t enabled)
{
   d4510:	4606      	mov	r6, r0
  uint8_t tcmp_en = enabled?1:0;
  uint16_t old_val;
  uint8_t status1 = readRegister(TCMP_EN_REG, old_val);
   d4512:	f7ff fed9 	bl	d42c8 <_ZN8MLX9039312readRegisterEhRt>
  uint8_t status2 = writeRegister(TCMP_EN_REG,
                                  (old_val & ~TCMP_EN_MASK) |
                                  ((uint16_t(tcmp_en) << TCMP_EN_SHIFT) &
                                   TCMP_EN_MASK));
   d4516:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d451a:	2d00      	cmp	r5, #0
   d451c:	bf14      	ite	ne
   d451e:	f44f 6280 	movne.w	r2, #1024	; 0x400
   d4522:	2200      	moveq	r2, #0
   d4524:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   d4528:	431a      	orrs	r2, r3
MLX90393::
setTemperatureCompensation(uint8_t enabled)
{
  uint8_t tcmp_en = enabled?1:0;
  uint16_t old_val;
  uint8_t status1 = readRegister(TCMP_EN_REG, old_val);
   d452a:	4604      	mov	r4, r0
  uint8_t status2 = writeRegister(TCMP_EN_REG,
                                  (old_val & ~TCMP_EN_MASK) |
                                  ((uint16_t(tcmp_en) << TCMP_EN_SHIFT) &
                                   TCMP_EN_MASK));
   d452c:	b292      	uxth	r2, r2
   d452e:	2101      	movs	r1, #1
   d4530:	4630      	mov	r0, r6
   d4532:	f7ff ff1e 	bl	d4372 <_ZN8MLX9039313writeRegisterEht>
  return checkStatus(status1) | checkStatus(status2);
   d4536:	4320      	orrs	r0, r4
   d4538:	f340 1000 	sbfx	r0, r0, #4, #1
}
   d453c:	b2c0      	uxtb	r0, r0
   d453e:	b002      	add	sp, #8
   d4540:	bd70      	pop	{r4, r5, r6, pc}

000d4542 <_ZN8MLX903935beginEhhiR7TwoWire>:

uint8_t
MLX90393::
begin(uint8_t a1, uint8_t a0, int DRDY_pin, TwoWire &wirePort)
{
  I2C_address = I2C_BASE_ADDR | (a1?2:0) | (a0?1:0);
   d4542:	2900      	cmp	r1, #0
   d4544:	bf14      	ite	ne
   d4546:	210e      	movne	r1, #14
   d4548:	210c      	moveq	r1, #12
   d454a:	2a00      	cmp	r2, #0
   d454c:	bf0c      	ite	eq
   d454e:	460a      	moveq	r2, r1
   d4550:	f041 0201 	orrne.w	r2, r1, #1
  this->DRDY_pin = DRDY_pin;
  if (DRDY_pin >= 0){
   d4554:	2b00      	cmp	r3, #0
}

uint8_t
MLX90393::
begin(uint8_t a1, uint8_t a0, int DRDY_pin, TwoWire &wirePort)
{
   d4556:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d455a:	4605      	mov	r5, r0
  I2C_address = I2C_BASE_ADDR | (a1?2:0) | (a0?1:0);
   d455c:	7082      	strb	r2, [r0, #2]
  this->DRDY_pin = DRDY_pin;
   d455e:	6043      	str	r3, [r0, #4]
  if (DRDY_pin >= 0){
   d4560:	db03      	blt.n	d456a <_ZN8MLX903935beginEhhiR7TwoWire+0x28>
    pinMode(DRDY_pin, INPUT);
   d4562:	2100      	movs	r1, #0
   d4564:	b298      	uxth	r0, r3
   d4566:	f003 fd11 	bl	d7f8c <pinMode>
  }

  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d456a:	9b08      	ldr	r3, [sp, #32]
   d456c:	642b      	str	r3, [r5, #64]	; 0x40

  uint8_t status1 = checkStatus(reset());
   d456e:	4628      	mov	r0, r5
   d4570:	f7ff ff46 	bl	d4400 <_ZN8MLX903935resetEv>
  uint8_t status2 = setGainSel(7);
   d4574:	2107      	movs	r1, #7
    pinMode(DRDY_pin, INPUT);
  }

  _i2cPort = &wirePort; //Grab which port the user wants us to use

  uint8_t status1 = checkStatus(reset());
   d4576:	4606      	mov	r6, r0
  uint8_t status2 = setGainSel(7);
   d4578:	4628      	mov	r0, r5
   d457a:	f7ff ff4d 	bl	d4418 <_ZN8MLX9039310setGainSelEh>
  uint8_t status3 = setResolution(0, 0, 0);
   d457e:	2300      	movs	r3, #0
   d4580:	461a      	mov	r2, r3
   d4582:	4619      	mov	r1, r3
  }

  _i2cPort = &wirePort; //Grab which port the user wants us to use

  uint8_t status1 = checkStatus(reset());
  uint8_t status2 = setGainSel(7);
   d4584:	4681      	mov	r9, r0
  uint8_t status3 = setResolution(0, 0, 0);
   d4586:	4628      	mov	r0, r5
   d4588:	f7ff ff99 	bl	d44be <_ZN8MLX9039313setResolutionEhhh>
  uint8_t status4 = setOverSampling(3);
   d458c:	2103      	movs	r1, #3

  _i2cPort = &wirePort; //Grab which port the user wants us to use

  uint8_t status1 = checkStatus(reset());
  uint8_t status2 = setGainSel(7);
  uint8_t status3 = setResolution(0, 0, 0);
   d458e:	4604      	mov	r4, r0
  uint8_t status4 = setOverSampling(3);
   d4590:	4628      	mov	r0, r5
   d4592:	f7ff ff5d 	bl	d4450 <_ZN8MLX9039315setOverSamplingEh>
  uint8_t status5 = setDigitalFiltering(7);
   d4596:	2107      	movs	r1, #7
  _i2cPort = &wirePort; //Grab which port the user wants us to use

  uint8_t status1 = checkStatus(reset());
  uint8_t status2 = setGainSel(7);
  uint8_t status3 = setResolution(0, 0, 0);
  uint8_t status4 = setOverSampling(3);
   d4598:	4680      	mov	r8, r0
  uint8_t status5 = setDigitalFiltering(7);
   d459a:	4628      	mov	r0, r5
   d459c:	f7ff ff73 	bl	d4486 <_ZN8MLX9039319setDigitalFilteringEh>
  uint8_t status6 = setTemperatureCompensation(0);
   d45a0:	2100      	movs	r1, #0

  uint8_t status1 = checkStatus(reset());
  uint8_t status2 = setGainSel(7);
  uint8_t status3 = setResolution(0, 0, 0);
  uint8_t status4 = setOverSampling(3);
  uint8_t status5 = setDigitalFiltering(7);
   d45a2:	4607      	mov	r7, r0
  uint8_t status6 = setTemperatureCompensation(0);
   d45a4:	4628      	mov	r0, r5
   d45a6:	f7ff ffae 	bl	d4506 <_ZN8MLX9039326setTemperatureCompensationEh>

  return status1 | status2 | status3 | status4 | status5 | status6;
   d45aa:	ea49 0304 	orr.w	r3, r9, r4
   d45ae:	ea48 0403 	orr.w	r4, r8, r3
   d45b2:	433c      	orrs	r4, r7
   d45b4:	4320      	orrs	r0, r4
   d45b6:	f346 1600 	sbfx	r6, r6, #4, #1
   d45ba:	4330      	orrs	r0, r6
}
   d45bc:	b2c0      	uxtb	r0, r0
   d45be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d45c2 <_GLOBAL__sub_I__ZN8MLX90393C2Ev>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d45c2:	f001 bb6f 	b.w	d5ca4 <HAL_Pin_Map>
	...

000d45c8 <_ZN6BME280C1Ev>:
//  Settings and configuration
//
//****************************************************************************//

//Constructor -- Specifies default configuration
BME280::BME280( void )
   d45c8:	4b0d      	ldr	r3, [pc, #52]	; (d4600 <_ZN6BME280C1Ev+0x38>)
   d45ca:	b570      	push	{r4, r5, r6, lr}
   d45cc:	2501      	movs	r5, #1
   d45ce:	2600      	movs	r6, #0
   d45d0:	6403      	str	r3, [r0, #64]	; 0x40
{
	//Construct with these default settings

	settings.commInterface = I2C_MODE; //Default to I2C

	settings.I2CAddress = 0x77; //Default, jumper open is 0x77
   d45d2:	2377      	movs	r3, #119	; 0x77
//  Settings and configuration
//
//****************************************************************************//

//Constructor -- Specifies default configuration
BME280::BME280( void )
   d45d4:	4604      	mov	r4, r0
   d45d6:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
   d45da:	63c6      	str	r6, [r0, #60]	; 0x3c
{
	//Construct with these default settings

	settings.commInterface = I2C_MODE; //Default to I2C
   d45dc:	7006      	strb	r6, [r0, #0]

	settings.I2CAddress = 0x77; //Default, jumper open is 0x77
   d45de:	7043      	strb	r3, [r0, #1]
	_hardPort = &Wire; //Default to Wire port
   d45e0:	f003 fd30 	bl	d8044 <_Z19__fetch_global_Wirev>

	settings.chipSelectPin = 10; //Select CS pin for SPI
   d45e4:	230a      	movs	r3, #10
   d45e6:	70a3      	strb	r3, [r4, #2]
	
	//These are deprecated settings
	settings.runMode = 3; //Normal/Run
   d45e8:	2303      	movs	r3, #3
   d45ea:	70e3      	strb	r3, [r4, #3]
	settings.tStandby = 0; //0.5ms
	settings.filter = 0; //Filter off
	settings.tempOverSample = 1;
	settings.pressOverSample = 1;
	settings.humidOverSample = 1;
    settings.tempCorrection = 0.0; // correction of temperature - added to the result
   d45ec:	2300      	movs	r3, #0
	//Construct with these default settings

	settings.commInterface = I2C_MODE; //Default to I2C

	settings.I2CAddress = 0x77; //Default, jumper open is 0x77
	_hardPort = &Wire; //Default to Wire port
   d45ee:	63e0      	str	r0, [r4, #60]	; 0x3c

	settings.chipSelectPin = 10; //Select CS pin for SPI
	
	//These are deprecated settings
	settings.runMode = 3; //Normal/Run
	settings.tStandby = 0; //0.5ms
   d45f0:	7126      	strb	r6, [r4, #4]
	settings.filter = 0; //Filter off
   d45f2:	7166      	strb	r6, [r4, #5]
	settings.tempOverSample = 1;
   d45f4:	71a5      	strb	r5, [r4, #6]
	settings.pressOverSample = 1;
   d45f6:	71e5      	strb	r5, [r4, #7]
	settings.humidOverSample = 1;
   d45f8:	7225      	strb	r5, [r4, #8]
    settings.tempCorrection = 0.0; // correction of temperature - added to the result
   d45fa:	60e3      	str	r3, [r4, #12]
}
   d45fc:	4620      	mov	r0, r4
   d45fe:	bd70      	pop	{r4, r5, r6, pc}
   d4600:	47c5e680 	.word	0x47c5e680

000d4604 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4604:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4606:	4d09      	ldr	r5, [pc, #36]	; (d462c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4608:	6829      	ldr	r1, [r5, #0]
   d460a:	f011 0401 	ands.w	r4, r1, #1
   d460e:	d10a      	bne.n	d4626 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4610:	4628      	mov	r0, r5
   d4612:	f7ff fd48 	bl	d40a6 <__cxa_guard_acquire>
   d4616:	b130      	cbz	r0, d4626 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4618:	4621      	mov	r1, r4
   d461a:	4805      	ldr	r0, [pc, #20]	; (d4630 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d461c:	f003 f94a 	bl	d78b4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4620:	4628      	mov	r0, r5
   d4622:	f7ff fd45 	bl	d40b0 <__cxa_guard_release>
        return instance;
    }
   d4626:	4802      	ldr	r0, [pc, #8]	; (d4630 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4628:	bd38      	pop	{r3, r4, r5, pc}
   d462a:	bf00      	nop
   d462c:	2003e250 	.word	0x2003e250
   d4630:	2003e254 	.word	0x2003e254

000d4634 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.5>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d4634:	b510      	push	{r4, lr}
   d4636:	4604      	mov	r4, r0
        return instance().transfer(data);
   d4638:	f7ff ffe4 	bl	d4604 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d463c:	4621      	mov	r1, r4
    }
   d463e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4642:	f003 b9e1 	b.w	d7a08 <_ZN8SPIClass8transferEh>

000d4646 <_ZN6BME28018readRegisterRegionEPhhh>:
//
//  Utility
//
//****************************************************************************//
void BME280::readRegisterRegion(uint8_t *outputPointer , uint8_t offset, uint8_t length)
{
   d4646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4648:	461e      	mov	r6, r3
	//define pointer that will point to the external space
	uint8_t i = 0;
	char c = 0;

	switch (settings.commInterface)
   d464a:	7803      	ldrb	r3, [r0, #0]
//
//  Utility
//
//****************************************************************************//
void BME280::readRegisterRegion(uint8_t *outputPointer , uint8_t offset, uint8_t length)
{
   d464c:	4604      	mov	r4, r0
   d464e:	460d      	mov	r5, r1
   d4650:	4617      	mov	r7, r2
	//define pointer that will point to the external space
	uint8_t i = 0;
	char c = 0;

	switch (settings.commInterface)
   d4652:	b113      	cbz	r3, d465a <_ZN6BME28018readRegisterRegionEPhhh+0x14>
   d4654:	2b01      	cmp	r3, #1
   d4656:	d01e      	beq.n	d4696 <_ZN6BME28018readRegisterRegionEPhhh+0x50>
   d4658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{

	case I2C_MODE:
		switch(_wireType)
   d465a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d465e:	2b01      	cmp	r3, #1
   d4660:	d137      	bne.n	d46d2 <_ZN6BME28018readRegisterRegionEPhhh+0x8c>
		{
			case(HARD_WIRE):
				_hardPort->beginTransmission(settings.I2CAddress);
   d4662:	7841      	ldrb	r1, [r0, #1]
   d4664:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d4666:	f002 febc 	bl	d73e2 <_ZN7TwoWire17beginTransmissionEh>
				_hardPort->write(offset);
   d466a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d466c:	6803      	ldr	r3, [r0, #0]
   d466e:	4639      	mov	r1, r7
   d4670:	689b      	ldr	r3, [r3, #8]
   d4672:	4798      	blx	r3
				_hardPort->endTransmission();
   d4674:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d4676:	f002 febc 	bl	d73f2 <_ZN7TwoWire15endTransmissionEv>

				// request bytes from slave device
				_hardPort->requestFrom(settings.I2CAddress, length);
   d467a:	4632      	mov	r2, r6
   d467c:	7861      	ldrb	r1, [r4, #1]
   d467e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d4680:	f002 feac 	bl	d73dc <_ZN7TwoWire11requestFromEhj>
   d4684:	442e      	add	r6, r5
				while ( (_hardPort->available()) && (i < length))  // slave may send less than requested
   d4686:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d4688:	6803      	ldr	r3, [r0, #0]
   d468a:	691b      	ldr	r3, [r3, #16]
   d468c:	4798      	blx	r3
   d468e:	b300      	cbz	r0, d46d2 <_ZN6BME28018readRegisterRegionEPhhh+0x8c>
   d4690:	42b5      	cmp	r5, r6
   d4692:	d117      	bne.n	d46c4 <_ZN6BME28018readRegisterRegionEPhhh+0x7e>
   d4694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		break;

	case SPI_MODE:
		// take the chip select low to select the device:
		digitalWrite(settings.chipSelectPin, LOW);
   d4696:	2100      	movs	r1, #0
   d4698:	7880      	ldrb	r0, [r0, #2]
   d469a:	f003 fc88 	bl	d7fae <digitalWrite>
		// send the device the register you want to read:
		SPI.transfer(offset | 0x80);  //Ored with "read request" bit
   d469e:	f047 0080 	orr.w	r0, r7, #128	; 0x80
   d46a2:	f7ff ffc7 	bl	d4634 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.5>
   d46a6:	442e      	add	r6, r5
		while ( i < length ) // slave may send less than requested
   d46a8:	42b5      	cmp	r5, r6
   d46aa:	d005      	beq.n	d46b8 <_ZN6BME28018readRegisterRegionEPhhh+0x72>
		{
			c = SPI.transfer(0x00); // receive a byte as character
   d46ac:	2000      	movs	r0, #0
   d46ae:	f7ff ffc1 	bl	d4634 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.5>
			*outputPointer = c;
   d46b2:	f805 0b01 	strb.w	r0, [r5], #1
	case SPI_MODE:
		// take the chip select low to select the device:
		digitalWrite(settings.chipSelectPin, LOW);
		// send the device the register you want to read:
		SPI.transfer(offset | 0x80);  //Ored with "read request" bit
		while ( i < length ) // slave may send less than requested
   d46b6:	e7f7      	b.n	d46a8 <_ZN6BME28018readRegisterRegionEPhhh+0x62>
			*outputPointer = c;
			outputPointer++;
			i++;
		}
		// take the chip select high to de-select:
		digitalWrite(settings.chipSelectPin, HIGH);
   d46b8:	78a0      	ldrb	r0, [r4, #2]
   d46ba:	2101      	movs	r1, #1

	default:
		break;
	}

}
   d46bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			*outputPointer = c;
			outputPointer++;
			i++;
		}
		// take the chip select high to de-select:
		digitalWrite(settings.chipSelectPin, HIGH);
   d46c0:	f003 bc75 	b.w	d7fae <digitalWrite>

				// request bytes from slave device
				_hardPort->requestFrom(settings.I2CAddress, length);
				while ( (_hardPort->available()) && (i < length))  // slave may send less than requested
				{
					c = _hardPort->read(); // receive a byte as character
   d46c4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d46c6:	6803      	ldr	r3, [r0, #0]
   d46c8:	695b      	ldr	r3, [r3, #20]
   d46ca:	4798      	blx	r3
					*outputPointer = c;
   d46cc:	f805 0b01 	strb.w	r0, [r5], #1
   d46d0:	e7d9      	b.n	d4686 <_ZN6BME28018readRegisterRegionEPhhh+0x40>
   d46d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d46d4 <_ZN6BME28017readFloatPressureEv>:
//
//  Pressure Section
//
//****************************************************************************//
float BME280::readFloatPressure( void )
{
   d46d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d46d8:	4604      	mov	r4, r0

	// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
	// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
    uint8_t buffer[3];
	readRegisterRegion(buffer, BME280_PRESSURE_MSB_REG, 3);
   d46da:	2303      	movs	r3, #3
   d46dc:	22f7      	movs	r2, #247	; 0xf7
   d46de:	a901      	add	r1, sp, #4
   d46e0:	f7ff ffb1 	bl	d4646 <_ZN6BME28018readRegisterRegionEPhhh>
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
	
	int64_t var1, var2, p_acc;
	var1 = ((int64_t)t_fine) - 128000;
   d46e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
	var2 = var2 + (((int64_t)calibration.dig_P4)<<35);
	var1 = ((var1 * var1 * (int64_t)calibration.dig_P3)>>8) + ((var1 * (int64_t)calibration.dig_P2)<<12);
   d46e6:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    uint8_t buffer[3];
	readRegisterRegion(buffer, BME280_PRESSURE_MSB_REG, 3);
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
	
	int64_t var1, var2, p_acc;
	var1 = ((int64_t)t_fine) - 128000;
   d46ea:	17c1      	asrs	r1, r0, #31
   d46ec:	f5b0 30fa 	subs.w	r0, r0, #128000	; 0x1f400
   d46f0:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
   d46f4:	fba0 6700 	umull	r6, r7, r0, r0
   d46f8:	fb00 f301 	mul.w	r3, r0, r1
   d46fc:	eb07 0743 	add.w	r7, r7, r3, lsl #1
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
	var2 = var2 + (((int64_t)calibration.dig_P4)<<35);
	var1 = ((var1 * var1 * (int64_t)calibration.dig_P3)>>8) + ((var1 * (int64_t)calibration.dig_P2)<<12);
   d4700:	fb02 f501 	mul.w	r5, r2, r1
   d4704:	17d3      	asrs	r3, r2, #31
   d4706:	fb00 5503 	mla	r5, r0, r3, r5
   d470a:	fba2 2300 	umull	r2, r3, r2, r0
   d470e:	442b      	add	r3, r5
   d4710:	ea4f 3b03 	mov.w	fp, r3, lsl #12
   d4714:	ea4b 5b12 	orr.w	fp, fp, r2, lsr #20
   d4718:	ea4f 3a02 	mov.w	sl, r2, lsl #12
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)calibration.dig_P1)>>33;
   d471c:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
   d4720:	17d3      	asrs	r3, r2, #31
   d4722:	fb02 f507 	mul.w	r5, r2, r7
   d4726:	fb06 5503 	mla	r5, r6, r3, r5
   d472a:	fba2 2306 	umull	r2, r3, r2, r6
   d472e:	442b      	add	r3, r5
   d4730:	ea4f 2812 	mov.w	r8, r2, lsr #8
   d4734:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
   d4738:	ea4f 2923 	mov.w	r9, r3, asr #8
   d473c:	eb1a 0a08 	adds.w	sl, sl, r8
   d4740:	8ae2      	ldrh	r2, [r4, #22]
   d4742:	eb4b 0b09 	adc.w	fp, fp, r9
   d4746:	f11a 0a00 	adds.w	sl, sl, #0
   d474a:	f54b 4b00 	adc.w	fp, fp, #32768	; 0x8000
   d474e:	fbaa 8902 	umull	r8, r9, sl, r2
   d4752:	fb02 990b 	mla	r9, r2, fp, r9
   d4756:	ea4f 0269 	mov.w	r2, r9, asr #1
   d475a:	ea4f 73e9 	mov.w	r3, r9, asr #31
	if (var1 == 0)
   d475e:	ea52 0503 	orrs.w	r5, r2, r3
   d4762:	f000 8087 	beq.w	d4874 <_ZN6BME28017readFloatPressureEv+0x1a0>
	readRegisterRegion(buffer, BME280_PRESSURE_MSB_REG, 3);
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
	
	int64_t var1, var2, p_acc;
	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
   d4766:	f9b4 a020 	ldrsh.w	sl, [r4, #32]
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
   d476a:	f9b4 801e 	ldrsh.w	r8, [r4, #30]
	readRegisterRegion(buffer, BME280_PRESSURE_MSB_REG, 3);
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
	
	int64_t var1, var2, p_acc;
	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
   d476e:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4772:	fb0a f507 	mul.w	r5, sl, r7
   d4776:	fb06 550b 	mla	r5, r6, fp, r5
   d477a:	fbaa 6706 	umull	r6, r7, sl, r6
   d477e:	442f      	add	r7, r5
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
   d4780:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d4784:	fb08 f501 	mul.w	r5, r8, r1
   d4788:	fb00 5509 	mla	r5, r0, r9, r5
   d478c:	fba8 0100 	umull	r0, r1, r8, r0
   d4790:	4429      	add	r1, r5
	if (var1 == 0)
	{
		return 0; // avoid exception caused by division by zero
	}
	p_acc = 1048576 - adc_P;
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
   d4792:	f89d 5006 	ldrb.w	r5, [sp, #6]
   d4796:	f9b4 801c 	ldrsh.w	r8, [r4, #28]
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
	
	int64_t var1, var2, p_acc;
	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
   d479a:	ea4f 4b41 	mov.w	fp, r1, lsl #17
	if (var1 == 0)
	{
		return 0; // avoid exception caused by division by zero
	}
	p_acc = 1048576 - adc_P;
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
   d479e:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d47a2:	092d      	lsrs	r5, r5, #4
   d47a4:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
   d47a8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
	
	int64_t var1, var2, p_acc;
	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
   d47ac:	ea4f 4a40 	mov.w	sl, r0, lsl #17
	if (var1 == 0)
	{
		return 0; // avoid exception caused by division by zero
	}
	p_acc = 1048576 - adc_P;
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
   d47b0:	ea45 3501 	orr.w	r5, r5, r1, lsl #12
   d47b4:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
	
	int64_t var1, var2, p_acc;
	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
   d47b8:	eb1a 0a06 	adds.w	sl, sl, r6
   d47bc:	ea4b 3bd0 	orr.w	fp, fp, r0, lsr #15
   d47c0:	eb4b 0b07 	adc.w	fp, fp, r7
	if (var1 == 0)
	{
		return 0; // avoid exception caused by division by zero
	}
	p_acc = 1048576 - adc_P;
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
   d47c4:	2600      	movs	r6, #0
   d47c6:	17ef      	asrs	r7, r5, #31
   d47c8:	07e8      	lsls	r0, r5, #31
   d47ca:	07f9      	lsls	r1, r7, #31
   d47cc:	eb16 060a 	adds.w	r6, r6, sl
   d47d0:	ea4f 07c8 	mov.w	r7, r8, lsl #3
   d47d4:	ea41 0155 	orr.w	r1, r1, r5, lsr #1
   d47d8:	eb47 070b 	adc.w	r7, r7, fp
   d47dc:	f640 4535 	movw	r5, #3125	; 0xc35
   d47e0:	1b86      	subs	r6, r0, r6
   d47e2:	eb61 0707 	sbc.w	r7, r1, r7
   d47e6:	fba6 0105 	umull	r0, r1, r6, r5
   d47ea:	fb05 1107 	mla	r1, r5, r7, r1
   d47ee:	f004 fd5d 	bl	d92ac <__aeabi_ldivmod>
	var1 = (((int64_t)calibration.dig_P9) * (p_acc>>13) * (p_acc>>13)) >> 25;
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
   d47f2:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
	{
		return 0; // avoid exception caused by division by zero
	}
	p_acc = 1048576 - adc_P;
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
	var1 = (((int64_t)calibration.dig_P9) * (p_acc>>13) * (p_acc>>13)) >> 25;
   d47f6:	134d      	asrs	r5, r1, #13
   d47f8:	0b46      	lsrs	r6, r0, #13
   d47fa:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
   d47fe:	fb02 f705 	mul.w	r7, r2, r5
   d4802:	17d3      	asrs	r3, r2, #31
   d4804:	fb06 7703 	mla	r7, r6, r3, r7
   d4808:	fba2 2306 	umull	r2, r3, r2, r6
   d480c:	443b      	add	r3, r7
   d480e:	4355      	muls	r5, r2
   d4810:	fb06 5503 	mla	r5, r6, r3, r5
   d4814:	fba2 2306 	umull	r2, r3, r2, r6
   d4818:	442b      	add	r3, r5
   d481a:	0e56      	lsrs	r6, r2, #25
   d481c:	ea46 16c3 	orr.w	r6, r6, r3, lsl #7
   d4820:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
	
	return (float)p_acc / 256.0;
   d4824:	f9b4 4022 	ldrsh.w	r4, [r4, #34]	; 0x22
	}
	p_acc = 1048576 - adc_P;
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
	var1 = (((int64_t)calibration.dig_P9) * (p_acc>>13) * (p_acc>>13)) >> 25;
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
   d4828:	1836      	adds	r6, r6, r0
   d482a:	ea4f 6763 	mov.w	r7, r3, asr #25
   d482e:	414f      	adcs	r7, r1
   d4830:	17d3      	asrs	r3, r2, #31
   d4832:	4351      	muls	r1, r2
   d4834:	fb00 1303 	mla	r3, r0, r3, r1
   d4838:	fba2 0100 	umull	r0, r1, r2, r0
   d483c:	4419      	add	r1, r3
   d483e:	0cc2      	lsrs	r2, r0, #19
   d4840:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
   d4844:	1992      	adds	r2, r2, r6
   d4846:	ea4f 43e1 	mov.w	r3, r1, asr #19
   d484a:	417b      	adcs	r3, r7
   d484c:	0a10      	lsrs	r0, r2, #8
	
	return (float)p_acc / 256.0;
   d484e:	17e5      	asrs	r5, r4, #31
	}
	p_acc = 1048576 - adc_P;
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
	var1 = (((int64_t)calibration.dig_P9) * (p_acc>>13) * (p_acc>>13)) >> 25;
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
   d4850:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   d4854:	1219      	asrs	r1, r3, #8
	
	return (float)p_acc / 256.0;
   d4856:	0122      	lsls	r2, r4, #4
   d4858:	012b      	lsls	r3, r5, #4
   d485a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
   d485e:	1880      	adds	r0, r0, r2
   d4860:	4159      	adcs	r1, r3
   d4862:	f004 fce5 	bl	d9230 <__aeabi_l2f>
   d4866:	ed9f 0a06 	vldr	s0, [pc, #24]	; d4880 <_ZN6BME28017readFloatPressureEv+0x1ac>
   d486a:	ee07 0a90 	vmov	s15, r0
   d486e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d4872:	e001      	b.n	d4878 <_ZN6BME28017readFloatPressureEv+0x1a4>
	var2 = var2 + (((int64_t)calibration.dig_P4)<<35);
	var1 = ((var1 * var1 * (int64_t)calibration.dig_P3)>>8) + ((var1 * (int64_t)calibration.dig_P2)<<12);
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)calibration.dig_P1)>>33;
	if (var1 == 0)
	{
		return 0; // avoid exception caused by division by zero
   d4874:	ed9f 0a03 	vldr	s0, [pc, #12]	; d4884 <_ZN6BME28017readFloatPressureEv+0x1b0>
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
	
	return (float)p_acc / 256.0;
	
}
   d4878:	b003      	add	sp, #12
   d487a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d487e:	bf00      	nop
   d4880:	3b800000 	.word	0x3b800000
   d4884:	00000000 	.word	0x00000000

000d4888 <_ZN6BME28017readFloatHumidityEv>:
//
//  Humidity Section
//
//****************************************************************************//
float BME280::readFloatHumidity( void )
{
   d4888:	b513      	push	{r0, r1, r4, lr}
	
	// Returns humidity in %RH as unsigned 32 bit integer in Q22. 10 format (22 integer and 10 fractional bits).
	// Output value of “47445” represents 47445/1024 = 46. 333 %RH
    uint8_t buffer[2];
	readRegisterRegion(buffer, BME280_HUMIDITY_MSB_REG, 2);
   d488a:	2302      	movs	r3, #2
   d488c:	a901      	add	r1, sp, #4
   d488e:	22fd      	movs	r2, #253	; 0xfd
//
//  Humidity Section
//
//****************************************************************************//
float BME280::readFloatHumidity( void )
{
   d4890:	4604      	mov	r4, r0
	
	// Returns humidity in %RH as unsigned 32 bit integer in Q22. 10 format (22 integer and 10 fractional bits).
	// Output value of “47445” represents 47445/1024 = 46. 333 %RH
    uint8_t buffer[2];
	readRegisterRegion(buffer, BME280_HUMIDITY_MSB_REG, 2);
   d4892:	f7ff fed8 	bl	d4646 <_ZN6BME28018readRegisterRegionEPhhh>
    int32_t adc_H = ((uint32_t)buffer[0] << 8) | ((uint32_t)buffer[1]);
	
	int32_t var1;
	var1 = (t_fine - ((int32_t)76800));
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
	((int32_t)16384)) >> 15) * (((((((var1 * ((int32_t)calibration.dig_H6)) >> 10) * (((var1 * ((int32_t)calibration.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
   d4896:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    uint8_t buffer[2];
	readRegisterRegion(buffer, BME280_HUMIDITY_MSB_REG, 2);
    int32_t adc_H = ((uint32_t)buffer[0] << 8) | ((uint32_t)buffer[1]);
	
	int32_t var1;
	var1 = (t_fine - ((int32_t)76800));
   d489a:	6b62      	ldr	r2, [r4, #52]	; 0x34
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
	((int32_t)16384)) >> 15) * (((((((var1 * ((int32_t)calibration.dig_H6)) >> 10) * (((var1 * ((int32_t)calibration.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
	((int32_t)calibration.dig_H2) + 8192) >> 14));
   d489c:	f994 0032 	ldrsb.w	r0, [r4, #50]	; 0x32
    int32_t adc_H = ((uint32_t)buffer[0] << 8) | ((uint32_t)buffer[1]);
	
	int32_t var1;
	var1 = (t_fine - ((int32_t)76800));
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
	((int32_t)16384)) >> 15) * (((((((var1 * ((int32_t)calibration.dig_H6)) >> 10) * (((var1 * ((int32_t)calibration.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
   d48a0:	ba5b      	rev16	r3, r3
   d48a2:	b299      	uxth	r1, r3
   d48a4:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d48a8:	051b      	lsls	r3, r3, #20
   d48aa:	ebc3 3381 	rsb	r3, r3, r1, lsl #14
   d48ae:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
    uint8_t buffer[2];
	readRegisterRegion(buffer, BME280_HUMIDITY_MSB_REG, 2);
    int32_t adc_H = ((uint32_t)buffer[0] << 8) | ((uint32_t)buffer[1]);
	
	int32_t var1;
	var1 = (t_fine - ((int32_t)76800));
   d48b2:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
	((int32_t)16384)) >> 15) * (((((((var1 * ((int32_t)calibration.dig_H6)) >> 10) * (((var1 * ((int32_t)calibration.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
   d48b6:	fb02 3311 	mls	r3, r2, r1, r3
   d48ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d48be:	13d9      	asrs	r1, r3, #15
	((int32_t)calibration.dig_H2) + 8192) >> 14));
   d48c0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d48c4:	4353      	muls	r3, r2
   d48c6:	12db      	asrs	r3, r3, #11
   d48c8:	4342      	muls	r2, r0
   d48ca:	1292      	asrs	r2, r2, #10
   d48cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d48d0:	4353      	muls	r3, r2
   d48d2:	129b      	asrs	r3, r3, #10
   d48d4:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d48d8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   d48dc:	4353      	muls	r3, r2
   d48de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d48e2:	139b      	asrs	r3, r3, #14
   d48e4:	434b      	muls	r3, r1
	var1 = (var1 - (((((var1 >> 15) * (var1 >> 15)) >> 7) * ((int32_t)calibration.dig_H1)) >> 4));
   d48e6:	13da      	asrs	r2, r3, #15
   d48e8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d48ec:	4352      	muls	r2, r2
   d48ee:	11d2      	asrs	r2, r2, #7
   d48f0:	434a      	muls	r2, r1
   d48f2:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	var1 = (var1 < 0 ? 0 : var1);
   d48f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	var1 = (var1 > 419430400 ? 419430400 : var1);

	return (float)(var1>>12) / 1024.0;
   d48fa:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d48fe:	bfa8      	it	ge
   d4900:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
   d4904:	131b      	asrs	r3, r3, #12
   d4906:	ee00 3a10 	vmov	s0, r3
}
   d490a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d490e:	b002      	add	sp, #8
   d4910:	bd10      	pop	{r4, pc}
	...

000d4914 <_ZN6BME2809readTempCEv>:
//  Temperature Section
//
//****************************************************************************//

float BME280::readTempC( void )
{
   d4914:	b513      	push	{r0, r1, r4, lr}
	// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
	// t_fine carries fine temperature as global value

	//get the reading (adc_T);
    uint8_t buffer[3];
	readRegisterRegion(buffer, BME280_TEMPERATURE_MSB_REG, 3);
   d4916:	2303      	movs	r3, #3
   d4918:	a901      	add	r1, sp, #4
   d491a:	22fa      	movs	r2, #250	; 0xfa
//  Temperature Section
//
//****************************************************************************//

float BME280::readTempC( void )
{
   d491c:	4604      	mov	r4, r0
	// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
	// t_fine carries fine temperature as global value

	//get the reading (adc_T);
    uint8_t buffer[3];
	readRegisterRegion(buffer, BME280_TEMPERATURE_MSB_REG, 3);
   d491e:	f7ff fe92 	bl	d4646 <_ZN6BME28018readRegisterRegionEPhhh>
    int32_t adc_T = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
   d4922:	f89d 2005 	ldrb.w	r2, [sp, #5]
   d4926:	f89d 3004 	ldrb.w	r3, [sp, #4]
	var2 = (((((adc_T>>4) - ((int32_t)calibration.dig_T1)) * ((adc_T>>4) - ((int32_t)calibration.dig_T1))) >> 12) *
	((int32_t)calibration.dig_T3)) >> 14;
	t_fine = var1 + var2;
	float output = (t_fine * 5 + 128) >> 8;

	output = output / 100 + settings.tempCorrection;
   d492a:	ed9f 7a16 	vldr	s14, [pc, #88]	; d4984 <_ZN6BME2809readTempCEv+0x70>
	// t_fine carries fine temperature as global value

	//get the reading (adc_T);
    uint8_t buffer[3];
	readRegisterRegion(buffer, BME280_TEMPERATURE_MSB_REG, 3);
    int32_t adc_T = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
   d492e:	0112      	lsls	r2, r2, #4
   d4930:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
   d4934:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d4938:	ea43 1212 	orr.w	r2, r3, r2, lsr #4

	//By datasheet, calibrate
	int64_t var1, var2;

	var1 = ((((adc_T>>3) - ((int32_t)calibration.dig_T1<<1))) * ((int32_t)calibration.dig_T2)) >> 11;
   d493c:	8a23      	ldrh	r3, [r4, #16]
	var2 = (((((adc_T>>4) - ((int32_t)calibration.dig_T1)) * ((adc_T>>4) - ((int32_t)calibration.dig_T1))) >> 12) *
   d493e:	ebc3 1112 	rsb	r1, r3, r2, lsr #4
	((int32_t)calibration.dig_T3)) >> 14;
	t_fine = var1 + var2;
   d4942:	005b      	lsls	r3, r3, #1
   d4944:	ebc3 02d2 	rsb	r2, r3, r2, lsr #3
   d4948:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
   d494c:	4349      	muls	r1, r1
   d494e:	fb03 f002 	mul.w	r0, r3, r2
   d4952:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
   d4956:	130b      	asrs	r3, r1, #12
   d4958:	4353      	muls	r3, r2
   d495a:	139b      	asrs	r3, r3, #14
   d495c:	eb03 23e0 	add.w	r3, r3, r0, asr #11
   d4960:	6363      	str	r3, [r4, #52]	; 0x34
	float output = (t_fine * 5 + 128) >> 8;

	output = output / 100 + settings.tempCorrection;
   d4962:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4966:	3380      	adds	r3, #128	; 0x80
   d4968:	121b      	asrs	r3, r3, #8
   d496a:	ee07 3a90 	vmov	s15, r3
   d496e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4972:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d4976:	edd4 7a03 	vldr	s15, [r4, #12]
	
	return output;
}
   d497a:	ee30 0a27 	vadd.f32	s0, s0, s15
   d497e:	b002      	add	sp, #8
   d4980:	bd10      	pop	{r4, pc}
   d4982:	bf00      	nop
   d4984:	42c80000 	.word	0x42c80000

000d4988 <_ZN6BME2809readTempFEv>:

float BME280::readTempF( void )
{
   d4988:	b508      	push	{r3, lr}
	float output = readTempC();
   d498a:	f7ff ffc3 	bl	d4914 <_ZN6BME2809readTempCEv>
	output = (output * 9) / 5 + 32;
   d498e:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d4992:	ee60 7a27 	vmul.f32	s15, s0, s15
   d4996:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
   d499a:	ee87 0a87 	vdiv.f32	s0, s15, s14

	return output;
}
   d499e:	eddf 7a02 	vldr	s15, [pc, #8]	; d49a8 <_ZN6BME2809readTempFEv+0x20>
   d49a2:	ee30 0a27 	vadd.f32	s0, s0, s15
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	42000000 	.word	0x42000000

000d49ac <_ZN6BME28012readRegisterEh>:
	}

}

uint8_t BME280::readRegister(uint8_t offset)
{
   d49ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Return value
	uint8_t result = 0;
	uint8_t numBytes = 1;
	switch (settings.commInterface) {
   d49ae:	7806      	ldrb	r6, [r0, #0]
	}

}

uint8_t BME280::readRegister(uint8_t offset)
{
   d49b0:	4604      	mov	r4, r0
   d49b2:	460d      	mov	r5, r1
	//Return value
	uint8_t result = 0;
	uint8_t numBytes = 1;
	switch (settings.commInterface) {
   d49b4:	b196      	cbz	r6, d49dc <_ZN6BME28012readRegisterEh+0x30>
   d49b6:	2e01      	cmp	r6, #1
   d49b8:	d131      	bne.n	d4a1e <_ZN6BME28012readRegisterEh+0x72>
		
		break;

	case SPI_MODE:
		// take the chip select low to select the device:
		digitalWrite(settings.chipSelectPin, LOW);
   d49ba:	2100      	movs	r1, #0
   d49bc:	7880      	ldrb	r0, [r0, #2]
   d49be:	f003 faf6 	bl	d7fae <digitalWrite>
		// send the device the register you want to read:
		SPI.transfer(offset | 0x80);  //Ored with "read request" bit
   d49c2:	f045 0080 	orr.w	r0, r5, #128	; 0x80
   d49c6:	f7ff fe35 	bl	d4634 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.5>
		// send a value of 0 to read the first byte returned:
		result = SPI.transfer(0x00);
   d49ca:	2000      	movs	r0, #0
   d49cc:	f7ff fe32 	bl	d4634 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.5>
		// take the chip select high to de-select:
		digitalWrite(settings.chipSelectPin, HIGH);
   d49d0:	4631      	mov	r1, r6
		// take the chip select low to select the device:
		digitalWrite(settings.chipSelectPin, LOW);
		// send the device the register you want to read:
		SPI.transfer(offset | 0x80);  //Ored with "read request" bit
		// send a value of 0 to read the first byte returned:
		result = SPI.transfer(0x00);
   d49d2:	4605      	mov	r5, r0
		// take the chip select high to de-select:
		digitalWrite(settings.chipSelectPin, HIGH);
   d49d4:	78a0      	ldrb	r0, [r4, #2]
   d49d6:	f003 faea 	bl	d7fae <digitalWrite>
		break;
   d49da:	e023      	b.n	d4a24 <_ZN6BME28012readRegisterEh+0x78>
	uint8_t result = 0;
	uint8_t numBytes = 1;
	switch (settings.commInterface) {

	case I2C_MODE:
		switch(_wireType)
   d49dc:	f890 7038 	ldrb.w	r7, [r0, #56]	; 0x38
   d49e0:	2f01      	cmp	r7, #1
   d49e2:	d11e      	bne.n	d4a22 <_ZN6BME28012readRegisterEh+0x76>
		{
			case(HARD_WIRE):
				_hardPort->beginTransmission(settings.I2CAddress);
   d49e4:	7841      	ldrb	r1, [r0, #1]
   d49e6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d49e8:	f002 fcfb 	bl	d73e2 <_ZN7TwoWire17beginTransmissionEh>
				_hardPort->write(offset);
   d49ec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d49ee:	6803      	ldr	r3, [r0, #0]
   d49f0:	4629      	mov	r1, r5
   d49f2:	689b      	ldr	r3, [r3, #8]
   d49f4:	4798      	blx	r3
				_hardPort->endTransmission();
   d49f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d49f8:	f002 fcfb 	bl	d73f2 <_ZN7TwoWire15endTransmissionEv>

				_hardPort->requestFrom(settings.I2CAddress, numBytes);
   d49fc:	463a      	mov	r2, r7
   d49fe:	7861      	ldrb	r1, [r4, #1]
   d4a00:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d4a02:	f002 fceb 	bl	d73dc <_ZN7TwoWire11requestFromEhj>
}

uint8_t BME280::readRegister(uint8_t offset)
{
	//Return value
	uint8_t result = 0;
   d4a06:	4635      	mov	r5, r6
				_hardPort->beginTransmission(settings.I2CAddress);
				_hardPort->write(offset);
				_hardPort->endTransmission();

				_hardPort->requestFrom(settings.I2CAddress, numBytes);
				while ( _hardPort->available() ) // slave may send less than requested
   d4a08:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d4a0a:	6803      	ldr	r3, [r0, #0]
   d4a0c:	691b      	ldr	r3, [r3, #16]
   d4a0e:	4798      	blx	r3
   d4a10:	b140      	cbz	r0, d4a24 <_ZN6BME28012readRegisterEh+0x78>
				{
					result = _hardPort->read(); // receive a byte as a proper uint8_t
   d4a12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d4a14:	6803      	ldr	r3, [r0, #0]
   d4a16:	695b      	ldr	r3, [r3, #20]
   d4a18:	4798      	blx	r3
   d4a1a:	b2c5      	uxtb	r5, r0
   d4a1c:	e7f4      	b.n	d4a08 <_ZN6BME28012readRegisterEh+0x5c>
}

uint8_t BME280::readRegister(uint8_t offset)
{
	//Return value
	uint8_t result = 0;
   d4a1e:	2500      	movs	r5, #0
   d4a20:	e000      	b.n	d4a24 <_ZN6BME28012readRegisterEh+0x78>
   d4a22:	4635      	mov	r5, r6

	default:
		break;
	}
	return result;
}
   d4a24:	4628      	mov	r0, r5
   d4a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a28 <_ZN6BME2807getModeEv>:
//Gets the current mode bits in the ctrl_meas register
//Mode 00 = Sleep
// 01 and 10 = Forced
// 11 = Normal mode
uint8_t BME280::getMode()
{
   d4a28:	b508      	push	{r3, lr}
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
   d4a2a:	21f4      	movs	r1, #244	; 0xf4
   d4a2c:	f7ff ffbe 	bl	d49ac <_ZN6BME28012readRegisterEh>
	return(controlData & 0b00000011); //Clear bits 7 through 2
}
   d4a30:	f000 0003 	and.w	r0, r0, #3
   d4a34:	bd08      	pop	{r3, pc}

000d4a36 <_ZN6BME28013writeRegisterEhh>:
	
	return output;
}

void BME280::writeRegister(uint8_t offset, uint8_t dataToWrite)
{
   d4a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (settings.commInterface)
   d4a38:	7805      	ldrb	r5, [r0, #0]
	
	return output;
}

void BME280::writeRegister(uint8_t offset, uint8_t dataToWrite)
{
   d4a3a:	4604      	mov	r4, r0
   d4a3c:	460f      	mov	r7, r1
   d4a3e:	4616      	mov	r6, r2
	switch (settings.commInterface)
   d4a40:	b115      	cbz	r5, d4a48 <_ZN6BME28013writeRegisterEhh+0x12>
   d4a42:	2d01      	cmp	r5, #1
   d4a44:	d017      	beq.n	d4a76 <_ZN6BME28013writeRegisterEhh+0x40>
   d4a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
	case I2C_MODE:
		//Write the byte

		switch(_wireType)
   d4a48:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4a4c:	2b01      	cmp	r3, #1
   d4a4e:	d123      	bne.n	d4a98 <_ZN6BME28013writeRegisterEhh+0x62>
		{
			case(HARD_WIRE):
				_hardPort->beginTransmission(settings.I2CAddress);
   d4a50:	7841      	ldrb	r1, [r0, #1]
   d4a52:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d4a54:	f002 fcc5 	bl	d73e2 <_ZN7TwoWire17beginTransmissionEh>
				_hardPort->write(offset);
   d4a58:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d4a5a:	6803      	ldr	r3, [r0, #0]
   d4a5c:	4639      	mov	r1, r7
   d4a5e:	689b      	ldr	r3, [r3, #8]
   d4a60:	4798      	blx	r3
				_hardPort->write(dataToWrite);
   d4a62:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d4a64:	6803      	ldr	r3, [r0, #0]
   d4a66:	4631      	mov	r1, r6
   d4a68:	689b      	ldr	r3, [r3, #8]
   d4a6a:	4798      	blx	r3
				_hardPort->endTransmission();
   d4a6c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
		break;

	default:
		break;
	}
}
   d4a6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		{
			case(HARD_WIRE):
				_hardPort->beginTransmission(settings.I2CAddress);
				_hardPort->write(offset);
				_hardPort->write(dataToWrite);
				_hardPort->endTransmission();
   d4a72:	f002 bcbe 	b.w	d73f2 <_ZN7TwoWire15endTransmissionEv>
		}
		break;
		
	case SPI_MODE:
		// take the chip select low to select the device:
		digitalWrite(settings.chipSelectPin, LOW);
   d4a76:	2100      	movs	r1, #0
   d4a78:	7880      	ldrb	r0, [r0, #2]
   d4a7a:	f003 fa98 	bl	d7fae <digitalWrite>
		// send the device the register you want to read:
		SPI.transfer(offset & 0x7F);
   d4a7e:	f007 007f 	and.w	r0, r7, #127	; 0x7f
   d4a82:	f7ff fdd7 	bl	d4634 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.5>
		// send a value of 0 to read the first byte returned:
		SPI.transfer(dataToWrite);
   d4a86:	4630      	mov	r0, r6
   d4a88:	f7ff fdd4 	bl	d4634 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.5>
		// decrement the number of bytes left to read:
		// take the chip select high to de-select:
		digitalWrite(settings.chipSelectPin, HIGH);
   d4a8c:	4629      	mov	r1, r5
   d4a8e:	78a0      	ldrb	r0, [r4, #2]
		break;

	default:
		break;
	}
}
   d4a90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		SPI.transfer(offset & 0x7F);
		// send a value of 0 to read the first byte returned:
		SPI.transfer(dataToWrite);
		// decrement the number of bytes left to read:
		// take the chip select high to de-select:
		digitalWrite(settings.chipSelectPin, HIGH);
   d4a94:	f003 ba8b 	b.w	d7fae <digitalWrite>
   d4a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a9a <_ZN6BME2807setModeEh>:
//Set the mode bits in the ctrl_meas register
// Mode 00 = Sleep
// 01 and 10 = Forced
// 11 = Normal mode
void BME280::setMode(uint8_t mode)
{
   d4a9a:	b538      	push	{r3, r4, r5, lr}
	if(mode > 0b11) mode = 0; //Error check. Default to sleep mode
   d4a9c:	2903      	cmp	r1, #3
   d4a9e:	bf94      	ite	ls
   d4aa0:	460d      	movls	r5, r1
   d4aa2:	2500      	movhi	r5, #0
	
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
   d4aa4:	21f4      	movs	r1, #244	; 0xf4
//Set the mode bits in the ctrl_meas register
// Mode 00 = Sleep
// 01 and 10 = Forced
// 11 = Normal mode
void BME280::setMode(uint8_t mode)
{
   d4aa6:	4604      	mov	r4, r0
	if(mode > 0b11) mode = 0; //Error check. Default to sleep mode
	
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
   d4aa8:	f7ff ff80 	bl	d49ac <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<1) | (1<<0) ); //Clear the mode[1:0] bits
   d4aac:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
	controlData |= mode; //Set
	writeRegister(BME280_CTRL_MEAS_REG, controlData);
   d4ab0:	ea45 0200 	orr.w	r2, r5, r0
   d4ab4:	21f4      	movs	r1, #244	; 0xf4
   d4ab6:	4620      	mov	r0, r4
}
   d4ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if(mode > 0b11) mode = 0; //Error check. Default to sleep mode
	
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
	controlData &= ~( (1<<1) | (1<<0) ); //Clear the mode[1:0] bits
	controlData |= mode; //Set
	writeRegister(BME280_CTRL_MEAS_REG, controlData);
   d4abc:	f7ff bfbb 	b.w	d4a36 <_ZN6BME28013writeRegisterEhh>

000d4ac0 <_ZN6BME28014setStandbyTimeEh>:
//  4, 500ms
//  5, 1000ms
//  6, 10ms
//  7, 20ms
void BME280::setStandbyTime(uint8_t timeSetting)
{
   d4ac0:	b538      	push	{r3, r4, r5, lr}
	if(timeSetting > 0b111) timeSetting = 0; //Error check. Default to 0.5ms
   d4ac2:	2907      	cmp	r1, #7
   d4ac4:	bf94      	ite	ls
   d4ac6:	460d      	movls	r5, r1
   d4ac8:	2500      	movhi	r5, #0
	
	uint8_t controlData = readRegister(BME280_CONFIG_REG);
   d4aca:	21f5      	movs	r1, #245	; 0xf5
//  4, 500ms
//  5, 1000ms
//  6, 10ms
//  7, 20ms
void BME280::setStandbyTime(uint8_t timeSetting)
{
   d4acc:	4604      	mov	r4, r0
	if(timeSetting > 0b111) timeSetting = 0; //Error check. Default to 0.5ms
	
	uint8_t controlData = readRegister(BME280_CONFIG_REG);
   d4ace:	f7ff ff6d 	bl	d49ac <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<7) | (1<<6) | (1<<5) ); //Clear the 7/6/5 bits
	controlData |= (timeSetting << 5); //Align with bits 7/6/5
   d4ad2:	f000 001f 	and.w	r0, r0, #31
   d4ad6:	ea40 1245 	orr.w	r2, r0, r5, lsl #5
	writeRegister(BME280_CONFIG_REG, controlData);
   d4ada:	b2d2      	uxtb	r2, r2
   d4adc:	4620      	mov	r0, r4
   d4ade:	21f5      	movs	r1, #245	; 0xf5
}
   d4ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if(timeSetting > 0b111) timeSetting = 0; //Error check. Default to 0.5ms
	
	uint8_t controlData = readRegister(BME280_CONFIG_REG);
	controlData &= ~( (1<<7) | (1<<6) | (1<<5) ); //Clear the 7/6/5 bits
	controlData |= (timeSetting << 5); //Align with bits 7/6/5
	writeRegister(BME280_CONFIG_REG, controlData);
   d4ae4:	f7ff bfa7 	b.w	d4a36 <_ZN6BME28013writeRegisterEhh>

000d4ae8 <_ZN6BME2809setFilterEh>:
//  1, coefficients = 2
//  2, coefficients = 4
//  3, coefficients = 8
//  4, coefficients = 16
void BME280::setFilter(uint8_t filterSetting)
{
   d4ae8:	b538      	push	{r3, r4, r5, lr}
	if(filterSetting > 0b111) filterSetting = 0; //Error check. Default to filter off
   d4aea:	2907      	cmp	r1, #7
   d4aec:	bf94      	ite	ls
   d4aee:	460d      	movls	r5, r1
   d4af0:	2500      	movhi	r5, #0
	
	uint8_t controlData = readRegister(BME280_CONFIG_REG);
   d4af2:	21f5      	movs	r1, #245	; 0xf5
//  1, coefficients = 2
//  2, coefficients = 4
//  3, coefficients = 8
//  4, coefficients = 16
void BME280::setFilter(uint8_t filterSetting)
{
   d4af4:	4604      	mov	r4, r0
	if(filterSetting > 0b111) filterSetting = 0; //Error check. Default to filter off
	
	uint8_t controlData = readRegister(BME280_CONFIG_REG);
   d4af6:	f7ff ff59 	bl	d49ac <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<4) | (1<<3) | (1<<2) ); //Clear the 4/3/2 bits
	controlData |= (filterSetting << 2); //Align with bits 4/3/2
   d4afa:	f020 001c 	bic.w	r0, r0, #28
   d4afe:	ea40 0285 	orr.w	r2, r0, r5, lsl #2
	writeRegister(BME280_CONFIG_REG, controlData);
   d4b02:	b2d2      	uxtb	r2, r2
   d4b04:	4620      	mov	r0, r4
   d4b06:	21f5      	movs	r1, #245	; 0xf5
}
   d4b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if(filterSetting > 0b111) filterSetting = 0; //Error check. Default to filter off
	
	uint8_t controlData = readRegister(BME280_CONFIG_REG);
	controlData &= ~( (1<<4) | (1<<3) | (1<<2) ); //Clear the 4/3/2 bits
	controlData |= (filterSetting << 2); //Align with bits 4/3/2
	writeRegister(BME280_CONFIG_REG, controlData);
   d4b0c:	f7ff bf93 	b.w	d4a36 <_ZN6BME28013writeRegisterEhh>

000d4b10 <_ZN6BME28017setTempOverSampleEh>:

//Set the temperature oversample value
//0 turns off temp sensing
//1 to 16 are valid over sampling values
void BME280::setTempOverSample(uint8_t overSampleAmount)
{
   d4b10:	2910      	cmp	r1, #16
   d4b12:	bf98      	it	ls
   d4b14:	4b10      	ldrls	r3, [pc, #64]	; (d4b58 <_ZN6BME28017setTempOverSampleEh+0x48>)
   d4b16:	b570      	push	{r4, r5, r6, lr}
   d4b18:	bf98      	it	ls
   d4b1a:	5c5d      	ldrbls	r5, [r3, r1]
   d4b1c:	4604      	mov	r4, r0
   d4b1e:	bf88      	it	hi
   d4b20:	2501      	movhi	r5, #1
	overSampleAmount = checkSampleValue(overSampleAmount); //Error check
	
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
   d4b22:	f7ff ff81 	bl	d4a28 <_ZN6BME2807getModeEv>
	
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
   d4b26:	2100      	movs	r1, #0
//1 to 16 are valid over sampling values
void BME280::setTempOverSample(uint8_t overSampleAmount)
{
	overSampleAmount = checkSampleValue(overSampleAmount); //Error check
	
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
   d4b28:	4606      	mov	r6, r0
	
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
   d4b2a:	4620      	mov	r0, r4
   d4b2c:	f7ff ffb5 	bl	d4a9a <_ZN6BME2807setModeEh>

	//Set the osrs_t bits (7, 6, 5) to overSampleAmount
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
   d4b30:	21f4      	movs	r1, #244	; 0xf4
   d4b32:	4620      	mov	r0, r4
   d4b34:	f7ff ff3a 	bl	d49ac <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<7) | (1<<6) | (1<<5) ); //Clear bits 765
	controlData |= overSampleAmount << 5; //Align overSampleAmount to bits 7/6/5
   d4b38:	f000 001f 	and.w	r0, r0, #31
   d4b3c:	ea40 1245 	orr.w	r2, r0, r5, lsl #5
	writeRegister(BME280_CTRL_MEAS_REG, controlData);
   d4b40:	21f4      	movs	r1, #244	; 0xf4
   d4b42:	4620      	mov	r0, r4
   d4b44:	b2d2      	uxtb	r2, r2
   d4b46:	f7ff ff76 	bl	d4a36 <_ZN6BME28013writeRegisterEhh>
	
	setMode(originalMode); //Return to the original user's choice
   d4b4a:	4631      	mov	r1, r6
   d4b4c:	4620      	mov	r0, r4
}
   d4b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
	controlData &= ~( (1<<7) | (1<<6) | (1<<5) ); //Clear bits 765
	controlData |= overSampleAmount << 5; //Align overSampleAmount to bits 7/6/5
	writeRegister(BME280_CTRL_MEAS_REG, controlData);
	
	setMode(originalMode); //Return to the original user's choice
   d4b52:	f7ff bfa2 	b.w	d4a9a <_ZN6BME2807setModeEh>
   d4b56:	bf00      	nop
   d4b58:	000d9768 	.word	0x000d9768

000d4b5c <_ZN6BME28021setPressureOverSampleEh>:

//Set the pressure oversample value
//0 turns off pressure sensing
//1 to 16 are valid over sampling values
void BME280::setPressureOverSample(uint8_t overSampleAmount)
{
   d4b5c:	2910      	cmp	r1, #16
   d4b5e:	bf98      	it	ls
   d4b60:	4b10      	ldrls	r3, [pc, #64]	; (d4ba4 <_ZN6BME28021setPressureOverSampleEh+0x48>)
   d4b62:	b570      	push	{r4, r5, r6, lr}
   d4b64:	bf98      	it	ls
   d4b66:	5c5d      	ldrbls	r5, [r3, r1]
   d4b68:	4604      	mov	r4, r0
   d4b6a:	bf88      	it	hi
   d4b6c:	2501      	movhi	r5, #1
	overSampleAmount = checkSampleValue(overSampleAmount); //Error check
	
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
   d4b6e:	f7ff ff5b 	bl	d4a28 <_ZN6BME2807getModeEv>
	
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
   d4b72:	2100      	movs	r1, #0
//1 to 16 are valid over sampling values
void BME280::setPressureOverSample(uint8_t overSampleAmount)
{
	overSampleAmount = checkSampleValue(overSampleAmount); //Error check
	
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
   d4b74:	4606      	mov	r6, r0
	
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
   d4b76:	4620      	mov	r0, r4
   d4b78:	f7ff ff8f 	bl	d4a9a <_ZN6BME2807setModeEh>

	//Set the osrs_p bits (4, 3, 2) to overSampleAmount
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
   d4b7c:	21f4      	movs	r1, #244	; 0xf4
   d4b7e:	4620      	mov	r0, r4
   d4b80:	f7ff ff14 	bl	d49ac <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<4) | (1<<3) | (1<<2) ); //Clear bits 432
	controlData |= overSampleAmount << 2; //Align overSampleAmount to bits 4/3/2
   d4b84:	f020 001c 	bic.w	r0, r0, #28
   d4b88:	ea40 0285 	orr.w	r2, r0, r5, lsl #2
	writeRegister(BME280_CTRL_MEAS_REG, controlData);
   d4b8c:	21f4      	movs	r1, #244	; 0xf4
   d4b8e:	4620      	mov	r0, r4
   d4b90:	b2d2      	uxtb	r2, r2
   d4b92:	f7ff ff50 	bl	d4a36 <_ZN6BME28013writeRegisterEhh>
	
	setMode(originalMode); //Return to the original user's choice
   d4b96:	4631      	mov	r1, r6
   d4b98:	4620      	mov	r0, r4
}
   d4b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
	controlData &= ~( (1<<4) | (1<<3) | (1<<2) ); //Clear bits 432
	controlData |= overSampleAmount << 2; //Align overSampleAmount to bits 4/3/2
	writeRegister(BME280_CTRL_MEAS_REG, controlData);
	
	setMode(originalMode); //Return to the original user's choice
   d4b9e:	f7ff bf7c 	b.w	d4a9a <_ZN6BME2807setModeEh>
   d4ba2:	bf00      	nop
   d4ba4:	000d9768 	.word	0x000d9768

000d4ba8 <_ZN6BME28021setHumidityOverSampleEh>:

//Set the humidity oversample value
//0 turns off humidity sensing
//1 to 16 are valid over sampling values
void BME280::setHumidityOverSample(uint8_t overSampleAmount)
{
   d4ba8:	2910      	cmp	r1, #16
   d4baa:	bf98      	it	ls
   d4bac:	4b0f      	ldrls	r3, [pc, #60]	; (d4bec <_ZN6BME28021setHumidityOverSampleEh+0x44>)
   d4bae:	b570      	push	{r4, r5, r6, lr}
   d4bb0:	bf98      	it	ls
   d4bb2:	5c5d      	ldrbls	r5, [r3, r1]
   d4bb4:	4604      	mov	r4, r0
   d4bb6:	bf88      	it	hi
   d4bb8:	2501      	movhi	r5, #1
	overSampleAmount = checkSampleValue(overSampleAmount); //Error check
	
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
   d4bba:	f7ff ff35 	bl	d4a28 <_ZN6BME2807getModeEv>
	
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
   d4bbe:	2100      	movs	r1, #0
//1 to 16 are valid over sampling values
void BME280::setHumidityOverSample(uint8_t overSampleAmount)
{
	overSampleAmount = checkSampleValue(overSampleAmount); //Error check
	
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
   d4bc0:	4606      	mov	r6, r0
	
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
   d4bc2:	4620      	mov	r0, r4
   d4bc4:	f7ff ff69 	bl	d4a9a <_ZN6BME2807setModeEh>

	//Set the osrs_h bits (2, 1, 0) to overSampleAmount
	uint8_t controlData = readRegister(BME280_CTRL_HUMIDITY_REG);
   d4bc8:	21f2      	movs	r1, #242	; 0xf2
   d4bca:	4620      	mov	r0, r4
   d4bcc:	f7ff feee 	bl	d49ac <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<2) | (1<<1) | (1<<0) ); //Clear bits 2/1/0
   d4bd0:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
	controlData |= overSampleAmount << 0; //Align overSampleAmount to bits 2/1/0
	writeRegister(BME280_CTRL_HUMIDITY_REG, controlData);
   d4bd4:	432a      	orrs	r2, r5
   d4bd6:	4620      	mov	r0, r4
   d4bd8:	21f2      	movs	r1, #242	; 0xf2
   d4bda:	f7ff ff2c 	bl	d4a36 <_ZN6BME28013writeRegisterEhh>

	setMode(originalMode); //Return to the original user's choice
   d4bde:	4631      	mov	r1, r6
   d4be0:	4620      	mov	r0, r4
}
   d4be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uint8_t controlData = readRegister(BME280_CTRL_HUMIDITY_REG);
	controlData &= ~( (1<<2) | (1<<1) | (1<<0) ); //Clear bits 2/1/0
	controlData |= overSampleAmount << 0; //Align overSampleAmount to bits 2/1/0
	writeRegister(BME280_CTRL_HUMIDITY_REG, controlData);

	setMode(originalMode); //Return to the original user's choice
   d4be6:	f7ff bf58 	b.w	d4a9a <_ZN6BME2807setModeEh>
   d4bea:	bf00      	nop
   d4bec:	000d9768 	.word	0x000d9768

000d4bf0 <_ZN6BME2805beginEv>:
//  Use statements such as "mySensor.settings.commInterface = SPI_MODE;" to 
//  configure before calling .begin();
//
//****************************************************************************//
uint8_t BME280::begin()
{
   d4bf0:	b538      	push	{r3, r4, r5, lr}
   d4bf2:	4604      	mov	r4, r0
	delay(2);  //Make sure sensor had enough time to turn on. BME280 requires 2ms to start up.
   d4bf4:	2002      	movs	r0, #2
   d4bf6:	f001 fa89 	bl	d610c <delay>

	//Check the settings structure values to determine how to setup the device
	switch (settings.commInterface)
   d4bfa:	7825      	ldrb	r5, [r4, #0]
   d4bfc:	b1ed      	cbz	r5, d4c3a <_ZN6BME2805beginEv+0x4a>
   d4bfe:	2d01      	cmp	r5, #1
   d4c00:	d122      	bne.n	d4c48 <_ZN6BME2805beginEv+0x58>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4c02:	f7ff fcff 	bl	d4604 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4c06:	f002 fe5f 	bl	d78c8 <_ZN8SPIClass5beginEv>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d4c0a:	f7ff fcfb 	bl	d4604 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4c0e:	2120      	movs	r1, #32
   d4c10:	f002 fed6 	bl	d79c0 <_ZN8SPIClass15setClockDividerEh>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d4c14:	f7ff fcf6 	bl	d4604 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4c18:	4629      	mov	r1, r5
   d4c1a:	f002 fe66 	bl	d78ea <_ZN8SPIClass11setBitOrderEh>
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d4c1e:	f7ff fcf1 	bl	d4604 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4c22:	2103      	movs	r1, #3
   d4c24:	f002 fe72 	bl	d790c <_ZN8SPIClass11setDataModeEh>
		// This was SPI_MODE3 for RedBoard, but I had to change to
		// MODE0 for Teensy 3.1 operation
		SPI.setDataMode(SPI_MODE3);
		#endif
		// initialize the  data ready and chip select pins:
		pinMode(settings.chipSelectPin, OUTPUT);
   d4c28:	4629      	mov	r1, r5
   d4c2a:	78a0      	ldrb	r0, [r4, #2]
   d4c2c:	f003 f9ae 	bl	d7f8c <pinMode>
		digitalWrite(settings.chipSelectPin, HIGH);
   d4c30:	4629      	mov	r1, r5
   d4c32:	78a0      	ldrb	r0, [r4, #2]
   d4c34:	f003 f9bb 	bl	d7fae <digitalWrite>
		break;
   d4c38:	e006      	b.n	d4c48 <_ZN6BME2805beginEv+0x58>
	switch (settings.commInterface)
	{

	case I2C_MODE:
		
		switch(_wireType)
   d4c3a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   d4c3e:	2b01      	cmp	r3, #1
   d4c40:	d102      	bne.n	d4c48 <_ZN6BME2805beginEv+0x58>
		{
			case(HARD_WIRE):
				_hardPort->begin(); //The caller can begin their port and set the speed. We just confirm it here otherwise it can be hard to debug.
   d4c42:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d4c44:	f002 fb96 	bl	d7374 <_ZN7TwoWire5beginEv>
	default:
		break;
	}

	//Check communication with IC before anything else
	uint8_t chipID = readRegister(BME280_CHIP_ID_REG); //Should return 0x60 or 0x58
   d4c48:	21d0      	movs	r1, #208	; 0xd0
   d4c4a:	4620      	mov	r0, r4
   d4c4c:	f7ff feae 	bl	d49ac <_ZN6BME28012readRegisterEh>
	if(chipID != 0x58 && chipID != 0x60) // Is this BMP or BME?
   d4c50:	2858      	cmp	r0, #88	; 0x58
   d4c52:	d002      	beq.n	d4c5a <_ZN6BME2805beginEv+0x6a>
   d4c54:	2860      	cmp	r0, #96	; 0x60
   d4c56:	f040 80e8 	bne.w	d4e2a <_ZN6BME2805beginEv+0x23a>
	return(chipID); //This is not BMP nor BME!

	//Reading all compensation data, range 0x88:A1, 0xE1:E7
	calibration.dig_T1 = ((uint16_t)((readRegister(BME280_DIG_T1_MSB_REG) << 8) + readRegister(BME280_DIG_T1_LSB_REG)));
   d4c5a:	2189      	movs	r1, #137	; 0x89
   d4c5c:	4620      	mov	r0, r4
   d4c5e:	f7ff fea5 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4c62:	2188      	movs	r1, #136	; 0x88
   d4c64:	4605      	mov	r5, r0
   d4c66:	4620      	mov	r0, r4
   d4c68:	f7ff fea0 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4c6c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d4c70:	8220      	strh	r0, [r4, #16]
	calibration.dig_T2 = ((int16_t)((readRegister(BME280_DIG_T2_MSB_REG) << 8) + readRegister(BME280_DIG_T2_LSB_REG)));
   d4c72:	218b      	movs	r1, #139	; 0x8b
   d4c74:	4620      	mov	r0, r4
   d4c76:	f7ff fe99 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4c7a:	218a      	movs	r1, #138	; 0x8a
   d4c7c:	4605      	mov	r5, r0
   d4c7e:	4620      	mov	r0, r4
   d4c80:	f7ff fe94 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4c84:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d4c88:	8260      	strh	r0, [r4, #18]
	calibration.dig_T3 = ((int16_t)((readRegister(BME280_DIG_T3_MSB_REG) << 8) + readRegister(BME280_DIG_T3_LSB_REG)));
   d4c8a:	218d      	movs	r1, #141	; 0x8d
   d4c8c:	4620      	mov	r0, r4
   d4c8e:	f7ff fe8d 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4c92:	218c      	movs	r1, #140	; 0x8c
   d4c94:	4605      	mov	r5, r0
   d4c96:	4620      	mov	r0, r4
   d4c98:	f7ff fe88 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4c9c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d4ca0:	82a0      	strh	r0, [r4, #20]

	calibration.dig_P1 = ((uint16_t)((readRegister(BME280_DIG_P1_MSB_REG) << 8) + readRegister(BME280_DIG_P1_LSB_REG)));
   d4ca2:	218f      	movs	r1, #143	; 0x8f
   d4ca4:	4620      	mov	r0, r4
   d4ca6:	f7ff fe81 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4caa:	218e      	movs	r1, #142	; 0x8e
   d4cac:	4605      	mov	r5, r0
   d4cae:	4620      	mov	r0, r4
   d4cb0:	f7ff fe7c 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4cb4:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d4cb8:	82e0      	strh	r0, [r4, #22]
	calibration.dig_P2 = ((int16_t)((readRegister(BME280_DIG_P2_MSB_REG) << 8) + readRegister(BME280_DIG_P2_LSB_REG)));
   d4cba:	2191      	movs	r1, #145	; 0x91
   d4cbc:	4620      	mov	r0, r4
   d4cbe:	f7ff fe75 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4cc2:	2190      	movs	r1, #144	; 0x90
   d4cc4:	4605      	mov	r5, r0
   d4cc6:	4620      	mov	r0, r4
   d4cc8:	f7ff fe70 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4ccc:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d4cd0:	8320      	strh	r0, [r4, #24]
	calibration.dig_P3 = ((int16_t)((readRegister(BME280_DIG_P3_MSB_REG) << 8) + readRegister(BME280_DIG_P3_LSB_REG)));
   d4cd2:	2193      	movs	r1, #147	; 0x93
   d4cd4:	4620      	mov	r0, r4
   d4cd6:	f7ff fe69 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4cda:	2192      	movs	r1, #146	; 0x92
   d4cdc:	4605      	mov	r5, r0
   d4cde:	4620      	mov	r0, r4
   d4ce0:	f7ff fe64 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4ce4:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d4ce8:	8360      	strh	r0, [r4, #26]
	calibration.dig_P4 = ((int16_t)((readRegister(BME280_DIG_P4_MSB_REG) << 8) + readRegister(BME280_DIG_P4_LSB_REG)));
   d4cea:	2195      	movs	r1, #149	; 0x95
   d4cec:	4620      	mov	r0, r4
   d4cee:	f7ff fe5d 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4cf2:	2194      	movs	r1, #148	; 0x94
   d4cf4:	4605      	mov	r5, r0
   d4cf6:	4620      	mov	r0, r4
   d4cf8:	f7ff fe58 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4cfc:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d4d00:	83a0      	strh	r0, [r4, #28]
	calibration.dig_P5 = ((int16_t)((readRegister(BME280_DIG_P5_MSB_REG) << 8) + readRegister(BME280_DIG_P5_LSB_REG)));
   d4d02:	2197      	movs	r1, #151	; 0x97
   d4d04:	4620      	mov	r0, r4
   d4d06:	f7ff fe51 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4d0a:	2196      	movs	r1, #150	; 0x96
   d4d0c:	4605      	mov	r5, r0
   d4d0e:	4620      	mov	r0, r4
   d4d10:	f7ff fe4c 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4d14:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d4d18:	83e0      	strh	r0, [r4, #30]
	calibration.dig_P6 = ((int16_t)((readRegister(BME280_DIG_P6_MSB_REG) << 8) + readRegister(BME280_DIG_P6_LSB_REG)));
   d4d1a:	2199      	movs	r1, #153	; 0x99
   d4d1c:	4620      	mov	r0, r4
   d4d1e:	f7ff fe45 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4d22:	2198      	movs	r1, #152	; 0x98
   d4d24:	4605      	mov	r5, r0
   d4d26:	4620      	mov	r0, r4
   d4d28:	f7ff fe40 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4d2c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d4d30:	8420      	strh	r0, [r4, #32]
	calibration.dig_P7 = ((int16_t)((readRegister(BME280_DIG_P7_MSB_REG) << 8) + readRegister(BME280_DIG_P7_LSB_REG)));
   d4d32:	219b      	movs	r1, #155	; 0x9b
   d4d34:	4620      	mov	r0, r4
   d4d36:	f7ff fe39 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4d3a:	219a      	movs	r1, #154	; 0x9a
   d4d3c:	4605      	mov	r5, r0
   d4d3e:	4620      	mov	r0, r4
   d4d40:	f7ff fe34 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4d44:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d4d48:	8460      	strh	r0, [r4, #34]	; 0x22
	calibration.dig_P8 = ((int16_t)((readRegister(BME280_DIG_P8_MSB_REG) << 8) + readRegister(BME280_DIG_P8_LSB_REG)));
   d4d4a:	219d      	movs	r1, #157	; 0x9d
   d4d4c:	4620      	mov	r0, r4
   d4d4e:	f7ff fe2d 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4d52:	219c      	movs	r1, #156	; 0x9c
   d4d54:	4605      	mov	r5, r0
   d4d56:	4620      	mov	r0, r4
   d4d58:	f7ff fe28 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4d5c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d4d60:	84a0      	strh	r0, [r4, #36]	; 0x24
	calibration.dig_P9 = ((int16_t)((readRegister(BME280_DIG_P9_MSB_REG) << 8) + readRegister(BME280_DIG_P9_LSB_REG)));
   d4d62:	219f      	movs	r1, #159	; 0x9f
   d4d64:	4620      	mov	r0, r4
   d4d66:	f7ff fe21 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4d6a:	219e      	movs	r1, #158	; 0x9e
   d4d6c:	4605      	mov	r5, r0
   d4d6e:	4620      	mov	r0, r4
   d4d70:	f7ff fe1c 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4d74:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d4d78:	84e0      	strh	r0, [r4, #38]	; 0x26

	calibration.dig_H1 = ((uint8_t)(readRegister(BME280_DIG_H1_REG)));
   d4d7a:	21a1      	movs	r1, #161	; 0xa1
   d4d7c:	4620      	mov	r0, r4
   d4d7e:	f7ff fe15 	bl	d49ac <_ZN6BME28012readRegisterEh>
	calibration.dig_H2 = ((int16_t)((readRegister(BME280_DIG_H2_MSB_REG) << 8) + readRegister(BME280_DIG_H2_LSB_REG)));
   d4d82:	21e2      	movs	r1, #226	; 0xe2
	calibration.dig_P6 = ((int16_t)((readRegister(BME280_DIG_P6_MSB_REG) << 8) + readRegister(BME280_DIG_P6_LSB_REG)));
	calibration.dig_P7 = ((int16_t)((readRegister(BME280_DIG_P7_MSB_REG) << 8) + readRegister(BME280_DIG_P7_LSB_REG)));
	calibration.dig_P8 = ((int16_t)((readRegister(BME280_DIG_P8_MSB_REG) << 8) + readRegister(BME280_DIG_P8_LSB_REG)));
	calibration.dig_P9 = ((int16_t)((readRegister(BME280_DIG_P9_MSB_REG) << 8) + readRegister(BME280_DIG_P9_LSB_REG)));

	calibration.dig_H1 = ((uint8_t)(readRegister(BME280_DIG_H1_REG)));
   d4d84:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	calibration.dig_H2 = ((int16_t)((readRegister(BME280_DIG_H2_MSB_REG) << 8) + readRegister(BME280_DIG_H2_LSB_REG)));
   d4d88:	4620      	mov	r0, r4
   d4d8a:	f7ff fe0f 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4d8e:	21e1      	movs	r1, #225	; 0xe1
   d4d90:	4605      	mov	r5, r0
   d4d92:	4620      	mov	r0, r4
   d4d94:	f7ff fe0a 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4d98:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d4d9c:	8560      	strh	r0, [r4, #42]	; 0x2a
	calibration.dig_H3 = ((uint8_t)(readRegister(BME280_DIG_H3_REG)));
   d4d9e:	21e3      	movs	r1, #227	; 0xe3
   d4da0:	4620      	mov	r0, r4
   d4da2:	f7ff fe03 	bl	d49ac <_ZN6BME28012readRegisterEh>
	calibration.dig_H4 = ((int16_t)((readRegister(BME280_DIG_H4_MSB_REG) << 4) + (readRegister(BME280_DIG_H4_LSB_REG) & 0x0F)));
   d4da6:	21e4      	movs	r1, #228	; 0xe4
	calibration.dig_P8 = ((int16_t)((readRegister(BME280_DIG_P8_MSB_REG) << 8) + readRegister(BME280_DIG_P8_LSB_REG)));
	calibration.dig_P9 = ((int16_t)((readRegister(BME280_DIG_P9_MSB_REG) << 8) + readRegister(BME280_DIG_P9_LSB_REG)));

	calibration.dig_H1 = ((uint8_t)(readRegister(BME280_DIG_H1_REG)));
	calibration.dig_H2 = ((int16_t)((readRegister(BME280_DIG_H2_MSB_REG) << 8) + readRegister(BME280_DIG_H2_LSB_REG)));
	calibration.dig_H3 = ((uint8_t)(readRegister(BME280_DIG_H3_REG)));
   d4da8:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
	calibration.dig_H4 = ((int16_t)((readRegister(BME280_DIG_H4_MSB_REG) << 4) + (readRegister(BME280_DIG_H4_LSB_REG) & 0x0F)));
   d4dac:	4620      	mov	r0, r4
   d4dae:	f7ff fdfd 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4db2:	21e5      	movs	r1, #229	; 0xe5
   d4db4:	4605      	mov	r5, r0
   d4db6:	4620      	mov	r0, r4
   d4db8:	f7ff fdf8 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4dbc:	f000 000f 	and.w	r0, r0, #15
   d4dc0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   d4dc4:	85e0      	strh	r0, [r4, #46]	; 0x2e
	calibration.dig_H5 = ((int16_t)((readRegister(BME280_DIG_H5_MSB_REG) << 4) + ((readRegister(BME280_DIG_H4_LSB_REG) >> 4) & 0x0F)));
   d4dc6:	21e6      	movs	r1, #230	; 0xe6
   d4dc8:	4620      	mov	r0, r4
   d4dca:	f7ff fdef 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4dce:	21e5      	movs	r1, #229	; 0xe5
   d4dd0:	4605      	mov	r5, r0
   d4dd2:	4620      	mov	r0, r4
   d4dd4:	f7ff fdea 	bl	d49ac <_ZN6BME28012readRegisterEh>
   d4dd8:	f3c0 1007 	ubfx	r0, r0, #4, #8
   d4ddc:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   d4de0:	8620      	strh	r0, [r4, #48]	; 0x30
	calibration.dig_H6 = ((int8_t)readRegister(BME280_DIG_H6_REG));
   d4de2:	21e7      	movs	r1, #231	; 0xe7
   d4de4:	4620      	mov	r0, r4
   d4de6:	f7ff fde1 	bl	d49ac <_ZN6BME28012readRegisterEh>

	//Most of the time the sensor will be init with default values
	//But in case user has old/deprecated code, use the settings.x values
	setStandbyTime(settings.tStandby);
   d4dea:	7921      	ldrb	r1, [r4, #4]
	calibration.dig_H1 = ((uint8_t)(readRegister(BME280_DIG_H1_REG)));
	calibration.dig_H2 = ((int16_t)((readRegister(BME280_DIG_H2_MSB_REG) << 8) + readRegister(BME280_DIG_H2_LSB_REG)));
	calibration.dig_H3 = ((uint8_t)(readRegister(BME280_DIG_H3_REG)));
	calibration.dig_H4 = ((int16_t)((readRegister(BME280_DIG_H4_MSB_REG) << 4) + (readRegister(BME280_DIG_H4_LSB_REG) & 0x0F)));
	calibration.dig_H5 = ((int16_t)((readRegister(BME280_DIG_H5_MSB_REG) << 4) + ((readRegister(BME280_DIG_H4_LSB_REG) >> 4) & 0x0F)));
	calibration.dig_H6 = ((int8_t)readRegister(BME280_DIG_H6_REG));
   d4dec:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32

	//Most of the time the sensor will be init with default values
	//But in case user has old/deprecated code, use the settings.x values
	setStandbyTime(settings.tStandby);
   d4df0:	4620      	mov	r0, r4
   d4df2:	f7ff fe65 	bl	d4ac0 <_ZN6BME28014setStandbyTimeEh>
	setFilter(settings.filter);
   d4df6:	7961      	ldrb	r1, [r4, #5]
   d4df8:	4620      	mov	r0, r4
   d4dfa:	f7ff fe75 	bl	d4ae8 <_ZN6BME2809setFilterEh>
	setPressureOverSample(settings.pressOverSample); //Default of 1x oversample
   d4dfe:	79e1      	ldrb	r1, [r4, #7]
   d4e00:	4620      	mov	r0, r4
   d4e02:	f7ff feab 	bl	d4b5c <_ZN6BME28021setPressureOverSampleEh>
	setHumidityOverSample(settings.humidOverSample); //Default of 1x oversample
   d4e06:	7a21      	ldrb	r1, [r4, #8]
   d4e08:	4620      	mov	r0, r4
   d4e0a:	f7ff fecd 	bl	d4ba8 <_ZN6BME28021setHumidityOverSampleEh>
	setTempOverSample(settings.tempOverSample); //Default of 1x oversample
   d4e0e:	79a1      	ldrb	r1, [r4, #6]
   d4e10:	4620      	mov	r0, r4
   d4e12:	f7ff fe7d 	bl	d4b10 <_ZN6BME28017setTempOverSampleEh>
	
	setMode(MODE_NORMAL); //Go!
   d4e16:	4620      	mov	r0, r4
   d4e18:	2103      	movs	r1, #3
   d4e1a:	f7ff fe3e 	bl	d4a9a <_ZN6BME2807setModeEh>
	
	return(readRegister(BME280_CHIP_ID_REG)); //Should return 0x60
   d4e1e:	4620      	mov	r0, r4
   d4e20:	21d0      	movs	r1, #208	; 0xd0
}
   d4e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	setHumidityOverSample(settings.humidOverSample); //Default of 1x oversample
	setTempOverSample(settings.tempOverSample); //Default of 1x oversample
	
	setMode(MODE_NORMAL); //Go!
	
	return(readRegister(BME280_CHIP_ID_REG)); //Should return 0x60
   d4e26:	f7ff bdc1 	b.w	d49ac <_ZN6BME28012readRegisterEh>
}
   d4e2a:	bd38      	pop	{r3, r4, r5, pc}

000d4e2c <_GLOBAL__sub_I__ZN6BME280C2Ev>:
   d4e2c:	f000 bf3a 	b.w	d5ca4 <HAL_Pin_Map>

000d4e30 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4e30:	b510      	push	{r4, lr}
   d4e32:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4e34:	6800      	ldr	r0, [r0, #0]
   d4e36:	b108      	cbz	r0, d4e3c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4e38:	f001 f950 	bl	d60dc <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4e3c:	4620      	mov	r0, r4
   d4e3e:	bd10      	pop	{r4, pc}

000d4e40 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4e40:	b570      	push	{r4, r5, r6, lr}
   d4e42:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4e44:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4e46:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4e48:	b149      	cbz	r1, d4e5e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4e4a:	f004 fc6f 	bl	d972c <strlen>
   d4e4e:	682b      	ldr	r3, [r5, #0]
   d4e50:	4602      	mov	r2, r0
   d4e52:	4621      	mov	r1, r4
   d4e54:	4628      	mov	r0, r5
   d4e56:	68db      	ldr	r3, [r3, #12]
    }
   d4e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4e5c:	4718      	bx	r3
    }
   d4e5e:	bd70      	pop	{r4, r5, r6, pc}

000d4e60 <_ZN11USARTSerial5writeEi>:
  bool breakRx(void);

  inline size_t write(unsigned long n) { return write((uint16_t)n); }
  inline size_t write(long n) { return write((uint16_t)n); }
  inline size_t write(unsigned int n) { return write((uint16_t)n); }
  inline size_t write(int n) { return write((uint16_t)n); }
   d4e60:	b289      	uxth	r1, r1
   d4e62:	f002 bec8 	b.w	d7bf6 <_ZN11USARTSerial5writeEt>
	...

000d4e68 <_Z21setBluetoothDataBytes13sampleBytes_t>:
    sampleBytes.altitude = static_cast<uint32_t>(sample.altitudeM * 10000);

    setBluetoothDataBytes(sampleBytes);
}

void setBluetoothDataBytes(sampleBytes_t sampleBytes) {
   d4e68:	b510      	push	{r4, lr}
   d4e6a:	b08a      	sub	sp, #40	; 0x28
   d4e6c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    uint8_t data32bit[bufferSize]; 
    memset(data16bit, 0, bufferSize);
    memset(data32bit, 0, bufferSize);

    // memcpy will copy in reverse order since this is a little-endian machine
    memcpy(data16bit+0, &sampleBytes.windSpeed, sizeof(sampleBytes.windSpeed));
   d4e70:	f8bd 3000 	ldrh.w	r3, [sp]
   d4e74:	f8ad 3010 	strh.w	r3, [sp, #16]
    memcpy(data16bit+2, &sampleBytes.temperature, sizeof(sampleBytes.temperature));
   d4e78:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d4e7c:	f8ad 3012 	strh.w	r3, [sp, #18]
    // uint8_t data32bit[] = {0x00, 0x00, 0x00, 0x00,        0xEE, 0x39, 0x00, 0x00,        0x00, 0x00, 0x00, 0x00};

    size_t bufferSize = 12;
    uint8_t data16bit[bufferSize]; 
    uint8_t data32bit[bufferSize]; 
    memset(data16bit, 0, bufferSize);
   d4e80:	2400      	movs	r4, #0
    memset(data32bit, 0, bufferSize);

    // memcpy will copy in reverse order since this is a little-endian machine
    memcpy(data16bit+0, &sampleBytes.windSpeed, sizeof(sampleBytes.windSpeed));
    memcpy(data16bit+2, &sampleBytes.temperature, sizeof(sampleBytes.temperature));
    memcpy(data16bit+6, &sampleBytes.humidity, sizeof(sampleBytes.humidity));
   d4e82:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    // uint8_t data32bit[] = {0x00, 0x00, 0x00, 0x00,        0xEE, 0x39, 0x00, 0x00,        0x00, 0x00, 0x00, 0x00};

    size_t bufferSize = 12;
    uint8_t data16bit[bufferSize]; 
    uint8_t data32bit[bufferSize]; 
    memset(data16bit, 0, bufferSize);
   d4e86:	9405      	str	r4, [sp, #20]
    memset(data32bit, 0, bufferSize);

    // memcpy will copy in reverse order since this is a little-endian machine
    memcpy(data16bit+0, &sampleBytes.windSpeed, sizeof(sampleBytes.windSpeed));
    memcpy(data16bit+2, &sampleBytes.temperature, sizeof(sampleBytes.temperature));
    memcpy(data16bit+6, &sampleBytes.humidity, sizeof(sampleBytes.humidity));
   d4e88:	f8ad 3016 	strh.w	r3, [sp, #22]
    memcpy(data16bit+8, &sampleBytes.pressure, sizeof(sampleBytes.pressure));
   d4e8c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   d4e90:	f8ad 3018 	strh.w	r3, [sp, #24]
    memcpy(data16bit+10, &sampleBytes.windDirection, sizeof(sampleBytes.windDirection));
   d4e94:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   d4e98:	f8ad 301a 	strh.w	r3, [sp, #26]
    memcpy(data32bit+4, &sampleBytes.altitude, sizeof(sampleBytes.altitude));
   d4e9c:	9b03      	ldr	r3, [sp, #12]
   d4e9e:	9308      	str	r3, [sp, #32]
    
    characteristic16bit.setValue(data16bit, 12);
   d4ea0:	a904      	add	r1, sp, #16
   d4ea2:	4623      	mov	r3, r4
   d4ea4:	220c      	movs	r2, #12
   d4ea6:	4806      	ldr	r0, [pc, #24]	; (d4ec0 <_Z21setBluetoothDataBytes13sampleBytes_t+0x58>)

    size_t bufferSize = 12;
    uint8_t data16bit[bufferSize]; 
    uint8_t data32bit[bufferSize]; 
    memset(data16bit, 0, bufferSize);
    memset(data32bit, 0, bufferSize);
   d4ea8:	9407      	str	r4, [sp, #28]
   d4eaa:	9409      	str	r4, [sp, #36]	; 0x24
    memcpy(data16bit+6, &sampleBytes.humidity, sizeof(sampleBytes.humidity));
    memcpy(data16bit+8, &sampleBytes.pressure, sizeof(sampleBytes.pressure));
    memcpy(data16bit+10, &sampleBytes.windDirection, sizeof(sampleBytes.windDirection));
    memcpy(data32bit+4, &sampleBytes.altitude, sizeof(sampleBytes.altitude));
    
    characteristic16bit.setValue(data16bit, 12);
   d4eac:	f001 fba8 	bl	d6600 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    characteristic32bit.setValue(data32bit, 12);
   d4eb0:	4623      	mov	r3, r4
   d4eb2:	220c      	movs	r2, #12
   d4eb4:	a907      	add	r1, sp, #28
   d4eb6:	4803      	ldr	r0, [pc, #12]	; (d4ec4 <_Z21setBluetoothDataBytes13sampleBytes_t+0x5c>)
   d4eb8:	f001 fba2 	bl	d6600 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
}
   d4ebc:	b00a      	add	sp, #40	; 0x28
   d4ebe:	bd10      	pop	{r4, pc}
   d4ec0:	2003e354 	.word	0x2003e354
   d4ec4:	2003e28c 	.word	0x2003e28c

000d4ec8 <_Z16setBluetoothData8sample_t>:
            screenNumber = 0;
    }
    rewriteLcd(buffer1);
}

void setBluetoothData(sample_t sample) {
   d4ec8:	b084      	sub	sp, #16
   d4eca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4ecc:	f10d 0e18 	add.w	lr, sp, #24
   d4ed0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    sampleBytes_t sampleBytes;

    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
   d4ed4:	ed9f 7a23 	vldr	s14, [pc, #140]	; d4f64 <_Z16setBluetoothData8sample_t+0x9c>
   d4ed8:	eddd 7a06 	vldr	s15, [sp, #24]
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
   d4edc:	eddf 6a22 	vldr	s13, [pc, #136]	; d4f68 <_Z16setBluetoothData8sample_t+0xa0>
}

void setBluetoothData(sample_t sample) {
    sampleBytes_t sampleBytes;

    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
   d4ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
   d4ee4:	ed9d 7a08 	vldr	s14, [sp, #32]
}

void setBluetoothData(sample_t sample) {
    sampleBytes_t sampleBytes;

    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
   d4ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
   d4eec:	ee27 7a26 	vmul.f32	s14, s14, s13
}

void setBluetoothData(sample_t sample) {
    sampleBytes_t sampleBytes;

    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
   d4ef0:	ee17 3a90 	vmov	r3, s15
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
   d4ef4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
}

void setBluetoothData(sample_t sample) {
    sampleBytes_t sampleBytes;

    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
   d4ef8:	f8ad 3000 	strh.w	r3, [sp]
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
   d4efc:	ee17 3a90 	vmov	r3, s15
    sampleBytes.humidity = static_cast<uint16_t>(sample.humidity * 100);
   d4f00:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
    sampleBytes.pressure = static_cast<uint16_t>(sample.pressureBar * 10000);
   d4f04:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28

void setBluetoothData(sample_t sample) {
    sampleBytes_t sampleBytes;

    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
   d4f08:	f8ad 3004 	strh.w	r3, [sp, #4]
    sampleBytes.humidity = static_cast<uint16_t>(sample.humidity * 100);
   d4f0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    sampleBytes.pressure = static_cast<uint16_t>(sample.pressureBar * 10000);
   d4f10:	eddf 6a16 	vldr	s13, [pc, #88]	; d4f6c <_Z16setBluetoothData8sample_t+0xa4>
void setBluetoothData(sample_t sample) {
    sampleBytes_t sampleBytes;

    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
    sampleBytes.humidity = static_cast<uint16_t>(sample.humidity * 100);
   d4f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    sampleBytes.pressure = static_cast<uint16_t>(sample.pressureBar * 10000);
   d4f18:	ee27 7a26 	vmul.f32	s14, s14, s13
void setBluetoothData(sample_t sample) {
    sampleBytes_t sampleBytes;

    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
    sampleBytes.humidity = static_cast<uint16_t>(sample.humidity * 100);
   d4f1c:	ee17 3a90 	vmov	r3, s15
    sampleBytes.pressure = static_cast<uint16_t>(sample.pressureBar * 10000);
   d4f20:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    sampleBytes.windDirection = static_cast<uint16_t>(sample.windDirectionDeg);
   d4f24:	ed9d 7a07 	vldr	s14, [sp, #28]
void setBluetoothData(sample_t sample) {
    sampleBytes_t sampleBytes;

    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
    sampleBytes.humidity = static_cast<uint16_t>(sample.humidity * 100);
   d4f28:	f8ad 3006 	strh.w	r3, [sp, #6]
    sampleBytes.pressure = static_cast<uint16_t>(sample.pressureBar * 10000);
   d4f2c:	ee17 3a90 	vmov	r3, s15
    sampleBytes.windDirection = static_cast<uint16_t>(sample.windDirectionDeg);
   d4f30:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    sampleBytes_t sampleBytes;

    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
    sampleBytes.humidity = static_cast<uint16_t>(sample.humidity * 100);
    sampleBytes.pressure = static_cast<uint16_t>(sample.pressureBar * 10000);
   d4f34:	f8ad 3008 	strh.w	r3, [sp, #8]
    sampleBytes.windDirection = static_cast<uint16_t>(sample.windDirectionDeg);
   d4f38:	ee17 3a90 	vmov	r3, s15
    sampleBytes.altitude = static_cast<uint32_t>(sample.altitudeM * 10000);
   d4f3c:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c

    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
    sampleBytes.humidity = static_cast<uint16_t>(sample.humidity * 100);
    sampleBytes.pressure = static_cast<uint16_t>(sample.pressureBar * 10000);
    sampleBytes.windDirection = static_cast<uint16_t>(sample.windDirectionDeg);
   d4f40:	f8ad 3002 	strh.w	r3, [sp, #2]
    sampleBytes.altitude = static_cast<uint32_t>(sample.altitudeM * 10000);
   d4f44:	ee67 7aa6 	vmul.f32	s15, s15, s13

    setBluetoothDataBytes(sampleBytes);
   d4f48:	ab04      	add	r3, sp, #16
    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
    sampleBytes.humidity = static_cast<uint16_t>(sample.humidity * 100);
    sampleBytes.pressure = static_cast<uint16_t>(sample.pressureBar * 10000);
    sampleBytes.windDirection = static_cast<uint16_t>(sample.windDirectionDeg);
    sampleBytes.altitude = static_cast<uint32_t>(sample.altitudeM * 10000);
   d4f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d4f4e:	edcd 7a03 	vstr	s15, [sp, #12]

    setBluetoothDataBytes(sampleBytes);
   d4f52:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   d4f56:	f7ff ff87 	bl	d4e68 <_Z21setBluetoothDataBytes13sampleBytes_t>
}
   d4f5a:	b005      	add	sp, #20
   d4f5c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4f60:	b004      	add	sp, #16
   d4f62:	4770      	bx	lr
   d4f64:	447a0000 	.word	0x447a0000
   d4f68:	42c80000 	.word	0x42c80000
   d4f6c:	461c4000 	.word	0x461c4000

000d4f70 <_Z8setupLCDv>:
    
    characteristic16bit.setValue(data16bit, 12);
    characteristic32bit.setValue(data32bit, 12);
}

void setupLCD() {
   d4f70:	b508      	push	{r3, lr}
     Serial1.begin(9600); //Begin communication with OpenLCD
   d4f72:	f002 fe47 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d4f76:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4f7a:	f002 fe39 	bl	d7bf0 <_ZN11USARTSerial5beginEm>
    
    delay(250);
   d4f7e:	20fa      	movs	r0, #250	; 0xfa
   d4f80:	f001 f8c4 	bl	d610c <delay>

    Serial1.write('|'); //Put LCD into setting mode
   d4f84:	f002 fe3e 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d4f88:	217c      	movs	r1, #124	; 0x7c
   d4f8a:	f7ff ff69 	bl	d4e60 <_ZN11USARTSerial5writeEi>
    Serial1.write('-'); //Clear
   d4f8e:	f002 fe39 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d4f92:	212d      	movs	r1, #45	; 0x2d
   d4f94:	f7ff ff64 	bl	d4e60 <_ZN11USARTSerial5writeEi>

    Serial1.write('|'); //Put LCD into setting mode
   d4f98:	f002 fe34 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d4f9c:	217c      	movs	r1, #124	; 0x7c
   d4f9e:	f7ff ff5f 	bl	d4e60 <_ZN11USARTSerial5writeEi>
    Serial1.write(128 + 0); //Set white/red backlight amount to 0-29    
   d4fa2:	f002 fe2f 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d4fa6:	2180      	movs	r1, #128	; 0x80
   d4fa8:	f7ff ff5a 	bl	d4e60 <_ZN11USARTSerial5writeEi>

    Serial1.write('|'); //Put LCD into setting mode
   d4fac:	f002 fe2a 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d4fb0:	217c      	movs	r1, #124	; 0x7c
   d4fb2:	f7ff ff55 	bl	d4e60 <_ZN11USARTSerial5writeEi>
    Serial1.write(158 + 0); //Set green backlight amount to 0-29
   d4fb6:	f002 fe25 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d4fba:	219e      	movs	r1, #158	; 0x9e
   d4fbc:	f7ff ff50 	bl	d4e60 <_ZN11USARTSerial5writeEi>

    Serial1.write('|'); //Put LCD into setting mode
   d4fc0:	f002 fe20 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d4fc4:	217c      	movs	r1, #124	; 0x7c
   d4fc6:	f7ff ff4b 	bl	d4e60 <_ZN11USARTSerial5writeEi>
    Serial1.write(188 + 15); //Set blue backlight amount to 0-29
   d4fca:	f002 fe1b 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d4fce:	21cb      	movs	r1, #203	; 0xcb
   d4fd0:	f7ff ff46 	bl	d4e60 <_ZN11USARTSerial5writeEi>

    Serial1.write('|'); //Put LCD into setting mode
   d4fd4:	f002 fe16 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d4fd8:	217c      	movs	r1, #124	; 0x7c
   d4fda:	f7ff ff41 	bl	d4e60 <_ZN11USARTSerial5writeEi>
    Serial1.write('-'); //Clear
   d4fde:	f002 fe11 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d4fe2:	212d      	movs	r1, #45	; 0x2d
   d4fe4:	f7ff ff3c 	bl	d4e60 <_ZN11USARTSerial5writeEi>

    Serial1.write("John Zehetner     Fake Kestrel");
   d4fe8:	f002 fe0c 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d4fec:	4904      	ldr	r1, [pc, #16]	; (d5000 <_Z8setupLCDv+0x90>)
   d4fee:	f7ff ff27 	bl	d4e40 <_ZN5Print5writeEPKc>
    delay(3000);
   d4ff2:	f640 30b8 	movw	r0, #3000	; 0xbb8
}
   d4ff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    Serial1.write('|'); //Put LCD into setting mode
    Serial1.write('-'); //Clear

    Serial1.write("John Zehetner     Fake Kestrel");
    delay(3000);
   d4ffa:	f001 b887 	b.w	d610c <delay>
   d4ffe:	bf00      	nop
   d5000:	000d9779 	.word	0x000d9779

000d5004 <_Z8setupBLEv>:
}

void setupBLE() {
   d5004:	b510      	push	{r4, lr}
   d5006:	b096      	sub	sp, #88	; 0x58
    BLE.on();
   d5008:	f001 fbbc 	bl	d6784 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d500c:	f001 fc00 	bl	d6810 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.addCharacteristic(modelNumberCharacteristic);
   d5010:	f001 fbb8 	bl	d6784 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5014:	4a61      	ldr	r2, [pc, #388]	; (d519c <_Z8setupBLEv+0x198>)
   d5016:	4601      	mov	r1, r0
   d5018:	a80d      	add	r0, sp, #52	; 0x34
   d501a:	f002 f80b 	bl	d7034 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d501e:	a80d      	add	r0, sp, #52	; 0x34
   d5020:	f001 fc7b 	bl	d691a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(mfgNameCharacteristic);
   d5024:	f001 fbae 	bl	d6784 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5028:	4a5d      	ldr	r2, [pc, #372]	; (d51a0 <_Z8setupBLEv+0x19c>)
   d502a:	4601      	mov	r1, r0
   d502c:	a80d      	add	r0, sp, #52	; 0x34
   d502e:	f002 f801 	bl	d7034 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d5032:	a80d      	add	r0, sp, #52	; 0x34
   d5034:	f001 fc71 	bl	d691a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(deviceNameCharacteristic);
   d5038:	f001 fba4 	bl	d6784 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d503c:	4a59      	ldr	r2, [pc, #356]	; (d51a4 <_Z8setupBLEv+0x1a0>)
   d503e:	4601      	mov	r1, r0
   d5040:	a80d      	add	r0, sp, #52	; 0x34
   d5042:	f001 fff7 	bl	d7034 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d5046:	a80d      	add	r0, sp, #52	; 0x34
   d5048:	f001 fc67 	bl	d691a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(appearanceCharacteristic);
   d504c:	f001 fb9a 	bl	d6784 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5050:	4a55      	ldr	r2, [pc, #340]	; (d51a8 <_Z8setupBLEv+0x1a4>)
   d5052:	4601      	mov	r1, r0
   d5054:	a80d      	add	r0, sp, #52	; 0x34
   d5056:	f001 ffed 	bl	d7034 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d505a:	a80d      	add	r0, sp, #52	; 0x34
   d505c:	f001 fc5d 	bl	d691a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(serialNumberCharacteristic);
   d5060:	f001 fb90 	bl	d6784 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5064:	4a51      	ldr	r2, [pc, #324]	; (d51ac <_Z8setupBLEv+0x1a8>)
   d5066:	4601      	mov	r1, r0
   d5068:	a80d      	add	r0, sp, #52	; 0x34
   d506a:	f001 ffe3 	bl	d7034 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d506e:	a80d      	add	r0, sp, #52	; 0x34
   d5070:	f001 fc53 	bl	d691a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(hardwareVersionCharacteristic);
   d5074:	f001 fb86 	bl	d6784 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5078:	4a4d      	ldr	r2, [pc, #308]	; (d51b0 <_Z8setupBLEv+0x1ac>)
   d507a:	4601      	mov	r1, r0
   d507c:	a80d      	add	r0, sp, #52	; 0x34
   d507e:	f001 ffd9 	bl	d7034 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d5082:	a80d      	add	r0, sp, #52	; 0x34
   d5084:	f001 fc49 	bl	d691a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(firmwareVersionCharacteristic);
   d5088:	f001 fb7c 	bl	d6784 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d508c:	4a49      	ldr	r2, [pc, #292]	; (d51b4 <_Z8setupBLEv+0x1b0>)
   d508e:	4601      	mov	r1, r0
   d5090:	a80d      	add	r0, sp, #52	; 0x34
   d5092:	f001 ffcf 	bl	d7034 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d5096:	a80d      	add	r0, sp, #52	; 0x34
   d5098:	f001 fc3f 	bl	d691a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(softwareVersionCharacteristic);
   d509c:	f001 fb72 	bl	d6784 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d50a0:	4a45      	ldr	r2, [pc, #276]	; (d51b8 <_Z8setupBLEv+0x1b4>)
   d50a2:	4601      	mov	r1, r0
   d50a4:	a80d      	add	r0, sp, #52	; 0x34
   d50a6:	f001 ffc5 	bl	d7034 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d50aa:	a80d      	add	r0, sp, #52	; 0x34
   d50ac:	f001 fc35 	bl	d691a <_ZN8particle17BleCharacteristicD1Ev>

    BLE.addCharacteristic(characteristic16bit);
   d50b0:	f001 fb68 	bl	d6784 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d50b4:	4a41      	ldr	r2, [pc, #260]	; (d51bc <_Z8setupBLEv+0x1b8>)
   d50b6:	4601      	mov	r1, r0
   d50b8:	a80d      	add	r0, sp, #52	; 0x34
   d50ba:	f001 ffbb 	bl	d7034 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d50be:	a80d      	add	r0, sp, #52	; 0x34
   d50c0:	f001 fc2b 	bl	d691a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(characteristic32bit);
   d50c4:	f001 fb5e 	bl	d6784 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d50c8:	4a3d      	ldr	r2, [pc, #244]	; (d51c0 <_Z8setupBLEv+0x1bc>)
   d50ca:	4601      	mov	r1, r0
   d50cc:	a80d      	add	r0, sp, #52	; 0x34
   d50ce:	f001 ffb1 	bl	d7034 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d50d2:	a80d      	add	r0, sp, #52	; 0x34
   d50d4:	f001 fc21 	bl	d691a <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(batteryLevelCharacteristic);
   d50d8:	f001 fb54 	bl	d6784 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d50dc:	4a39      	ldr	r2, [pc, #228]	; (d51c4 <_Z8setupBLEv+0x1c0>)
   d50de:	4601      	mov	r1, r0
   d50e0:	a80d      	add	r0, sp, #52	; 0x34
   d50e2:	f001 ffa7 	bl	d7034 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d50e6:	a80d      	add	r0, sp, #52	; 0x34
   d50e8:	f001 fc17 	bl	d691a <_ZN8particle17BleCharacteristicD1Ev>
    
    mfgNameCharacteristic.setValue("Kestrel by NK");
   d50ec:	2200      	movs	r2, #0
   d50ee:	4936      	ldr	r1, [pc, #216]	; (d51c8 <_Z8setupBLEv+0x1c4>)
   d50f0:	482b      	ldr	r0, [pc, #172]	; (d51a0 <_Z8setupBLEv+0x19c>)
   d50f2:	f001 fae7 	bl	d66c4 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    deviceNameCharacteristic.setValue("FIRE - 2334359");
   d50f6:	2200      	movs	r2, #0
   d50f8:	4934      	ldr	r1, [pc, #208]	; (d51cc <_Z8setupBLEv+0x1c8>)
   d50fa:	482a      	ldr	r0, [pc, #168]	; (d51a4 <_Z8setupBLEv+0x1a0>)
   d50fc:	f001 fae2 	bl	d66c4 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    appearanceCharacteristic.setValue("");
   d5100:	2200      	movs	r2, #0
   d5102:	4933      	ldr	r1, [pc, #204]	; (d51d0 <_Z8setupBLEv+0x1cc>)
   d5104:	4828      	ldr	r0, [pc, #160]	; (d51a8 <_Z8setupBLEv+0x1a4>)
   d5106:	f001 fadd 	bl	d66c4 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    modelNumberCharacteristic.setValue("5500FWL");
   d510a:	2200      	movs	r2, #0
   d510c:	4931      	ldr	r1, [pc, #196]	; (d51d4 <_Z8setupBLEv+0x1d0>)
   d510e:	4823      	ldr	r0, [pc, #140]	; (d519c <_Z8setupBLEv+0x198>)
   d5110:	f001 fad8 	bl	d66c4 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    serialNumberCharacteristic.setValue("2334359");
   d5114:	2200      	movs	r2, #0
   d5116:	4930      	ldr	r1, [pc, #192]	; (d51d8 <_Z8setupBLEv+0x1d4>)
   d5118:	4824      	ldr	r0, [pc, #144]	; (d51ac <_Z8setupBLEv+0x1a8>)
   d511a:	f001 fad3 	bl	d66c4 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    hardwareVersionCharacteristic.setValue("Rev 11B");
   d511e:	2200      	movs	r2, #0
   d5120:	492e      	ldr	r1, [pc, #184]	; (d51dc <_Z8setupBLEv+0x1d8>)
   d5122:	4823      	ldr	r0, [pc, #140]	; (d51b0 <_Z8setupBLEv+0x1ac>)
   d5124:	f001 face 	bl	d66c4 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    firmwareVersionCharacteristic.setValue("1.21");
   d5128:	2200      	movs	r2, #0
   d512a:	492d      	ldr	r1, [pc, #180]	; (d51e0 <_Z8setupBLEv+0x1dc>)
   d512c:	4821      	ldr	r0, [pc, #132]	; (d51b4 <_Z8setupBLEv+0x1b0>)
   d512e:	f001 fac9 	bl	d66c4 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    softwareVersionCharacteristic.setValue("");
   d5132:	2200      	movs	r2, #0
   d5134:	4926      	ldr	r1, [pc, #152]	; (d51d0 <_Z8setupBLEv+0x1cc>)
   d5136:	4820      	ldr	r0, [pc, #128]	; (d51b8 <_Z8setupBLEv+0x1b4>)
   d5138:	f001 fac4 	bl	d66c4 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>

    BleAdvertisingData data;
   d513c:	a80d      	add	r0, sp, #52	; 0x34
   d513e:	f001 f9e5 	bl	d650c <_ZN8particle18BleAdvertisingDataC1Ev>
    data.appendLocalName("FIRE");  // don't change this
   d5142:	4928      	ldr	r1, [pc, #160]	; (d51e4 <_Z8setupBLEv+0x1e0>)
   d5144:	a80d      	add	r0, sp, #52	; 0x34
   d5146:	f001 f9fb 	bl	d6540 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    data.appendServiceUUID(kestrelServiceUuid);
   d514a:	4927      	ldr	r1, [pc, #156]	; (d51e8 <_Z8setupBLEv+0x1e4>)
   d514c:	a803      	add	r0, sp, #12
   d514e:	f001 f875 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d5152:	a903      	add	r1, sp, #12
   d5154:	a808      	add	r0, sp, #32
   d5156:	f001 f871 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d515a:	a808      	add	r0, sp, #32
   d515c:	f001 f8b8 	bl	d62d0 <_ZNK8particle7BleUuid4typeEv>
   d5160:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d5162:	a808      	add	r0, sp, #32
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d5164:	b944      	cbnz	r4, d5178 <_Z8setupBLEv+0x174>
            uint16_t uuid16 = tempUUID.shorted();
   d5166:	f001 f8d1 	bl	d630c <_ZNK8particle7BleUuid7shortedEv>
   d516a:	aa16      	add	r2, sp, #88	; 0x58
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d516c:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d516e:	f822 0d4e 	strh.w	r0, [r2, #-78]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d5172:	2103      	movs	r1, #3
   d5174:	9400      	str	r4, [sp, #0]
   d5176:	e006      	b.n	d5186 <_Z8setupBLEv+0x182>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d5178:	f001 f8cd 	bl	d6316 <_ZNK8particle7BleUuid8rawBytesEv>
   d517c:	2300      	movs	r3, #0
   d517e:	9300      	str	r3, [sp, #0]
   d5180:	4602      	mov	r2, r0
   d5182:	2310      	movs	r3, #16
   d5184:	2107      	movs	r1, #7
   d5186:	a80d      	add	r0, sp, #52	; 0x34
   d5188:	f001 f979 	bl	d647e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    // data.appendServiceUUID(batteryServiceUuid);  // won't pair with this added
    BLE.advertise(&data);
   d518c:	f001 fafa 	bl	d6784 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5190:	2200      	movs	r2, #0
   d5192:	a90d      	add	r1, sp, #52	; 0x34
   d5194:	f001 fb72 	bl	d687c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   d5198:	b016      	add	sp, #88	; 0x58
   d519a:	bd10      	pop	{r4, pc}
   d519c:	2003e3e8 	.word	0x2003e3e8
   d51a0:	2003e3f0 	.word	0x2003e3f0
   d51a4:	2003e498 	.word	0x2003e498
   d51a8:	2003e284 	.word	0x2003e284
   d51ac:	2003e4a0 	.word	0x2003e4a0
   d51b0:	2003e488 	.word	0x2003e488
   d51b4:	2003e39c 	.word	0x2003e39c
   d51b8:	2003e490 	.word	0x2003e490
   d51bc:	2003e354 	.word	0x2003e354
   d51c0:	2003e28c 	.word	0x2003e28c
   d51c4:	2003e294 	.word	0x2003e294
   d51c8:	000d9798 	.word	0x000d9798
   d51cc:	000d97a6 	.word	0x000d97a6
   d51d0:	000d9e17 	.word	0x000d9e17
   d51d4:	000d97b5 	.word	0x000d97b5
   d51d8:	000d97ad 	.word	0x000d97ad
   d51dc:	000d97bd 	.word	0x000d97bd
   d51e0:	000d97c5 	.word	0x000d97c5
   d51e4:	000d97ca 	.word	0x000d97ca
   d51e8:	2003e340 	.word	0x2003e340

000d51ec <_Z17setupMagnetometerv>:

void setupMagnetometer() {
   d51ec:	b513      	push	{r0, r1, r4, lr}
    Wire.begin();
   d51ee:	f002 ff29 	bl	d8044 <_Z19__fetch_global_Wirev>
   d51f2:	f002 f8bf 	bl	d7374 <_ZN7TwoWire5beginEv>
    // I2C
    // Arduino A4 = SDA
    // Arduino A5 = SCL
    // DRDY ("Data Ready"line connected to A3 (omit third parameter to used timed reads)
    // uint8_t status = mlx.begin(0, 0, A3);
    /* uint8_t status = */ mlx.begin(0, 0, -1, Wire);
   d51f6:	f002 ff25 	bl	d8044 <_Z19__fetch_global_Wirev>
   d51fa:	4c1f      	ldr	r4, [pc, #124]	; (d5278 <_Z17setupMagnetometerv+0x8c>)
   d51fc:	9000      	str	r0, [sp, #0]
   d51fe:	2200      	movs	r2, #0
   d5200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5204:	4611      	mov	r1, r2
   d5206:	4620      	mov	r0, r4
   d5208:	f7ff f99b 	bl	d4542 <_ZN8MLX903935beginEhhiR7TwoWire>

    mlx.writeRegister(MLX90393::GAIN_SEL_REG, 0);
   d520c:	2200      	movs	r2, #0
   d520e:	4611      	mov	r1, r2
   d5210:	4620      	mov	r0, r4
   d5212:	f7ff f8ae 	bl	d4372 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::HALLCONF_REG, 0);
   d5216:	2200      	movs	r2, #0
   d5218:	4611      	mov	r1, r2
   d521a:	4620      	mov	r0, r4
   d521c:	f7ff f8a9 	bl	d4372 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::TCMP_EN_REG, 0);
   d5220:	2200      	movs	r2, #0
   d5222:	2101      	movs	r1, #1
   d5224:	4620      	mov	r0, r4
   d5226:	f7ff f8a4 	bl	d4372 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::BURST_SEL_REG, 0);
   d522a:	2200      	movs	r2, #0
   d522c:	2101      	movs	r1, #1
   d522e:	4620      	mov	r0, r4
   d5230:	f7ff f89f 	bl	d4372 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::RES_XYZ_REG, 0);
   d5234:	2200      	movs	r2, #0
   d5236:	2102      	movs	r1, #2
   d5238:	4620      	mov	r0, r4
   d523a:	f7ff f89a 	bl	d4372 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::RES_XYZ_REG, 0);
   d523e:	2200      	movs	r2, #0
   d5240:	2102      	movs	r1, #2
   d5242:	4620      	mov	r0, r4
   d5244:	f7ff f895 	bl	d4372 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::DIG_FLT_REG, 7);
   d5248:	2207      	movs	r2, #7
   d524a:	2102      	movs	r1, #2
   d524c:	4620      	mov	r0, r4
   d524e:	f7ff f890 	bl	d4372 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::OSR_REG, 0);
   d5252:	2200      	movs	r2, #0
   d5254:	2102      	movs	r1, #2
   d5256:	4620      	mov	r0, r4
   d5258:	f7ff f88b 	bl	d4372 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::X_OFFSET_REG, 0);
   d525c:	2200      	movs	r2, #0
   d525e:	2104      	movs	r1, #4
   d5260:	4620      	mov	r0, r4
   d5262:	f7ff f886 	bl	d4372 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::Y_OFFSET_REG, 0);
   d5266:	2200      	movs	r2, #0
   d5268:	2105      	movs	r1, #5
   d526a:	4620      	mov	r0, r4
}
   d526c:	b002      	add	sp, #8
   d526e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mlx.writeRegister(MLX90393::RES_XYZ_REG, 0);
    mlx.writeRegister(MLX90393::RES_XYZ_REG, 0);
    mlx.writeRegister(MLX90393::DIG_FLT_REG, 7);
    mlx.writeRegister(MLX90393::OSR_REG, 0);
    mlx.writeRegister(MLX90393::X_OFFSET_REG, 0);
    mlx.writeRegister(MLX90393::Y_OFFSET_REG, 0);
   d5272:	f7ff b87e 	b.w	d4372 <_ZN8MLX9039313writeRegisterEht>
   d5276:	bf00      	nop
   d5278:	2003e3a4 	.word	0x2003e3a4

000d527c <_Z15setupHallSensorv>:
}

void setupHallSensor() {
   d527c:	b507      	push	{r0, r1, r2, lr}
    void hallSensorInterrupt();
    byte hallSensorPin = D2;
    pinMode(hallSensorPin, INPUT);
   d527e:	2100      	movs	r1, #0
   d5280:	2002      	movs	r0, #2
   d5282:	f002 fe83 	bl	d7f8c <pinMode>
    attachInterrupt(hallSensorPin, hallSensorInterrupt, FALLING);
   d5286:	2202      	movs	r2, #2
   d5288:	2300      	movs	r3, #0
   d528a:	9300      	str	r3, [sp, #0]
   d528c:	4904      	ldr	r1, [pc, #16]	; (d52a0 <_Z15setupHallSensorv+0x24>)
   d528e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5292:	4610      	mov	r0, r2
   d5294:	f002 f8b6 	bl	d7404 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d5298:	b003      	add	sp, #12
   d529a:	f85d fb04 	ldr.w	pc, [sp], #4
   d529e:	bf00      	nop
   d52a0:	000d56ad 	.word	0x000d56ad

000d52a4 <_Z11setupBME280v>:

void setupBME280() {
    bme280.settings.commInterface = I2C_MODE;
   d52a4:	4807      	ldr	r0, [pc, #28]	; (d52c4 <_Z11setupBME280v+0x20>)
   d52a6:	2300      	movs	r3, #0
   d52a8:	7003      	strb	r3, [r0, #0]
    //  3, 250ms
    //  4, 500ms
    //  5, 1000ms
    //  6, 10ms
    //  7, 20ms
    bme280.settings.tStandby = 0;
   d52aa:	7103      	strb	r3, [r0, #4]
    //  0, filter off
    //  1, coefficients = 2
    //  2, coefficients = 4
    //  3, coefficients = 8
    //  4, coefficients = 16
    bme280.settings.filter = 0;
   d52ac:	7143      	strb	r3, [r0, #5]

    //tempOverSample can be:
    //  0, skipped
    //  1 through 5, oversampling *1, *2, *4, *8, *16 respectively
    bme280.settings.tempOverSample = 1;
   d52ae:	2301      	movs	r3, #1
    attachInterrupt(hallSensorPin, hallSensorInterrupt, FALLING);
}

void setupBME280() {
    bme280.settings.commInterface = I2C_MODE;
    bme280.settings.I2CAddress = 0x77;
   d52b0:	2277      	movs	r2, #119	; 0x77
    bme280.settings.filter = 0;

    //tempOverSample can be:
    //  0, skipped
    //  1 through 5, oversampling *1, *2, *4, *8, *16 respectively
    bme280.settings.tempOverSample = 1;
   d52b2:	7183      	strb	r3, [r0, #6]

    //pressOverSample can be:
    //  0, skipped
    //  1 through 5, oversampling *1, *2, *4, *8, *16 respectively
    bme280.settings.pressOverSample = 1;
   d52b4:	71c3      	strb	r3, [r0, #7]

    //humidOverSample can be:
    //  0, skipped
    //  1 through 5, oversampling *1, *2, *4, *8, *16 respectively
    bme280.settings.humidOverSample = 1;
   d52b6:	7203      	strb	r3, [r0, #8]

    //runMode can be:
    //  0, Sleep mode
    //  1 or 2, Forced mode
    //  3, Normal mode
    bme280.settings.runMode = 3;
   d52b8:	2303      	movs	r3, #3
    attachInterrupt(hallSensorPin, hallSensorInterrupt, FALLING);
}

void setupBME280() {
    bme280.settings.commInterface = I2C_MODE;
    bme280.settings.I2CAddress = 0x77;
   d52ba:	7042      	strb	r2, [r0, #1]

    //runMode can be:
    //  0, Sleep mode
    //  1 or 2, Forced mode
    //  3, Normal mode
    bme280.settings.runMode = 3;
   d52bc:	70c3      	strb	r3, [r0, #3]
    
    bme280.begin();
   d52be:	f7ff bc97 	b.w	d4bf0 <_ZN6BME2805beginEv>
   d52c2:	bf00      	nop
   d52c4:	2003e2e8 	.word	0x2003e2e8

000d52c8 <setup>:
        Serial.write(data[ii]);
    }
}

// --------------------------------------------------------------------------- setup ------------------------------------------------------------------
void setup() {
   d52c8:	b508      	push	{r3, lr}
    Serial.begin();
   d52ca:	f002 fd3d 	bl	d7d48 <_Z16_fetch_usbserialv>
   d52ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d52d2:	f002 fd2d 	bl	d7d30 <_ZN9USBSerial5beginEl>
    setupLCD();
   d52d6:	f7ff fe4b 	bl	d4f70 <_Z8setupLCDv>
    setupBLE();
   d52da:	f7ff fe93 	bl	d5004 <_Z8setupBLEv>
    setupMagnetometer();
   d52de:	f7ff ff85 	bl	d51ec <_Z17setupMagnetometerv>
    setupHallSensor();
   d52e2:	f7ff ffcb 	bl	d527c <_Z15setupHallSensorv>
    setupBME280();
}
   d52e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.begin();
    setupLCD();
    setupBLE();
    setupMagnetometer();
    setupHallSensor();
    setupBME280();
   d52ea:	f7ff bfdb 	b.w	d52a4 <_Z11setupBME280v>

000d52ee <_Z10debugPrintPKc>:
    Serial1.write('|'); //Put LCD into setting mode
    Serial1.write('-'); //Clear
    Serial1.write(msg);
}

void debugPrint(const char* message) {
   d52ee:	b510      	push	{r4, lr}
   d52f0:	4604      	mov	r4, r0
    Serial1.write('|'); //Put LCD into setting mode
   d52f2:	f002 fc87 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d52f6:	217c      	movs	r1, #124	; 0x7c
   d52f8:	f7ff fdb2 	bl	d4e60 <_ZN11USARTSerial5writeEi>
    Serial1.write('-'); //Clear
   d52fc:	f002 fc82 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d5300:	212d      	movs	r1, #45	; 0x2d
   d5302:	f7ff fdad 	bl	d4e60 <_ZN11USARTSerial5writeEi>
    Serial1.write(message);
   d5306:	f002 fc7d 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d530a:	4621      	mov	r1, r4
   d530c:	f7ff fd98 	bl	d4e40 <_ZN5Print5writeEPKc>
   d5310:	bd10      	pop	{r4, pc}
   d5312:	0000      	movs	r0, r0
   d5314:	0000      	movs	r0, r0
	...

000d5318 <_Z11readCompassv>:
}

float readCompass() {
   d5318:	b507      	push	{r0, r1, r2, lr}
    mlx.sendCommand(MLX90393::CMD_START_MEASUREMENT | MLX90393::X_FLAG | MLX90393::Y_FLAG);
   d531a:	2136      	movs	r1, #54	; 0x36
   d531c:	482a      	ldr	r0, [pc, #168]	; (d53c8 <_Z11readCompassv+0xb0>)
   d531e:	f7fe ff17 	bl	d4150 <_ZN8MLX9039311sendCommandEh>
    delay(500);
   d5322:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5326:	f000 fef1 	bl	d610c <delay>
    MLX90393::txyzRaw data;
    const uint8_t status = mlx.readMeasurement(MLX90393::X_FLAG | MLX90393::Y_FLAG, data);
   d532a:	466a      	mov	r2, sp
   d532c:	2106      	movs	r1, #6
   d532e:	4826      	ldr	r0, [pc, #152]	; (d53c8 <_Z11readCompassv+0xb0>)
   d5330:	f7fe ff31 	bl	d4196 <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE>
    if (status == MLX90393::STATUS_ERROR) {
   d5334:	28ff      	cmp	r0, #255	; 0xff

float readCompass() {
    mlx.sendCommand(MLX90393::CMD_START_MEASUREMENT | MLX90393::X_FLAG | MLX90393::Y_FLAG);
    delay(500);
    MLX90393::txyzRaw data;
    const uint8_t status = mlx.readMeasurement(MLX90393::X_FLAG | MLX90393::Y_FLAG, data);
   d5336:	4602      	mov	r2, r0
    if (status == MLX90393::STATUS_ERROR) {
   d5338:	d10a      	bne.n	d5350 <_Z11readCompassv+0x38>
        sprintf(buffer1, "Status = %0X", status);
   d533a:	4924      	ldr	r1, [pc, #144]	; (d53cc <_Z11readCompassv+0xb4>)
   d533c:	4824      	ldr	r0, [pc, #144]	; (d53d0 <_Z11readCompassv+0xb8>)
   d533e:	f000 fedd 	bl	d60fc <sprintf>
        debugPrint(buffer1);
   d5342:	4823      	ldr	r0, [pc, #140]	; (d53d0 <_Z11readCompassv+0xb8>)
   d5344:	f7ff ffd3 	bl	d52ee <_Z10debugPrintPKc>
        delay(1000);
   d5348:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d534c:	f000 fede 	bl	d610c <delay>
    }

    float heading = atan2f(float(int16_t(-data.y)), float(int16_t(data.x)));
   d5350:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
   d5354:	ee00 3a90 	vmov	s1, r3
   d5358:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d535c:	425b      	negs	r3, r3
   d535e:	b21b      	sxth	r3, r3
   d5360:	ee00 3a10 	vmov	s0, r3
   d5364:	eef8 0ae0 	vcvt.f32.s32	s1, s1
   d5368:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d536c:	f003 f852 	bl	d8414 <atan2f>
    if (heading < 0) {
   d5370:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d5374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5378:	d50c      	bpl.n	d5394 <_Z11readCompassv+0x7c>
        heading += 2*3.14159;
   d537a:	ee10 0a10 	vmov	r0, s0
   d537e:	f003 fb49 	bl	d8a14 <__aeabi_f2d>
   d5382:	a30d      	add	r3, pc, #52	; (adr r3, d53b8 <_Z11readCompassv+0xa0>)
   d5384:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5388:	f003 f9e6 	bl	d8758 <__adddf3>
   d538c:	f003 fe30 	bl	d8ff0 <__aeabi_d2f>
   d5390:	ee00 0a10 	vmov	s0, r0
    }
    return heading * (360.0/(2*3.14159));
   d5394:	ee10 0a10 	vmov	r0, s0
   d5398:	f003 fb3c 	bl	d8a14 <__aeabi_f2d>
   d539c:	a308      	add	r3, pc, #32	; (adr r3, d53c0 <_Z11readCompassv+0xa8>)
   d539e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d53a2:	f003 fb8b 	bl	d8abc <__aeabi_dmul>
   d53a6:	f003 fe23 	bl	d8ff0 <__aeabi_d2f>
}
   d53aa:	ee00 0a10 	vmov	s0, r0
   d53ae:	b003      	add	sp, #12
   d53b0:	f85d fb04 	ldr.w	pc, [sp], #4
   d53b4:	f3af 8000 	nop.w
   d53b8:	f01b866e 	.word	0xf01b866e
   d53bc:	401921f9 	.word	0x401921f9
   d53c0:	b05cc3e8 	.word	0xb05cc3e8
   d53c4:	404ca5dd 	.word	0x404ca5dd
   d53c8:	2003e3a4 	.word	0x2003e3a4
   d53cc:	000d97cf 	.word	0x000d97cf
   d53d0:	2003e3fc 	.word	0x2003e3fc
   d53d4:	00000000 	.word	0x00000000

000d53d8 <loop>:
    setupHallSensor();
    setupBME280();
}

// ---------------------------------------------------------------------------- loop -------------------------------------------------------------------
void loop() {
   d53d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d53dc:	ed2d 8b04 	vpush	{d8-d9}
    float windSpeedKph = 0.0;
    if ((micros() - currentMicroseconds) < (1000.0 * 1000.0 * 20.0)) {
   d53e0:	4da1      	ldr	r5, [pc, #644]	; (d5668 <loop+0x290>)
   d53e2:	4ea2      	ldr	r6, [pc, #648]	; (d566c <loop+0x294>)
    setupHallSensor();
    setupBME280();
}

// ---------------------------------------------------------------------------- loop -------------------------------------------------------------------
void loop() {
   d53e4:	b095      	sub	sp, #84	; 0x54
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d53e6:	f000 fc4d 	bl	d5c84 <HAL_Timer_Get_Micro_Seconds>
    float windSpeedKph = 0.0;
    if ((micros() - currentMicroseconds) < (1000.0 * 1000.0 * 20.0)) {
   d53ea:	682c      	ldr	r4, [r5, #0]
   d53ec:	1b00      	subs	r0, r0, r4
   d53ee:	f003 faef 	bl	d89d0 <__aeabi_ui2d>
   d53f2:	a393      	add	r3, pc, #588	; (adr r3, d5640 <loop+0x268>)
   d53f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d53f8:	f003 fdd2 	bl	d8fa0 <__aeabi_dcmplt>
   d53fc:	b1f8      	cbz	r0, d543e <loop+0x66>
        float periodS = float(currentMicroseconds - previousMicroseconds) / (1000.0 * 1000.0);
   d53fe:	6833      	ldr	r3, [r6, #0]
   d5400:	ed9f 7a9b 	vldr	s14, [pc, #620]	; d5670 <loop+0x298>
   d5404:	1ae4      	subs	r4, r4, r3
   d5406:	ee07 4a90 	vmov	s15, r4
   d540a:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d540e:	eec7 8a87 	vdiv.f32	s17, s15, s14
        if (periodS < 20.0 && periodS > 0.1) {
   d5412:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
   d5416:	eef4 8ae7 	vcmpe.f32	s17, s15
   d541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d541e:	d512      	bpl.n	d5446 <loop+0x6e>
   d5420:	ee18 0a90 	vmov	r0, s17
   d5424:	f003 faf6 	bl	d8a14 <__aeabi_f2d>
   d5428:	a387      	add	r3, pc, #540	; (adr r3, d5648 <loop+0x270>)
   d542a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d542e:	f003 fdd5 	bl	d8fdc <__aeabi_dcmpgt>
   d5432:	b140      	cbz	r0, d5446 <loop+0x6e>
            windSpeedKph = 29.0 / periodS;
   d5434:	eef3 7a0d 	vmov.f32	s15, #61	; 0x41e80000  29.0
   d5438:	ee87 8aa8 	vdiv.f32	s16, s15, s17
   d543c:	e005      	b.n	d544a <loop+0x72>
   d543e:	f000 fc21 	bl	d5c84 <HAL_Timer_Get_Micro_Seconds>
        }
    } else {
        previousMicroseconds = micros();
   d5442:	6030      	str	r0, [r6, #0]
        currentMicroseconds = previousMicroseconds;
   d5444:	6028      	str	r0, [r5, #0]
    setupBME280();
}

// ---------------------------------------------------------------------------- loop -------------------------------------------------------------------
void loop() {
    float windSpeedKph = 0.0;
   d5446:	ed9f 8a8b 	vldr	s16, [pc, #556]	; d5674 <loop+0x29c>
        }
    } else {
        previousMicroseconds = micros();
        currentMicroseconds = previousMicroseconds;
    }
    float heading = fminf(359, readCompass());  // contains a delay
   d544a:	f7ff ff65 	bl	d5318 <_Z11readCompassv>
   d544e:	eef0 0a40 	vmov.f32	s1, s0
   d5452:	ed9f 0a89 	vldr	s0, [pc, #548]	; d5678 <loop+0x2a0>
   d5456:	f002 ffa3 	bl	d83a0 <fminf>

    float lipoHigh = 4.2;
    float lipoLow = 3.0;
    // float battVoltage = analogRead(A2) * 1.168 / 1024;
    float battVoltage = analogRead(BATT) * 0.001162;
   d545a:	2021      	movs	r0, #33	; 0x21
        }
    } else {
        previousMicroseconds = micros();
        currentMicroseconds = previousMicroseconds;
    }
    float heading = fminf(359, readCompass());  // contains a delay
   d545c:	ee10 5a10 	vmov	r5, s0

    float lipoHigh = 4.2;
    float lipoLow = 3.0;
    // float battVoltage = analogRead(A2) * 1.168 / 1024;
    float battVoltage = analogRead(BATT) * 0.001162;
   d5460:	f002 fdbe 	bl	d7fe0 <analogRead>
    float battPercent = fmaxf(0, 100.0 * (battVoltage - lipoLow) / (lipoHigh - lipoLow));
   d5464:	f003 fac4 	bl	d89f0 <__aeabi_i2d>
   d5468:	a379      	add	r3, pc, #484	; (adr r3, d5650 <loop+0x278>)
   d546a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d546e:	f003 fb25 	bl	d8abc <__aeabi_dmul>
   d5472:	f003 fdbd 	bl	d8ff0 <__aeabi_d2f>
   d5476:	ee07 0a10 	vmov	s14, r0
   d547a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   d547e:	ee77 7a67 	vsub.f32	s15, s14, s15
   d5482:	ee17 0a90 	vmov	r0, s15
   d5486:	f003 fac5 	bl	d8a14 <__aeabi_f2d>
   d548a:	2200      	movs	r2, #0
   d548c:	4b7b      	ldr	r3, [pc, #492]	; (d567c <loop+0x2a4>)
   d548e:	f003 fb15 	bl	d8abc <__aeabi_dmul>
   d5492:	2200      	movs	r2, #0
   d5494:	4b7a      	ldr	r3, [pc, #488]	; (d5680 <loop+0x2a8>)
   d5496:	f003 fc3b 	bl	d8d10 <__aeabi_ddiv>
   d549a:	f003 fda9 	bl	d8ff0 <__aeabi_d2f>
   d549e:	ed9f 0a75 	vldr	s0, [pc, #468]	; d5674 <loop+0x29c>
   d54a2:	ee00 0a90 	vmov	s1, r0
   d54a6:	f002 ff5d 	bl	d8364 <fmaxf>
    uint8_t battPctByte = static_cast<uint8_t>(battPercent);
   d54aa:	eefc 7ac0 	vcvt.u32.f32	s15, s0

    delay(500);
   d54ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    float lipoHigh = 4.2;
    float lipoLow = 3.0;
    // float battVoltage = analogRead(A2) * 1.168 / 1024;
    float battVoltage = analogRead(BATT) * 0.001162;
    float battPercent = fmaxf(0, 100.0 * (battVoltage - lipoLow) / (lipoHigh - lipoLow));
    uint8_t battPctByte = static_cast<uint8_t>(battPercent);
   d54b2:	ee17 3a90 	vmov	r3, s15

    float lipoHigh = 4.2;
    float lipoLow = 3.0;
    // float battVoltage = analogRead(A2) * 1.168 / 1024;
    float battVoltage = analogRead(BATT) * 0.001162;
    float battPercent = fmaxf(0, 100.0 * (battVoltage - lipoLow) / (lipoHigh - lipoLow));
   d54b6:	eef0 8a40 	vmov.f32	s17, s0
    uint8_t battPctByte = static_cast<uint8_t>(battPercent);
   d54ba:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37

    delay(500);
   d54be:	f000 fe25 	bl	d610c <delay>
    if (BLE.connected()) {   
   d54c2:	f001 f95f 	bl	d6784 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d54c6:	f001 f9f6 	bl	d68b6 <_ZNK8particle14BleLocalDevice9connectedEv>
   d54ca:	b388      	cbz	r0, d5530 <loop+0x158>
        sample_t sample;
        sample.windSpeedMps =       convertKphToMps(windSpeedKph);
   d54cc:	ee18 0a10 	vmov	r0, s16
   d54d0:	f003 faa0 	bl	d8a14 <__aeabi_f2d>
   d54d4:	a360      	add	r3, pc, #384	; (adr r3, d5658 <loop+0x280>)
   d54d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d54da:	f003 faef 	bl	d8abc <__aeabi_dmul>
   d54de:	f003 fd87 	bl	d8ff0 <__aeabi_d2f>
   d54e2:	900e      	str	r0, [sp, #56]	; 0x38
        sample.temperatureC =       bme280.readTempC();
   d54e4:	4867      	ldr	r0, [pc, #412]	; (d5684 <loop+0x2ac>)
   d54e6:	f7ff fa15 	bl	d4914 <_ZN6BME2809readTempCEv>
        sample.humidity =           bme280.readFloatHumidity();
   d54ea:	4866      	ldr	r0, [pc, #408]	; (d5684 <loop+0x2ac>)

    delay(500);
    if (BLE.connected()) {   
        sample_t sample;
        sample.windSpeedMps =       convertKphToMps(windSpeedKph);
        sample.temperatureC =       bme280.readTempC();
   d54ec:	ed8d 0a10 	vstr	s0, [sp, #64]	; 0x40
        sample.humidity =           bme280.readFloatHumidity();
   d54f0:	f7ff f9ca 	bl	d4888 <_ZN6BME28017readFloatHumidityEv>
        sample.pressureBar =        bme280.readFloatPressure()/100000.0f;
   d54f4:	4863      	ldr	r0, [pc, #396]	; (d5684 <loop+0x2ac>)
    delay(500);
    if (BLE.connected()) {   
        sample_t sample;
        sample.windSpeedMps =       convertKphToMps(windSpeedKph);
        sample.temperatureC =       bme280.readTempC();
        sample.humidity =           bme280.readFloatHumidity();
   d54f6:	ed8d 0a11 	vstr	s0, [sp, #68]	; 0x44
        sample.pressureBar =        bme280.readFloatPressure()/100000.0f;
   d54fa:	f7ff f8eb 	bl	d46d4 <_ZN6BME28017readFloatPressureEv>
   d54fe:	eddf 7a62 	vldr	s15, [pc, #392]	; d5688 <loop+0x2b0>
        sample.windDirectionDeg =   heading;
        sample.altitudeM =          1.483;  // Pawnee Sportsmen's Center, Briggsdale, CO = 4865 ft
   d5502:	4b62      	ldr	r3, [pc, #392]	; (d568c <loop+0x2b4>)
   d5504:	9313      	str	r3, [sp, #76]	; 0x4c
    if (BLE.connected()) {   
        sample_t sample;
        sample.windSpeedMps =       convertKphToMps(windSpeedKph);
        sample.temperatureC =       bme280.readTempC();
        sample.humidity =           bme280.readFloatHumidity();
        sample.pressureBar =        bme280.readFloatPressure()/100000.0f;
   d5506:	ee80 0a27 	vdiv.f32	s0, s0, s15
        sample.windDirectionDeg =   heading;
        sample.altitudeM =          1.483;  // Pawnee Sportsmen's Center, Briggsdale, CO = 4865 ft
        setBluetoothData(sample);
   d550a:	ab14      	add	r3, sp, #80	; 0x50
        sample_t sample;
        sample.windSpeedMps =       convertKphToMps(windSpeedKph);
        sample.temperatureC =       bme280.readTempC();
        sample.humidity =           bme280.readFloatHumidity();
        sample.pressureBar =        bme280.readFloatPressure()/100000.0f;
        sample.windDirectionDeg =   heading;
   d550c:	950f      	str	r5, [sp, #60]	; 0x3c
    if (BLE.connected()) {   
        sample_t sample;
        sample.windSpeedMps =       convertKphToMps(windSpeedKph);
        sample.temperatureC =       bme280.readTempC();
        sample.humidity =           bme280.readFloatHumidity();
        sample.pressureBar =        bme280.readFloatPressure()/100000.0f;
   d550e:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
        sample.windDirectionDeg =   heading;
        sample.altitudeM =          1.483;  // Pawnee Sportsmen's Center, Briggsdale, CO = 4865 ft
        setBluetoothData(sample);
   d5512:	e913 0003 	ldmdb	r3, {r0, r1}
   d5516:	e88d 0003 	stmia.w	sp, {r0, r1}
   d551a:	ab0e      	add	r3, sp, #56	; 0x38
   d551c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   d551e:	f7ff fcd3 	bl	d4ec8 <_Z16setBluetoothData8sample_t>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d5522:	2300      	movs	r3, #0
   d5524:	2201      	movs	r2, #1
   d5526:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   d552a:	4859      	ldr	r0, [pc, #356]	; (d5690 <loop+0x2b8>)
   d552c:	f001 f868 	bl	d6600 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        batteryLevelCharacteristic.setValue(battPctByte);
    }

    uint8_t degreeSymbol = 0b11011111;

    switch (screenNumber) {
   d5530:	4c58      	ldr	r4, [pc, #352]	; (d5694 <loop+0x2bc>)
   d5532:	6823      	ldr	r3, [r4, #0]
   d5534:	2b03      	cmp	r3, #3
   d5536:	d873      	bhi.n	d5620 <loop+0x248>
   d5538:	e8df f003 	tbb	[pc, r3]
   d553c:	39390202 	.word	0x39390202
        case 0:
        case 1:
            sprintf(buffer1, "%4.1f MPH  %3.0f%c  %3.0f%cF  %2.0f%%", convertKphToMph(windSpeedKph), heading, degreeSymbol, bme280.readTempF(), degreeSymbol, bme280.readFloatHumidity());
   d5540:	4850      	ldr	r0, [pc, #320]	; (d5684 <loop+0x2ac>)
   d5542:	f7ff fa21 	bl	d4988 <_ZN6BME2809readTempFEv>
   d5546:	484f      	ldr	r0, [pc, #316]	; (d5684 <loop+0x2ac>)
   d5548:	ee10 7a10 	vmov	r7, s0
   d554c:	f7ff f99c 	bl	d4888 <_ZN6BME28017readFloatHumidityEv>
   d5550:	ee18 0a10 	vmov	r0, s16
   d5554:	ed8d 0a0b 	vstr	s0, [sp, #44]	; 0x2c
   d5558:	f003 fa5c 	bl	d8a14 <__aeabi_f2d>
   d555c:	a340      	add	r3, pc, #256	; (adr r3, d5660 <loop+0x288>)
   d555e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5562:	f003 faab 	bl	d8abc <__aeabi_dmul>
   d5566:	f003 fd43 	bl	d8ff0 <__aeabi_d2f>
   d556a:	f003 fa53 	bl	d8a14 <__aeabi_f2d>
   d556e:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   d5572:	4680      	mov	r8, r0
   d5574:	ee10 0a10 	vmov	r0, s0
   d5578:	4689      	mov	r9, r1
   d557a:	f003 fa4b 	bl	d8a14 <__aeabi_f2d>
   d557e:	26df      	movs	r6, #223	; 0xdf
   d5580:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d5584:	4638      	mov	r0, r7
   d5586:	9606      	str	r6, [sp, #24]
   d5588:	f003 fa44 	bl	d8a14 <__aeabi_f2d>
   d558c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d5590:	4628      	mov	r0, r5
   d5592:	9602      	str	r6, [sp, #8]
   d5594:	f003 fa3e 	bl	d8a14 <__aeabi_f2d>
   d5598:	464b      	mov	r3, r9
   d559a:	e9cd 0100 	strd	r0, r1, [sp]
   d559e:	4642      	mov	r2, r8
   d55a0:	493d      	ldr	r1, [pc, #244]	; (d5698 <loop+0x2c0>)
   d55a2:	483e      	ldr	r0, [pc, #248]	; (d569c <loop+0x2c4>)
   d55a4:	f000 fdaa 	bl	d60fc <sprintf>
            screenNumber++;
   d55a8:	6823      	ldr	r3, [r4, #0]
   d55aa:	3301      	adds	r3, #1
   d55ac:	e03d      	b.n	d562a <loop+0x252>
            break;
        case 2:
        case 3:
            sprintf(buffer1, "%4.1f MPH  %3.0f%c  %5.1fmB  Bat%3.0f%%", convertKphToMph(windSpeedKph), heading, degreeSymbol, bme280.readFloatPressure()/100.0f, battPercent);
   d55ae:	4835      	ldr	r0, [pc, #212]	; (d5684 <loop+0x2ac>)
   d55b0:	f7ff f890 	bl	d46d4 <_ZN6BME28017readFloatPressureEv>
   d55b4:	ee18 0a10 	vmov	r0, s16
   d55b8:	eeb0 9a40 	vmov.f32	s18, s0
   d55bc:	f003 fa2a 	bl	d8a14 <__aeabi_f2d>
   d55c0:	a327      	add	r3, pc, #156	; (adr r3, d5660 <loop+0x288>)
   d55c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d55c6:	f003 fa79 	bl	d8abc <__aeabi_dmul>
   d55ca:	f003 fd11 	bl	d8ff0 <__aeabi_d2f>
   d55ce:	f003 fa21 	bl	d8a14 <__aeabi_f2d>
   d55d2:	4606      	mov	r6, r0
   d55d4:	ee18 0a90 	vmov	r0, s17
   d55d8:	460f      	mov	r7, r1
   d55da:	f003 fa1b 	bl	d8a14 <__aeabi_f2d>
   d55de:	eddf 7a30 	vldr	s15, [pc, #192]	; d56a0 <loop+0x2c8>
   d55e2:	ee89 7a27 	vdiv.f32	s14, s18, s15
   d55e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d55ea:	ee17 0a10 	vmov	r0, s14
   d55ee:	f003 fa11 	bl	d8a14 <__aeabi_f2d>
   d55f2:	23df      	movs	r3, #223	; 0xdf
   d55f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d55f8:	4628      	mov	r0, r5
   d55fa:	9302      	str	r3, [sp, #8]
   d55fc:	f003 fa0a 	bl	d8a14 <__aeabi_f2d>
   d5600:	4632      	mov	r2, r6
   d5602:	e9cd 0100 	strd	r0, r1, [sp]
   d5606:	463b      	mov	r3, r7
   d5608:	4926      	ldr	r1, [pc, #152]	; (d56a4 <loop+0x2cc>)
   d560a:	4824      	ldr	r0, [pc, #144]	; (d569c <loop+0x2c4>)
   d560c:	f000 fd76 	bl	d60fc <sprintf>
            screenNumber++;
   d5610:	6823      	ldr	r3, [r4, #0]
   d5612:	4a20      	ldr	r2, [pc, #128]	; (d5694 <loop+0x2bc>)
   d5614:	3301      	adds	r3, #1
            if (screenNumber == 4) {
   d5616:	2b04      	cmp	r3, #4
                screenNumber = 0;
   d5618:	bf08      	it	eq
   d561a:	2300      	moveq	r3, #0
   d561c:	6013      	str	r3, [r2, #0]
   d561e:	e005      	b.n	d562c <loop+0x254>
            }
            break;
        default:
            sprintf(buffer1, "Wrong screen number");
   d5620:	4921      	ldr	r1, [pc, #132]	; (d56a8 <loop+0x2d0>)
   d5622:	481e      	ldr	r0, [pc, #120]	; (d569c <loop+0x2c4>)
   d5624:	f004 f87a 	bl	d971c <strcpy>
            screenNumber = 0;
   d5628:	2300      	movs	r3, #0
   d562a:	6023      	str	r3, [r4, #0]
    }
    rewriteLcd(buffer1);
   d562c:	481b      	ldr	r0, [pc, #108]	; (d569c <loop+0x2c4>)
   d562e:	f7ff fe5e 	bl	d52ee <_Z10debugPrintPKc>
}
   d5632:	b015      	add	sp, #84	; 0x54
   d5634:	ecbd 8b04 	vpop	{d8-d9}
   d5638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d563c:	f3af 8000 	nop.w
   d5640:	00000000 	.word	0x00000000
   d5644:	417312d0 	.word	0x417312d0
   d5648:	9999999a 	.word	0x9999999a
   d564c:	3fb99999 	.word	0x3fb99999
   d5650:	ffde7211 	.word	0xffde7211
   d5654:	3f5309c7 	.word	0x3f5309c7
   d5658:	a6b50b0f 	.word	0xa6b50b0f
   d565c:	3fd1c779 	.word	0x3fd1c779
   d5660:	40b78034 	.word	0x40b78034
   d5664:	3fe3e282 	.word	0x3fe3e282
   d5668:	2003e29c 	.word	0x2003e29c
   d566c:	2003e398 	.word	0x2003e398
   d5670:	49742400 	.word	0x49742400
   d5674:	00000000 	.word	0x00000000
   d5678:	43b38000 	.word	0x43b38000
   d567c:	40590000 	.word	0x40590000
   d5680:	3ff33333 	.word	0x3ff33333
   d5684:	2003e2e8 	.word	0x2003e2e8
   d5688:	47c35000 	.word	0x47c35000
   d568c:	3fbdd2f2 	.word	0x3fbdd2f2
   d5690:	2003e294 	.word	0x2003e294
   d5694:	2003e3f8 	.word	0x2003e3f8
   d5698:	000d97dc 	.word	0x000d97dc
   d569c:	2003e3fc 	.word	0x2003e3fc
   d56a0:	42c80000 	.word	0x42c80000
   d56a4:	000d9802 	.word	0x000d9802
   d56a8:	000d982a 	.word	0x000d982a

000d56ac <_Z19hallSensorInterruptv>:
        heading += 2*3.14159;
    }
    return heading * (360.0/(2*3.14159));
}

void hallSensorInterrupt() {
   d56ac:	b538      	push	{r3, r4, r5, lr}
    if (previousMicroseconds <=0) {
   d56ae:	4d07      	ldr	r5, [pc, #28]	; (d56cc <_Z19hallSensorInterruptv+0x20>)
   d56b0:	4c07      	ldr	r4, [pc, #28]	; (d56d0 <_Z19hallSensorInterruptv+0x24>)
   d56b2:	682b      	ldr	r3, [r5, #0]
   d56b4:	b91b      	cbnz	r3, d56be <_Z19hallSensorInterruptv+0x12>
   d56b6:	f000 fae5 	bl	d5c84 <HAL_Timer_Get_Micro_Seconds>
        previousMicroseconds = micros();
   d56ba:	6028      	str	r0, [r5, #0]
   d56bc:	e003      	b.n	d56c6 <_Z19hallSensorInterruptv+0x1a>
        currentMicroseconds = previousMicroseconds;
        return;
    }
    previousMicroseconds = currentMicroseconds;
   d56be:	6823      	ldr	r3, [r4, #0]
   d56c0:	602b      	str	r3, [r5, #0]
   d56c2:	f000 fadf 	bl	d5c84 <HAL_Timer_Get_Micro_Seconds>
    currentMicroseconds = micros();   
   d56c6:	6020      	str	r0, [r4, #0]
   d56c8:	bd38      	pop	{r3, r4, r5, pc}
   d56ca:	bf00      	nop
   d56cc:	2003e398 	.word	0x2003e398
   d56d0:	2003e29c 	.word	0x2003e29c

000d56d4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d56d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d56d6:	460e      	mov	r6, r1
   d56d8:	b091      	sub	sp, #68	; 0x44

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d56da:	2100      	movs	r1, #0
   d56dc:	4604      	mov	r4, r0
   d56de:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d56e0:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d56e2:	ad0b      	add	r5, sp, #44	; 0x2c
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d56e4:	4619      	mov	r1, r3
   d56e6:	a806      	add	r0, sp, #24
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d56e8:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d56ea:	f000 fda7 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d56ee:	9916      	ldr	r1, [sp, #88]	; 0x58
   d56f0:	4628      	mov	r0, r5
   d56f2:	f000 fda3 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d56f6:	aa10      	add	r2, sp, #64	; 0x40
   d56f8:	783b      	ldrb	r3, [r7, #0]
   d56fa:	f802 3d2c 	strb.w	r3, [r2, #-44]!
        construct(desc, properties, cUuid, sUuid, callback, context);
   d56fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d5700:	9302      	str	r3, [sp, #8]
   d5702:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d5704:	9301      	str	r3, [sp, #4]
   d5706:	4620      	mov	r0, r4
   d5708:	9500      	str	r5, [sp, #0]
   d570a:	ab06      	add	r3, sp, #24
   d570c:	4631      	mov	r1, r6
   d570e:	f001 fbdd 	bl	d6ecc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d5712:	4620      	mov	r0, r4
   d5714:	b011      	add	sp, #68	; 0x44
   d5716:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5718 <_Z41__static_initialization_and_destruction_0ii.constprop.2>:
    return kph * 0.2778;
}

float convertMbarToInHg(float mBar) {
    return mBar * 0.02953;
}
   d5718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d571c:	4dbe      	ldr	r5, [pc, #760]	; (d5a18 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x300>)
#include "Particle.h"
#include "MLX90393.h"
#include <math.h>
#include "SparkFunBME280.h"

SYSTEM_MODE(MANUAL);
   d571e:	4ebf      	ldr	r6, [pc, #764]	; (d5a1c <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x304>)

// GATT Characteristics https://www.bluetooth.com/specifications/gatt/characteristics/
// Some guy's Kestrel notes:  https://bad-radio.solutions/notes_ble
// A virus report which sheds light From https://www.hybrid-analysis.com/sample/ed3c0e341b224014088381590c1f817acdabcf26015cff7ae63f1c454a0f3bd5?environmentId=200

const BleUuid kestrelServiceUuid(               "03290000-EAB4-DEA1-B24E-44EC023874DB");
   d5720:	f8df b3a0 	ldr.w	fp, [pc, #928]	; d5ac4 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3ac>
const BleUuid deviceInfoServiceUuid(            "0000180a-0000-1000-8000-00805f9b34fb");
   d5724:	f8df 93a0 	ldr.w	r9, [pc, #928]	; d5ac8 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3b0>
const BleUuid batteryServiceUuid(               "0000180f-0000-1000-8000-00805f9b34fb");

const BleUuid mfgNameUuid(                      "00002a29-0000-1000-8000-00805f9b34fb");
const BleUuid deviceNameUuid(                   "00002a00-0000-1000-8000-00805f9b34fb");
const BleUuid appearanceUuid(                   "00002a01-0000-1000-8000-00805f9b34fb");
   d5728:	f8df a3a0 	ldr.w	sl, [pc, #928]	; d5acc <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3b4>
const BleUuid characteristic16bitUuid(          "03290310-EAB4-DEA1-B24E-44EC023874DB");
const BleUuid characteristic32bitUuid(          "03290320-EAB4-DEA1-B24E-44EC023874DB");

const BleUuid batteryLevelUuid(                 "00002a19-0000-1000-8000-00805f9b34fb");

BleCharacteristic deviceNameCharacteristic("device name", BleCharacteristicProperty::READ, deviceNameUuid, kestrelServiceUuid);
   d572c:	4fbc      	ldr	r7, [pc, #752]	; (d5a20 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x308>)
    return kph * 0.2778;
}

float convertMbarToInHg(float mBar) {
    return mBar * 0.02953;
}
   d572e:	b091      	sub	sp, #68	; 0x44
   d5730:	2400      	movs	r4, #0
   d5732:	f000 fab7 	bl	d5ca4 <HAL_Pin_Map>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5736:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d573a:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d573c:	602c      	str	r4, [r5, #0]
   d573e:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5740:	71ac      	strb	r4, [r5, #6]
   d5742:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5744:	2003      	movs	r0, #3
   d5746:	f000 fc45 	bl	d5fd4 <set_system_mode>
#include "Particle.h"
#include "MLX90393.h"
#include <math.h>
#include "SparkFunBME280.h"

SYSTEM_MODE(MANUAL);
   d574a:	4632      	mov	r2, r6
   d574c:	49b5      	ldr	r1, [pc, #724]	; (d5a24 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x30c>)
   d574e:	4628      	mov	r0, r5
   d5750:	f002 fc9e 	bl	d8090 <__aeabi_atexit>

// GATT Characteristics https://www.bluetooth.com/specifications/gatt/characteristics/
// Some guy's Kestrel notes:  https://bad-radio.solutions/notes_ble
// A virus report which sheds light From https://www.hybrid-analysis.com/sample/ed3c0e341b224014088381590c1f817acdabcf26015cff7ae63f1c454a0f3bd5?environmentId=200

const BleUuid kestrelServiceUuid(               "03290000-EAB4-DEA1-B24E-44EC023874DB");
   d5754:	49b4      	ldr	r1, [pc, #720]	; (d5a28 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x310>)
const BleUuid deviceInfoServiceUuid(            "0000180a-0000-1000-8000-00805f9b34fb");
const BleUuid batteryServiceUuid(               "0000180f-0000-1000-8000-00805f9b34fb");

const BleUuid mfgNameUuid(                      "00002a29-0000-1000-8000-00805f9b34fb");
const BleUuid deviceNameUuid(                   "00002a00-0000-1000-8000-00805f9b34fb");
   d5756:	4db5      	ldr	r5, [pc, #724]	; (d5a2c <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x314>)

// GATT Characteristics https://www.bluetooth.com/specifications/gatt/characteristics/
// Some guy's Kestrel notes:  https://bad-radio.solutions/notes_ble
// A virus report which sheds light From https://www.hybrid-analysis.com/sample/ed3c0e341b224014088381590c1f817acdabcf26015cff7ae63f1c454a0f3bd5?environmentId=200

const BleUuid kestrelServiceUuid(               "03290000-EAB4-DEA1-B24E-44EC023874DB");
   d5758:	4658      	mov	r0, fp
   d575a:	f000 fe6d 	bl	d6438 <_ZN8particle7BleUuidC1EPKc>
const BleUuid deviceInfoServiceUuid(            "0000180a-0000-1000-8000-00805f9b34fb");
   d575e:	49b4      	ldr	r1, [pc, #720]	; (d5a30 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x318>)
   d5760:	4648      	mov	r0, r9
   d5762:	f000 fe69 	bl	d6438 <_ZN8particle7BleUuidC1EPKc>
const BleUuid batteryServiceUuid(               "0000180f-0000-1000-8000-00805f9b34fb");
   d5766:	49b3      	ldr	r1, [pc, #716]	; (d5a34 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x31c>)
   d5768:	48b3      	ldr	r0, [pc, #716]	; (d5a38 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x320>)
   d576a:	f000 fe65 	bl	d6438 <_ZN8particle7BleUuidC1EPKc>

const BleUuid mfgNameUuid(                      "00002a29-0000-1000-8000-00805f9b34fb");
   d576e:	49b3      	ldr	r1, [pc, #716]	; (d5a3c <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x324>)
   d5770:	48b3      	ldr	r0, [pc, #716]	; (d5a40 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x328>)
   d5772:	f000 fe61 	bl	d6438 <_ZN8particle7BleUuidC1EPKc>
const BleUuid deviceNameUuid(                   "00002a00-0000-1000-8000-00805f9b34fb");
   d5776:	49b3      	ldr	r1, [pc, #716]	; (d5a44 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x32c>)
   d5778:	4628      	mov	r0, r5
   d577a:	f000 fe5d 	bl	d6438 <_ZN8particle7BleUuidC1EPKc>
const BleUuid appearanceUuid(                   "00002a01-0000-1000-8000-00805f9b34fb");
   d577e:	49b2      	ldr	r1, [pc, #712]	; (d5a48 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x330>)
   d5780:	4650      	mov	r0, sl
   d5782:	f000 fe59 	bl	d6438 <_ZN8particle7BleUuidC1EPKc>
const BleUuid serialNumberUuid(                 "00002a25-0000-1000-8000-00805f9b34fb");
   d5786:	49b1      	ldr	r1, [pc, #708]	; (d5a4c <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x334>)
   d5788:	48b1      	ldr	r0, [pc, #708]	; (d5a50 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x338>)
   d578a:	f000 fe55 	bl	d6438 <_ZN8particle7BleUuidC1EPKc>
const BleUuid hardwareVersionUuid(              "00002a27-0000-1000-8000-00805f9b34fb");
   d578e:	49b1      	ldr	r1, [pc, #708]	; (d5a54 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x33c>)
   d5790:	48b1      	ldr	r0, [pc, #708]	; (d5a58 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x340>)
   d5792:	f000 fe51 	bl	d6438 <_ZN8particle7BleUuidC1EPKc>
const BleUuid firmwareVersionUuid(              "00002a26-0000-1000-8000-00805f9b34fb");
   d5796:	49b1      	ldr	r1, [pc, #708]	; (d5a5c <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x344>)
   d5798:	48b1      	ldr	r0, [pc, #708]	; (d5a60 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x348>)
   d579a:	f000 fe4d 	bl	d6438 <_ZN8particle7BleUuidC1EPKc>
const BleUuid softwareVersionUuid(              "00002a28-0000-1000-8000-00805f9b34fb");
   d579e:	49b1      	ldr	r1, [pc, #708]	; (d5a64 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x34c>)
   d57a0:	48b1      	ldr	r0, [pc, #708]	; (d5a68 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x350>)
   d57a2:	f000 fe49 	bl	d6438 <_ZN8particle7BleUuidC1EPKc>
const BleUuid modelNumberUuid(                  "00002a24-0000-1000-8000-00805f9b34fb");
   d57a6:	49b1      	ldr	r1, [pc, #708]	; (d5a6c <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x354>)
   d57a8:	48b1      	ldr	r0, [pc, #708]	; (d5a70 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x358>)
   d57aa:	f000 fe45 	bl	d6438 <_ZN8particle7BleUuidC1EPKc>

const BleUuid characteristic16bitUuid(          "03290310-EAB4-DEA1-B24E-44EC023874DB");
   d57ae:	49b1      	ldr	r1, [pc, #708]	; (d5a74 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x35c>)
   d57b0:	48b1      	ldr	r0, [pc, #708]	; (d5a78 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x360>)
   d57b2:	f000 fe41 	bl	d6438 <_ZN8particle7BleUuidC1EPKc>
const BleUuid characteristic32bitUuid(          "03290320-EAB4-DEA1-B24E-44EC023874DB");
   d57b6:	49b1      	ldr	r1, [pc, #708]	; (d5a7c <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x364>)
   d57b8:	48b1      	ldr	r0, [pc, #708]	; (d5a80 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x368>)
   d57ba:	f000 fe3d 	bl	d6438 <_ZN8particle7BleUuidC1EPKc>

const BleUuid batteryLevelUuid(                 "00002a19-0000-1000-8000-00805f9b34fb");
   d57be:	49b1      	ldr	r1, [pc, #708]	; (d5a84 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x36c>)
   d57c0:	48b1      	ldr	r0, [pc, #708]	; (d5a88 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x370>)
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d57c2:	f04f 0802 	mov.w	r8, #2
   d57c6:	f000 fe37 	bl	d6438 <_ZN8particle7BleUuidC1EPKc>

BleCharacteristic deviceNameCharacteristic("device name", BleCharacteristicProperty::READ, deviceNameUuid, kestrelServiceUuid);
   d57ca:	4629      	mov	r1, r5
   d57cc:	a80b      	add	r0, sp, #44	; 0x2c
   d57ce:	ad06      	add	r5, sp, #24
   d57d0:	f88d 8014 	strb.w	r8, [sp, #20]
   d57d4:	f000 fd32 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d57d8:	4659      	mov	r1, fp
   d57da:	4628      	mov	r0, r5
   d57dc:	f000 fd2e 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d57e0:	ab0b      	add	r3, sp, #44	; 0x2c
   d57e2:	aa05      	add	r2, sp, #20
   d57e4:	9402      	str	r4, [sp, #8]
   d57e6:	9401      	str	r4, [sp, #4]
   d57e8:	9500      	str	r5, [sp, #0]
   d57ea:	49a8      	ldr	r1, [pc, #672]	; (d5a8c <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x374>)
   d57ec:	48a8      	ldr	r0, [pc, #672]	; (d5a90 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x378>)
   d57ee:	f7ff ff71 	bl	d56d4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d57f2:	4632      	mov	r2, r6
   d57f4:	4639      	mov	r1, r7
   d57f6:	48a6      	ldr	r0, [pc, #664]	; (d5a90 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x378>)
   d57f8:	f002 fc4a 	bl	d8090 <__aeabi_atexit>
BleCharacteristic appearanceCharacteristic("Appearance", BleCharacteristicProperty::READ, appearanceUuid, kestrelServiceUuid);
   d57fc:	4651      	mov	r1, sl
   d57fe:	a80b      	add	r0, sp, #44	; 0x2c
   d5800:	f8df a2cc 	ldr.w	sl, [pc, #716]	; d5ad0 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3b8>
   d5804:	f88d 8014 	strb.w	r8, [sp, #20]
   d5808:	f000 fd18 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d580c:	4659      	mov	r1, fp
   d580e:	4628      	mov	r0, r5
   d5810:	f000 fd14 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d5814:	ab0b      	add	r3, sp, #44	; 0x2c
   d5816:	aa05      	add	r2, sp, #20
   d5818:	9402      	str	r4, [sp, #8]
   d581a:	9401      	str	r4, [sp, #4]
   d581c:	9500      	str	r5, [sp, #0]
   d581e:	499d      	ldr	r1, [pc, #628]	; (d5a94 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x37c>)
   d5820:	4650      	mov	r0, sl
   d5822:	f7ff ff57 	bl	d56d4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d5826:	4632      	mov	r2, r6
   d5828:	4639      	mov	r1, r7
   d582a:	4650      	mov	r0, sl
   d582c:	f002 fc30 	bl	d8090 <__aeabi_atexit>
BleCharacteristic mfgNameCharacteristic("mfg name", BleCharacteristicProperty::READ, mfgNameUuid, deviceInfoServiceUuid);
   d5830:	f8df a2a0 	ldr.w	sl, [pc, #672]	; d5ad4 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3bc>
   d5834:	4982      	ldr	r1, [pc, #520]	; (d5a40 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x328>)
   d5836:	f88d 8014 	strb.w	r8, [sp, #20]
   d583a:	a80b      	add	r0, sp, #44	; 0x2c
   d583c:	f000 fcfe 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d5840:	4649      	mov	r1, r9
   d5842:	4628      	mov	r0, r5
   d5844:	f000 fcfa 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d5848:	ab0b      	add	r3, sp, #44	; 0x2c
   d584a:	aa05      	add	r2, sp, #20
   d584c:	9402      	str	r4, [sp, #8]
   d584e:	9401      	str	r4, [sp, #4]
   d5850:	9500      	str	r5, [sp, #0]
   d5852:	4991      	ldr	r1, [pc, #580]	; (d5a98 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x380>)
   d5854:	4650      	mov	r0, sl
   d5856:	f7ff ff3d 	bl	d56d4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d585a:	4632      	mov	r2, r6
   d585c:	4639      	mov	r1, r7
   d585e:	4650      	mov	r0, sl
   d5860:	f002 fc16 	bl	d8090 <__aeabi_atexit>
BleCharacteristic modelNumberCharacteristic("model number", BleCharacteristicProperty::READ, modelNumberUuid, deviceInfoServiceUuid);
   d5864:	f8df a270 	ldr.w	sl, [pc, #624]	; d5ad8 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3c0>
   d5868:	4981      	ldr	r1, [pc, #516]	; (d5a70 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x358>)
   d586a:	f88d 8014 	strb.w	r8, [sp, #20]
   d586e:	a80b      	add	r0, sp, #44	; 0x2c
   d5870:	f000 fce4 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d5874:	4649      	mov	r1, r9
   d5876:	4628      	mov	r0, r5
   d5878:	f000 fce0 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d587c:	ab0b      	add	r3, sp, #44	; 0x2c
   d587e:	aa05      	add	r2, sp, #20
   d5880:	9402      	str	r4, [sp, #8]
   d5882:	9401      	str	r4, [sp, #4]
   d5884:	9500      	str	r5, [sp, #0]
   d5886:	4985      	ldr	r1, [pc, #532]	; (d5a9c <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x384>)
   d5888:	4650      	mov	r0, sl
   d588a:	f7ff ff23 	bl	d56d4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d588e:	4632      	mov	r2, r6
   d5890:	4639      	mov	r1, r7
   d5892:	4650      	mov	r0, sl
   d5894:	f002 fbfc 	bl	d8090 <__aeabi_atexit>
BleCharacteristic serialNumberCharacteristic("serial number", BleCharacteristicProperty::READ, serialNumberUuid, deviceInfoServiceUuid);
   d5898:	f8df a240 	ldr.w	sl, [pc, #576]	; d5adc <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3c4>
   d589c:	496c      	ldr	r1, [pc, #432]	; (d5a50 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x338>)
   d589e:	f88d 8014 	strb.w	r8, [sp, #20]
   d58a2:	a80b      	add	r0, sp, #44	; 0x2c
   d58a4:	f000 fcca 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d58a8:	4649      	mov	r1, r9
   d58aa:	4628      	mov	r0, r5
   d58ac:	f000 fcc6 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d58b0:	ab0b      	add	r3, sp, #44	; 0x2c
   d58b2:	aa05      	add	r2, sp, #20
   d58b4:	9402      	str	r4, [sp, #8]
   d58b6:	9401      	str	r4, [sp, #4]
   d58b8:	9500      	str	r5, [sp, #0]
   d58ba:	4979      	ldr	r1, [pc, #484]	; (d5aa0 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x388>)
   d58bc:	4650      	mov	r0, sl
   d58be:	f7ff ff09 	bl	d56d4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d58c2:	4632      	mov	r2, r6
   d58c4:	4639      	mov	r1, r7
   d58c6:	4650      	mov	r0, sl
   d58c8:	f002 fbe2 	bl	d8090 <__aeabi_atexit>
BleCharacteristic hardwareVersionCharacteristic("hardware version", BleCharacteristicProperty::READ, hardwareVersionUuid, deviceInfoServiceUuid);
   d58cc:	f8df a210 	ldr.w	sl, [pc, #528]	; d5ae0 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3c8>
   d58d0:	4961      	ldr	r1, [pc, #388]	; (d5a58 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x340>)
   d58d2:	f88d 8014 	strb.w	r8, [sp, #20]
   d58d6:	a80b      	add	r0, sp, #44	; 0x2c
   d58d8:	f000 fcb0 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d58dc:	4649      	mov	r1, r9
   d58de:	4628      	mov	r0, r5
   d58e0:	f000 fcac 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d58e4:	ab0b      	add	r3, sp, #44	; 0x2c
   d58e6:	aa05      	add	r2, sp, #20
   d58e8:	9402      	str	r4, [sp, #8]
   d58ea:	9401      	str	r4, [sp, #4]
   d58ec:	9500      	str	r5, [sp, #0]
   d58ee:	496d      	ldr	r1, [pc, #436]	; (d5aa4 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x38c>)
   d58f0:	4650      	mov	r0, sl
   d58f2:	f7ff feef 	bl	d56d4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d58f6:	4632      	mov	r2, r6
   d58f8:	4639      	mov	r1, r7
   d58fa:	4650      	mov	r0, sl
   d58fc:	f002 fbc8 	bl	d8090 <__aeabi_atexit>
BleCharacteristic firmwareVersionCharacteristic("firmware version", BleCharacteristicProperty::READ, firmwareVersionUuid, deviceInfoServiceUuid);
   d5900:	f8df a1e0 	ldr.w	sl, [pc, #480]	; d5ae4 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3cc>
   d5904:	4956      	ldr	r1, [pc, #344]	; (d5a60 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x348>)
   d5906:	f88d 8014 	strb.w	r8, [sp, #20]
   d590a:	a80b      	add	r0, sp, #44	; 0x2c
   d590c:	f000 fc96 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d5910:	4649      	mov	r1, r9
   d5912:	4628      	mov	r0, r5
   d5914:	f000 fc92 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d5918:	ab0b      	add	r3, sp, #44	; 0x2c
   d591a:	aa05      	add	r2, sp, #20
   d591c:	9402      	str	r4, [sp, #8]
   d591e:	9401      	str	r4, [sp, #4]
   d5920:	9500      	str	r5, [sp, #0]
   d5922:	4961      	ldr	r1, [pc, #388]	; (d5aa8 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x390>)
   d5924:	4650      	mov	r0, sl
   d5926:	f7ff fed5 	bl	d56d4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d592a:	4632      	mov	r2, r6
   d592c:	4639      	mov	r1, r7
   d592e:	4650      	mov	r0, sl
   d5930:	f002 fbae 	bl	d8090 <__aeabi_atexit>
   d5934:	f88d 8014 	strb.w	r8, [sp, #20]
BleCharacteristic softwareVersionCharacteristic("software version", BleCharacteristicProperty::READ, softwareVersionUuid, deviceInfoServiceUuid);
   d5938:	494b      	ldr	r1, [pc, #300]	; (d5a68 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x350>)
   d593a:	f8df 81ac 	ldr.w	r8, [pc, #428]	; d5ae8 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3d0>
   d593e:	a80b      	add	r0, sp, #44	; 0x2c
   d5940:	f000 fc7c 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d5944:	4649      	mov	r1, r9
   d5946:	4628      	mov	r0, r5
   d5948:	f000 fc78 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d594c:	ab0b      	add	r3, sp, #44	; 0x2c
   d594e:	aa05      	add	r2, sp, #20
   d5950:	9402      	str	r4, [sp, #8]
   d5952:	9401      	str	r4, [sp, #4]
   d5954:	9500      	str	r5, [sp, #0]
   d5956:	4955      	ldr	r1, [pc, #340]	; (d5aac <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x394>)

BleCharacteristic characteristic16bit("Characteristic 16-bit", BleCharacteristicProperty::READ | BleCharacteristicProperty::NOTIFY, characteristic16bitUuid, kestrelServiceUuid);
   d5958:	f8df 9190 	ldr.w	r9, [pc, #400]	; d5aec <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3d4>
BleCharacteristic mfgNameCharacteristic("mfg name", BleCharacteristicProperty::READ, mfgNameUuid, deviceInfoServiceUuid);
BleCharacteristic modelNumberCharacteristic("model number", BleCharacteristicProperty::READ, modelNumberUuid, deviceInfoServiceUuid);
BleCharacteristic serialNumberCharacteristic("serial number", BleCharacteristicProperty::READ, serialNumberUuid, deviceInfoServiceUuid);
BleCharacteristic hardwareVersionCharacteristic("hardware version", BleCharacteristicProperty::READ, hardwareVersionUuid, deviceInfoServiceUuid);
BleCharacteristic firmwareVersionCharacteristic("firmware version", BleCharacteristicProperty::READ, firmwareVersionUuid, deviceInfoServiceUuid);
BleCharacteristic softwareVersionCharacteristic("software version", BleCharacteristicProperty::READ, softwareVersionUuid, deviceInfoServiceUuid);
   d595c:	4640      	mov	r0, r8
   d595e:	f7ff feb9 	bl	d56d4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d5962:	4632      	mov	r2, r6
   d5964:	4639      	mov	r1, r7
   d5966:	4640      	mov	r0, r8
   d5968:	f002 fb92 	bl	d8090 <__aeabi_atexit>
    value_ = flags.value_;
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(ValueType value)
        : value_(value) {
   d596c:	f04f 0812 	mov.w	r8, #18

BleCharacteristic characteristic16bit("Characteristic 16-bit", BleCharacteristicProperty::READ | BleCharacteristicProperty::NOTIFY, characteristic16bitUuid, kestrelServiceUuid);
   d5970:	4941      	ldr	r1, [pc, #260]	; (d5a78 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x360>)
   d5972:	f88d 8014 	strb.w	r8, [sp, #20]
   d5976:	a80b      	add	r0, sp, #44	; 0x2c
   d5978:	f000 fc60 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d597c:	4659      	mov	r1, fp
   d597e:	4628      	mov	r0, r5
   d5980:	f000 fc5c 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d5984:	ab0b      	add	r3, sp, #44	; 0x2c
   d5986:	aa05      	add	r2, sp, #20
   d5988:	9402      	str	r4, [sp, #8]
   d598a:	9401      	str	r4, [sp, #4]
   d598c:	9500      	str	r5, [sp, #0]
   d598e:	4948      	ldr	r1, [pc, #288]	; (d5ab0 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x398>)
   d5990:	4648      	mov	r0, r9
   d5992:	f7ff fe9f 	bl	d56d4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d5996:	4632      	mov	r2, r6
   d5998:	4639      	mov	r1, r7
   d599a:	4648      	mov	r0, r9
   d599c:	f002 fb78 	bl	d8090 <__aeabi_atexit>
BleCharacteristic characteristic32bit("Characteristic 32-bit", BleCharacteristicProperty::READ | BleCharacteristicProperty::NOTIFY, characteristic32bitUuid, kestrelServiceUuid);
   d59a0:	f8df 914c 	ldr.w	r9, [pc, #332]	; d5af0 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3d8>
   d59a4:	4936      	ldr	r1, [pc, #216]	; (d5a80 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x368>)
   d59a6:	f88d 8014 	strb.w	r8, [sp, #20]
   d59aa:	a80b      	add	r0, sp, #44	; 0x2c
   d59ac:	f000 fc46 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d59b0:	4659      	mov	r1, fp
   d59b2:	4628      	mov	r0, r5
   d59b4:	f000 fc42 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d59b8:	ab0b      	add	r3, sp, #44	; 0x2c
   d59ba:	aa05      	add	r2, sp, #20
   d59bc:	9402      	str	r4, [sp, #8]
   d59be:	9401      	str	r4, [sp, #4]
   d59c0:	9500      	str	r5, [sp, #0]
   d59c2:	493c      	ldr	r1, [pc, #240]	; (d5ab4 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x39c>)
   d59c4:	4648      	mov	r0, r9
   d59c6:	f7ff fe85 	bl	d56d4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d59ca:	4632      	mov	r2, r6
   d59cc:	4639      	mov	r1, r7
   d59ce:	4648      	mov	r0, r9
   d59d0:	f002 fb5e 	bl	d8090 <__aeabi_atexit>
   d59d4:	f88d 8014 	strb.w	r8, [sp, #20]

BleCharacteristic batteryLevelCharacteristic("Battery Lavel", BleCharacteristicProperty::READ | BleCharacteristicProperty::NOTIFY, batteryLevelUuid, batteryServiceUuid);
   d59d8:	492b      	ldr	r1, [pc, #172]	; (d5a88 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x370>)
   d59da:	f8df 8118 	ldr.w	r8, [pc, #280]	; d5af4 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3dc>
   d59de:	a80b      	add	r0, sp, #44	; 0x2c
   d59e0:	f000 fc2c 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d59e4:	4914      	ldr	r1, [pc, #80]	; (d5a38 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x320>)
   d59e6:	4628      	mov	r0, r5
   d59e8:	f000 fc28 	bl	d623c <_ZN8particle7BleUuidC1ERKS0_>
   d59ec:	ab0b      	add	r3, sp, #44	; 0x2c
   d59ee:	aa05      	add	r2, sp, #20
   d59f0:	9402      	str	r4, [sp, #8]
   d59f2:	9401      	str	r4, [sp, #4]
   d59f4:	9500      	str	r5, [sp, #0]
   d59f6:	4930      	ldr	r1, [pc, #192]	; (d5ab8 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3a0>)
   d59f8:	4640      	mov	r0, r8
   d59fa:	f7ff fe6b 	bl	d56d4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d59fe:	4632      	mov	r2, r6
   d5a00:	4639      	mov	r1, r7
   d5a02:	4640      	mov	r0, r8
   d5a04:	f002 fb44 	bl	d8090 <__aeabi_atexit>


MLX90393 mlx;
   d5a08:	482c      	ldr	r0, [pc, #176]	; (d5abc <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3a4>)
   d5a0a:	f7fe fb59 	bl	d40c0 <_ZN8MLX90393C1Ev>
BME280 bme280;
   d5a0e:	482c      	ldr	r0, [pc, #176]	; (d5ac0 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3a8>)
   d5a10:	f7fe fdda 	bl	d45c8 <_ZN6BME280C1Ev>
    return kph * 0.2778;
}

float convertMbarToInHg(float mBar) {
    return mBar * 0.02953;
}
   d5a14:	b011      	add	sp, #68	; 0x44
   d5a16:	e06f      	b.n	d5af8 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x3e0>
   d5a18:	2003e2dc 	.word	0x2003e2dc
   d5a1c:	2003e24c 	.word	0x2003e24c
   d5a20:	000d691b 	.word	0x000d691b
   d5a24:	000d4e31 	.word	0x000d4e31
   d5a28:	000d983e 	.word	0x000d983e
   d5a2c:	2003e370 	.word	0x2003e370
   d5a30:	000d9863 	.word	0x000d9863
   d5a34:	000d9888 	.word	0x000d9888
   d5a38:	2003e384 	.word	0x2003e384
   d5a3c:	000d98ad 	.word	0x000d98ad
   d5a40:	2003e2c8 	.word	0x2003e2c8
   d5a44:	000d98d2 	.word	0x000d98d2
   d5a48:	000d98f7 	.word	0x000d98f7
   d5a4c:	000d991c 	.word	0x000d991c
   d5a50:	2003e25c 	.word	0x2003e25c
   d5a54:	000d9941 	.word	0x000d9941
   d5a58:	2003e35c 	.word	0x2003e35c
   d5a5c:	000d9966 	.word	0x000d9966
   d5a60:	2003e32c 	.word	0x2003e32c
   d5a64:	000d998b 	.word	0x000d998b
   d5a68:	2003e270 	.word	0x2003e270
   d5a6c:	000d99b0 	.word	0x000d99b0
   d5a70:	2003e2b4 	.word	0x2003e2b4
   d5a74:	000d99d5 	.word	0x000d99d5
   d5a78:	2003e2a0 	.word	0x2003e2a0
   d5a7c:	000d99fa 	.word	0x000d99fa
   d5a80:	2003e460 	.word	0x2003e460
   d5a84:	000d9a1f 	.word	0x000d9a1f
   d5a88:	2003e4a8 	.word	0x2003e4a8
   d5a8c:	000d9a44 	.word	0x000d9a44
   d5a90:	2003e498 	.word	0x2003e498
   d5a94:	000d9a50 	.word	0x000d9a50
   d5a98:	000d9a5b 	.word	0x000d9a5b
   d5a9c:	000d9a64 	.word	0x000d9a64
   d5aa0:	000d9a71 	.word	0x000d9a71
   d5aa4:	000d9a7f 	.word	0x000d9a7f
   d5aa8:	000d9a90 	.word	0x000d9a90
   d5aac:	000d9aa1 	.word	0x000d9aa1
   d5ab0:	000d9ab2 	.word	0x000d9ab2
   d5ab4:	000d9ac8 	.word	0x000d9ac8
   d5ab8:	000d9ade 	.word	0x000d9ade
   d5abc:	2003e3a4 	.word	0x2003e3a4
   d5ac0:	2003e2e8 	.word	0x2003e2e8
   d5ac4:	2003e340 	.word	0x2003e340
   d5ac8:	2003e4bc 	.word	0x2003e4bc
   d5acc:	2003e474 	.word	0x2003e474
   d5ad0:	2003e284 	.word	0x2003e284
   d5ad4:	2003e3f0 	.word	0x2003e3f0
   d5ad8:	2003e3e8 	.word	0x2003e3e8
   d5adc:	2003e4a0 	.word	0x2003e4a0
   d5ae0:	2003e488 	.word	0x2003e488
   d5ae4:	2003e39c 	.word	0x2003e39c
   d5ae8:	2003e490 	.word	0x2003e490
   d5aec:	2003e354 	.word	0x2003e354
   d5af0:	2003e28c 	.word	0x2003e28c
   d5af4:	2003e294 	.word	0x2003e294
   d5af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5afc <_GLOBAL__sub_I_SystemMode>:
   d5afc:	f7ff be0c 	b.w	d5718 <_Z41__static_initialization_and_destruction_0ii.constprop.2>

000d5b00 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <hal_ble_stack_init+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	689b      	ldr	r3, [r3, #8]
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	00030278 	.word	0x00030278

000d5b10 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <hal_ble_gap_set_advertising_data+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	00030278 	.word	0x00030278

000d5b20 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <hal_ble_gap_set_scan_response_data+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	00030278 	.word	0x00030278

000d5b30 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d5b30:	b508      	push	{r3, lr}
   d5b32:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <hal_ble_gap_start_advertising+0xc>)
   d5b34:	681b      	ldr	r3, [r3, #0]
   d5b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5b38:	9301      	str	r3, [sp, #4]
   d5b3a:	bd08      	pop	{r3, pc}
   d5b3c:	00030278 	.word	0x00030278

000d5b40 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d5b40:	b508      	push	{r3, lr}
   d5b42:	4b03      	ldr	r3, [pc, #12]	; (d5b50 <hal_ble_gap_disconnect+0x10>)
   d5b44:	681b      	ldr	r3, [r3, #0]
   d5b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5b4a:	9301      	str	r3, [sp, #4]
   d5b4c:	bd08      	pop	{r3, pc}
   d5b4e:	0000      	.short	0x0000
   d5b50:	00030278 	.word	0x00030278

000d5b54 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d5b54:	b508      	push	{r3, lr}
   d5b56:	4b03      	ldr	r3, [pc, #12]	; (d5b64 <hal_ble_gatt_server_add_service+0x10>)
   d5b58:	681b      	ldr	r3, [r3, #0]
   d5b5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d5b5e:	9301      	str	r3, [sp, #4]
   d5b60:	bd08      	pop	{r3, pc}
   d5b62:	0000      	.short	0x0000
   d5b64:	00030278 	.word	0x00030278

000d5b68 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5b68:	b508      	push	{r3, lr}
   d5b6a:	4b03      	ldr	r3, [pc, #12]	; (d5b78 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d5b6c:	681b      	ldr	r3, [r3, #0]
   d5b6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d5b72:	9301      	str	r3, [sp, #4]
   d5b74:	bd08      	pop	{r3, pc}
   d5b76:	0000      	.short	0x0000
   d5b78:	00030278 	.word	0x00030278

000d5b7c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5b7c:	b508      	push	{r3, lr}
   d5b7e:	4b03      	ldr	r3, [pc, #12]	; (d5b8c <hal_ble_gatt_client_write_with_response+0x10>)
   d5b80:	681b      	ldr	r3, [r3, #0]
   d5b82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d5b86:	9301      	str	r3, [sp, #4]
   d5b88:	bd08      	pop	{r3, pc}
   d5b8a:	0000      	.short	0x0000
   d5b8c:	00030278 	.word	0x00030278

000d5b90 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5b90:	b508      	push	{r3, lr}
   d5b92:	4b03      	ldr	r3, [pc, #12]	; (d5ba0 <hal_ble_gatt_client_write_without_response+0x10>)
   d5b94:	681b      	ldr	r3, [r3, #0]
   d5b96:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d5b9a:	9301      	str	r3, [sp, #4]
   d5b9c:	bd08      	pop	{r3, pc}
   d5b9e:	0000      	.short	0x0000
   d5ba0:	00030278 	.word	0x00030278

000d5ba4 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5ba4:	b508      	push	{r3, lr}
   d5ba6:	4b03      	ldr	r3, [pc, #12]	; (d5bb4 <hal_ble_gatt_server_add_characteristic+0x10>)
   d5ba8:	681b      	ldr	r3, [r3, #0]
   d5baa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d5bae:	9301      	str	r3, [sp, #4]
   d5bb0:	bd08      	pop	{r3, pc}
   d5bb2:	0000      	.short	0x0000
   d5bb4:	00030278 	.word	0x00030278

000d5bb8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5bb8:	b508      	push	{r3, lr}
   d5bba:	4b03      	ldr	r3, [pc, #12]	; (d5bc8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5bbc:	681b      	ldr	r3, [r3, #0]
   d5bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d5bc2:	9301      	str	r3, [sp, #4]
   d5bc4:	bd08      	pop	{r3, pc}
   d5bc6:	0000      	.short	0x0000
   d5bc8:	00030278 	.word	0x00030278

000d5bcc <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5bcc:	b508      	push	{r3, lr}
   d5bce:	4b03      	ldr	r3, [pc, #12]	; (d5bdc <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d5bd0:	681b      	ldr	r3, [r3, #0]
   d5bd2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d5bd6:	9301      	str	r3, [sp, #4]
   d5bd8:	bd08      	pop	{r3, pc}
   d5bda:	0000      	.short	0x0000
   d5bdc:	00030278 	.word	0x00030278

000d5be0 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5be0:	b508      	push	{r3, lr}
   d5be2:	4b03      	ldr	r3, [pc, #12]	; (d5bf0 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d5be4:	681b      	ldr	r3, [r3, #0]
   d5be6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d5bea:	9301      	str	r3, [sp, #4]
   d5bec:	bd08      	pop	{r3, pc}
   d5bee:	0000      	.short	0x0000
   d5bf0:	00030278 	.word	0x00030278

000d5bf4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5bf4:	b508      	push	{r3, lr}
   d5bf6:	4b02      	ldr	r3, [pc, #8]	; (d5c00 <os_thread_is_current+0xc>)
   d5bf8:	681b      	ldr	r3, [r3, #0]
   d5bfa:	689b      	ldr	r3, [r3, #8]
   d5bfc:	9301      	str	r3, [sp, #4]
   d5bfe:	bd08      	pop	{r3, pc}
   d5c00:	00030248 	.word	0x00030248

000d5c04 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5c04:	b508      	push	{r3, lr}
   d5c06:	4b02      	ldr	r3, [pc, #8]	; (d5c10 <os_thread_join+0xc>)
   d5c08:	681b      	ldr	r3, [r3, #0]
   d5c0a:	691b      	ldr	r3, [r3, #16]
   d5c0c:	9301      	str	r3, [sp, #4]
   d5c0e:	bd08      	pop	{r3, pc}
   d5c10:	00030248 	.word	0x00030248

000d5c14 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5c14:	b508      	push	{r3, lr}
   d5c16:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <os_thread_cleanup+0xc>)
   d5c18:	681b      	ldr	r3, [r3, #0]
   d5c1a:	695b      	ldr	r3, [r3, #20]
   d5c1c:	9301      	str	r3, [sp, #4]
   d5c1e:	bd08      	pop	{r3, pc}
   d5c20:	00030248 	.word	0x00030248

000d5c24 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5c24:	b508      	push	{r3, lr}
   d5c26:	4b02      	ldr	r3, [pc, #8]	; (d5c30 <os_mutex_recursive_create+0xc>)
   d5c28:	681b      	ldr	r3, [r3, #0]
   d5c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	bd08      	pop	{r3, pc}
   d5c30:	00030248 	.word	0x00030248

000d5c34 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5c34:	b508      	push	{r3, lr}
   d5c36:	4b02      	ldr	r3, [pc, #8]	; (d5c40 <os_mutex_recursive_destroy+0xc>)
   d5c38:	681b      	ldr	r3, [r3, #0]
   d5c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5c3c:	9301      	str	r3, [sp, #4]
   d5c3e:	bd08      	pop	{r3, pc}
   d5c40:	00030248 	.word	0x00030248

000d5c44 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5c44:	b508      	push	{r3, lr}
   d5c46:	4b02      	ldr	r3, [pc, #8]	; (d5c50 <os_mutex_recursive_lock+0xc>)
   d5c48:	681b      	ldr	r3, [r3, #0]
   d5c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5c4c:	9301      	str	r3, [sp, #4]
   d5c4e:	bd08      	pop	{r3, pc}
   d5c50:	00030248 	.word	0x00030248

000d5c54 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4b02      	ldr	r3, [pc, #8]	; (d5c60 <os_mutex_recursive_unlock+0xc>)
   d5c58:	681b      	ldr	r3, [r3, #0]
   d5c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5c5c:	9301      	str	r3, [sp, #4]
   d5c5e:	bd08      	pop	{r3, pc}
   d5c60:	00030248 	.word	0x00030248

000d5c64 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5c64:	b508      	push	{r3, lr}
   d5c66:	4b02      	ldr	r3, [pc, #8]	; (d5c70 <HAL_RNG_GetRandomNumber+0xc>)
   d5c68:	681b      	ldr	r3, [r3, #0]
   d5c6a:	685b      	ldr	r3, [r3, #4]
   d5c6c:	9301      	str	r3, [sp, #4]
   d5c6e:	bd08      	pop	{r3, pc}
   d5c70:	00030218 	.word	0x00030218

000d5c74 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5c74:	b508      	push	{r3, lr}
   d5c76:	4b02      	ldr	r3, [pc, #8]	; (d5c80 <HAL_Delay_Microseconds+0xc>)
   d5c78:	681b      	ldr	r3, [r3, #0]
   d5c7a:	68db      	ldr	r3, [r3, #12]
   d5c7c:	9301      	str	r3, [sp, #4]
   d5c7e:	bd08      	pop	{r3, pc}
   d5c80:	00030218 	.word	0x00030218

000d5c84 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5c84:	b508      	push	{r3, lr}
   d5c86:	4b02      	ldr	r3, [pc, #8]	; (d5c90 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5c88:	681b      	ldr	r3, [r3, #0]
   d5c8a:	691b      	ldr	r3, [r3, #16]
   d5c8c:	9301      	str	r3, [sp, #4]
   d5c8e:	bd08      	pop	{r3, pc}
   d5c90:	00030218 	.word	0x00030218

000d5c94 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5c94:	b508      	push	{r3, lr}
   d5c96:	4b02      	ldr	r3, [pc, #8]	; (d5ca0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5c98:	681b      	ldr	r3, [r3, #0]
   d5c9a:	695b      	ldr	r3, [r3, #20]
   d5c9c:	9301      	str	r3, [sp, #4]
   d5c9e:	bd08      	pop	{r3, pc}
   d5ca0:	00030218 	.word	0x00030218

000d5ca4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5ca4:	b508      	push	{r3, lr}
   d5ca6:	4b02      	ldr	r3, [pc, #8]	; (d5cb0 <HAL_Pin_Map+0xc>)
   d5ca8:	681b      	ldr	r3, [r3, #0]
   d5caa:	681b      	ldr	r3, [r3, #0]
   d5cac:	9301      	str	r3, [sp, #4]
   d5cae:	bd08      	pop	{r3, pc}
   d5cb0:	0003022c 	.word	0x0003022c

000d5cb4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5cb4:	b508      	push	{r3, lr}
   d5cb6:	4b02      	ldr	r3, [pc, #8]	; (d5cc0 <HAL_Validate_Pin_Function+0xc>)
   d5cb8:	681b      	ldr	r3, [r3, #0]
   d5cba:	685b      	ldr	r3, [r3, #4]
   d5cbc:	9301      	str	r3, [sp, #4]
   d5cbe:	bd08      	pop	{r3, pc}
   d5cc0:	0003022c 	.word	0x0003022c

000d5cc4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5cc4:	b508      	push	{r3, lr}
   d5cc6:	4b02      	ldr	r3, [pc, #8]	; (d5cd0 <HAL_Pin_Mode+0xc>)
   d5cc8:	681b      	ldr	r3, [r3, #0]
   d5cca:	689b      	ldr	r3, [r3, #8]
   d5ccc:	9301      	str	r3, [sp, #4]
   d5cce:	bd08      	pop	{r3, pc}
   d5cd0:	0003022c 	.word	0x0003022c

000d5cd4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5cd4:	b508      	push	{r3, lr}
   d5cd6:	4b02      	ldr	r3, [pc, #8]	; (d5ce0 <HAL_Get_Pin_Mode+0xc>)
   d5cd8:	681b      	ldr	r3, [r3, #0]
   d5cda:	68db      	ldr	r3, [r3, #12]
   d5cdc:	9301      	str	r3, [sp, #4]
   d5cde:	bd08      	pop	{r3, pc}
   d5ce0:	0003022c 	.word	0x0003022c

000d5ce4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5ce4:	b508      	push	{r3, lr}
   d5ce6:	4b02      	ldr	r3, [pc, #8]	; (d5cf0 <HAL_GPIO_Write+0xc>)
   d5ce8:	681b      	ldr	r3, [r3, #0]
   d5cea:	691b      	ldr	r3, [r3, #16]
   d5cec:	9301      	str	r3, [sp, #4]
   d5cee:	bd08      	pop	{r3, pc}
   d5cf0:	0003022c 	.word	0x0003022c

000d5cf4 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d5cf4:	b508      	push	{r3, lr}
   d5cf6:	4b02      	ldr	r3, [pc, #8]	; (d5d00 <HAL_Interrupts_Attach+0xc>)
   d5cf8:	681b      	ldr	r3, [r3, #0]
   d5cfa:	699b      	ldr	r3, [r3, #24]
   d5cfc:	9301      	str	r3, [sp, #4]
   d5cfe:	bd08      	pop	{r3, pc}
   d5d00:	0003022c 	.word	0x0003022c

000d5d04 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d5d04:	b508      	push	{r3, lr}
   d5d06:	4b02      	ldr	r3, [pc, #8]	; (d5d10 <HAL_Interrupts_Detach+0xc>)
   d5d08:	681b      	ldr	r3, [r3, #0]
   d5d0a:	69db      	ldr	r3, [r3, #28]
   d5d0c:	9301      	str	r3, [sp, #4]
   d5d0e:	bd08      	pop	{r3, pc}
   d5d10:	0003022c 	.word	0x0003022c

000d5d14 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5d14:	b508      	push	{r3, lr}
   d5d16:	4b02      	ldr	r3, [pc, #8]	; (d5d20 <HAL_ADC_Read+0xc>)
   d5d18:	681b      	ldr	r3, [r3, #0]
   d5d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d1c:	9301      	str	r3, [sp, #4]
   d5d1e:	bd08      	pop	{r3, pc}
   d5d20:	0003022c 	.word	0x0003022c

000d5d24 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5d24:	b508      	push	{r3, lr}
   d5d26:	4b02      	ldr	r3, [pc, #8]	; (d5d30 <HAL_I2C_Begin+0xc>)
   d5d28:	681b      	ldr	r3, [r3, #0]
   d5d2a:	68db      	ldr	r3, [r3, #12]
   d5d2c:	9301      	str	r3, [sp, #4]
   d5d2e:	bd08      	pop	{r3, pc}
   d5d30:	00030228 	.word	0x00030228

000d5d34 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5d34:	b508      	push	{r3, lr}
   d5d36:	4b02      	ldr	r3, [pc, #8]	; (d5d40 <HAL_I2C_Begin_Transmission+0xc>)
   d5d38:	681b      	ldr	r3, [r3, #0]
   d5d3a:	699b      	ldr	r3, [r3, #24]
   d5d3c:	9301      	str	r3, [sp, #4]
   d5d3e:	bd08      	pop	{r3, pc}
   d5d40:	00030228 	.word	0x00030228

000d5d44 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5d44:	b508      	push	{r3, lr}
   d5d46:	4b02      	ldr	r3, [pc, #8]	; (d5d50 <HAL_I2C_End_Transmission+0xc>)
   d5d48:	681b      	ldr	r3, [r3, #0]
   d5d4a:	69db      	ldr	r3, [r3, #28]
   d5d4c:	9301      	str	r3, [sp, #4]
   d5d4e:	bd08      	pop	{r3, pc}
   d5d50:	00030228 	.word	0x00030228

000d5d54 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5d54:	b508      	push	{r3, lr}
   d5d56:	4b02      	ldr	r3, [pc, #8]	; (d5d60 <HAL_I2C_Write_Data+0xc>)
   d5d58:	681b      	ldr	r3, [r3, #0]
   d5d5a:	6a1b      	ldr	r3, [r3, #32]
   d5d5c:	9301      	str	r3, [sp, #4]
   d5d5e:	bd08      	pop	{r3, pc}
   d5d60:	00030228 	.word	0x00030228

000d5d64 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5d64:	b508      	push	{r3, lr}
   d5d66:	4b02      	ldr	r3, [pc, #8]	; (d5d70 <HAL_I2C_Available_Data+0xc>)
   d5d68:	681b      	ldr	r3, [r3, #0]
   d5d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5d6c:	9301      	str	r3, [sp, #4]
   d5d6e:	bd08      	pop	{r3, pc}
   d5d70:	00030228 	.word	0x00030228

000d5d74 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5d74:	b508      	push	{r3, lr}
   d5d76:	4b02      	ldr	r3, [pc, #8]	; (d5d80 <HAL_I2C_Read_Data+0xc>)
   d5d78:	681b      	ldr	r3, [r3, #0]
   d5d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d7c:	9301      	str	r3, [sp, #4]
   d5d7e:	bd08      	pop	{r3, pc}
   d5d80:	00030228 	.word	0x00030228

000d5d84 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5d84:	b508      	push	{r3, lr}
   d5d86:	4b02      	ldr	r3, [pc, #8]	; (d5d90 <HAL_I2C_Peek_Data+0xc>)
   d5d88:	681b      	ldr	r3, [r3, #0]
   d5d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5d8c:	9301      	str	r3, [sp, #4]
   d5d8e:	bd08      	pop	{r3, pc}
   d5d90:	00030228 	.word	0x00030228

000d5d94 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5d94:	b508      	push	{r3, lr}
   d5d96:	4b02      	ldr	r3, [pc, #8]	; (d5da0 <HAL_I2C_Flush_Data+0xc>)
   d5d98:	681b      	ldr	r3, [r3, #0]
   d5d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d9c:	9301      	str	r3, [sp, #4]
   d5d9e:	bd08      	pop	{r3, pc}
   d5da0:	00030228 	.word	0x00030228

000d5da4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5da4:	b508      	push	{r3, lr}
   d5da6:	4b02      	ldr	r3, [pc, #8]	; (d5db0 <HAL_I2C_Is_Enabled+0xc>)
   d5da8:	681b      	ldr	r3, [r3, #0]
   d5daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5dac:	9301      	str	r3, [sp, #4]
   d5dae:	bd08      	pop	{r3, pc}
   d5db0:	00030228 	.word	0x00030228

000d5db4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5db4:	b508      	push	{r3, lr}
   d5db6:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <HAL_I2C_Init+0xc>)
   d5db8:	681b      	ldr	r3, [r3, #0]
   d5dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5dbc:	9301      	str	r3, [sp, #4]
   d5dbe:	bd08      	pop	{r3, pc}
   d5dc0:	00030228 	.word	0x00030228

000d5dc4 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5dc4:	b508      	push	{r3, lr}
   d5dc6:	4b02      	ldr	r3, [pc, #8]	; (d5dd0 <HAL_I2C_Request_Data_Ex+0xc>)
   d5dc8:	681b      	ldr	r3, [r3, #0]
   d5dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5dcc:	9301      	str	r3, [sp, #4]
   d5dce:	bd08      	pop	{r3, pc}
   d5dd0:	00030228 	.word	0x00030228

000d5dd4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b02      	ldr	r3, [pc, #8]	; (d5de0 <inet_inet_ntop+0xc>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	695b      	ldr	r3, [r3, #20]
   d5ddc:	9301      	str	r3, [sp, #4]
   d5dde:	bd08      	pop	{r3, pc}
   d5de0:	00030264 	.word	0x00030264

000d5de4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5de4:	b508      	push	{r3, lr}
   d5de6:	4b02      	ldr	r3, [pc, #8]	; (d5df0 <netdb_freeaddrinfo+0xc>)
   d5de8:	681b      	ldr	r3, [r3, #0]
   d5dea:	689b      	ldr	r3, [r3, #8]
   d5dec:	9301      	str	r3, [sp, #4]
   d5dee:	bd08      	pop	{r3, pc}
   d5df0:	00030268 	.word	0x00030268

000d5df4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5df4:	b508      	push	{r3, lr}
   d5df6:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <netdb_getaddrinfo+0xc>)
   d5df8:	681b      	ldr	r3, [r3, #0]
   d5dfa:	68db      	ldr	r3, [r3, #12]
   d5dfc:	9301      	str	r3, [sp, #4]
   d5dfe:	bd08      	pop	{r3, pc}
   d5e00:	00030268 	.word	0x00030268

000d5e04 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5e04:	b508      	push	{r3, lr}
   d5e06:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <HAL_SPI_Begin+0xc>)
   d5e08:	681b      	ldr	r3, [r3, #0]
   d5e0a:	681b      	ldr	r3, [r3, #0]
   d5e0c:	9301      	str	r3, [sp, #4]
   d5e0e:	bd08      	pop	{r3, pc}
   d5e10:	00030230 	.word	0x00030230

000d5e14 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d5e14:	b508      	push	{r3, lr}
   d5e16:	4b02      	ldr	r3, [pc, #8]	; (d5e20 <HAL_SPI_Set_Bit_Order+0xc>)
   d5e18:	681b      	ldr	r3, [r3, #0]
   d5e1a:	689b      	ldr	r3, [r3, #8]
   d5e1c:	9301      	str	r3, [sp, #4]
   d5e1e:	bd08      	pop	{r3, pc}
   d5e20:	00030230 	.word	0x00030230

000d5e24 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5e24:	b508      	push	{r3, lr}
   d5e26:	4b02      	ldr	r3, [pc, #8]	; (d5e30 <HAL_SPI_Set_Data_Mode+0xc>)
   d5e28:	681b      	ldr	r3, [r3, #0]
   d5e2a:	68db      	ldr	r3, [r3, #12]
   d5e2c:	9301      	str	r3, [sp, #4]
   d5e2e:	bd08      	pop	{r3, pc}
   d5e30:	00030230 	.word	0x00030230

000d5e34 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5e34:	b508      	push	{r3, lr}
   d5e36:	4b02      	ldr	r3, [pc, #8]	; (d5e40 <HAL_SPI_Set_Clock_Divider+0xc>)
   d5e38:	681b      	ldr	r3, [r3, #0]
   d5e3a:	691b      	ldr	r3, [r3, #16]
   d5e3c:	9301      	str	r3, [sp, #4]
   d5e3e:	bd08      	pop	{r3, pc}
   d5e40:	00030230 	.word	0x00030230

000d5e44 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5e44:	b508      	push	{r3, lr}
   d5e46:	4b02      	ldr	r3, [pc, #8]	; (d5e50 <HAL_SPI_Send_Receive_Data+0xc>)
   d5e48:	681b      	ldr	r3, [r3, #0]
   d5e4a:	695b      	ldr	r3, [r3, #20]
   d5e4c:	9301      	str	r3, [sp, #4]
   d5e4e:	bd08      	pop	{r3, pc}
   d5e50:	00030230 	.word	0x00030230

000d5e54 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5e54:	b508      	push	{r3, lr}
   d5e56:	4b02      	ldr	r3, [pc, #8]	; (d5e60 <HAL_SPI_Init+0xc>)
   d5e58:	681b      	ldr	r3, [r3, #0]
   d5e5a:	69db      	ldr	r3, [r3, #28]
   d5e5c:	9301      	str	r3, [sp, #4]
   d5e5e:	bd08      	pop	{r3, pc}
   d5e60:	00030230 	.word	0x00030230

000d5e64 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5e64:	b508      	push	{r3, lr}
   d5e66:	4b02      	ldr	r3, [pc, #8]	; (d5e70 <HAL_SPI_Is_Enabled+0xc>)
   d5e68:	681b      	ldr	r3, [r3, #0]
   d5e6a:	6a1b      	ldr	r3, [r3, #32]
   d5e6c:	9301      	str	r3, [sp, #4]
   d5e6e:	bd08      	pop	{r3, pc}
   d5e70:	00030230 	.word	0x00030230

000d5e74 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5e74:	b508      	push	{r3, lr}
   d5e76:	4b02      	ldr	r3, [pc, #8]	; (d5e80 <HAL_SPI_Info+0xc>)
   d5e78:	681b      	ldr	r3, [r3, #0]
   d5e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e7c:	9301      	str	r3, [sp, #4]
   d5e7e:	bd08      	pop	{r3, pc}
   d5e80:	00030230 	.word	0x00030230

000d5e84 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5e84:	b508      	push	{r3, lr}
   d5e86:	4b02      	ldr	r3, [pc, #8]	; (d5e90 <HAL_SPI_Acquire+0xc>)
   d5e88:	681b      	ldr	r3, [r3, #0]
   d5e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5e8c:	9301      	str	r3, [sp, #4]
   d5e8e:	bd08      	pop	{r3, pc}
   d5e90:	00030230 	.word	0x00030230

000d5e94 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5e94:	b508      	push	{r3, lr}
   d5e96:	4b02      	ldr	r3, [pc, #8]	; (d5ea0 <HAL_SPI_Release+0xc>)
   d5e98:	681b      	ldr	r3, [r3, #0]
   d5e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5e9c:	9301      	str	r3, [sp, #4]
   d5e9e:	bd08      	pop	{r3, pc}
   d5ea0:	00030230 	.word	0x00030230

000d5ea4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5ea4:	b508      	push	{r3, lr}
   d5ea6:	4b02      	ldr	r3, [pc, #8]	; (d5eb0 <HAL_USART_Init+0xc>)
   d5ea8:	681b      	ldr	r3, [r3, #0]
   d5eaa:	681b      	ldr	r3, [r3, #0]
   d5eac:	9301      	str	r3, [sp, #4]
   d5eae:	bd08      	pop	{r3, pc}
   d5eb0:	0003023c 	.word	0x0003023c

000d5eb4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5eb4:	b508      	push	{r3, lr}
   d5eb6:	4b02      	ldr	r3, [pc, #8]	; (d5ec0 <HAL_USART_Write_Data+0xc>)
   d5eb8:	681b      	ldr	r3, [r3, #0]
   d5eba:	68db      	ldr	r3, [r3, #12]
   d5ebc:	9301      	str	r3, [sp, #4]
   d5ebe:	bd08      	pop	{r3, pc}
   d5ec0:	0003023c 	.word	0x0003023c

000d5ec4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5ec4:	b508      	push	{r3, lr}
   d5ec6:	4b02      	ldr	r3, [pc, #8]	; (d5ed0 <HAL_USART_Available_Data+0xc>)
   d5ec8:	681b      	ldr	r3, [r3, #0]
   d5eca:	691b      	ldr	r3, [r3, #16]
   d5ecc:	9301      	str	r3, [sp, #4]
   d5ece:	bd08      	pop	{r3, pc}
   d5ed0:	0003023c 	.word	0x0003023c

000d5ed4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5ed4:	b508      	push	{r3, lr}
   d5ed6:	4b02      	ldr	r3, [pc, #8]	; (d5ee0 <HAL_USART_Read_Data+0xc>)
   d5ed8:	681b      	ldr	r3, [r3, #0]
   d5eda:	695b      	ldr	r3, [r3, #20]
   d5edc:	9301      	str	r3, [sp, #4]
   d5ede:	bd08      	pop	{r3, pc}
   d5ee0:	0003023c 	.word	0x0003023c

000d5ee4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5ee4:	b508      	push	{r3, lr}
   d5ee6:	4b02      	ldr	r3, [pc, #8]	; (d5ef0 <HAL_USART_Peek_Data+0xc>)
   d5ee8:	681b      	ldr	r3, [r3, #0]
   d5eea:	699b      	ldr	r3, [r3, #24]
   d5eec:	9301      	str	r3, [sp, #4]
   d5eee:	bd08      	pop	{r3, pc}
   d5ef0:	0003023c 	.word	0x0003023c

000d5ef4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5ef4:	b508      	push	{r3, lr}
   d5ef6:	4b02      	ldr	r3, [pc, #8]	; (d5f00 <HAL_USART_Flush_Data+0xc>)
   d5ef8:	681b      	ldr	r3, [r3, #0]
   d5efa:	69db      	ldr	r3, [r3, #28]
   d5efc:	9301      	str	r3, [sp, #4]
   d5efe:	bd08      	pop	{r3, pc}
   d5f00:	0003023c 	.word	0x0003023c

000d5f04 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5f04:	b508      	push	{r3, lr}
   d5f06:	4b02      	ldr	r3, [pc, #8]	; (d5f10 <HAL_USART_Is_Enabled+0xc>)
   d5f08:	681b      	ldr	r3, [r3, #0]
   d5f0a:	6a1b      	ldr	r3, [r3, #32]
   d5f0c:	9301      	str	r3, [sp, #4]
   d5f0e:	bd08      	pop	{r3, pc}
   d5f10:	0003023c 	.word	0x0003023c

000d5f14 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5f14:	b508      	push	{r3, lr}
   d5f16:	4b02      	ldr	r3, [pc, #8]	; (d5f20 <HAL_USART_Available_Data_For_Write+0xc>)
   d5f18:	681b      	ldr	r3, [r3, #0]
   d5f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5f1c:	9301      	str	r3, [sp, #4]
   d5f1e:	bd08      	pop	{r3, pc}
   d5f20:	0003023c 	.word	0x0003023c

000d5f24 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d5f24:	b508      	push	{r3, lr}
   d5f26:	4b02      	ldr	r3, [pc, #8]	; (d5f30 <HAL_USART_BeginConfig+0xc>)
   d5f28:	681b      	ldr	r3, [r3, #0]
   d5f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5f2c:	9301      	str	r3, [sp, #4]
   d5f2e:	bd08      	pop	{r3, pc}
   d5f30:	0003023c 	.word	0x0003023c

000d5f34 <HAL_USART_Write_NineBitData>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, HAL_USART_Write_NineBitData, uint32_t(HAL_USART_Serial serial, uint16_t data))
   d5f34:	b508      	push	{r3, lr}
   d5f36:	4b02      	ldr	r3, [pc, #8]	; (d5f40 <HAL_USART_Write_NineBitData+0xc>)
   d5f38:	681b      	ldr	r3, [r3, #0]
   d5f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5f3c:	9301      	str	r3, [sp, #4]
   d5f3e:	bd08      	pop	{r3, pc}
   d5f40:	0003023c 	.word	0x0003023c

000d5f44 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5f44:	b508      	push	{r3, lr}
   d5f46:	4b02      	ldr	r3, [pc, #8]	; (d5f50 <HAL_USB_USART_Init+0xc>)
   d5f48:	681b      	ldr	r3, [r3, #0]
   d5f4a:	681b      	ldr	r3, [r3, #0]
   d5f4c:	9301      	str	r3, [sp, #4]
   d5f4e:	bd08      	pop	{r3, pc}
   d5f50:	0003024c 	.word	0x0003024c

000d5f54 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5f54:	b508      	push	{r3, lr}
   d5f56:	4b02      	ldr	r3, [pc, #8]	; (d5f60 <HAL_USB_USART_Begin+0xc>)
   d5f58:	681b      	ldr	r3, [r3, #0]
   d5f5a:	685b      	ldr	r3, [r3, #4]
   d5f5c:	9301      	str	r3, [sp, #4]
   d5f5e:	bd08      	pop	{r3, pc}
   d5f60:	0003024c 	.word	0x0003024c

000d5f64 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5f64:	b508      	push	{r3, lr}
   d5f66:	4b02      	ldr	r3, [pc, #8]	; (d5f70 <HAL_USB_USART_Available_Data+0xc>)
   d5f68:	681b      	ldr	r3, [r3, #0]
   d5f6a:	691b      	ldr	r3, [r3, #16]
   d5f6c:	9301      	str	r3, [sp, #4]
   d5f6e:	bd08      	pop	{r3, pc}
   d5f70:	0003024c 	.word	0x0003024c

000d5f74 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5f74:	b508      	push	{r3, lr}
   d5f76:	4b02      	ldr	r3, [pc, #8]	; (d5f80 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5f78:	681b      	ldr	r3, [r3, #0]
   d5f7a:	695b      	ldr	r3, [r3, #20]
   d5f7c:	9301      	str	r3, [sp, #4]
   d5f7e:	bd08      	pop	{r3, pc}
   d5f80:	0003024c 	.word	0x0003024c

000d5f84 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5f84:	b508      	push	{r3, lr}
   d5f86:	4b02      	ldr	r3, [pc, #8]	; (d5f90 <HAL_USB_USART_Receive_Data+0xc>)
   d5f88:	681b      	ldr	r3, [r3, #0]
   d5f8a:	699b      	ldr	r3, [r3, #24]
   d5f8c:	9301      	str	r3, [sp, #4]
   d5f8e:	bd08      	pop	{r3, pc}
   d5f90:	0003024c 	.word	0x0003024c

000d5f94 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5f94:	b508      	push	{r3, lr}
   d5f96:	4b02      	ldr	r3, [pc, #8]	; (d5fa0 <HAL_USB_USART_Send_Data+0xc>)
   d5f98:	681b      	ldr	r3, [r3, #0]
   d5f9a:	69db      	ldr	r3, [r3, #28]
   d5f9c:	9301      	str	r3, [sp, #4]
   d5f9e:	bd08      	pop	{r3, pc}
   d5fa0:	0003024c 	.word	0x0003024c

000d5fa4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5fa4:	b508      	push	{r3, lr}
   d5fa6:	4b02      	ldr	r3, [pc, #8]	; (d5fb0 <HAL_USB_USART_Flush_Data+0xc>)
   d5fa8:	681b      	ldr	r3, [r3, #0]
   d5faa:	6a1b      	ldr	r3, [r3, #32]
   d5fac:	9301      	str	r3, [sp, #4]
   d5fae:	bd08      	pop	{r3, pc}
   d5fb0:	0003024c 	.word	0x0003024c

000d5fb4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5fb4:	b508      	push	{r3, lr}
   d5fb6:	4b02      	ldr	r3, [pc, #8]	; (d5fc0 <panic_+0xc>)
   d5fb8:	681b      	ldr	r3, [r3, #0]
   d5fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5fbc:	9301      	str	r3, [sp, #4]
   d5fbe:	bd08      	pop	{r3, pc}
   d5fc0:	00030260 	.word	0x00030260

000d5fc4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5fc4:	b508      	push	{r3, lr}
   d5fc6:	4b02      	ldr	r3, [pc, #8]	; (d5fd0 <log_message+0xc>)
   d5fc8:	681b      	ldr	r3, [r3, #0]
   d5fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5fcc:	9301      	str	r3, [sp, #4]
   d5fce:	bd08      	pop	{r3, pc}
   d5fd0:	00030260 	.word	0x00030260

000d5fd4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5fd4:	b508      	push	{r3, lr}
   d5fd6:	4b02      	ldr	r3, [pc, #8]	; (d5fe0 <set_system_mode+0xc>)
   d5fd8:	681b      	ldr	r3, [r3, #0]
   d5fda:	685b      	ldr	r3, [r3, #4]
   d5fdc:	9301      	str	r3, [sp, #4]
   d5fde:	bd08      	pop	{r3, pc}
   d5fe0:	00030220 	.word	0x00030220

000d5fe4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5fe4:	b508      	push	{r3, lr}
   d5fe6:	4b02      	ldr	r3, [pc, #8]	; (d5ff0 <system_delay_ms+0xc>)
   d5fe8:	681b      	ldr	r3, [r3, #0]
   d5fea:	695b      	ldr	r3, [r3, #20]
   d5fec:	9301      	str	r3, [sp, #4]
   d5fee:	bd08      	pop	{r3, pc}
   d5ff0:	00030220 	.word	0x00030220

000d5ff4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5ff4:	b508      	push	{r3, lr}
   d5ff6:	4b03      	ldr	r3, [pc, #12]	; (d6004 <system_ctrl_set_app_request_handler+0x10>)
   d5ff8:	681b      	ldr	r3, [r3, #0]
   d5ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5ffe:	9301      	str	r3, [sp, #4]
   d6000:	bd08      	pop	{r3, pc}
   d6002:	0000      	.short	0x0000
   d6004:	00030220 	.word	0x00030220

000d6008 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6008:	b508      	push	{r3, lr}
   d600a:	4b03      	ldr	r3, [pc, #12]	; (d6018 <system_ctrl_set_result+0x10>)
   d600c:	681b      	ldr	r3, [r3, #0]
   d600e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6012:	9301      	str	r3, [sp, #4]
   d6014:	bd08      	pop	{r3, pc}
   d6016:	0000      	.short	0x0000
   d6018:	00030220 	.word	0x00030220

000d601c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d601c:	b508      	push	{r3, lr}
   d601e:	4b02      	ldr	r3, [pc, #8]	; (d6028 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6020:	681b      	ldr	r3, [r3, #0]
   d6022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6024:	9301      	str	r3, [sp, #4]
   d6026:	bd08      	pop	{r3, pc}
   d6028:	00030244 	.word	0x00030244

000d602c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d602c:	b508      	push	{r3, lr}
   d602e:	4b02      	ldr	r3, [pc, #8]	; (d6038 <network_connect+0xc>)
   d6030:	681b      	ldr	r3, [r3, #0]
   d6032:	685b      	ldr	r3, [r3, #4]
   d6034:	9301      	str	r3, [sp, #4]
   d6036:	bd08      	pop	{r3, pc}
   d6038:	00030240 	.word	0x00030240

000d603c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d603c:	b508      	push	{r3, lr}
   d603e:	4b02      	ldr	r3, [pc, #8]	; (d6048 <network_connecting+0xc>)
   d6040:	681b      	ldr	r3, [r3, #0]
   d6042:	689b      	ldr	r3, [r3, #8]
   d6044:	9301      	str	r3, [sp, #4]
   d6046:	bd08      	pop	{r3, pc}
   d6048:	00030240 	.word	0x00030240

000d604c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d604c:	b508      	push	{r3, lr}
   d604e:	4b02      	ldr	r3, [pc, #8]	; (d6058 <network_disconnect+0xc>)
   d6050:	681b      	ldr	r3, [r3, #0]
   d6052:	68db      	ldr	r3, [r3, #12]
   d6054:	9301      	str	r3, [sp, #4]
   d6056:	bd08      	pop	{r3, pc}
   d6058:	00030240 	.word	0x00030240

000d605c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d605c:	b508      	push	{r3, lr}
   d605e:	4b02      	ldr	r3, [pc, #8]	; (d6068 <network_ready+0xc>)
   d6060:	681b      	ldr	r3, [r3, #0]
   d6062:	691b      	ldr	r3, [r3, #16]
   d6064:	9301      	str	r3, [sp, #4]
   d6066:	bd08      	pop	{r3, pc}
   d6068:	00030240 	.word	0x00030240

000d606c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d606c:	b508      	push	{r3, lr}
   d606e:	4b02      	ldr	r3, [pc, #8]	; (d6078 <network_on+0xc>)
   d6070:	681b      	ldr	r3, [r3, #0]
   d6072:	695b      	ldr	r3, [r3, #20]
   d6074:	9301      	str	r3, [sp, #4]
   d6076:	bd08      	pop	{r3, pc}
   d6078:	00030240 	.word	0x00030240

000d607c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d607c:	b508      	push	{r3, lr}
   d607e:	4b02      	ldr	r3, [pc, #8]	; (d6088 <network_off+0xc>)
   d6080:	681b      	ldr	r3, [r3, #0]
   d6082:	699b      	ldr	r3, [r3, #24]
   d6084:	9301      	str	r3, [sp, #4]
   d6086:	bd08      	pop	{r3, pc}
   d6088:	00030240 	.word	0x00030240

000d608c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d608c:	b508      	push	{r3, lr}
   d608e:	4b02      	ldr	r3, [pc, #8]	; (d6098 <network_listen+0xc>)
   d6090:	681b      	ldr	r3, [r3, #0]
   d6092:	69db      	ldr	r3, [r3, #28]
   d6094:	9301      	str	r3, [sp, #4]
   d6096:	bd08      	pop	{r3, pc}
   d6098:	00030240 	.word	0x00030240

000d609c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d609c:	b508      	push	{r3, lr}
   d609e:	4b02      	ldr	r3, [pc, #8]	; (d60a8 <network_listening+0xc>)
   d60a0:	681b      	ldr	r3, [r3, #0]
   d60a2:	6a1b      	ldr	r3, [r3, #32]
   d60a4:	9301      	str	r3, [sp, #4]
   d60a6:	bd08      	pop	{r3, pc}
   d60a8:	00030240 	.word	0x00030240

000d60ac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d60ac:	b508      	push	{r3, lr}
   d60ae:	4b02      	ldr	r3, [pc, #8]	; (d60b8 <network_set_listen_timeout+0xc>)
   d60b0:	681b      	ldr	r3, [r3, #0]
   d60b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d60b4:	9301      	str	r3, [sp, #4]
   d60b6:	bd08      	pop	{r3, pc}
   d60b8:	00030240 	.word	0x00030240

000d60bc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d60bc:	b508      	push	{r3, lr}
   d60be:	4b02      	ldr	r3, [pc, #8]	; (d60c8 <network_get_listen_timeout+0xc>)
   d60c0:	681b      	ldr	r3, [r3, #0]
   d60c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d60c4:	9301      	str	r3, [sp, #4]
   d60c6:	bd08      	pop	{r3, pc}
   d60c8:	00030240 	.word	0x00030240

000d60cc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d60cc:	b508      	push	{r3, lr}
   d60ce:	4b02      	ldr	r3, [pc, #8]	; (d60d8 <malloc+0xc>)
   d60d0:	681b      	ldr	r3, [r3, #0]
   d60d2:	681b      	ldr	r3, [r3, #0]
   d60d4:	9301      	str	r3, [sp, #4]
   d60d6:	bd08      	pop	{r3, pc}
   d60d8:	0003021c 	.word	0x0003021c

000d60dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d60dc:	b508      	push	{r3, lr}
   d60de:	4b02      	ldr	r3, [pc, #8]	; (d60e8 <free+0xc>)
   d60e0:	681b      	ldr	r3, [r3, #0]
   d60e2:	685b      	ldr	r3, [r3, #4]
   d60e4:	9301      	str	r3, [sp, #4]
   d60e6:	bd08      	pop	{r3, pc}
   d60e8:	0003021c 	.word	0x0003021c

000d60ec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d60ec:	b508      	push	{r3, lr}
   d60ee:	4b02      	ldr	r3, [pc, #8]	; (d60f8 <realloc+0xc>)
   d60f0:	681b      	ldr	r3, [r3, #0]
   d60f2:	689b      	ldr	r3, [r3, #8]
   d60f4:	9301      	str	r3, [sp, #4]
   d60f6:	bd08      	pop	{r3, pc}
   d60f8:	0003021c 	.word	0x0003021c

000d60fc <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d60fc:	b508      	push	{r3, lr}
   d60fe:	4b02      	ldr	r3, [pc, #8]	; (d6108 <sprintf+0xc>)
   d6100:	681b      	ldr	r3, [r3, #0]
   d6102:	68db      	ldr	r3, [r3, #12]
   d6104:	9301      	str	r3, [sp, #4]
   d6106:	bd08      	pop	{r3, pc}
   d6108:	0003021c 	.word	0x0003021c

000d610c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d610c:	2100      	movs	r1, #0
   d610e:	f7ff bf69 	b.w	d5fe4 <system_delay_ms>

000d6112 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6112:	4770      	bx	lr

000d6114 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6114:	2000      	movs	r0, #0
   d6116:	4770      	bx	lr

000d6118 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6118:	4770      	bx	lr

000d611a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d611a:	2000      	movs	r0, #0
   d611c:	4770      	bx	lr

000d611e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d611e:	4770      	bx	lr

000d6120 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6120:	2000      	movs	r0, #0
   d6122:	4770      	bx	lr

000d6124 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6124:	b510      	push	{r4, lr}
   d6126:	2114      	movs	r1, #20
   d6128:	4604      	mov	r4, r0
   d612a:	f001 ffb6 	bl	d809a <_ZdlPvj>
   d612e:	4620      	mov	r0, r4
   d6130:	bd10      	pop	{r4, pc}

000d6132 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d6132:	b510      	push	{r4, lr}
   d6134:	2114      	movs	r1, #20
   d6136:	4604      	mov	r4, r0
   d6138:	f001 ffaf 	bl	d809a <_ZdlPvj>
   d613c:	4620      	mov	r0, r4
   d613e:	bd10      	pop	{r4, pc}

000d6140 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d6140:	b510      	push	{r4, lr}
   d6142:	2114      	movs	r1, #20
   d6144:	4604      	mov	r4, r0
   d6146:	f001 ffa8 	bl	d809a <_ZdlPvj>
   d614a:	4620      	mov	r0, r4
   d614c:	bd10      	pop	{r4, pc}

000d614e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d614e:	f7fd bfa6 	b.w	d409e <_ZdlPv>

000d6152 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d6152:	f7fd bfa4 	b.w	d409e <_ZdlPv>

000d6156 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d6156:	f7fd bfa2 	b.w	d409e <_ZdlPv>

000d615a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d615a:	b510      	push	{r4, lr}
   d615c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d615e:	6800      	ldr	r0, [r0, #0]
   d6160:	b108      	cbz	r0, d6166 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6162:	f7ff fd67 	bl	d5c34 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6166:	4620      	mov	r0, r4
   d6168:	bd10      	pop	{r4, pc}
	...

000d616c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d616c:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d616e:	200a      	movs	r0, #10
   d6170:	4a02      	ldr	r2, [pc, #8]	; (d617c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d6172:	2100      	movs	r1, #0
   d6174:	f7ff ff1e 	bl	d5fb4 <panic_>
    }
}
   d6178:	bd08      	pop	{r3, pc}
   d617a:	bf00      	nop
   d617c:	000d5c75 	.word	0x000d5c75

000d6180 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6180:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6182:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6184:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6186:	689b      	ldr	r3, [r3, #8]
   d6188:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d618a:	68a3      	ldr	r3, [r4, #8]
   d618c:	3b01      	subs	r3, #1
   d618e:	60a3      	str	r3, [r4, #8]
   d6190:	b92b      	cbnz	r3, d619e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d6192:	6823      	ldr	r3, [r4, #0]
   d6194:	4620      	mov	r0, r4
   d6196:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d619c:	4718      	bx	r3
   d619e:	bd10      	pop	{r4, pc}

000d61a0 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d61a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d61a4:	b2da      	uxtb	r2, r3
   d61a6:	2a09      	cmp	r2, #9
   d61a8:	d801      	bhi.n	d61ae <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d61aa:	4618      	mov	r0, r3
   d61ac:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d61ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d61b2:	2b05      	cmp	r3, #5
   d61b4:	d801      	bhi.n	d61ba <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d61b6:	3857      	subs	r0, #87	; 0x57
   d61b8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d61ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d61be:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d61c0:	bf94      	ite	ls
   d61c2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d61c4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d61c8:	4770      	bx	lr
	...

000d61cc <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d61cc:	b510      	push	{r4, lr}
            locked_(false) {
   d61ce:	2300      	movs	r3, #0
   d61d0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d61d2:	4b04      	ldr	r3, [pc, #16]	; (d61e4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d61d4:	4604      	mov	r4, r0
   d61d6:	6818      	ldr	r0, [r3, #0]
   d61d8:	f7ff fd34 	bl	d5c44 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d61dc:	2301      	movs	r3, #1
   d61de:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d61e0:	4620      	mov	r0, r4
   d61e2:	bd10      	pop	{r4, pc}
   d61e4:	2003e4dc 	.word	0x2003e4dc

000d61e8 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d61e8:	b510      	push	{r4, lr}
        if (locked_) {
   d61ea:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d61ec:	4604      	mov	r4, r0
        if (locked_) {
   d61ee:	b11b      	cbz	r3, d61f8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d61f0:	4b02      	ldr	r3, [pc, #8]	; (d61fc <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d61f2:	6818      	ldr	r0, [r3, #0]
   d61f4:	f7ff fd2e 	bl	d5c54 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d61f8:	4620      	mov	r0, r4
   d61fa:	bd10      	pop	{r4, pc}
   d61fc:	2003e4dc 	.word	0x2003e4dc

000d6200 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d6200:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d6202:	7982      	ldrb	r2, [r0, #6]
   d6204:	798b      	ldrb	r3, [r1, #6]
   d6206:	429a      	cmp	r2, r3
   d6208:	d106      	bne.n	d6218 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d620a:	2206      	movs	r2, #6
   d620c:	f003 fa20 	bl	d9650 <memcmp>
   d6210:	fab0 f080 	clz	r0, r0
   d6214:	0940      	lsrs	r0, r0, #5
   d6216:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d6218:	2000      	movs	r0, #0
}
   d621a:	bd08      	pop	{r3, pc}

000d621c <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d621c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d621e:	2301      	movs	r3, #1
   d6220:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6222:	4b05      	ldr	r3, [pc, #20]	; (d6238 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d6224:	4602      	mov	r2, r0
   d6226:	f103 0110 	add.w	r1, r3, #16
   d622a:	f853 4b04 	ldr.w	r4, [r3], #4
   d622e:	f842 4b04 	str.w	r4, [r2], #4
   d6232:	428b      	cmp	r3, r1
   d6234:	d1f9      	bne.n	d622a <_ZN8particle7BleUuidC1Ev+0xe>
}
   d6236:	bd10      	pop	{r4, pc}
   d6238:	000d9cf0 	.word	0x000d9cf0

000d623c <_ZN8particle7BleUuidC1ERKS0_>:
        type_ = BleUuidType::LONG;
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuid::BleUuid(const BleUuid& uuid)
   d623c:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d623e:	690b      	ldr	r3, [r1, #16]
   d6240:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6242:	f101 0210 	add.w	r2, r1, #16
   d6246:	4603      	mov	r3, r0
   d6248:	f851 4b04 	ldr.w	r4, [r1], #4
   d624c:	f843 4b04 	str.w	r4, [r3], #4
   d6250:	4291      	cmp	r1, r2
   d6252:	d1f9      	bne.n	d6248 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d6254:	bd10      	pop	{r4, pc}

000d6256 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6256:	b510      	push	{r4, lr}
    if (uuid128) {
   d6258:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d625a:	4604      	mov	r4, r0
    if (uuid128) {
   d625c:	b1b9      	cbz	r1, d628e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d625e:	2a01      	cmp	r2, #1
   d6260:	d109      	bne.n	d6276 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6262:	4603      	mov	r3, r0
   d6264:	f101 0210 	add.w	r2, r1, #16
   d6268:	f851 0b04 	ldr.w	r0, [r1], #4
   d626c:	f843 0b04 	str.w	r0, [r3], #4
   d6270:	4291      	cmp	r1, r2
   d6272:	d1f9      	bne.n	d6268 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d6274:	e008      	b.n	d6288 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d6276:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d6278:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d627a:	5c98      	ldrb	r0, [r3, r2]
   d627c:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d6280:	3a01      	subs	r2, #1
   d6282:	b2d2      	uxtb	r2, r2
   d6284:	2aff      	cmp	r2, #255	; 0xff
   d6286:	d1f8      	bne.n	d627a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d6288:	2301      	movs	r3, #1
   d628a:	6123      	str	r3, [r4, #16]
   d628c:	e002      	b.n	d6294 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d628e:	2210      	movs	r2, #16
   d6290:	f003 fa13 	bl	d96ba <memset>
    }
}
   d6294:	4620      	mov	r0, r4
   d6296:	bd10      	pop	{r4, pc}

000d6298 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
    type_ = BleUuidType::SHORT;
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d6298:	b538      	push	{r3, r4, r5, lr}
   d629a:	4605      	mov	r5, r0
   d629c:	4614      	mov	r4, r2
        : BleUuid(uuid128, order) {
   d629e:	461a      	mov	r2, r3
   d62a0:	f7ff ffd9 	bl	d6256 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d62a4:	732c      	strb	r4, [r5, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d62a6:	0a24      	lsrs	r4, r4, #8
   d62a8:	736c      	strb	r4, [r5, #13]
}
   d62aa:	4628      	mov	r0, r5
   d62ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d62b0 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d62b0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d62b2:	6902      	ldr	r2, [r0, #16]
   d62b4:	b90a      	cbnz	r2, d62ba <_ZNK8particle7BleUuid7isValidEv+0xa>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d62b6:	8980      	ldrh	r0, [r0, #12]
   d62b8:	e003      	b.n	d62c2 <_ZNK8particle7BleUuid7isValidEv+0x12>
    } else {
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d62ba:	2210      	movs	r2, #16
   d62bc:	4903      	ldr	r1, [pc, #12]	; (d62cc <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d62be:	f003 f9c7 	bl	d9650 <memcmp>
   d62c2:	3000      	adds	r0, #0
   d62c4:	bf18      	it	ne
   d62c6:	2001      	movne	r0, #1
    }
}
   d62c8:	bd08      	pop	{r3, pc}
   d62ca:	bf00      	nop
   d62cc:	000d9cf0 	.word	0x000d9cf0

000d62d0 <_ZNK8particle7BleUuid4typeEv>:

BleUuidType BleUuid::type() const {
    return type_;
}
   d62d0:	6900      	ldr	r0, [r0, #16]
   d62d2:	4770      	bx	lr

000d62d4 <_ZN8particle7BleUuid7halUUIDEv>:

hal_ble_uuid_t BleUuid::halUUID() {
   d62d4:	b538      	push	{r3, r4, r5, lr}
   d62d6:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d62d8:	2214      	movs	r2, #20
   d62da:	2100      	movs	r1, #0

BleUuidType BleUuid::type() const {
    return type_;
}

hal_ble_uuid_t BleUuid::halUUID() {
   d62dc:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d62de:	f003 f9ec 	bl	d96ba <memset>
    if (type_ == BleUuidType::SHORT) {
   d62e2:	6923      	ldr	r3, [r4, #16]
   d62e4:	b92b      	cbnz	r3, d62f2 <_ZN8particle7BleUuid7halUUIDEv+0x1e>
        uuid.type = BLE_UUID_TYPE_16BIT;
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d62e6:	7b62      	ldrb	r2, [r4, #13]
   d62e8:	7b23      	ldrb	r3, [r4, #12]
   d62ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d62ee:	802b      	strh	r3, [r5, #0]
   d62f0:	e00a      	b.n	d6308 <_ZN8particle7BleUuid7halUUIDEv+0x34>
    } else {
        uuid.type = BLE_UUID_TYPE_128BIT;
   d62f2:	2301      	movs	r3, #1
   d62f4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d62f6:	f104 0210 	add.w	r2, r4, #16
   d62fa:	462b      	mov	r3, r5
   d62fc:	f854 1b04 	ldr.w	r1, [r4], #4
   d6300:	f843 1b04 	str.w	r1, [r3], #4
   d6304:	4294      	cmp	r4, r2
   d6306:	d1f9      	bne.n	d62fc <_ZN8particle7BleUuid7halUUIDEv+0x28>
    }
    return uuid;
}
   d6308:	4628      	mov	r0, r5
   d630a:	bd38      	pop	{r3, r4, r5, pc}

000d630c <_ZNK8particle7BleUuid7shortedEv>:

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d630c:	7b42      	ldrb	r2, [r0, #13]
   d630e:	7b00      	ldrb	r0, [r0, #12]
}
   d6310:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d6314:	4770      	bx	lr

000d6316 <_ZNK8particle7BleUuid8rawBytesEv>:
    return BLE_SIG_UUID_128BIT_LEN;
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}
   d6316:	4770      	bx	lr

000d6318 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d6318:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d631a:	690b      	ldr	r3, [r1, #16]
   d631c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d631e:	f101 0210 	add.w	r2, r1, #16
   d6322:	4603      	mov	r3, r0
   d6324:	f851 4b04 	ldr.w	r4, [r1], #4
   d6328:	f843 4b04 	str.w	r4, [r3], #4
   d632c:	4291      	cmp	r1, r2
   d632e:	d1f9      	bne.n	d6324 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d6330:	bd10      	pop	{r4, pc}

000d6332 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d6332:	b510      	push	{r4, lr}
   d6334:	b086      	sub	sp, #24
   d6336:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d6338:	2201      	movs	r2, #1
   d633a:	a801      	add	r0, sp, #4
   d633c:	f7ff ff8b 	bl	d6256 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d6340:	a901      	add	r1, sp, #4
   d6342:	4620      	mov	r0, r4
   d6344:	f7ff ffe8 	bl	d6318 <_ZN8particle7BleUuidaSERKS0_>
}
   d6348:	b006      	add	sp, #24
   d634a:	bd10      	pop	{r4, pc}

000d634c <_ZNK8particle7BleUuideqERKS0_>:

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    return *this = BleUuid(uuid);
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d634c:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d634e:	6902      	ldr	r2, [r0, #16]
   d6350:	690b      	ldr	r3, [r1, #16]
   d6352:	429a      	cmp	r2, r3
   d6354:	d106      	bne.n	d6364 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d6356:	2210      	movs	r2, #16
   d6358:	f003 f97a 	bl	d9650 <memcmp>
   d635c:	fab0 f080 	clz	r0, r0
   d6360:	0940      	lsrs	r0, r0, #5
   d6362:	bd08      	pop	{r3, pc}
   d6364:	2000      	movs	r0, #0
}
   d6366:	bd08      	pop	{r3, pc}

000d6368 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d6368:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d636a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d636c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d636e:	4b31      	ldr	r3, [pc, #196]	; (d6434 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d6370:	460e      	mov	r6, r1
   d6372:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6374:	4602      	mov	r2, r0
   d6376:	f103 0110 	add.w	r1, r3, #16
   d637a:	f853 0b04 	ldr.w	r0, [r3], #4
   d637e:	f842 0b04 	str.w	r0, [r2], #4
   d6382:	428b      	cmp	r3, r1
   d6384:	d1f9      	bne.n	d637a <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d6386:	2e00      	cmp	r6, #0
   d6388:	d051      	beq.n	d642e <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d638a:	2124      	movs	r1, #36	; 0x24
   d638c:	4630      	mov	r0, r6
   d638e:	f003 f9d5 	bl	d973c <strnlen>
   d6392:	2804      	cmp	r0, #4
   d6394:	d010      	beq.n	d63b8 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d6396:	2700      	movs	r7, #0
   d6398:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d639a:	2124      	movs	r1, #36	; 0x24
   d639c:	4630      	mov	r0, r6
   d639e:	f003 f9cd 	bl	d973c <strnlen>
   d63a2:	42b8      	cmp	r0, r7
   d63a4:	d901      	bls.n	d63aa <_ZN8particle7BleUuid9constructEPKc+0x42>
   d63a6:	bb44      	cbnz	r4, d63fa <_ZN8particle7BleUuid9constructEPKc+0x92>
   d63a8:	e041      	b.n	d642e <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d63aa:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d63ac:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d63ae:	42a5      	cmp	r5, r4
   d63b0:	d03d      	beq.n	d642e <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d63b2:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d63b6:	e7fa      	b.n	d63ae <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d63b8:	7830      	ldrb	r0, [r6, #0]
   d63ba:	f7ff fef1 	bl	d61a0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d63be:	1e04      	subs	r4, r0, #0
   d63c0:	db18      	blt.n	d63f4 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d63c2:	7870      	ldrb	r0, [r6, #1]
   d63c4:	f7ff feec 	bl	d61a0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d63c8:	2800      	cmp	r0, #0
   d63ca:	db13      	blt.n	d63f4 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d63cc:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d63d0:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d63d4:	78b0      	ldrb	r0, [r6, #2]
   d63d6:	f7ff fee3 	bl	d61a0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d63da:	1e04      	subs	r4, r0, #0
   d63dc:	db0a      	blt.n	d63f4 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d63de:	78f0      	ldrb	r0, [r6, #3]
   d63e0:	f7ff fede 	bl	d61a0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d63e4:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d63e6:	bfa1      	itttt	ge
   d63e8:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d63ec:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d63f0:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d63f2:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d63f4:	2300      	movs	r3, #0
   d63f6:	612b      	str	r3, [r5, #16]
   d63f8:	e019      	b.n	d642e <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d63fa:	5df0      	ldrb	r0, [r6, r7]
   d63fc:	f7ff fed0 	bl	d61a0 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d6400:	0603      	lsls	r3, r0, #24
   d6402:	d412      	bmi.n	d642a <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d6404:	3c01      	subs	r4, #1
   d6406:	0100      	lsls	r0, r0, #4
   d6408:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d640a:	2124      	movs	r1, #36	; 0x24
   d640c:	4630      	mov	r0, r6
   d640e:	f003 f995 	bl	d973c <strnlen>
   d6412:	3701      	adds	r7, #1
   d6414:	4287      	cmp	r7, r0
   d6416:	d208      	bcs.n	d642a <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d6418:	5df0      	ldrb	r0, [r6, r7]
   d641a:	f7ff fec1 	bl	d61a0 <_ZN8particle11hexToNibbleEc>
   d641e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d6420:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d6422:	bfa2      	ittt	ge
   d6424:	5d2b      	ldrbge	r3, [r5, r4]
   d6426:	4318      	orrge	r0, r3
   d6428:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d642a:	3701      	adds	r7, #1
   d642c:	e7b5      	b.n	d639a <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d642e:	b003      	add	sp, #12
   d6430:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6432:	bf00      	nop
   d6434:	000d9cf0 	.word	0x000d9cf0

000d6438 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d6438:	b538      	push	{r3, r4, r5, lr}
   d643a:	4604      	mov	r4, r0
   d643c:	460d      	mov	r5, r1
        : BleUuid() {
   d643e:	f7ff feed 	bl	d621c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d6442:	4620      	mov	r0, r4
   d6444:	4629      	mov	r1, r5
   d6446:	f7ff ff8f 	bl	d6368 <_ZN8particle7BleUuid9constructEPKc>
}
   d644a:	4620      	mov	r0, r4
   d644c:	bd38      	pop	{r3, r4, r5, pc}

000d644e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d644e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d6450:	b18b      	cbz	r3, d6476 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d6452:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6454:	1ce5      	adds	r5, r4, #3
   d6456:	428d      	cmp	r5, r1
   d6458:	d80f      	bhi.n	d647a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d645a:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d645c:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d645e:	5d87      	ldrb	r7, [r0, r6]
   d6460:	4297      	cmp	r7, r2
   d6462:	d105      	bne.n	d6470 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d6464:	442e      	add	r6, r5
   d6466:	42b1      	cmp	r1, r6
   d6468:	d307      	bcc.n	d647a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d646a:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d646c:	1c68      	adds	r0, r5, #1
                return adsLen;
   d646e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d6470:	3501      	adds	r5, #1
   d6472:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6474:	e7ee      	b.n	d6454 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d6476:	4618      	mov	r0, r3
   d6478:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d647a:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d647c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d647e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d647e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6482:	4604      	mov	r4, r0
   d6484:	460e      	mov	r6, r1
   d6486:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d6488:	4617      	mov	r7, r2
   d648a:	2a00      	cmp	r2, #0
   d648c:	d03a      	beq.n	d6504 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d648e:	460a      	mov	r2, r1
   d6490:	ab01      	add	r3, sp, #4
   d6492:	6a01      	ldr	r1, [r0, #32]
   d6494:	f7ff ffdb 	bl	d644e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d6498:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d649c:	6a22      	ldr	r2, [r4, #32]
   d649e:	bb03      	cbnz	r3, d64e2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d64a0:	b1f8      	cbz	r0, d64e2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d64a2:	1c96      	adds	r6, r2, #2
   d64a4:	442e      	add	r6, r5
   d64a6:	1a36      	subs	r6, r6, r0
   d64a8:	2e1f      	cmp	r6, #31
   d64aa:	d82b      	bhi.n	d6504 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d64ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d64b0:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d64b4:	ebc8 0202 	rsb	r2, r8, r2
   d64b8:	1a12      	subs	r2, r2, r0
   d64ba:	eb00 0108 	add.w	r1, r0, r8
   d64be:	eb05 0009 	add.w	r0, r5, r9
   d64c2:	b292      	uxth	r2, r2
   d64c4:	4421      	add	r1, r4
   d64c6:	4420      	add	r0, r4
   d64c8:	f003 f8dc 	bl	d9684 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d64cc:	1c6b      	adds	r3, r5, #1
   d64ce:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d64d2:	462a      	mov	r2, r5
   d64d4:	4639      	mov	r1, r7
   d64d6:	eb04 0009 	add.w	r0, r4, r9
   d64da:	f003 f8c8 	bl	d966e <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d64de:	6226      	str	r6, [r4, #32]
   d64e0:	e010      	b.n	d6504 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d64e2:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d64e4:	182b      	adds	r3, r5, r0
   d64e6:	2b1f      	cmp	r3, #31
   d64e8:	d80c      	bhi.n	d6504 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d64ea:	1c6b      	adds	r3, r5, #1
   d64ec:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d64ee:	4422      	add	r2, r4
   d64f0:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d64f2:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d64f4:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d64f6:	4420      	add	r0, r4
   d64f8:	462a      	mov	r2, r5
   d64fa:	f003 f8b8 	bl	d966e <memcpy>
        selfLen_ += len;
   d64fe:	6a22      	ldr	r2, [r4, #32]
   d6500:	442a      	add	r2, r5
   d6502:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d6504:	6a20      	ldr	r0, [r4, #32]
}
   d6506:	b003      	add	sp, #12
   d6508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d650c <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d650c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d650e:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d6510:	4603      	mov	r3, r0
   d6512:	f100 021f 	add.w	r2, r0, #31
   d6516:	2000      	movs	r0, #0
   d6518:	f803 0b01 	strb.w	r0, [r3], #1
   d651c:	4293      	cmp	r3, r2
   d651e:	f04f 0100 	mov.w	r1, #0
   d6522:	d1f9      	bne.n	d6518 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d6524:	aa04      	add	r2, sp, #16
   d6526:	2306      	movs	r3, #6
   d6528:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d652c:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d652e:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6530:	9100      	str	r1, [sp, #0]
   d6532:	4620      	mov	r0, r4
   d6534:	4619      	mov	r1, r3
   d6536:	f7ff ffa2 	bl	d647e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d653a:	4620      	mov	r0, r4
   d653c:	b004      	add	sp, #16
   d653e:	bd10      	pop	{r4, pc}

000d6540 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
        selfLen_ += len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::appendLocalName(const char* name) {
   d6540:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6542:	460c      	mov	r4, r1
   d6544:	4605      	mov	r5, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   d6546:	2114      	movs	r1, #20
   d6548:	4620      	mov	r0, r4
   d654a:	f003 f8f7 	bl	d973c <strnlen>
   d654e:	2300      	movs	r3, #0
   d6550:	9300      	str	r3, [sp, #0]
   d6552:	4622      	mov	r2, r4
   d6554:	4603      	mov	r3, r0
   d6556:	2109      	movs	r1, #9
   d6558:	4628      	mov	r0, r5
   d655a:	f7ff ff90 	bl	d647e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d655e:	b003      	add	sp, #12
   d6560:	bd30      	pop	{r4, r5, pc}

000d6562 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6562:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d6564:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6566:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d6568:	ab01      	add	r3, sp, #4
   d656a:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d656c:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d656e:	f7ff ff6e 	bl	d644e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d6572:	4605      	mov	r5, r0
   d6574:	b178      	cbz	r0, d6596 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d6576:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d6578:	6a22      	ldr	r2, [r4, #32]
   d657a:	1829      	adds	r1, r5, r0
   d657c:	1a12      	subs	r2, r2, r0
   d657e:	1b52      	subs	r2, r2, r5
   d6580:	4421      	add	r1, r4
   d6582:	4420      	add	r0, r4
   d6584:	f003 f873 	bl	d966e <memcpy>
        selfLen_ -= len;
   d6588:	6a23      	ldr	r3, [r4, #32]
   d658a:	1b5d      	subs	r5, r3, r5
   d658c:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d658e:	4631      	mov	r1, r6
   d6590:	4620      	mov	r0, r4
   d6592:	f7ff ffe6 	bl	d6562 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d6596:	b002      	add	sp, #8
   d6598:	bd70      	pop	{r4, r5, r6, pc}
	...

000d659c <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d659c:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d659e:	2500      	movs	r5, #0
   d65a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d65a4:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d65a6:	8043      	strh	r3, [r0, #2]
   d65a8:	220e      	movs	r2, #14
   d65aa:	4629      	mov	r1, r5
   d65ac:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d65ae:	7105      	strb	r5, [r0, #4]
   d65b0:	3006      	adds	r0, #6
   d65b2:	f003 f882 	bl	d96ba <memset>
   d65b6:	f104 0014 	add.w	r0, r4, #20
   d65ba:	f7ff fe2f 	bl	d621c <_ZN8particle7BleUuidC1Ev>
   d65be:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d65c2:	f7ff fe2b 	bl	d621c <_ZN8particle7BleUuidC1Ev>
   d65c6:	4904      	ldr	r1, [pc, #16]	; (d65d8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d65c8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d65cc:	f001 fa6c 	bl	d7aa8 <_ZN6StringC1EPK19__FlashStringHelper>
   d65d0:	64e5      	str	r5, [r4, #76]	; 0x4c
   d65d2:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d65d4:	4620      	mov	r0, r4
   d65d6:	bd38      	pop	{r3, r4, r5, pc}
   d65d8:	000d9e17 	.word	0x000d9e17

000d65dc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d65dc:	b510      	push	{r4, lr}
   d65de:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d65e0:	69c2      	ldr	r2, [r0, #28]
   d65e2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d65e6:	4293      	cmp	r3, r2
   d65e8:	4618      	mov	r0, r3
   d65ea:	d006      	beq.n	d65fa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d65ec:	6804      	ldr	r4, [r0, #0]
   d65ee:	8824      	ldrh	r4, [r4, #0]
   d65f0:	428c      	cmp	r4, r1
   d65f2:	f103 0308 	add.w	r3, r3, #8
   d65f6:	d1f6      	bne.n	d65e6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d65f8:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d65fa:	2000      	movs	r0, #0
    }
   d65fc:	bd10      	pop	{r4, pc}
	...

000d6600 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d6600:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6604:	4680      	mov	r8, r0
   d6606:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d6608:	460e      	mov	r6, r1
   d660a:	b369      	cbz	r1, d6668 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d660c:	b362      	cbz	r2, d6668 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d660e:	2af4      	cmp	r2, #244	; 0xf4
   d6610:	6805      	ldr	r5, [r0, #0]
   d6612:	bf28      	it	cs
   d6614:	22f4      	movcs	r2, #244	; 0xf4
   d6616:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d6618:	782a      	ldrb	r2, [r5, #0]
   d661a:	b1a2      	cbz	r2, d6646 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d661c:	792b      	ldrb	r3, [r5, #4]
   d661e:	0798      	lsls	r0, r3, #30
   d6620:	d507      	bpl.n	d6632 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d6622:	2300      	movs	r3, #0
   d6624:	4622      	mov	r2, r4
   d6626:	89a8      	ldrh	r0, [r5, #12]
   d6628:	f7ff fa9e 	bl	d5b68 <hal_ble_gatt_server_set_characteristic_value>
   d662c:	2800      	cmp	r0, #0
   d662e:	da02      	bge.n	d6636 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d6630:	e043      	b.n	d66ba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d6632:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d6636:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d663a:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d663c:	06da      	lsls	r2, r3, #27
   d663e:	d518      	bpl.n	d6672 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d6640:	2f01      	cmp	r7, #1
   d6642:	d123      	bne.n	d668c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d6644:	e015      	b.n	d6672 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d6646:	8868      	ldrh	r0, [r5, #2]
   d6648:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d664c:	4298      	cmp	r0, r3
   d664e:	d00d      	beq.n	d666c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d6650:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d6652:	0759      	lsls	r1, r3, #29
   d6654:	d523      	bpl.n	d669e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d6656:	2f01      	cmp	r7, #1
   d6658:	d021      	beq.n	d669e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d665a:	89a9      	ldrh	r1, [r5, #12]
   d665c:	9200      	str	r2, [sp, #0]
   d665e:	4623      	mov	r3, r4
   d6660:	4632      	mov	r2, r6
   d6662:	f7ff fa95 	bl	d5b90 <hal_ble_gatt_client_write_without_response>
   d6666:	e028      	b.n	d66ba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d6668:	4815      	ldr	r0, [pc, #84]	; (d66c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d666a:	e026      	b.n	d66ba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d666c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d6670:	e023      	b.n	d66ba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d6672:	069a      	lsls	r2, r3, #26
   d6674:	d521      	bpl.n	d66ba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d6676:	2f02      	cmp	r7, #2
   d6678:	d01f      	beq.n	d66ba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d667a:	89a8      	ldrh	r0, [r5, #12]
   d667c:	2300      	movs	r3, #0
   d667e:	4622      	mov	r2, r4
   d6680:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d6682:	b002      	add	sp, #8
   d6684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6688:	f7ff baaa 	b.w	d5be0 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d668c:	89a8      	ldrh	r0, [r5, #12]
   d668e:	2300      	movs	r3, #0
   d6690:	4622      	mov	r2, r4
   d6692:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d6694:	b002      	add	sp, #8
   d6696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d669a:	f7ff ba97 	b.w	d5bcc <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d669e:	071b      	lsls	r3, r3, #28
   d66a0:	d501      	bpl.n	d66a6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d66a2:	2f02      	cmp	r7, #2
   d66a4:	d102      	bne.n	d66ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d66a6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d66aa:	e006      	b.n	d66ba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d66ac:	2300      	movs	r3, #0
   d66ae:	89a9      	ldrh	r1, [r5, #12]
   d66b0:	9300      	str	r3, [sp, #0]
   d66b2:	4632      	mov	r2, r6
   d66b4:	4623      	mov	r3, r4
   d66b6:	f7ff fa61 	bl	d5b7c <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d66ba:	b002      	add	sp, #8
   d66bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d66c0:	fffffef2 	.word	0xfffffef2

000d66c4 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d66c4:	b570      	push	{r4, r5, r6, lr}
   d66c6:	460c      	mov	r4, r1
   d66c8:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d66ca:	21f4      	movs	r1, #244	; 0xf4
   d66cc:	4620      	mov	r0, r4

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d66ce:	4616      	mov	r6, r2
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d66d0:	f003 f834 	bl	d973c <strnlen>
   d66d4:	4633      	mov	r3, r6
   d66d6:	4602      	mov	r2, r0
   d66d8:	4621      	mov	r1, r4
   d66da:	4628      	mov	r0, r5
}
   d66dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d66e0:	f7ff bf8e 	b.w	d6600 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000d66e4 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d66e4:	b510      	push	{r4, lr}
    return impl()->address();
   d66e6:	680a      	ldr	r2, [r1, #0]
   d66e8:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d66ec:	6003      	str	r3, [r0, #0]
   d66ee:	6853      	ldr	r3, [r2, #4]
   d66f0:	6043      	str	r3, [r0, #4]
}
   d66f2:	bd10      	pop	{r4, pc}

000d66f4 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d66f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d66f6:	6802      	ldr	r2, [r0, #0]
   d66f8:	680b      	ldr	r3, [r1, #0]
   d66fa:	8812      	ldrh	r2, [r2, #0]
   d66fc:	881b      	ldrh	r3, [r3, #0]
   d66fe:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d6700:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d6702:	d10c      	bne.n	d671e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d6704:	4601      	mov	r1, r0
   d6706:	4668      	mov	r0, sp
   d6708:	f7ff ffec 	bl	d66e4 <_ZNK8particle13BlePeerDevice7addressEv>
   d670c:	4621      	mov	r1, r4
   d670e:	a802      	add	r0, sp, #8
   d6710:	f7ff ffe8 	bl	d66e4 <_ZNK8particle13BlePeerDevice7addressEv>
   d6714:	a902      	add	r1, sp, #8
   d6716:	4668      	mov	r0, sp
   d6718:	f7ff fd72 	bl	d6200 <_ZNK8particle10BleAddresseqERKS0_>
   d671c:	b900      	cbnz	r0, d6720 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d671e:	2000      	movs	r0, #0
}
   d6720:	b004      	add	sp, #16
   d6722:	bd10      	pop	{r4, pc}

000d6724 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d6724:	b510      	push	{r4, lr}
   d6726:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6728:	2034      	movs	r0, #52	; 0x34
   d672a:	f7fd fcb6 	bl	d409a <_Znwj>
   d672e:	4601      	mov	r1, r0
   d6730:	b168      	cbz	r0, d674e <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6732:	2300      	movs	r3, #0
   d6734:	6003      	str	r3, [r0, #0]
   d6736:	6043      	str	r3, [r0, #4]
   d6738:	6083      	str	r3, [r0, #8]
   d673a:	60c3      	str	r3, [r0, #12]
   d673c:	6103      	str	r3, [r0, #16]
   d673e:	6143      	str	r3, [r0, #20]
   d6740:	6183      	str	r3, [r0, #24]
   d6742:	61c3      	str	r3, [r0, #28]
   d6744:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d6746:	6243      	str	r3, [r0, #36]	; 0x24
   d6748:	6283      	str	r3, [r0, #40]	; 0x28
   d674a:	62c3      	str	r3, [r0, #44]	; 0x2c
   d674c:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d674e:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d6750:	b919      	cbnz	r1, d675a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d6752:	4a0a      	ldr	r2, [pc, #40]	; (d677c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d6754:	200a      	movs	r0, #10
   d6756:	f7ff fc2d 	bl	d5fb4 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d675a:	2000      	movs	r0, #0
   d675c:	f7ff f9d0 	bl	d5b00 <hal_ble_stack_init>
   d6760:	b120      	cbz	r0, d676c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d6762:	4a06      	ldr	r2, [pc, #24]	; (d677c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d6764:	2100      	movs	r1, #0
   d6766:	200a      	movs	r0, #10
   d6768:	f7ff fc24 	bl	d5fb4 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d676c:	2200      	movs	r2, #0
   d676e:	6821      	ldr	r1, [r4, #0]
   d6770:	4803      	ldr	r0, [pc, #12]	; (d6780 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d6772:	f7ff fa21 	bl	d5bb8 <hal_ble_set_callback_on_periph_link_events>
}
   d6776:	4620      	mov	r0, r4
   d6778:	bd10      	pop	{r4, pc}
   d677a:	bf00      	nop
   d677c:	000d5c75 	.word	0x000d5c75
   d6780:	000d6b79 	.word	0x000d6b79

000d6784 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d6784:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d6786:	4c0a      	ldr	r4, [pc, #40]	; (d67b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d6788:	6823      	ldr	r3, [r4, #0]
   d678a:	07db      	lsls	r3, r3, #31
   d678c:	d40e      	bmi.n	d67ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d678e:	4620      	mov	r0, r4
   d6790:	f7fd fc89 	bl	d40a6 <__cxa_guard_acquire>
   d6794:	b150      	cbz	r0, d67ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d6796:	4807      	ldr	r0, [pc, #28]	; (d67b4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6798:	f7ff ffc4 	bl	d6724 <_ZN8particle14BleLocalDeviceC1Ev>
   d679c:	4620      	mov	r0, r4
   d679e:	f7fd fc87 	bl	d40b0 <__cxa_guard_release>
   d67a2:	4a05      	ldr	r2, [pc, #20]	; (d67b8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d67a4:	4905      	ldr	r1, [pc, #20]	; (d67bc <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d67a6:	4803      	ldr	r0, [pc, #12]	; (d67b4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d67a8:	f001 fc72 	bl	d8090 <__aeabi_atexit>
    return instance;
}
   d67ac:	4801      	ldr	r0, [pc, #4]	; (d67b4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d67ae:	bd10      	pop	{r4, pc}
   d67b0:	2003e4d4 	.word	0x2003e4d4
   d67b4:	2003e4d0 	.word	0x2003e4d0
   d67b8:	2003e24c 	.word	0x2003e24c
   d67bc:	000d698f 	.word	0x000d698f

000d67c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d67c0:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d67c2:	6803      	ldr	r3, [r0, #0]
   d67c4:	3b09      	subs	r3, #9
   d67c6:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d67c8:	b08a      	sub	sp, #40	; 0x28
   d67ca:	4604      	mov	r4, r0
   d67cc:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d67ce:	d819      	bhi.n	d6804 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d67d0:	f7ff ffd8 	bl	d6784 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d67d4:	88a1      	ldrh	r1, [r4, #4]
   d67d6:	6800      	ldr	r0, [r0, #0]
   d67d8:	f7ff ff00 	bl	d65dc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d67dc:	4602      	mov	r2, r0
   d67de:	b958      	cbnz	r0, d67f8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d67e0:	2320      	movs	r3, #32
   d67e2:	9302      	str	r3, [sp, #8]
   d67e4:	4b08      	ldr	r3, [pc, #32]	; (d6808 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d67e6:	9003      	str	r0, [sp, #12]
   d67e8:	9300      	str	r3, [sp, #0]
   d67ea:	aa02      	add	r2, sp, #8
   d67ec:	4603      	mov	r3, r0
   d67ee:	4907      	ldr	r1, [pc, #28]	; (d680c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d67f0:	2032      	movs	r0, #50	; 0x32
   d67f2:	f7ff fbe7 	bl	d5fc4 <log_message>
   d67f6:	e005      	b.n	d6804 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d67f8:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d67fa:	b11d      	cbz	r5, d6804 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d67fc:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d67fe:	68e1      	ldr	r1, [r4, #12]
   d6800:	6920      	ldr	r0, [r4, #16]
   d6802:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d6804:	b00a      	add	sp, #40	; 0x28
   d6806:	bd70      	pop	{r4, r5, r6, pc}
   d6808:	000d9b9a 	.word	0x000d9b9a
   d680c:	000d9b50 	.word	0x000d9b50

000d6810 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d6810:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d6812:	a801      	add	r0, sp, #4
   d6814:	f7ff fcda 	bl	d61cc <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d6818:	2000      	movs	r0, #0
   d681a:	f7ff f971 	bl	d5b00 <hal_ble_stack_init>
   d681e:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d6820:	a801      	add	r0, sp, #4
   d6822:	f7ff fce1 	bl	d61e8 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d6826:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d682a:	b002      	add	sp, #8
   d682c:	bd10      	pop	{r4, pc}

000d682e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d682e:	4608      	mov	r0, r1
   d6830:	b909      	cbnz	r1, d6836 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d6832:	460a      	mov	r2, r1
   d6834:	e001      	b.n	d683a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d6836:	6a09      	ldr	r1, [r1, #32]
   d6838:	2200      	movs	r2, #0
   d683a:	f7ff b969 	b.w	d5b10 <hal_ble_gap_set_advertising_data>

000d683e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d683e:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d6840:	460c      	mov	r4, r1
   d6842:	b911      	cbnz	r1, d684a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d6844:	460a      	mov	r2, r1
   d6846:	4608      	mov	r0, r1
   d6848:	e006      	b.n	d6858 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d684a:	2101      	movs	r1, #1
   d684c:	4620      	mov	r0, r4
   d684e:	f7ff fe88 	bl	d6562 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6852:	6a21      	ldr	r1, [r4, #32]
   d6854:	2200      	movs	r2, #0
   d6856:	4620      	mov	r0, r4
    }
}
   d6858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d685c:	f7ff b960 	b.w	d5b20 <hal_ble_gap_set_scan_response_data>

000d6860 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d6860:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d6862:	a801      	add	r0, sp, #4
   d6864:	f7ff fcb2 	bl	d61cc <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d6868:	2000      	movs	r0, #0
   d686a:	f7ff f961 	bl	d5b30 <hal_ble_gap_start_advertising>
   d686e:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d6870:	a801      	add	r0, sp, #4
   d6872:	f7ff fcb9 	bl	d61e8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d6876:	4620      	mov	r0, r4
   d6878:	b002      	add	sp, #8
   d687a:	bd10      	pop	{r4, pc}

000d687c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d687c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d687e:	4605      	mov	r5, r0
   d6880:	460c      	mov	r4, r1
    WiringBleLock lk;
   d6882:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d6884:	4616      	mov	r6, r2
    WiringBleLock lk;
   d6886:	f7ff fca1 	bl	d61cc <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d688a:	4621      	mov	r1, r4
   d688c:	4628      	mov	r0, r5
   d688e:	f7ff ffce 	bl	d682e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d6892:	2800      	cmp	r0, #0
   d6894:	db08      	blt.n	d68a8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d6896:	4631      	mov	r1, r6
   d6898:	4628      	mov	r0, r5
   d689a:	f7ff ffd0 	bl	d683e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d689e:	2800      	cmp	r0, #0
   d68a0:	db02      	blt.n	d68a8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d68a2:	4628      	mov	r0, r5
   d68a4:	f7ff ffdc 	bl	d6860 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d68a8:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d68aa:	a801      	add	r0, sp, #4
   d68ac:	f7ff fc9c 	bl	d61e8 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d68b0:	4620      	mov	r0, r4
   d68b2:	b002      	add	sp, #8
   d68b4:	bd70      	pop	{r4, r5, r6, pc}

000d68b6 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d68b6:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d68b8:	69d8      	ldr	r0, [r3, #28]
}
   d68ba:	2800      	cmp	r0, #0
   d68bc:	bfd4      	ite	le
   d68be:	2000      	movle	r0, #0
   d68c0:	2001      	movgt	r0, #1
   d68c2:	4770      	bx	lr

000d68c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d68c4:	680b      	ldr	r3, [r1, #0]
   d68c6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d68c8:	b113      	cbz	r3, d68d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d68ca:	685a      	ldr	r2, [r3, #4]
   d68cc:	3201      	adds	r2, #1
   d68ce:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d68d0:	4770      	bx	lr

000d68d2 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d68d2:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d68d4:	f851 3b04 	ldr.w	r3, [r1], #4
   d68d8:	4604      	mov	r4, r0
   d68da:	f840 3b04 	str.w	r3, [r0], #4
   d68de:	f7ff fff1 	bl	d68c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d68e2:	6823      	ldr	r3, [r4, #0]
   d68e4:	b90b      	cbnz	r3, d68ea <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d68e6:	f7ff fc41 	bl	d616c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d68ea:	4620      	mov	r0, r4
   d68ec:	bd10      	pop	{r4, pc}

000d68ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d68ee:	b510      	push	{r4, lr}
   d68f0:	f851 3b04 	ldr.w	r3, [r1], #4
   d68f4:	4604      	mov	r4, r0
   d68f6:	f840 3b04 	str.w	r3, [r0], #4
   d68fa:	f7ff ffe3 	bl	d68c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d68fe:	4620      	mov	r0, r4
   d6900:	bd10      	pop	{r4, pc}

000d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d6902:	b510      	push	{r4, lr}
   d6904:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d6906:	6800      	ldr	r0, [r0, #0]
   d6908:	b128      	cbz	r0, d6916 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d690a:	6843      	ldr	r3, [r0, #4]
   d690c:	3b01      	subs	r3, #1
   d690e:	6043      	str	r3, [r0, #4]
   d6910:	b90b      	cbnz	r3, d6916 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6912:	f7ff fc35 	bl	d6180 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d6916:	4620      	mov	r0, r4
   d6918:	bd10      	pop	{r4, pc}

000d691a <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d691a:	b510      	push	{r4, lr}
   d691c:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d691e:	3004      	adds	r0, #4
   d6920:	f7ff ffef 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d6924:	4620      	mov	r0, r4
   d6926:	bd10      	pop	{r4, pc}

000d6928 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6928:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d692a:	6804      	ldr	r4, [r0, #0]
   d692c:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d692e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6930:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6934:	42a6      	cmp	r6, r4
   d6936:	d004      	beq.n	d6942 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d6938:	1d20      	adds	r0, r4, #4
   d693a:	f7ff ffe2 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d693e:	3408      	adds	r4, #8
   d6940:	e7f8      	b.n	d6934 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6942:	6828      	ldr	r0, [r5, #0]
   d6944:	f7ff fbca 	bl	d60dc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6948:	4628      	mov	r0, r5
   d694a:	bd70      	pop	{r4, r5, r6, pc}

000d694c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d694c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d694e:	6804      	ldr	r4, [r0, #0]
   d6950:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6952:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6954:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6958:	42a6      	cmp	r6, r4
   d695a:	d004      	beq.n	d6966 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d695c:	1d20      	adds	r0, r4, #4
   d695e:	f7ff ffd0 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6962:	3408      	adds	r4, #8
   d6964:	e7f8      	b.n	d6958 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6966:	6828      	ldr	r0, [r5, #0]
   d6968:	f7ff fbb8 	bl	d60dc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d696c:	4628      	mov	r0, r5
   d696e:	bd70      	pop	{r4, r5, r6, pc}

000d6970 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6970:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6972:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d6974:	f104 0018 	add.w	r0, r4, #24
   d6978:	f7ff ffe8 	bl	d694c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d697c:	f104 000c 	add.w	r0, r4, #12
   d6980:	f7ff ffd2 	bl	d6928 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d6984:	4620      	mov	r0, r4
   d6986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d698a:	f7fd bb88 	b.w	d409e <_ZdlPv>

000d698e <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d698e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6990:	6804      	ldr	r4, [r0, #0]
   d6992:	4607      	mov	r7, r0
   d6994:	b1c4      	cbz	r4, d69c8 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6996:	69a5      	ldr	r5, [r4, #24]
   d6998:	69e3      	ldr	r3, [r4, #28]
   d699a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d699e:	42ae      	cmp	r6, r5
   d69a0:	d004      	beq.n	d69ac <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d69a2:	1d28      	adds	r0, r5, #4
   d69a4:	f7ff ffad 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69a8:	3508      	adds	r5, #8
   d69aa:	e7f8      	b.n	d699e <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d69ac:	69a0      	ldr	r0, [r4, #24]
   d69ae:	f7ff fb95 	bl	d60dc <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d69b2:	f104 000c 	add.w	r0, r4, #12
   d69b6:	f7ff ffc9 	bl	d694c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d69ba:	4620      	mov	r0, r4
   d69bc:	f7ff ffb4 	bl	d6928 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d69c0:	2134      	movs	r1, #52	; 0x34
   d69c2:	4620      	mov	r0, r4
   d69c4:	f001 fb69 	bl	d809a <_ZdlPvj>
   d69c8:	4638      	mov	r0, r7
   d69ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d69cc <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d69cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d69ce:	2500      	movs	r5, #0
   d69d0:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d69d2:	6045      	str	r5, [r0, #4]
   d69d4:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d69d6:	2024      	movs	r0, #36	; 0x24
   d69d8:	f7fd fb5f 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d69dc:	4604      	mov	r4, r0
   d69de:	b178      	cbz	r0, d6a00 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d69e0:	4603      	mov	r3, r0
   d69e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d69e6:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d69ea:	f8c0 5002 	str.w	r5, [r0, #2]
   d69ee:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d69f0:	7285      	strb	r5, [r0, #10]
   d69f2:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d69f4:	60c5      	str	r5, [r0, #12]
   d69f6:	6105      	str	r5, [r0, #16]
   d69f8:	6145      	str	r5, [r0, #20]
   d69fa:	6185      	str	r5, [r0, #24]
   d69fc:	61c5      	str	r5, [r0, #28]
   d69fe:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6a00:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6a02:	2014      	movs	r0, #20
   d6a04:	9301      	str	r3, [sp, #4]
   d6a06:	f7fd fb48 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6a0a:	4603      	mov	r3, r0
   d6a0c:	b128      	cbz	r0, d6a1a <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6a0e:	2201      	movs	r2, #1
   d6a10:	6042      	str	r2, [r0, #4]
   d6a12:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6a14:	4a08      	ldr	r2, [pc, #32]	; (d6a38 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d6a16:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6a18:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6a1a:	a802      	add	r0, sp, #8
   d6a1c:	6872      	ldr	r2, [r6, #4]
   d6a1e:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d6a22:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6a24:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6a26:	f7ff ff6c 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d6a2a:	6833      	ldr	r3, [r6, #0]
   d6a2c:	b90b      	cbnz	r3, d6a32 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d6a2e:	f7ff fb9d 	bl	d616c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d6a32:	4630      	mov	r0, r6
   d6a34:	b002      	add	sp, #8
   d6a36:	bd70      	pop	{r4, r5, r6, pc}
   d6a38:	000d9b2c 	.word	0x000d9b2c

000d6a3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6a3c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6a3e:	b570      	push	{r4, r5, r6, lr}
   d6a40:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6a42:	d91a      	bls.n	d6a7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d6a44:	4290      	cmp	r0, r2
   d6a46:	d219      	bcs.n	d6a7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6a48:	f1a1 0608 	sub.w	r6, r1, #8
   d6a4c:	1a51      	subs	r1, r2, r1
   d6a4e:	3904      	subs	r1, #4
   d6a50:	1f15      	subs	r5, r2, #4
   d6a52:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d6a54:	1f2b      	subs	r3, r5, #4
   d6a56:	429e      	cmp	r6, r3
   d6a58:	d025      	beq.n	d6aa6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d6a5a:	2c04      	cmp	r4, #4
   d6a5c:	d007      	beq.n	d6a6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6a5e:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d6a62:	f844 3c04 	str.w	r3, [r4, #-4]
   d6a66:	4629      	mov	r1, r5
   d6a68:	4620      	mov	r0, r4
   d6a6a:	f7ff ff2b 	bl	d68c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6a6e:	4628      	mov	r0, r5
   d6a70:	f7ff ff47 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a74:	3d08      	subs	r5, #8
   d6a76:	3c08      	subs	r4, #8
   d6a78:	e7ec      	b.n	d6a54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d6a7a:	d014      	beq.n	d6aa6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d6a7c:	1d0c      	adds	r4, r1, #4
   d6a7e:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d6a80:	1f23      	subs	r3, r4, #4
   d6a82:	429d      	cmp	r5, r3
   d6a84:	d00f      	beq.n	d6aa6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d6a86:	2e04      	cmp	r6, #4
   d6a88:	d007      	beq.n	d6a9a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6a8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d6a8e:	f846 3c04 	str.w	r3, [r6, #-4]
   d6a92:	4621      	mov	r1, r4
   d6a94:	4630      	mov	r0, r6
   d6a96:	f7ff ff15 	bl	d68c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6a9a:	4620      	mov	r0, r4
   d6a9c:	f7ff ff31 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6aa0:	3408      	adds	r4, #8
   d6aa2:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6aa4:	e7ec      	b.n	d6a80 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d6aa6:	bd70      	pop	{r4, r5, r6, pc}

000d6aa8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6aac:	6804      	ldr	r4, [r0, #0]
   d6aae:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6ab0:	4605      	mov	r5, r0
   d6ab2:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d6ab4:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6ab8:	42a7      	cmp	r7, r4
   d6aba:	d018      	beq.n	d6aee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d6abc:	4641      	mov	r1, r8
   d6abe:	4620      	mov	r0, r4
   d6ac0:	f7ff fe18 	bl	d66f4 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6ac4:	4606      	mov	r6, r0
   d6ac6:	b908      	cbnz	r0, d6acc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6ac8:	3408      	adds	r4, #8
   d6aca:	e7f5      	b.n	d6ab8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d6acc:	b18c      	cbz	r4, d6af2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d6ace:	1d20      	adds	r0, r4, #4
   d6ad0:	f7ff ff17 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d6ad4:	682b      	ldr	r3, [r5, #0]
   d6ad6:	686a      	ldr	r2, [r5, #4]
   d6ad8:	f104 0108 	add.w	r1, r4, #8
   d6adc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6ae0:	4620      	mov	r0, r4
   d6ae2:	f7ff ffab 	bl	d6a3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6ae6:	686b      	ldr	r3, [r5, #4]
   d6ae8:	3b01      	subs	r3, #1
   d6aea:	606b      	str	r3, [r5, #4]
    return true;
   d6aec:	e002      	b.n	d6af4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d6aee:	2600      	movs	r6, #0
   d6af0:	e000      	b.n	d6af4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d6af2:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d6af4:	4630      	mov	r0, r6
   d6af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6afa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6afa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6afc:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6afe:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d6b02:	6847      	ldr	r7, [r0, #4]
   d6b04:	9300      	str	r3, [sp, #0]
   d6b06:	a801      	add	r0, sp, #4
   d6b08:	f7ff fedc 	bl	d68c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6b0c:	6866      	ldr	r6, [r4, #4]
   d6b0e:	68a3      	ldr	r3, [r4, #8]
   d6b10:	429e      	cmp	r6, r3
   d6b12:	db14      	blt.n	d6b3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d6b14:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6b16:	2e00      	cmp	r6, #0
   d6b18:	dd0b      	ble.n	d6b32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6b1a:	00f0      	lsls	r0, r6, #3
   d6b1c:	f7ff fad6 	bl	d60cc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6b20:	4605      	mov	r5, r0
   d6b22:	b318      	cbz	r0, d6b6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d6b24:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6b28:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6b2c:	f7ff ff86 	bl	d6a3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6b30:	e000      	b.n	d6b34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6b32:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6b34:	6820      	ldr	r0, [r4, #0]
   d6b36:	f7ff fad1 	bl	d60dc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6b3a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6b3c:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6b3e:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6b40:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6b42:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d6b46:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d6b4a:	4629      	mov	r1, r5
   d6b4c:	f105 0008 	add.w	r0, r5, #8
   d6b50:	f7ff ff74 	bl	d6a3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6b54:	b135      	cbz	r5, d6b64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d6b56:	9b00      	ldr	r3, [sp, #0]
   d6b58:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d6b5c:	a901      	add	r1, sp, #4
   d6b5e:	1d28      	adds	r0, r5, #4
   d6b60:	f7ff feb0 	bl	d68c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d6b64:	6863      	ldr	r3, [r4, #4]
   d6b66:	3301      	adds	r3, #1
   d6b68:	6063      	str	r3, [r4, #4]
   d6b6a:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6b6c:	a801      	add	r0, sp, #4
   d6b6e:	f7ff fec8 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6b72:	4628      	mov	r0, r5
   d6b74:	b003      	add	sp, #12
   d6b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6b78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6b7c:	4604      	mov	r4, r0
   d6b7e:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6b80:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6b82:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6b84:	f7ff fb22 	bl	d61cc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6b88:	6823      	ldr	r3, [r4, #0]
   d6b8a:	2b03      	cmp	r3, #3
   d6b8c:	d002      	beq.n	d6b94 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d6b8e:	2b04      	cmp	r3, #4
   d6b90:	d042      	beq.n	d6c18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d6b92:	e087      	b.n	d6ca4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d6b94:	a804      	add	r0, sp, #16
   d6b96:	f7ff ff19 	bl	d69cc <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d6b9a:	9b04      	ldr	r3, [sp, #16]
   d6b9c:	8922      	ldrh	r2, [r4, #8]
   d6b9e:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d6ba0:	6862      	ldr	r2, [r4, #4]
   d6ba2:	9904      	ldr	r1, [sp, #16]
   d6ba4:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d6ba8:	f8c1 3002 	str.w	r3, [r1, #2]
   d6bac:	6853      	ldr	r3, [r2, #4]
   d6bae:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6bb2:	a807      	add	r0, sp, #28
   d6bb4:	9b04      	ldr	r3, [sp, #16]
   d6bb6:	9306      	str	r3, [sp, #24]
   d6bb8:	a905      	add	r1, sp, #20
   d6bba:	f7ff fe83 	bl	d68c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d6bbe:	a906      	add	r1, sp, #24
   d6bc0:	f105 0018 	add.w	r0, r5, #24
   d6bc4:	f7ff ff99 	bl	d6afa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6bc8:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6bca:	a807      	add	r0, sp, #28
   d6bcc:	f7ff fe99 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6bd0:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d6bd2:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d6bd4:	b974      	cbnz	r4, d6bf4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d6bd6:	4b36      	ldr	r3, [pc, #216]	; (d6cb0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d6bd8:	9300      	str	r3, [sp, #0]
   d6bda:	aa06      	add	r2, sp, #24
   d6bdc:	4623      	mov	r3, r4
   d6bde:	4935      	ldr	r1, [pc, #212]	; (d6cb4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6be0:	9407      	str	r4, [sp, #28]
   d6be2:	2032      	movs	r0, #50	; 0x32
   d6be4:	f7ff f9ee 	bl	d5fc4 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d6be8:	9b04      	ldr	r3, [sp, #16]
   d6bea:	4621      	mov	r1, r4
   d6bec:	8818      	ldrh	r0, [r3, #0]
   d6bee:	f7fe ffa7 	bl	d5b40 <hal_ble_gap_disconnect>
   d6bf2:	e00d      	b.n	d6c10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d6bf4:	4a30      	ldr	r2, [pc, #192]	; (d6cb8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d6bf6:	9200      	str	r2, [sp, #0]
   d6bf8:	2300      	movs	r3, #0
   d6bfa:	aa06      	add	r2, sp, #24
   d6bfc:	492d      	ldr	r1, [pc, #180]	; (d6cb4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6bfe:	9307      	str	r3, [sp, #28]
   d6c00:	2001      	movs	r0, #1
   d6c02:	f7ff f9df 	bl	d5fc4 <log_message>
                if (impl->connectedCb_) {
   d6c06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d6c08:	b113      	cbz	r3, d6c10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d6c0a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d6c0c:	a804      	add	r0, sp, #16
   d6c0e:	4798      	blx	r3
   d6c10:	a805      	add	r0, sp, #20
   d6c12:	f7ff fe76 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c16:	e045      	b.n	d6ca4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6c18:	8921      	ldrh	r1, [r4, #8]
   d6c1a:	4628      	mov	r0, r5
   d6c1c:	f7ff fcde 	bl	d65dc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6c20:	4607      	mov	r7, r0
   d6c22:	2800      	cmp	r0, #0
   d6c24:	d03e      	beq.n	d6ca4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d6c26:	6804      	ldr	r4, [r0, #0]
   d6c28:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6c2a:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d6c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6c30:	8022      	strh	r2, [r4, #0]
   d6c32:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d6c36:	4299      	cmp	r1, r3
   d6c38:	d003      	beq.n	d6c42 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d6c3a:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6c3e:	8042      	strh	r2, [r0, #2]
   d6c40:	e7f9      	b.n	d6c36 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6c42:	68e6      	ldr	r6, [r4, #12]
   d6c44:	6923      	ldr	r3, [r4, #16]
   d6c46:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6c4a:	45b0      	cmp	r8, r6
   d6c4c:	d004      	beq.n	d6c58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d6c4e:	1d30      	adds	r0, r6, #4
   d6c50:	f7ff fe57 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c54:	3608      	adds	r6, #8
   d6c56:	e7f8      	b.n	d6c4a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6c58:	2300      	movs	r3, #0
   d6c5a:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6c5c:	69a6      	ldr	r6, [r4, #24]
   d6c5e:	69e3      	ldr	r3, [r4, #28]
   d6c60:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6c64:	45b0      	cmp	r8, r6
   d6c66:	d004      	beq.n	d6c72 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d6c68:	1d30      	adds	r0, r6, #4
   d6c6a:	f7ff fe4a 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c6e:	3608      	adds	r6, #8
   d6c70:	e7f8      	b.n	d6c64 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6c72:	2300      	movs	r3, #0
   d6c74:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d6c76:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d6c78:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d6c7a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d6c7c:	b113      	cbz	r3, d6c84 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d6c7e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d6c80:	4638      	mov	r0, r7
   d6c82:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d6c84:	2320      	movs	r3, #32
   d6c86:	4a0d      	ldr	r2, [pc, #52]	; (d6cbc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d6c88:	9306      	str	r3, [sp, #24]
   d6c8a:	9200      	str	r2, [sp, #0]
   d6c8c:	2300      	movs	r3, #0
   d6c8e:	4909      	ldr	r1, [pc, #36]	; (d6cb4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6c90:	9307      	str	r3, [sp, #28]
   d6c92:	2001      	movs	r0, #1
   d6c94:	aa06      	add	r2, sp, #24
   d6c96:	f7ff f995 	bl	d5fc4 <log_message>
                    impl->peers_.removeOne(*peer);
   d6c9a:	4639      	mov	r1, r7
   d6c9c:	f105 0018 	add.w	r0, r5, #24
   d6ca0:	f7ff ff02 	bl	d6aa8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6ca4:	a803      	add	r0, sp, #12
   d6ca6:	f7ff fa9f 	bl	d61e8 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d6caa:	b00e      	add	sp, #56	; 0x38
   d6cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6cb0:	000d9bb2 	.word	0x000d9bb2
   d6cb4:	000d9b50 	.word	0x000d9b50
   d6cb8:	000d9bd8 	.word	0x000d9bd8
   d6cbc:	000d9bf5 	.word	0x000d9bf5

000d6cc0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6cc0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6cc4:	4606      	mov	r6, r0
   d6cc6:	460c      	mov	r4, r1
   d6cc8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6cca:	d914      	bls.n	d6cf6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6ccc:	4290      	cmp	r0, r2
   d6cce:	d213      	bcs.n	d6cf8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6cd0:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6cd4:	1a6c      	subs	r4, r5, r1
   d6cd6:	f1a1 0708 	sub.w	r7, r1, #8
   d6cda:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6cdc:	42af      	cmp	r7, r5
   d6cde:	d018      	beq.n	d6d12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6ce0:	b11c      	cbz	r4, d6cea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6ce2:	4629      	mov	r1, r5
   d6ce4:	4620      	mov	r0, r4
   d6ce6:	f7ff fe02 	bl	d68ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6cea:	1d28      	adds	r0, r5, #4
   d6cec:	f7ff fe09 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6cf0:	3d08      	subs	r5, #8
   d6cf2:	3c08      	subs	r4, #8
   d6cf4:	e7f2      	b.n	d6cdc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6cf6:	d00c      	beq.n	d6d12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6cf8:	42ac      	cmp	r4, r5
   d6cfa:	d00a      	beq.n	d6d12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6cfc:	b11e      	cbz	r6, d6d06 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6cfe:	4621      	mov	r1, r4
   d6d00:	4630      	mov	r0, r6
   d6d02:	f7ff fdf4 	bl	d68ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6d06:	1d20      	adds	r0, r4, #4
   d6d08:	f7ff fdfb 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6d0c:	3408      	adds	r4, #8
   d6d0e:	3608      	adds	r6, #8
   d6d10:	e7f2      	b.n	d6cf8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d6d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6d14:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6d16:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6d18:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6d1a:	dd0b      	ble.n	d6d34 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6d1c:	00f0      	lsls	r0, r6, #3
   d6d1e:	f7ff f9d5 	bl	d60cc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6d22:	4604      	mov	r4, r0
   d6d24:	b170      	cbz	r0, d6d44 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6d26:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6d2a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6d2e:	f7ff ffc7 	bl	d6cc0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6d32:	e000      	b.n	d6d36 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6d34:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6d36:	6828      	ldr	r0, [r5, #0]
   d6d38:	f7ff f9d0 	bl	d60dc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6d3c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6d3e:	60ae      	str	r6, [r5, #8]
        return true;
   d6d40:	2001      	movs	r0, #1
   d6d42:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6d44:	bd70      	pop	{r4, r5, r6, pc}

000d6d46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6d48:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6d4a:	6845      	ldr	r5, [r0, #4]
   d6d4c:	4668      	mov	r0, sp
   d6d4e:	f7ff fdce 	bl	d68ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6d52:	6861      	ldr	r1, [r4, #4]
   d6d54:	68a3      	ldr	r3, [r4, #8]
   d6d56:	4299      	cmp	r1, r3
   d6d58:	db05      	blt.n	d6d66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d6d5a:	3101      	adds	r1, #1
   d6d5c:	4620      	mov	r0, r4
   d6d5e:	f7ff ffd9 	bl	d6d14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6d62:	4606      	mov	r6, r0
   d6d64:	b198      	cbz	r0, d6d8e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d6d66:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6d68:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6d6a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6d6e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6d72:	4629      	mov	r1, r5
   d6d74:	f105 0008 	add.w	r0, r5, #8
   d6d78:	f7ff ffa2 	bl	d6cc0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6d7c:	b11d      	cbz	r5, d6d86 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d6d7e:	4669      	mov	r1, sp
   d6d80:	4628      	mov	r0, r5
   d6d82:	f7ff fdb4 	bl	d68ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d6d86:	6863      	ldr	r3, [r4, #4]
   d6d88:	3301      	adds	r3, #1
   d6d8a:	6063      	str	r3, [r4, #4]
   d6d8c:	2601      	movs	r6, #1
   d6d8e:	a801      	add	r0, sp, #4
   d6d90:	f7ff fdb7 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6d94:	4630      	mov	r0, r6
   d6d96:	b002      	add	sp, #8
   d6d98:	bd70      	pop	{r4, r5, r6, pc}

000d6d9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6d9a:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d9e:	4606      	mov	r6, r0
   d6da0:	460c      	mov	r4, r1
   d6da2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6da4:	d914      	bls.n	d6dd0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6da6:	4290      	cmp	r0, r2
   d6da8:	d213      	bcs.n	d6dd2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6daa:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6dae:	1a6c      	subs	r4, r5, r1
   d6db0:	f1a1 0708 	sub.w	r7, r1, #8
   d6db4:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6db6:	42af      	cmp	r7, r5
   d6db8:	d018      	beq.n	d6dec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6dba:	b11c      	cbz	r4, d6dc4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6dbc:	4629      	mov	r1, r5
   d6dbe:	4620      	mov	r0, r4
   d6dc0:	f7ff fd87 	bl	d68d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6dc4:	1d28      	adds	r0, r5, #4
   d6dc6:	f7ff fd9c 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6dca:	3d08      	subs	r5, #8
   d6dcc:	3c08      	subs	r4, #8
   d6dce:	e7f2      	b.n	d6db6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6dd0:	d00c      	beq.n	d6dec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6dd2:	42ac      	cmp	r4, r5
   d6dd4:	d00a      	beq.n	d6dec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6dd6:	b11e      	cbz	r6, d6de0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6dd8:	4621      	mov	r1, r4
   d6dda:	4630      	mov	r0, r6
   d6ddc:	f7ff fd79 	bl	d68d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6de0:	1d20      	adds	r0, r4, #4
   d6de2:	f7ff fd8e 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6de6:	3408      	adds	r4, #8
   d6de8:	3608      	adds	r6, #8
   d6dea:	e7f2      	b.n	d6dd2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d6dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6dee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6dee:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6df0:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6df2:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6df4:	dd0b      	ble.n	d6e0e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6df6:	00f0      	lsls	r0, r6, #3
   d6df8:	f7ff f968 	bl	d60cc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6dfc:	4604      	mov	r4, r0
   d6dfe:	b170      	cbz	r0, d6e1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6e00:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6e04:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6e08:	f7ff ffc7 	bl	d6d9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6e0c:	e000      	b.n	d6e10 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6e0e:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6e10:	6828      	ldr	r0, [r5, #0]
   d6e12:	f7ff f963 	bl	d60dc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6e16:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6e18:	60ae      	str	r6, [r5, #8]
        return true;
   d6e1a:	2001      	movs	r0, #1
   d6e1c:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6e1e:	bd70      	pop	{r4, r5, r6, pc}

000d6e20 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6e20:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6e22:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6e24:	6845      	ldr	r5, [r0, #4]
   d6e26:	4668      	mov	r0, sp
   d6e28:	f7ff fd53 	bl	d68d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6e2c:	6861      	ldr	r1, [r4, #4]
   d6e2e:	68a3      	ldr	r3, [r4, #8]
   d6e30:	4299      	cmp	r1, r3
   d6e32:	db05      	blt.n	d6e40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d6e34:	3101      	adds	r1, #1
   d6e36:	4620      	mov	r0, r4
   d6e38:	f7ff ffd9 	bl	d6dee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6e3c:	4606      	mov	r6, r0
   d6e3e:	b198      	cbz	r0, d6e68 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d6e40:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6e42:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6e44:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6e48:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6e4c:	4629      	mov	r1, r5
   d6e4e:	f105 0008 	add.w	r0, r5, #8
   d6e52:	f7ff ffa2 	bl	d6d9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6e56:	b11d      	cbz	r5, d6e60 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d6e58:	4669      	mov	r1, sp
   d6e5a:	4628      	mov	r0, r5
   d6e5c:	f7ff fd39 	bl	d68d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d6e60:	6863      	ldr	r3, [r4, #4]
   d6e62:	3301      	adds	r3, #1
   d6e64:	6063      	str	r3, [r4, #4]
   d6e66:	2601      	movs	r6, #1
   d6e68:	a801      	add	r0, sp, #4
   d6e6a:	f7ff fd4a 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6e6e:	4630      	mov	r0, r6
   d6e70:	b002      	add	sp, #8
   d6e72:	bd70      	pop	{r4, r5, r6, pc}

000d6e74 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6e74:	b510      	push	{r4, lr}
   d6e76:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d6e78:	6840      	ldr	r0, [r0, #4]
   d6e7a:	b108      	cbz	r0, d6e80 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6e7c:	f7fd f90f 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6e80:	4620      	mov	r0, r4
   d6e82:	bd10      	pop	{r4, pc}

000d6e84 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6e84:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6e86:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d6e88:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d6e8a:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d6e8e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d6e92:	f000 fdc2 	bl	d7a1a <_ZN6StringD1Ev>
   d6e96:	4668      	mov	r0, sp
   d6e98:	f7ff ffec 	bl	d6e74 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6e9c:	b003      	add	sp, #12
   d6e9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6ea4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6ea4:	b538      	push	{r3, r4, r5, lr}
   d6ea6:	2300      	movs	r3, #0
   d6ea8:	4604      	mov	r4, r0
   d6eaa:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6eac:	2014      	movs	r0, #20
   d6eae:	460d      	mov	r5, r1
   d6eb0:	f7fd f8f3 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6eb4:	b128      	cbz	r0, d6ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6eb6:	2301      	movs	r3, #1
   d6eb8:	6043      	str	r3, [r0, #4]
   d6eba:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6ebc:	4b02      	ldr	r3, [pc, #8]	; (d6ec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6ebe:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6ec0:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6ec2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6ec4:	4620      	mov	r0, r4
   d6ec6:	bd38      	pop	{r3, r4, r5, pc}
   d6ec8:	000d9af4 	.word	0x000d9af4

000d6ecc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d6ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6ed0:	b088      	sub	sp, #32
   d6ed2:	4605      	mov	r5, r0
   d6ed4:	461e      	mov	r6, r3
   d6ed6:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6ed8:	2300      	movs	r3, #0
   d6eda:	460f      	mov	r7, r1
   d6edc:	4690      	mov	r8, r2
   d6ede:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6ee0:	9305      	str	r3, [sp, #20]
   d6ee2:	f7fd f8da 	bl	d409a <_Znwj>
   d6ee6:	f8cd d018 	str.w	sp, [sp, #24]
   d6eea:	4604      	mov	r4, r0
   d6eec:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6eee:	b1c0      	cbz	r0, d6f22 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x56>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d6ef0:	f898 8000 	ldrb.w	r8, [r8]
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d6ef4:	f7ff fb52 	bl	d659c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d6ef8:	4639      	mov	r1, r7
   d6efa:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d6efe:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d6f02:	f000 fde4 	bl	d7ace <_ZN6StringaSEPKc>
        callback_ = callback;
   d6f06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d6f08:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d6f0a:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d6f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d6f0e:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d6f10:	f104 0014 	add.w	r0, r4, #20
   d6f14:	f7ff fa00 	bl	d6318 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d6f18:	990e      	ldr	r1, [sp, #56]	; 0x38
   d6f1a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d6f1e:	f7ff f9fb 	bl	d6318 <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6f22:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6f24:	2600      	movs	r6, #0
   d6f26:	ab01      	add	r3, sp, #4
   d6f28:	aa02      	add	r2, sp, #8
   d6f2a:	a803      	add	r0, sp, #12
   d6f2c:	9607      	str	r6, [sp, #28]
   d6f2e:	f7ff ffb9 	bl	d6ea4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6f32:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6f34:	9a05      	ldr	r2, [sp, #20]
   d6f36:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6f38:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6f3a:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6f3c:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6f3e:	f7ff fce0 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d6f42:	a806      	add	r0, sp, #24
   d6f44:	f7ff ff96 	bl	d6e74 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6f48:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6f4a:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6f4c:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d6f4e:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6f50:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6f52:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6f54:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d6f56:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d6f58:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6f5c:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6f5e:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6f60:	f7ff fccf 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f64:	a805      	add	r0, sp, #20
   d6f66:	f7ff fccc 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d6f6a:	6829      	ldr	r1, [r5, #0]
   d6f6c:	b919      	cbnz	r1, d6f76 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xaa>
        SPARK_ASSERT(false);
   d6f6e:	4a03      	ldr	r2, [pc, #12]	; (d6f7c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xb0>)
   d6f70:	200a      	movs	r0, #10
   d6f72:	f7ff f81f 	bl	d5fb4 <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d6f76:	b008      	add	sp, #32
   d6f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6f7c:	000d5c75 	.word	0x000d5c75

000d6f80 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6f80:	b510      	push	{r4, lr}
   d6f82:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d6f84:	6840      	ldr	r0, [r0, #4]
   d6f86:	b108      	cbz	r0, d6f8c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6f88:	f7fd f889 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6f8c:	4620      	mov	r0, r4
   d6f8e:	bd10      	pop	{r4, pc}

000d6f90 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6f90:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6f92:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d6f94:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d6f96:	e88d 0009 	stmia.w	sp, {r0, r3}
   d6f9a:	4668      	mov	r0, sp
   d6f9c:	f7ff fff0 	bl	d6f80 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6fa0:	b003      	add	sp, #12
   d6fa2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6fa8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6fa8:	b538      	push	{r3, r4, r5, lr}
   d6faa:	2300      	movs	r3, #0
   d6fac:	4604      	mov	r4, r0
   d6fae:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6fb0:	2014      	movs	r0, #20
   d6fb2:	460d      	mov	r5, r1
   d6fb4:	f7fd f871 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6fb8:	b128      	cbz	r0, d6fc6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6fba:	2301      	movs	r3, #1
   d6fbc:	6043      	str	r3, [r0, #4]
   d6fbe:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6fc0:	4b02      	ldr	r3, [pc, #8]	; (d6fcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6fc2:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6fc4:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6fc6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6fc8:	4620      	mov	r0, r4
   d6fca:	bd38      	pop	{r3, r4, r5, pc}
   d6fcc:	000d9b10 	.word	0x000d9b10

000d6fd0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d6fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6fd2:	2600      	movs	r6, #0
   d6fd4:	b087      	sub	sp, #28
   d6fd6:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6fd8:	6046      	str	r6, [r0, #4]
   d6fda:	4604      	mov	r4, r0
   d6fdc:	2018      	movs	r0, #24
   d6fde:	460f      	mov	r7, r1
   d6fe0:	f7fd f85b 	bl	d409a <_Znwj>
   d6fe4:	f8cd d010 	str.w	sp, [sp, #16]
   d6fe8:	4605      	mov	r5, r0
   d6fea:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6fec:	b138      	cbz	r0, d6ffe <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d6fee:	f7ff f915 	bl	d621c <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d6ff2:	4639      	mov	r1, r7
   d6ff4:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d6ff6:	82ae      	strh	r6, [r5, #20]
   d6ff8:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d6ffa:	f7ff f98d 	bl	d6318 <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6ffe:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7000:	4629      	mov	r1, r5
   d7002:	9305      	str	r3, [sp, #20]
   d7004:	aa02      	add	r2, sp, #8
   d7006:	ab01      	add	r3, sp, #4
   d7008:	a803      	add	r0, sp, #12
   d700a:	f7ff ffcd 	bl	d6fa8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d700e:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d7010:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7012:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7014:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7016:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7018:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d701a:	f7ff fc72 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d701e:	a804      	add	r0, sp, #16
   d7020:	f7ff ffae 	bl	d6f80 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d7024:	6823      	ldr	r3, [r4, #0]
   d7026:	b90b      	cbnz	r3, d702c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d7028:	f7ff f8a0 	bl	d616c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d702c:	4620      	mov	r0, r4
   d702e:	b007      	add	sp, #28
   d7030:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7034 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d7034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7038:	4617      	mov	r7, r2
   d703a:	b0a1      	sub	sp, #132	; 0x84
   d703c:	4680      	mov	r8, r0
    WiringBleLock lk;
   d703e:	a80a      	add	r0, sp, #40	; 0x28
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d7040:	460e      	mov	r6, r1
    WiringBleLock lk;
   d7042:	f7ff f8c3 	bl	d61cc <_ZN8particle3ble13WiringBleLockC1Ev>
   d7046:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d7048:	7923      	ldrb	r3, [r4, #4]
   d704a:	2b00      	cmp	r3, #0
   d704c:	f000 80de 	beq.w	d720c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7050:	6833      	ldr	r3, [r6, #0]
   d7052:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7054:	691b      	ldr	r3, [r3, #16]
   d7056:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d705a:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d705c:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d7060:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d7064:	9b03      	ldr	r3, [sp, #12]
   d7066:	42ab      	cmp	r3, r5
   d7068:	d023      	beq.n	d70b2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d706a:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d706e:	4650      	mov	r0, sl
   d7070:	f109 0114 	add.w	r1, r9, #20
   d7074:	f7ff f96a 	bl	d634c <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d7078:	2800      	cmp	r0, #0
   d707a:	f000 80cc 	beq.w	d7216 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d707e:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d7082:	4658      	mov	r0, fp
   d7084:	f7ff f962 	bl	d634c <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d7088:	2800      	cmp	r0, #0
   d708a:	f000 80c4 	beq.w	d7216 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d708e:	6823      	ldr	r3, [r4, #0]
   d7090:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d7094:	f8d9 3000 	ldr.w	r3, [r9]
   d7098:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d709c:	4299      	cmp	r1, r3
   d709e:	f040 80ba 	bne.w	d7216 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d70a2:	2320      	movs	r3, #32
   d70a4:	4a60      	ldr	r2, [pc, #384]	; (d7228 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d70a6:	9315      	str	r3, [sp, #84]	; 0x54
   d70a8:	2300      	movs	r3, #0
   d70aa:	9200      	str	r2, [sp, #0]
   d70ac:	9316      	str	r3, [sp, #88]	; 0x58
   d70ae:	aa15      	add	r2, sp, #84	; 0x54
   d70b0:	e0a8      	b.n	d7204 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d70b2:	f104 0928 	add.w	r9, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d70b6:	4648      	mov	r0, r9
   d70b8:	f7ff f8fa 	bl	d62b0 <_ZNK8particle7BleUuid7isValidEv>
   d70bc:	b918      	cbnz	r0, d70c6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d70be:	495b      	ldr	r1, [pc, #364]	; (d722c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d70c0:	4648      	mov	r0, r9
   d70c2:	f7ff f936 	bl	d6332 <_ZN8particle7BleUuidaSEPKh>
   d70c6:	6833      	ldr	r3, [r6, #0]
   d70c8:	681d      	ldr	r5, [r3, #0]
   d70ca:	685b      	ldr	r3, [r3, #4]
   d70cc:	eb05 0ac3 	add.w	sl, r5, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d70d0:	4555      	cmp	r5, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d70d2:	4649      	mov	r1, r9
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d70d4:	d005      	beq.n	d70e2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d70d6:	6828      	ldr	r0, [r5, #0]
   d70d8:	f7ff f938 	bl	d634c <_ZNK8particle7BleUuideqERKS0_>
   d70dc:	bb58      	cbnz	r0, d7136 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x102>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d70de:	3508      	adds	r5, #8
   d70e0:	e7f6      	b.n	d70d0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d70e2:	a80b      	add	r0, sp, #44	; 0x2c
   d70e4:	f7ff ff74 	bl	d6fd0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d70e8:	4649      	mov	r1, r9
   d70ea:	a815      	add	r0, sp, #84	; 0x54
   d70ec:	f7ff f8f2 	bl	d62d4 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d70f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d70f2:	2300      	movs	r3, #0
   d70f4:	3214      	adds	r2, #20
   d70f6:	a915      	add	r1, sp, #84	; 0x54
   d70f8:	2001      	movs	r0, #1
   d70fa:	f7fe fd2b 	bl	d5b54 <hal_ble_gatt_server_add_service>
   d70fe:	2800      	cmp	r0, #0
   d7100:	d178      	bne.n	d71f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d7102:	6835      	ldr	r5, [r6, #0]
   d7104:	a90b      	add	r1, sp, #44	; 0x2c
   d7106:	a80d      	add	r0, sp, #52	; 0x34
   d7108:	f7ff fbf1 	bl	d68ee <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d710c:	4628      	mov	r0, r5
   d710e:	a90d      	add	r1, sp, #52	; 0x34
   d7110:	f7ff fe19 	bl	d6d46 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d7114:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7116:	a80e      	add	r0, sp, #56	; 0x38
   d7118:	f7ff fbf3 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d711c:	2d00      	cmp	r5, #0
   d711e:	d069      	beq.n	d71f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
   d7120:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d7122:	6855      	ldr	r5, [r2, #4]
   d7124:	f105 5300 	add.w	r3, r5, #536870912	; 0x20000000
   d7128:	6815      	ldr	r5, [r2, #0]
   d712a:	3b01      	subs	r3, #1
   d712c:	a80c      	add	r0, sp, #48	; 0x30
   d712e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d7132:	f7ff fbe6 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d7136:	f104 0914 	add.w	r9, r4, #20
   d713a:	4648      	mov	r0, r9
   d713c:	f7ff f8b8 	bl	d62b0 <_ZNK8particle7BleUuid7isValidEv>
   d7140:	b968      	cbnz	r0, d715e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x12a>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d7142:	4b3b      	ldr	r3, [pc, #236]	; (d7230 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7144:	4939      	ldr	r1, [pc, #228]	; (d722c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d7146:	881a      	ldrh	r2, [r3, #0]
   d7148:	3201      	adds	r2, #1
   d714a:	b292      	uxth	r2, r2
   d714c:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d714e:	a815      	add	r0, sp, #84	; 0x54
   d7150:	2301      	movs	r3, #1
   d7152:	f7ff f8a1 	bl	d6298 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d7156:	a915      	add	r1, sp, #84	; 0x54
   d7158:	4648      	mov	r0, r9
   d715a:	f7ff f8dd 	bl	d6318 <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d715e:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d7162:	4652      	mov	r2, sl
   d7164:	2100      	movs	r1, #0
   d7166:	a815      	add	r0, sp, #84	; 0x54
   d7168:	f002 faa7 	bl	d96ba <memset>
    charInit.version = BLE_API_VERSION;
   d716c:	2301      	movs	r3, #1
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d716e:	4649      	mov	r1, r9
   d7170:	a804      	add	r0, sp, #16
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d7172:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    charInit.size = sizeof(hal_ble_char_init_t);
   d7176:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    charInit.uuid = charImpl->charUUID().halUUID();
   d717a:	f7ff f8ab 	bl	d62d4 <_ZN8particle7BleUuid7halUUIDEv>
   d717e:	ab04      	add	r3, sp, #16
   d7180:	aa18      	add	r2, sp, #96	; 0x60
   d7182:	f10d 0c20 	add.w	ip, sp, #32
   d7186:	6818      	ldr	r0, [r3, #0]
   d7188:	6859      	ldr	r1, [r3, #4]
   d718a:	4696      	mov	lr, r2
   d718c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d7190:	3308      	adds	r3, #8
   d7192:	4563      	cmp	r3, ip
   d7194:	4672      	mov	r2, lr
   d7196:	d1f6      	bne.n	d7186 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x152>
   d7198:	6818      	ldr	r0, [r3, #0]
   d719a:	f8ce 0000 	str.w	r0, [lr]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   d719e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   d71a0:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d71a4:	682b      	ldr	r3, [r5, #0]
   d71a6:	8a9b      	ldrh	r3, [r3, #20]
   d71a8:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d71ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d71ae:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d71b0:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d71b2:	4b20      	ldr	r3, [pc, #128]	; (d7234 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
   d71b4:	931e      	str	r3, [sp, #120]	; 0x78
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d71b6:	1da1      	adds	r1, r4, #6
   d71b8:	a815      	add	r0, sp, #84	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d71ba:	941f      	str	r4, [sp, #124]	; 0x7c
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d71bc:	f7fe fcf2 	bl	d5ba4 <hal_ble_gatt_server_add_characteristic>
   d71c0:	bb20      	cbnz	r0, d720c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        return characteristic;
    }
    charImpl->local() = true;
   d71c2:	2301      	movs	r3, #1
   d71c4:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d71c6:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d71c8:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d71ca:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d71cc:	a80d      	add	r0, sp, #52	; 0x34
   d71ce:	f7ff fb80 	bl	d68d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d71d2:	4620      	mov	r0, r4
   d71d4:	a90d      	add	r1, sp, #52	; 0x34
   d71d6:	f7ff fe23 	bl	d6e20 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d71da:	4604      	mov	r4, r0
   d71dc:	a80e      	add	r0, sp, #56	; 0x38
   d71de:	f7ff fb90 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d71e2:	b99c      	cbnz	r4, d720c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        LOG(ERROR, "Failed to append local characteristic.");
   d71e4:	2320      	movs	r3, #32
   d71e6:	930d      	str	r3, [sp, #52]	; 0x34
   d71e8:	4b13      	ldr	r3, [pc, #76]	; (d7238 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d71ea:	9300      	str	r3, [sp, #0]
   d71ec:	940e      	str	r4, [sp, #56]	; 0x38
   d71ee:	4623      	mov	r3, r4
   d71f0:	aa0d      	add	r2, sp, #52	; 0x34
   d71f2:	e007      	b.n	d7204 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d71f4:	4639      	mov	r1, r7
   d71f6:	4640      	mov	r0, r8
   d71f8:	f7ff fb6b 	bl	d68d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d71fc:	a80c      	add	r0, sp, #48	; 0x30
   d71fe:	f7ff fb80 	bl	d6902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7202:	e00a      	b.n	d721a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d7204:	490d      	ldr	r1, [pc, #52]	; (d723c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
   d7206:	2032      	movs	r0, #50	; 0x32
   d7208:	f7fe fedc 	bl	d5fc4 <log_message>
            return characteristic;
   d720c:	4639      	mov	r1, r7
   d720e:	4640      	mov	r0, r8
   d7210:	f7ff fb5f 	bl	d68d2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7214:	e001      	b.n	d721a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
   d7216:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d7218:	e724      	b.n	d7064 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d721a:	a80a      	add	r0, sp, #40	; 0x28
   d721c:	f7fe ffe4 	bl	d61e8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d7220:	4640      	mov	r0, r8
   d7222:	b021      	add	sp, #132	; 0x84
   d7224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7228:	000d9cc5 	.word	0x000d9cc5
   d722c:	000d9b40 	.word	0x000d9b40
   d7230:	2003e4d8 	.word	0x2003e4d8
   d7234:	000d67c1 	.word	0x000d67c1
   d7238:	000d9c9e 	.word	0x000d9c9e
   d723c:	000d9b50 	.word	0x000d9b50

000d7240 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7240:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7242:	4c06      	ldr	r4, [pc, #24]	; (d725c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7244:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d7246:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7248:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d724a:	f7fe fceb 	bl	d5c24 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d724e:	4620      	mov	r0, r4
   d7250:	4a03      	ldr	r2, [pc, #12]	; (d7260 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7252:	4904      	ldr	r1, [pc, #16]	; (d7264 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7258:	f000 bf1a 	b.w	d8090 <__aeabi_atexit>
   d725c:	2003e4dc 	.word	0x2003e4dc
   d7260:	2003e24c 	.word	0x2003e24c
   d7264:	000d615b 	.word	0x000d615b

000d7268 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7268:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d726a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d726c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d726e:	b113      	cbz	r3, d7276 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7270:	2203      	movs	r2, #3
   d7272:	4601      	mov	r1, r0
   d7274:	4798      	blx	r3
    }
   d7276:	4620      	mov	r0, r4
   d7278:	bd10      	pop	{r4, pc}

000d727a <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d727a:	2200      	movs	r2, #0
   d727c:	4611      	mov	r1, r2
   d727e:	6840      	ldr	r0, [r0, #4]
   d7280:	f7fe bf0c 	b.w	d609c <network_listening>

000d7284 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7284:	2200      	movs	r2, #0
   d7286:	4611      	mov	r1, r2
   d7288:	6840      	ldr	r0, [r0, #4]
   d728a:	f7fe bf17 	b.w	d60bc <network_get_listen_timeout>

000d728e <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d728e:	2200      	movs	r2, #0
   d7290:	6840      	ldr	r0, [r0, #4]
   d7292:	f7fe bf0b 	b.w	d60ac <network_set_listen_timeout>

000d7296 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7296:	2200      	movs	r2, #0
   d7298:	f081 0101 	eor.w	r1, r1, #1
   d729c:	6840      	ldr	r0, [r0, #4]
   d729e:	f7fe bef5 	b.w	d608c <network_listen>

000d72a2 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d72a2:	2300      	movs	r3, #0
   d72a4:	461a      	mov	r2, r3
   d72a6:	4619      	mov	r1, r3
   d72a8:	6840      	ldr	r0, [r0, #4]
   d72aa:	f7fe bee7 	b.w	d607c <network_off>

000d72ae <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d72ae:	2300      	movs	r3, #0
   d72b0:	461a      	mov	r2, r3
   d72b2:	4619      	mov	r1, r3
   d72b4:	6840      	ldr	r0, [r0, #4]
   d72b6:	f7fe bed9 	b.w	d606c <network_on>

000d72ba <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d72ba:	2200      	movs	r2, #0
   d72bc:	4611      	mov	r1, r2
   d72be:	6840      	ldr	r0, [r0, #4]
   d72c0:	f7fe becc 	b.w	d605c <network_ready>

000d72c4 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d72c4:	2200      	movs	r2, #0
   d72c6:	4611      	mov	r1, r2
   d72c8:	6840      	ldr	r0, [r0, #4]
   d72ca:	f7fe beb7 	b.w	d603c <network_connecting>

000d72ce <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d72ce:	2200      	movs	r2, #0
   d72d0:	2102      	movs	r1, #2
   d72d2:	6840      	ldr	r0, [r0, #4]
   d72d4:	f7fe beba 	b.w	d604c <network_disconnect>

000d72d8 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d72d8:	2300      	movs	r3, #0
   d72da:	461a      	mov	r2, r3
   d72dc:	6840      	ldr	r0, [r0, #4]
   d72de:	f7fe bea5 	b.w	d602c <network_connect>
	...

000d72e4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d72e4:	4b02      	ldr	r3, [pc, #8]	; (d72f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d72e6:	2203      	movs	r2, #3
   d72e8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d72ea:	4a02      	ldr	r2, [pc, #8]	; (d72f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d72ec:	601a      	str	r2, [r3, #0]
   d72ee:	4770      	bx	lr
   d72f0:	2003e4e0 	.word	0x2003e4e0
   d72f4:	000d9d08 	.word	0x000d9d08

000d72f8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d72f8:	4770      	bx	lr

000d72fa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d72fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d72fc:	4606      	mov	r6, r0
   d72fe:	4615      	mov	r5, r2
   d7300:	460c      	mov	r4, r1
   d7302:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7304:	42bc      	cmp	r4, r7
   d7306:	d006      	beq.n	d7316 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7308:	6833      	ldr	r3, [r6, #0]
   d730a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d730e:	689b      	ldr	r3, [r3, #8]
   d7310:	4630      	mov	r0, r6
   d7312:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7314:	e7f6      	b.n	d7304 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7316:	4628      	mov	r0, r5
   d7318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d731a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d731a:	2200      	movs	r2, #0
   d731c:	7c00      	ldrb	r0, [r0, #16]
   d731e:	f7fe bd19 	b.w	d5d54 <HAL_I2C_Write_Data>

000d7322 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7322:	2100      	movs	r1, #0
   d7324:	7c00      	ldrb	r0, [r0, #16]
   d7326:	f7fe bd1d 	b.w	d5d64 <HAL_I2C_Available_Data>

000d732a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d732a:	2100      	movs	r1, #0
   d732c:	7c00      	ldrb	r0, [r0, #16]
   d732e:	f7fe bd21 	b.w	d5d74 <HAL_I2C_Read_Data>

000d7332 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7332:	2100      	movs	r1, #0
   d7334:	7c00      	ldrb	r0, [r0, #16]
   d7336:	f7fe bd25 	b.w	d5d84 <HAL_I2C_Peek_Data>

000d733a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d733a:	2100      	movs	r1, #0
   d733c:	7c00      	ldrb	r0, [r0, #16]
   d733e:	f7fe bd29 	b.w	d5d94 <HAL_I2C_Flush_Data>

000d7342 <_ZN7TwoWireD0Ev>:
   d7342:	b510      	push	{r4, lr}
   d7344:	2114      	movs	r1, #20
   d7346:	4604      	mov	r4, r0
   d7348:	f000 fea7 	bl	d809a <_ZdlPvj>
   d734c:	4620      	mov	r0, r4
   d734e:	bd10      	pop	{r4, pc}

000d7350 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7350:	b510      	push	{r4, lr}
   d7352:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7354:	2300      	movs	r3, #0
   d7356:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d735c:	60a3      	str	r3, [r4, #8]
   d735e:	4b04      	ldr	r3, [pc, #16]	; (d7370 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7360:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7362:	4608      	mov	r0, r1
   d7364:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7366:	4611      	mov	r1, r2
   d7368:	f7fe fd24 	bl	d5db4 <HAL_I2C_Init>
}
   d736c:	4620      	mov	r0, r4
   d736e:	bd10      	pop	{r4, pc}
   d7370:	000d9d3c 	.word	0x000d9d3c

000d7374 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7374:	2300      	movs	r3, #0
   d7376:	461a      	mov	r2, r3
   d7378:	4619      	mov	r1, r3
   d737a:	7c00      	ldrb	r0, [r0, #16]
   d737c:	f7fe bcd2 	b.w	d5d24 <HAL_I2C_Begin>

000d7380 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7380:	b570      	push	{r4, r5, r6, lr}
   d7382:	460c      	mov	r4, r1
   d7384:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d7386:	2514      	movs	r5, #20
   d7388:	4606      	mov	r6, r0
   d738a:	462a      	mov	r2, r5
   d738c:	2100      	movs	r1, #0
   d738e:	a801      	add	r0, sp, #4
   d7390:	f002 f993 	bl	d96ba <memset>
   d7394:	7823      	ldrb	r3, [r4, #0]
   d7396:	f88d 3008 	strb.w	r3, [sp, #8]
   d739a:	6863      	ldr	r3, [r4, #4]
   d739c:	9303      	str	r3, [sp, #12]
   d739e:	68e3      	ldr	r3, [r4, #12]
   d73a0:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d73a2:	2200      	movs	r2, #0
   d73a4:	7a23      	ldrb	r3, [r4, #8]
   d73a6:	7c30      	ldrb	r0, [r6, #16]
   d73a8:	f8ad 5004 	strh.w	r5, [sp, #4]
   d73ac:	a901      	add	r1, sp, #4
   d73ae:	9305      	str	r3, [sp, #20]
   d73b0:	f7fe fd08 	bl	d5dc4 <HAL_I2C_Request_Data_Ex>
}
   d73b4:	b006      	add	sp, #24
   d73b6:	bd70      	pop	{r4, r5, r6, pc}

000d73b8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d73b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d73ba:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d73bc:	f88d 1000 	strb.w	r1, [sp]
   d73c0:	f04f 0164 	mov.w	r1, #100	; 0x64
   d73c4:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d73c6:	bf18      	it	ne
   d73c8:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d73ca:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d73cc:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d73ce:	f88d 3008 	strb.w	r3, [sp, #8]
   d73d2:	f7ff ffd5 	bl	d7380 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d73d6:	b005      	add	sp, #20
   d73d8:	f85d fb04 	ldr.w	pc, [sp], #4

000d73dc <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d73dc:	2301      	movs	r3, #1
   d73de:	f7ff bfeb 	b.w	d73b8 <_ZN7TwoWire11requestFromEhjh>

000d73e2 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d73e2:	2200      	movs	r2, #0
   d73e4:	7c00      	ldrb	r0, [r0, #16]
   d73e6:	f7fe bca5 	b.w	d5d34 <HAL_I2C_Begin_Transmission>

000d73ea <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d73ea:	2200      	movs	r2, #0
   d73ec:	7c00      	ldrb	r0, [r0, #16]
   d73ee:	f7fe bca9 	b.w	d5d44 <HAL_I2C_End_Transmission>

000d73f2 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d73f2:	2101      	movs	r1, #1
   d73f4:	f7ff bff9 	b.w	d73ea <_ZN7TwoWire15endTransmissionEh>

000d73f8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d73f8:	2100      	movs	r1, #0
   d73fa:	7c00      	ldrb	r0, [r0, #16]
   d73fc:	f7fe bcd2 	b.w	d5da4 <HAL_I2C_Is_Enabled>

000d7400 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d7400:	4700      	bx	r0
	...

000d7404 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7404:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7406:	b085      	sub	sp, #20
   d7408:	461c      	mov	r4, r3
   d740a:	460e      	mov	r6, r1
   d740c:	4617      	mov	r7, r2
   d740e:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
   d7410:	f7fe fc78 	bl	d5d04 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d7414:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d7416:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7418:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d741c:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d741e:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d7422:	bfa5      	ittet	ge
   d7424:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d7428:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d742c:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d742e:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7430:	9300      	str	r3, [sp, #0]
   d7432:	4632      	mov	r2, r6
   d7434:	463b      	mov	r3, r7
   d7436:	4906      	ldr	r1, [pc, #24]	; (d7450 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7438:	bfa8      	it	ge
   d743a:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d743e:	4628      	mov	r0, r5
   d7440:	f7fe fc58 	bl	d5cf4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d7444:	fab0 f080 	clz	r0, r0
   d7448:	0940      	lsrs	r0, r0, #5
   d744a:	b005      	add	sp, #20
   d744c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d744e:	bf00      	nop
   d7450:	000d7401 	.word	0x000d7401

000d7454 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7454:	4770      	bx	lr

000d7456 <_ZN9IPAddressD0Ev>:
   d7456:	b510      	push	{r4, lr}
   d7458:	2118      	movs	r1, #24
   d745a:	4604      	mov	r4, r0
   d745c:	f000 fe1d 	bl	d809a <_ZdlPvj>
   d7460:	4620      	mov	r0, r4
   d7462:	bd10      	pop	{r4, pc}

000d7464 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7464:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7466:	7d03      	ldrb	r3, [r0, #20]
   d7468:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d746a:	b08d      	sub	sp, #52	; 0x34
   d746c:	460e      	mov	r6, r1
   d746e:	f100 0704 	add.w	r7, r0, #4
   d7472:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7476:	d002      	beq.n	d747e <_ZNK9IPAddress7printToER5Print+0x1a>
   d7478:	f100 0508 	add.w	r5, r0, #8
   d747c:	e018      	b.n	d74b0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d747e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7480:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7482:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7486:	232f      	movs	r3, #47	; 0x2f
   d7488:	462a      	mov	r2, r5
   d748a:	200a      	movs	r0, #10
   d748c:	f7fe fca2 	bl	d5dd4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7490:	4628      	mov	r0, r5
   d7492:	f002 f94b 	bl	d972c <strlen>
   d7496:	6833      	ldr	r3, [r6, #0]
   d7498:	4602      	mov	r2, r0
   d749a:	68db      	ldr	r3, [r3, #12]
   d749c:	4629      	mov	r1, r5
   d749e:	4630      	mov	r0, r6
   d74a0:	4798      	blx	r3
   d74a2:	e00f      	b.n	d74c4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d74a4:	b124      	cbz	r4, d74b0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d74a6:	212e      	movs	r1, #46	; 0x2e
   d74a8:	4630      	mov	r0, r6
   d74aa:	f000 f9c5 	bl	d7838 <_ZN5Print5printEc>
   d74ae:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d74b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d74b4:	220a      	movs	r2, #10
   d74b6:	4630      	mov	r0, r6
   d74b8:	f000 f9c1 	bl	d783e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d74bc:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d74be:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d74c0:	d1f0      	bne.n	d74a4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d74c2:	4620      	mov	r0, r4
    }
    return n;
}
   d74c4:	b00d      	add	sp, #52	; 0x34
   d74c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d74c8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d74c8:	b510      	push	{r4, lr}
   d74ca:	4b05      	ldr	r3, [pc, #20]	; (d74e0 <_ZN9IPAddressC1Ev+0x18>)
   d74cc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d74ce:	2211      	movs	r2, #17
   d74d0:	f840 3b04 	str.w	r3, [r0], #4
   d74d4:	2100      	movs	r1, #0
   d74d6:	f002 f8f0 	bl	d96ba <memset>
{
    clear();
}
   d74da:	4620      	mov	r0, r4
   d74dc:	bd10      	pop	{r4, pc}
   d74de:	bf00      	nop
   d74e0:	000d9d64 	.word	0x000d9d64

000d74e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d74e4:	4603      	mov	r3, r0
   d74e6:	4a07      	ldr	r2, [pc, #28]	; (d7504 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d74e8:	b510      	push	{r4, lr}
   d74ea:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d74ee:	f101 0210 	add.w	r2, r1, #16
   d74f2:	f851 4b04 	ldr.w	r4, [r1], #4
   d74f6:	f843 4b04 	str.w	r4, [r3], #4
   d74fa:	4291      	cmp	r1, r2
   d74fc:	d1f9      	bne.n	d74f2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d74fe:	780a      	ldrb	r2, [r1, #0]
   d7500:	701a      	strb	r2, [r3, #0]
}
   d7502:	bd10      	pop	{r4, pc}
   d7504:	000d9d64 	.word	0x000d9d64

000d7508 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7508:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d750a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d750e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7512:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7516:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d751a:	2304      	movs	r3, #4
   d751c:	6041      	str	r1, [r0, #4]
   d751e:	7503      	strb	r3, [r0, #20]
   d7520:	bd10      	pop	{r4, pc}

000d7522 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7522:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7524:	780d      	ldrb	r5, [r1, #0]
   d7526:	788b      	ldrb	r3, [r1, #2]
   d7528:	784a      	ldrb	r2, [r1, #1]
   d752a:	78c9      	ldrb	r1, [r1, #3]
   d752c:	9100      	str	r1, [sp, #0]
   d752e:	4629      	mov	r1, r5
   d7530:	f7ff ffea 	bl	d7508 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7534:	b003      	add	sp, #12
   d7536:	bd30      	pop	{r4, r5, pc}

000d7538 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7538:	4b01      	ldr	r3, [pc, #4]	; (d7540 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d753a:	4a02      	ldr	r2, [pc, #8]	; (d7544 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d753c:	601a      	str	r2, [r3, #0]
   d753e:	4770      	bx	lr
   d7540:	2003e4e8 	.word	0x2003e4e8
   d7544:	000d9de3 	.word	0x000d9de3

000d7548 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7548:	2200      	movs	r2, #0
   d754a:	4611      	mov	r1, r2
   d754c:	6840      	ldr	r0, [r0, #4]
   d754e:	f7fe bda5 	b.w	d609c <network_listening>

000d7552 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7552:	2200      	movs	r2, #0
   d7554:	4611      	mov	r1, r2
   d7556:	6840      	ldr	r0, [r0, #4]
   d7558:	f7fe bdb0 	b.w	d60bc <network_get_listen_timeout>

000d755c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d755c:	2200      	movs	r2, #0
   d755e:	6840      	ldr	r0, [r0, #4]
   d7560:	f7fe bda4 	b.w	d60ac <network_set_listen_timeout>

000d7564 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7564:	2200      	movs	r2, #0
   d7566:	f081 0101 	eor.w	r1, r1, #1
   d756a:	6840      	ldr	r0, [r0, #4]
   d756c:	f7fe bd8e 	b.w	d608c <network_listen>

000d7570 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7570:	2300      	movs	r3, #0
   d7572:	461a      	mov	r2, r3
   d7574:	2101      	movs	r1, #1
   d7576:	6840      	ldr	r0, [r0, #4]
   d7578:	f7fe bd80 	b.w	d607c <network_off>

000d757c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d757c:	2300      	movs	r3, #0
   d757e:	461a      	mov	r2, r3
   d7580:	4619      	mov	r1, r3
   d7582:	6840      	ldr	r0, [r0, #4]
   d7584:	f7fe bd72 	b.w	d606c <network_on>

000d7588 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7588:	2200      	movs	r2, #0
   d758a:	4611      	mov	r1, r2
   d758c:	6840      	ldr	r0, [r0, #4]
   d758e:	f7fe bd65 	b.w	d605c <network_ready>

000d7592 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7592:	2200      	movs	r2, #0
   d7594:	4611      	mov	r1, r2
   d7596:	6840      	ldr	r0, [r0, #4]
   d7598:	f7fe bd50 	b.w	d603c <network_connecting>

000d759c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d759c:	2200      	movs	r2, #0
   d759e:	2102      	movs	r1, #2
   d75a0:	6840      	ldr	r0, [r0, #4]
   d75a2:	f7fe bd53 	b.w	d604c <network_disconnect>

000d75a6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d75a6:	2300      	movs	r3, #0
   d75a8:	461a      	mov	r2, r3
   d75aa:	6840      	ldr	r0, [r0, #4]
   d75ac:	f7fe bd3e 	b.w	d602c <network_connect>

000d75b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d75b0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d75b2:	4605      	mov	r5, r0
   d75b4:	b188      	cbz	r0, d75da <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d75b6:	6804      	ldr	r4, [r0, #0]
   d75b8:	b14c      	cbz	r4, d75ce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d75ba:	68a3      	ldr	r3, [r4, #8]
   d75bc:	b11b      	cbz	r3, d75c6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d75be:	2203      	movs	r2, #3
   d75c0:	4621      	mov	r1, r4
   d75c2:	4620      	mov	r0, r4
   d75c4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d75c6:	2110      	movs	r1, #16
   d75c8:	4620      	mov	r0, r4
   d75ca:	f000 fd66 	bl	d809a <_ZdlPvj>
   d75ce:	4628      	mov	r0, r5
   d75d0:	2114      	movs	r1, #20
      }
   d75d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d75d6:	f000 bd60 	b.w	d809a <_ZdlPvj>
   d75da:	bd38      	pop	{r3, r4, r5, pc}

000d75dc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d75dc:	b110      	cbz	r0, d75e4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d75de:	6803      	ldr	r3, [r0, #0]
   d75e0:	685b      	ldr	r3, [r3, #4]
   d75e2:	4718      	bx	r3
   d75e4:	4770      	bx	lr

000d75e6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d75e6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d75e8:	6803      	ldr	r3, [r0, #0]
   d75ea:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d75ec:	b1bb      	cbz	r3, d761e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d75ee:	6858      	ldr	r0, [r3, #4]
   d75f0:	f7fe fb00 	bl	d5bf4 <os_thread_is_current>
   d75f4:	b978      	cbnz	r0, d7616 <_ZN6ThreadD1Ev+0x30>
   d75f6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d75f8:	7c5a      	ldrb	r2, [r3, #17]
   d75fa:	b912      	cbnz	r2, d7602 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d75fc:	6858      	ldr	r0, [r3, #4]
   d75fe:	f7fe fb01 	bl	d5c04 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7602:	6823      	ldr	r3, [r4, #0]
   d7604:	6858      	ldr	r0, [r3, #4]
   d7606:	f7fe fb05 	bl	d5c14 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d760a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d760c:	2300      	movs	r3, #0
   d760e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7610:	b128      	cbz	r0, d761e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7612:	f7ff ffcd 	bl	d75b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7616:	6820      	ldr	r0, [r4, #0]
   d7618:	b108      	cbz	r0, d761e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d761a:	f7ff ffc9 	bl	d75b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d761e:	4620      	mov	r0, r4
   d7620:	bd10      	pop	{r4, pc}

000d7622 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7622:	b538      	push	{r3, r4, r5, lr}
   d7624:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7626:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d762a:	b108      	cbz	r0, d7630 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d762c:	f7fc fd39 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7630:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7634:	b108      	cbz	r0, d763a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7636:	f7fe fafd 	bl	d5c34 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d763a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d763e:	b135      	cbz	r5, d764e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7640:	4628      	mov	r0, r5
   d7642:	f7ff ffd0 	bl	d75e6 <_ZN6ThreadD1Ev>
   d7646:	2104      	movs	r1, #4
   d7648:	4628      	mov	r0, r5
   d764a:	f000 fd26 	bl	d809a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d764e:	6820      	ldr	r0, [r4, #0]
   d7650:	b108      	cbz	r0, d7656 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7652:	f7ff ffc3 	bl	d75dc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7656:	4620      	mov	r0, r4
   d7658:	bd38      	pop	{r3, r4, r5, pc}
	...

000d765c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d765c:	b510      	push	{r4, lr}
   d765e:	4b04      	ldr	r3, [pc, #16]	; (d7670 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7660:	4604      	mov	r4, r0
   d7662:	f840 3b08 	str.w	r3, [r0], #8
   d7666:	f7ff ffdc 	bl	d7622 <_ZN5spark11MeshPublishD1Ev>
   d766a:	4620      	mov	r0, r4
   d766c:	bd10      	pop	{r4, pc}
   d766e:	bf00      	nop
   d7670:	000d9e5c 	.word	0x000d9e5c

000d7674 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7674:	b538      	push	{r3, r4, r5, lr}
   d7676:	4c0e      	ldr	r4, [pc, #56]	; (d76b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7678:	4b0e      	ldr	r3, [pc, #56]	; (d76b4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d767a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d767c:	2500      	movs	r5, #0
   d767e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7680:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7684:	6063      	str	r3, [r4, #4]
   d7686:	60a5      	str	r5, [r4, #8]
   d7688:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d768c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7690:	f7fe fac8 	bl	d5c24 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7694:	4b08      	ldr	r3, [pc, #32]	; (d76b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7696:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d769a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d769e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d76a0:	4620      	mov	r0, r4
   d76a2:	4a06      	ldr	r2, [pc, #24]	; (d76bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d76a4:	4906      	ldr	r1, [pc, #24]	; (d76c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d76a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d76aa:	f000 bcf1 	b.w	d8090 <__aeabi_atexit>
   d76ae:	bf00      	nop
   d76b0:	2003e4ec 	.word	0x2003e4ec
   d76b4:	000d9e90 	.word	0x000d9e90
   d76b8:	000d9e5c 	.word	0x000d9e5c
   d76bc:	2003e24c 	.word	0x2003e24c
   d76c0:	000d765d 	.word	0x000d765d

000d76c4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d76c4:	2300      	movs	r3, #0
   d76c6:	461a      	mov	r2, r3
   d76c8:	6840      	ldr	r0, [r0, #4]
   d76ca:	f7fe bcaf 	b.w	d602c <network_connect>

000d76ce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d76ce:	2200      	movs	r2, #0
   d76d0:	2102      	movs	r1, #2
   d76d2:	6840      	ldr	r0, [r0, #4]
   d76d4:	f7fe bcba 	b.w	d604c <network_disconnect>

000d76d8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d76d8:	2200      	movs	r2, #0
   d76da:	4611      	mov	r1, r2
   d76dc:	6840      	ldr	r0, [r0, #4]
   d76de:	f7fe bcad 	b.w	d603c <network_connecting>

000d76e2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d76e2:	2200      	movs	r2, #0
   d76e4:	4611      	mov	r1, r2
   d76e6:	6840      	ldr	r0, [r0, #4]
   d76e8:	f7fe bcb8 	b.w	d605c <network_ready>

000d76ec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d76ec:	2300      	movs	r3, #0
   d76ee:	461a      	mov	r2, r3
   d76f0:	4619      	mov	r1, r3
   d76f2:	6840      	ldr	r0, [r0, #4]
   d76f4:	f7fe bcba 	b.w	d606c <network_on>

000d76f8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d76f8:	2300      	movs	r3, #0
   d76fa:	461a      	mov	r2, r3
   d76fc:	4619      	mov	r1, r3
   d76fe:	6840      	ldr	r0, [r0, #4]
   d7700:	f7fe bcbc 	b.w	d607c <network_off>

000d7704 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7704:	2200      	movs	r2, #0
   d7706:	f081 0101 	eor.w	r1, r1, #1
   d770a:	6840      	ldr	r0, [r0, #4]
   d770c:	f7fe bcbe 	b.w	d608c <network_listen>

000d7710 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7710:	2200      	movs	r2, #0
   d7712:	6840      	ldr	r0, [r0, #4]
   d7714:	f7fe bcca 	b.w	d60ac <network_set_listen_timeout>

000d7718 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7718:	2200      	movs	r2, #0
   d771a:	4611      	mov	r1, r2
   d771c:	6840      	ldr	r0, [r0, #4]
   d771e:	f7fe bccd 	b.w	d60bc <network_get_listen_timeout>

000d7722 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7722:	2200      	movs	r2, #0
   d7724:	4611      	mov	r1, r2
   d7726:	6840      	ldr	r0, [r0, #4]
   d7728:	f7fe bcb8 	b.w	d609c <network_listening>

000d772c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d772c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7730:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7732:	b095      	sub	sp, #84	; 0x54
   d7734:	4616      	mov	r6, r2
   d7736:	460d      	mov	r5, r1
   d7738:	4607      	mov	r7, r0
    IPAddress addr;
   d773a:	f7ff fec5 	bl	d74c8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d773e:	4621      	mov	r1, r4
   d7740:	2220      	movs	r2, #32
   d7742:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7744:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7746:	f001 ffb8 	bl	d96ba <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d774a:	2340      	movs	r3, #64	; 0x40
   d774c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d774e:	4621      	mov	r1, r4
   d7750:	466b      	mov	r3, sp
   d7752:	aa0c      	add	r2, sp, #48	; 0x30
   d7754:	4630      	mov	r0, r6
   d7756:	f7fe fb4d 	bl	d5df4 <netdb_getaddrinfo>
    if (!r) {
   d775a:	4604      	mov	r4, r0
   d775c:	2800      	cmp	r0, #0
   d775e:	d144      	bne.n	d77ea <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7760:	4602      	mov	r2, r0
   d7762:	2101      	movs	r1, #1
   d7764:	6868      	ldr	r0, [r5, #4]
   d7766:	f7fe fc79 	bl	d605c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d776a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d776c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d776e:	4622      	mov	r2, r4
   d7770:	6868      	ldr	r0, [r5, #4]
   d7772:	f7fe fc73 	bl	d605c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7776:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7778:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d777a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d777c:	2e00      	cmp	r6, #0
   d777e:	d034      	beq.n	d77ea <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7780:	2900      	cmp	r1, #0
   d7782:	d132      	bne.n	d77ea <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7784:	6873      	ldr	r3, [r6, #4]
   d7786:	2b02      	cmp	r3, #2
   d7788:	d002      	beq.n	d7790 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d778a:	2b0a      	cmp	r3, #10
   d778c:	d009      	beq.n	d77a2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d778e:	e02a      	b.n	d77e6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7790:	f1b8 0f00 	cmp.w	r8, #0
   d7794:	d027      	beq.n	d77e6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7796:	6971      	ldr	r1, [r6, #20]
   d7798:	4638      	mov	r0, r7
   d779a:	3104      	adds	r1, #4
   d779c:	f7ff fec1 	bl	d7522 <_ZN9IPAddressaSEPKh>
   d77a0:	e020      	b.n	d77e4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d77a2:	f1b9 0f00 	cmp.w	r9, #0
   d77a6:	d01e      	beq.n	d77e6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d77a8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d77aa:	2211      	movs	r2, #17
   d77ac:	a801      	add	r0, sp, #4
   d77ae:	f001 ff84 	bl	d96ba <memset>
                    a.v = 6;
   d77b2:	2306      	movs	r3, #6
   d77b4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d77b8:	ad01      	add	r5, sp, #4
   d77ba:	f104 0308 	add.w	r3, r4, #8
   d77be:	3418      	adds	r4, #24
   d77c0:	6818      	ldr	r0, [r3, #0]
   d77c2:	6859      	ldr	r1, [r3, #4]
   d77c4:	462a      	mov	r2, r5
   d77c6:	c203      	stmia	r2!, {r0, r1}
   d77c8:	3308      	adds	r3, #8
   d77ca:	42a3      	cmp	r3, r4
   d77cc:	4615      	mov	r5, r2
   d77ce:	d1f7      	bne.n	d77c0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d77d0:	a901      	add	r1, sp, #4
   d77d2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d77d4:	ad07      	add	r5, sp, #28
   d77d6:	f7ff fe85 	bl	d74e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d77da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d77dc:	1d3c      	adds	r4, r7, #4
   d77de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d77e0:	682b      	ldr	r3, [r5, #0]
   d77e2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d77e4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d77e6:	69f6      	ldr	r6, [r6, #28]
   d77e8:	e7c8      	b.n	d777c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d77ea:	9800      	ldr	r0, [sp, #0]
   d77ec:	f7fe fafa 	bl	d5de4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d77f0:	4638      	mov	r0, r7
   d77f2:	b015      	add	sp, #84	; 0x54
   d77f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d77f8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d77f8:	4b02      	ldr	r3, [pc, #8]	; (d7804 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d77fa:	4a03      	ldr	r2, [pc, #12]	; (d7808 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d77fc:	601a      	str	r2, [r3, #0]
   d77fe:	2200      	movs	r2, #0
   d7800:	605a      	str	r2, [r3, #4]
   d7802:	4770      	bx	lr
   d7804:	2003e6c0 	.word	0x2003e6c0
   d7808:	000d9e90 	.word	0x000d9e90

000d780c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d780e:	4606      	mov	r6, r0
   d7810:	460d      	mov	r5, r1
   d7812:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7814:	2400      	movs	r4, #0
  while (size--) {
   d7816:	42bd      	cmp	r5, r7
   d7818:	d00c      	beq.n	d7834 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d781a:	6833      	ldr	r3, [r6, #0]
   d781c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7820:	689b      	ldr	r3, [r3, #8]
   d7822:	4630      	mov	r0, r6
   d7824:	4798      	blx	r3
     if (chunk>=0)
   d7826:	2800      	cmp	r0, #0
   d7828:	db01      	blt.n	d782e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d782a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d782c:	e7f3      	b.n	d7816 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d782e:	2c00      	cmp	r4, #0
   d7830:	bf08      	it	eq
   d7832:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7834:	4620      	mov	r0, r4
   d7836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7838 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7838:	6803      	ldr	r3, [r0, #0]
   d783a:	689b      	ldr	r3, [r3, #8]
   d783c:	4718      	bx	r3

000d783e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d783e:	b530      	push	{r4, r5, lr}
   d7840:	b08b      	sub	sp, #44	; 0x2c
   d7842:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7844:	2100      	movs	r1, #0
   d7846:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d784a:	2a01      	cmp	r2, #1
   d784c:	bf98      	it	ls
   d784e:	220a      	movls	r2, #10
   d7850:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7854:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7858:	fb05 3312 	mls	r3, r5, r2, r3
   d785c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7860:	2b09      	cmp	r3, #9
   d7862:	bf94      	ite	ls
   d7864:	3330      	addls	r3, #48	; 0x30
   d7866:	3337      	addhi	r3, #55	; 0x37
   d7868:	b2db      	uxtb	r3, r3
   d786a:	4621      	mov	r1, r4
   d786c:	f804 3901 	strb.w	r3, [r4], #-1
   d7870:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7872:	2d00      	cmp	r5, #0
   d7874:	d1ee      	bne.n	d7854 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7876:	f7fd fae3 	bl	d4e40 <_ZN5Print5writeEPKc>
}
   d787a:	b00b      	add	sp, #44	; 0x2c
   d787c:	bd30      	pop	{r4, r5, pc}

000d787e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d787e:	b510      	push	{r4, lr}
   d7880:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7882:	f7ff fcf1 	bl	d7268 <_ZNSt14_Function_baseD1Ev>
   d7886:	4620      	mov	r0, r4
   d7888:	bd10      	pop	{r4, pc}
	...

000d788c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d788c:	4803      	ldr	r0, [pc, #12]	; (d789c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d788e:	4a04      	ldr	r2, [pc, #16]	; (d78a0 <_GLOBAL__sub_I_RGB+0x14>)
   d7890:	4904      	ldr	r1, [pc, #16]	; (d78a4 <_GLOBAL__sub_I_RGB+0x18>)
   d7892:	2300      	movs	r3, #0
   d7894:	6083      	str	r3, [r0, #8]
   d7896:	f000 bbfb 	b.w	d8090 <__aeabi_atexit>
   d789a:	bf00      	nop
   d789c:	2003e6c8 	.word	0x2003e6c8
   d78a0:	2003e24c 	.word	0x2003e24c
   d78a4:	000d787f 	.word	0x000d787f

000d78a8 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d78a8:	2100      	movs	r1, #0
   d78aa:	f7fe baeb 	b.w	d5e84 <HAL_SPI_Acquire>

000d78ae <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d78ae:	2100      	movs	r1, #0
   d78b0:	f7fe baf0 	b.w	d5e94 <HAL_SPI_Release>

000d78b4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d78b4:	b510      	push	{r4, lr}
   d78b6:	4604      	mov	r4, r0
{
    _spi = spi;
   d78b8:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d78ba:	4608      	mov	r0, r1
   d78bc:	f7fe faca 	bl	d5e54 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d78c0:	2300      	movs	r3, #0
   d78c2:	6063      	str	r3, [r4, #4]
}
   d78c4:	4620      	mov	r0, r4
   d78c6:	bd10      	pop	{r4, pc}

000d78c8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d78c8:	b510      	push	{r4, lr}
   d78ca:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d78cc:	7800      	ldrb	r0, [r0, #0]
   d78ce:	f7ff ffeb 	bl	d78a8 <_ZN8SPIClass4lockEv.isra.0>
   d78d2:	b948      	cbnz	r0, d78e8 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d78d4:	7820      	ldrb	r0, [r4, #0]
   d78d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d78da:	f7fe fa93 	bl	d5e04 <HAL_SPI_Begin>
        unlock();
   d78de:	7820      	ldrb	r0, [r4, #0]
    }
}
   d78e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d78e4:	f7ff bfe3 	b.w	d78ae <_ZN8SPIClass6unlockEv.isra.1>
   d78e8:	bd10      	pop	{r4, pc}

000d78ea <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d78ea:	b538      	push	{r3, r4, r5, lr}
   d78ec:	4604      	mov	r4, r0
    if (!lock())
   d78ee:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d78f0:	460d      	mov	r5, r1
    if (!lock())
   d78f2:	f7ff ffd9 	bl	d78a8 <_ZN8SPIClass4lockEv.isra.0>
   d78f6:	b940      	cbnz	r0, d790a <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d78f8:	7820      	ldrb	r0, [r4, #0]
   d78fa:	4629      	mov	r1, r5
   d78fc:	f7fe fa8a 	bl	d5e14 <HAL_SPI_Set_Bit_Order>
        unlock();
   d7900:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d7906:	f7ff bfd2 	b.w	d78ae <_ZN8SPIClass6unlockEv.isra.1>
   d790a:	bd38      	pop	{r3, r4, r5, pc}

000d790c <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d790c:	b538      	push	{r3, r4, r5, lr}
   d790e:	4604      	mov	r4, r0
    if (!lock())
   d7910:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d7912:	460d      	mov	r5, r1
    if (!lock())
   d7914:	f7ff ffc8 	bl	d78a8 <_ZN8SPIClass4lockEv.isra.0>
   d7918:	b940      	cbnz	r0, d792c <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d791a:	7820      	ldrb	r0, [r4, #0]
   d791c:	4629      	mov	r1, r5
   d791e:	f7fe fa81 	bl	d5e24 <HAL_SPI_Set_Data_Mode>
        unlock();
   d7922:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d7928:	f7ff bfc1 	b.w	d78ae <_ZN8SPIClass6unlockEv.isra.1>
   d792c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7930 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7930:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d7932:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7934:	6018      	str	r0, [r3, #0]
   d7936:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d7938:	6818      	ldr	r0, [r3, #0]
   d793a:	4288      	cmp	r0, r1
   d793c:	b2e5      	uxtb	r5, r4
   d793e:	d906      	bls.n	d794e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d7940:	3401      	adds	r4, #1
   d7942:	2c08      	cmp	r4, #8
   d7944:	d002      	beq.n	d794c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d7946:	0840      	lsrs	r0, r0, #1
   d7948:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d794a:	e7f5      	b.n	d7938 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d794c:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d794e:	4b02      	ldr	r3, [pc, #8]	; (d7958 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7950:	5d5b      	ldrb	r3, [r3, r5]
   d7952:	7013      	strb	r3, [r2, #0]
   d7954:	bd30      	pop	{r4, r5, pc}
   d7956:	bf00      	nop
   d7958:	000d9ebc 	.word	0x000d9ebc

000d795c <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d795c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7960:	b088      	sub	sp, #32
    unsigned clock = 0;
   d7962:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d7964:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d7966:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d7968:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d796a:	460e      	mov	r6, r1
   d796c:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d796e:	f7ff ff9b 	bl	d78a8 <_ZN8SPIClass4lockEv.isra.0>
   d7972:	4605      	mov	r5, r0
   d7974:	bb00      	cbnz	r0, d79b8 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d7976:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d797a:	4601      	mov	r1, r0
   d797c:	2214      	movs	r2, #20
   d797e:	a803      	add	r0, sp, #12
   d7980:	f001 fe9b 	bl	d96ba <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7984:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d7986:	462a      	mov	r2, r5
   d7988:	a903      	add	r1, sp, #12
   d798a:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d798c:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d7990:	f7fe fa70 	bl	d5e74 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d7994:	ab02      	add	r3, sp, #8
   d7996:	f10d 0207 	add.w	r2, sp, #7
   d799a:	fb07 f106 	mul.w	r1, r7, r6
   d799e:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d79a0:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d79a4:	f7ff ffc4 	bl	d7930 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d79a8:	7820      	ldrb	r0, [r4, #0]
   d79aa:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d79ae:	f7fe fa41 	bl	d5e34 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d79b2:	7820      	ldrb	r0, [r4, #0]
   d79b4:	f7ff ff7b 	bl	d78ae <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d79b8:	9802      	ldr	r0, [sp, #8]
   d79ba:	b008      	add	sp, #32
   d79bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d79c0 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d79c0:	b538      	push	{r3, r4, r5, lr}
   d79c2:	4604      	mov	r4, r0
    if (!lock())
   d79c4:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d79c6:	460d      	mov	r5, r1
    if (!lock())
   d79c8:	f7ff ff6e 	bl	d78a8 <_ZN8SPIClass4lockEv.isra.0>
   d79cc:	b9c8      	cbnz	r0, d7a02 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d79ce:	6861      	ldr	r1, [r4, #4]
   d79d0:	b171      	cbz	r1, d79f0 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d79d2:	4b0c      	ldr	r3, [pc, #48]	; (d7a04 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d79d4:	5cc2      	ldrb	r2, [r0, r3]
   d79d6:	42aa      	cmp	r2, r5
   d79d8:	d002      	beq.n	d79e0 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d79da:	3001      	adds	r0, #1
   d79dc:	2808      	cmp	r0, #8
   d79de:	d1f9      	bne.n	d79d4 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d79e0:	3001      	adds	r0, #1
   d79e2:	b2c0      	uxtb	r0, r0
   d79e4:	40c1      	lsrs	r1, r0
   d79e6:	2201      	movs	r2, #1
   d79e8:	4620      	mov	r0, r4
   d79ea:	f7ff ffb7 	bl	d795c <_ZN8SPIClass13setClockSpeedEjj>
   d79ee:	e003      	b.n	d79f8 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d79f0:	4629      	mov	r1, r5
   d79f2:	7820      	ldrb	r0, [r4, #0]
   d79f4:	f7fe fa1e 	bl	d5e34 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d79f8:	7820      	ldrb	r0, [r4, #0]
    }
}
   d79fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d79fe:	f7ff bf56 	b.w	d78ae <_ZN8SPIClass6unlockEv.isra.1>
   d7a02:	bd38      	pop	{r3, r4, r5, pc}
   d7a04:	000d9ebc 	.word	0x000d9ebc

000d7a08 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7a08:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d7a0a:	7800      	ldrb	r0, [r0, #0]
   d7a0c:	f7fe fa1a 	bl	d5e44 <HAL_SPI_Send_Receive_Data>
}
   d7a10:	b2c0      	uxtb	r0, r0
   d7a12:	bd08      	pop	{r3, pc}

000d7a14 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d7a14:	7800      	ldrb	r0, [r0, #0]
   d7a16:	f7fe ba25 	b.w	d5e64 <HAL_SPI_Is_Enabled>

000d7a1a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7a1a:	b510      	push	{r4, lr}
   d7a1c:	4604      	mov	r4, r0
{
	free(buffer);
   d7a1e:	6800      	ldr	r0, [r0, #0]
   d7a20:	f7fe fb5c 	bl	d60dc <free>
}
   d7a24:	4620      	mov	r0, r4
   d7a26:	bd10      	pop	{r4, pc}

000d7a28 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7a28:	b510      	push	{r4, lr}
   d7a2a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7a2c:	6800      	ldr	r0, [r0, #0]
   d7a2e:	b108      	cbz	r0, d7a34 <_ZN6String10invalidateEv+0xc>
   d7a30:	f7fe fb54 	bl	d60dc <free>
	buffer = NULL;
   d7a34:	2300      	movs	r3, #0
   d7a36:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7a38:	60a3      	str	r3, [r4, #8]
   d7a3a:	6063      	str	r3, [r4, #4]
   d7a3c:	bd10      	pop	{r4, pc}

000d7a3e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7a3e:	b538      	push	{r3, r4, r5, lr}
   d7a40:	4604      	mov	r4, r0
   d7a42:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7a44:	6800      	ldr	r0, [r0, #0]
   d7a46:	3101      	adds	r1, #1
   d7a48:	f7fe fb50 	bl	d60ec <realloc>
	if (newbuffer) {
   d7a4c:	b110      	cbz	r0, d7a54 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7a4e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7a52:	2001      	movs	r0, #1
	}
	return 0;
}
   d7a54:	bd38      	pop	{r3, r4, r5, pc}

000d7a56 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7a56:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7a58:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7a5a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7a5c:	b113      	cbz	r3, d7a64 <_ZN6String7reserveEj+0xe>
   d7a5e:	6843      	ldr	r3, [r0, #4]
   d7a60:	428b      	cmp	r3, r1
   d7a62:	d207      	bcs.n	d7a74 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7a64:	4620      	mov	r0, r4
   d7a66:	f7ff ffea 	bl	d7a3e <_ZN6String12changeBufferEj>
   d7a6a:	b120      	cbz	r0, d7a76 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7a6c:	68a3      	ldr	r3, [r4, #8]
   d7a6e:	b90b      	cbnz	r3, d7a74 <_ZN6String7reserveEj+0x1e>
   d7a70:	6822      	ldr	r2, [r4, #0]
   d7a72:	7013      	strb	r3, [r2, #0]
   d7a74:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7a76:	bd10      	pop	{r4, pc}

000d7a78 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7a78:	b570      	push	{r4, r5, r6, lr}
   d7a7a:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7a7c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7a7e:	4604      	mov	r4, r0
   d7a80:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7a82:	f7ff ffe8 	bl	d7a56 <_ZN6String7reserveEj>
   d7a86:	b918      	cbnz	r0, d7a90 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7a88:	4620      	mov	r0, r4
   d7a8a:	f7ff ffcd 	bl	d7a28 <_ZN6String10invalidateEv>
		return *this;
   d7a8e:	e009      	b.n	d7aa4 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7a90:	462a      	mov	r2, r5
   d7a92:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7a94:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7a96:	6820      	ldr	r0, [r4, #0]
   d7a98:	f001 fde9 	bl	d966e <memcpy>
	buffer[len] = 0;
   d7a9c:	6822      	ldr	r2, [r4, #0]
   d7a9e:	68a3      	ldr	r3, [r4, #8]
   d7aa0:	2100      	movs	r1, #0
   d7aa2:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7aa4:	4620      	mov	r0, r4
   d7aa6:	bd70      	pop	{r4, r5, r6, pc}

000d7aa8 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7aa8:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7aaa:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7aac:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7aae:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7ab0:	6043      	str	r3, [r0, #4]
	len = 0;
   d7ab2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7ab4:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7ab6:	460d      	mov	r5, r1
   d7ab8:	b139      	cbz	r1, d7aca <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7aba:	4608      	mov	r0, r1
   d7abc:	f001 fe36 	bl	d972c <strlen>
   d7ac0:	4629      	mov	r1, r5
   d7ac2:	4602      	mov	r2, r0
   d7ac4:	4620      	mov	r0, r4
   d7ac6:	f7ff ffd7 	bl	d7a78 <_ZN6String4copyEPKcj>
}
   d7aca:	4620      	mov	r0, r4
   d7acc:	bd38      	pop	{r3, r4, r5, pc}

000d7ace <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7ace:	b538      	push	{r3, r4, r5, lr}
   d7ad0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7ad2:	460c      	mov	r4, r1
   d7ad4:	b141      	cbz	r1, d7ae8 <_ZN6StringaSEPKc+0x1a>
   d7ad6:	4608      	mov	r0, r1
   d7ad8:	f001 fe28 	bl	d972c <strlen>
   d7adc:	4621      	mov	r1, r4
   d7ade:	4602      	mov	r2, r0
   d7ae0:	4628      	mov	r0, r5
   d7ae2:	f7ff ffc9 	bl	d7a78 <_ZN6String4copyEPKcj>
   d7ae6:	e001      	b.n	d7aec <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d7ae8:	f7ff ff9e 	bl	d7a28 <_ZN6String10invalidateEv>

	return *this;
}
   d7aec:	4628      	mov	r0, r5
   d7aee:	bd38      	pop	{r3, r4, r5, pc}

000d7af0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7af0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7af2:	4c09      	ldr	r4, [pc, #36]	; (d7b18 <_GLOBAL__sub_I_System+0x28>)
   d7af4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7af6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7afa:	6020      	str	r0, [r4, #0]
   d7afc:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7afe:	71a0      	strb	r0, [r4, #6]
   d7b00:	8120      	strh	r0, [r4, #8]
   d7b02:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7b04:	f7fe fa66 	bl	d5fd4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7b08:	4620      	mov	r0, r4
   d7b0a:	4a04      	ldr	r2, [pc, #16]	; (d7b1c <_GLOBAL__sub_I_System+0x2c>)
   d7b0c:	4904      	ldr	r1, [pc, #16]	; (d7b20 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7b12:	f000 babd 	b.w	d8090 <__aeabi_atexit>
   d7b16:	bf00      	nop
   d7b18:	2003e6d8 	.word	0x2003e6d8
   d7b1c:	2003e24c 	.word	0x2003e24c
   d7b20:	000d4e31 	.word	0x000d4e31

000d7b24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7b24:	4b02      	ldr	r3, [pc, #8]	; (d7b30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7b26:	681a      	ldr	r2, [r3, #0]
   d7b28:	4b02      	ldr	r3, [pc, #8]	; (d7b34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7b2a:	601a      	str	r2, [r3, #0]
   d7b2c:	4770      	bx	lr
   d7b2e:	bf00      	nop
   d7b30:	2003e1e4 	.word	0x2003e1e4
   d7b34:	2003e6e4 	.word	0x2003e6e4

000d7b38 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7b38:	4770      	bx	lr

000d7b3a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7b3a:	7441      	strb	r1, [r0, #17]
   d7b3c:	4770      	bx	lr

000d7b3e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7b3e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7b40:	7c00      	ldrb	r0, [r0, #16]
   d7b42:	f7fe f9e7 	bl	d5f14 <HAL_USART_Available_Data_For_Write>
}
   d7b46:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b4a:	bd08      	pop	{r3, pc}

000d7b4c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7b4c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7b4e:	7c00      	ldrb	r0, [r0, #16]
   d7b50:	f7fe f9b8 	bl	d5ec4 <HAL_USART_Available_Data>
}
   d7b54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b58:	bd08      	pop	{r3, pc}

000d7b5a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7b5a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7b5c:	7c00      	ldrb	r0, [r0, #16]
   d7b5e:	f7fe f9c1 	bl	d5ee4 <HAL_USART_Peek_Data>
}
   d7b62:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b66:	bf28      	it	cs
   d7b68:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7b6c:	bd08      	pop	{r3, pc}

000d7b6e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7b6e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7b70:	7c00      	ldrb	r0, [r0, #16]
   d7b72:	f7fe f9af 	bl	d5ed4 <HAL_USART_Read_Data>
}
   d7b76:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b7a:	bf28      	it	cs
   d7b7c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7b80:	bd08      	pop	{r3, pc}

000d7b82 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7b82:	7c00      	ldrb	r0, [r0, #16]
   d7b84:	f7fe b9b6 	b.w	d5ef4 <HAL_USART_Flush_Data>

000d7b88 <_ZN11USARTSerialD0Ev>:
   d7b88:	b510      	push	{r4, lr}
   d7b8a:	2114      	movs	r1, #20
   d7b8c:	4604      	mov	r4, r0
   d7b8e:	f000 fa84 	bl	d809a <_ZdlPvj>
   d7b92:	4620      	mov	r0, r4
   d7b94:	bd10      	pop	{r4, pc}

000d7b96 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7b96:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7b98:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7b9a:	4604      	mov	r4, r0
   d7b9c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7b9e:	b925      	cbnz	r5, d7baa <_ZN11USARTSerial5writeEh+0x14>
   d7ba0:	7c00      	ldrb	r0, [r0, #16]
   d7ba2:	f7fe f9b7 	bl	d5f14 <HAL_USART_Available_Data_For_Write>
   d7ba6:	2800      	cmp	r0, #0
   d7ba8:	dd05      	ble.n	d7bb6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7baa:	4631      	mov	r1, r6
   d7bac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7bae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7bb2:	f7fe b97f 	b.w	d5eb4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7bb6:	4628      	mov	r0, r5
   d7bb8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7bbc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7bbc:	b510      	push	{r4, lr}
   d7bbe:	4604      	mov	r4, r0
   d7bc0:	4608      	mov	r0, r1
   d7bc2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7bc4:	2200      	movs	r2, #0
   d7bc6:	6062      	str	r2, [r4, #4]
   d7bc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7bcc:	60a2      	str	r2, [r4, #8]
   d7bce:	4a05      	ldr	r2, [pc, #20]	; (d7be4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7bd0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7bd2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7bd4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7bd6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7bd8:	461a      	mov	r2, r3
   d7bda:	f7fe f963 	bl	d5ea4 <HAL_USART_Init>
}
   d7bde:	4620      	mov	r0, r4
   d7be0:	bd10      	pop	{r4, pc}
   d7be2:	bf00      	nop
   d7be4:	000d9ef8 	.word	0x000d9ef8

000d7be8 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7be8:	2300      	movs	r3, #0
   d7bea:	7c00      	ldrb	r0, [r0, #16]
   d7bec:	f7fe b99a 	b.w	d5f24 <HAL_USART_BeginConfig>

000d7bf0 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7bf0:	2200      	movs	r2, #0
   d7bf2:	f7ff bff9 	b.w	d7be8 <_ZN11USARTSerial5beginEmm>

000d7bf6 <_ZN11USARTSerial5writeEt>:
  return 0;
}

size_t USARTSerial::write(uint16_t c)
{
  return HAL_USART_Write_NineBitData(_serial, c);
   d7bf6:	7c00      	ldrb	r0, [r0, #16]
   d7bf8:	f7fe b99c 	b.w	d5f34 <HAL_USART_Write_NineBitData>

000d7bfc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7bfc:	7c00      	ldrb	r0, [r0, #16]
   d7bfe:	f7fe b981 	b.w	d5f04 <HAL_USART_Is_Enabled>
	...

000d7c04 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d7c06:	4c19      	ldr	r4, [pc, #100]	; (d7c6c <_Z22__fetch_global_Serial1v+0x68>)
   d7c08:	6825      	ldr	r5, [r4, #0]
   d7c0a:	b94d      	cbnz	r5, d7c20 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d7c0c:	2084      	movs	r0, #132	; 0x84
   d7c0e:	f7fc fa44 	bl	d409a <_Znwj>
   d7c12:	4606      	mov	r6, r0
   d7c14:	b118      	cbz	r0, d7c1e <_Z22__fetch_global_Serial1v+0x1a>
   d7c16:	2284      	movs	r2, #132	; 0x84
   d7c18:	4629      	mov	r1, r5
   d7c1a:	f001 fd4e 	bl	d96ba <memset>
   d7c1e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d7c20:	4d13      	ldr	r5, [pc, #76]	; (d7c70 <_Z22__fetch_global_Serial1v+0x6c>)
   d7c22:	682e      	ldr	r6, [r5, #0]
   d7c24:	b94e      	cbnz	r6, d7c3a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d7c26:	2084      	movs	r0, #132	; 0x84
   d7c28:	f7fc fa37 	bl	d409a <_Znwj>
   d7c2c:	4607      	mov	r7, r0
   d7c2e:	b118      	cbz	r0, d7c38 <_Z22__fetch_global_Serial1v+0x34>
   d7c30:	2284      	movs	r2, #132	; 0x84
   d7c32:	4631      	mov	r1, r6
   d7c34:	f001 fd41 	bl	d96ba <memset>
   d7c38:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d7c3a:	4f0e      	ldr	r7, [pc, #56]	; (d7c74 <_Z22__fetch_global_Serial1v+0x70>)
   d7c3c:	6839      	ldr	r1, [r7, #0]
   d7c3e:	f011 0601 	ands.w	r6, r1, #1
   d7c42:	d111      	bne.n	d7c68 <_Z22__fetch_global_Serial1v+0x64>
   d7c44:	4638      	mov	r0, r7
   d7c46:	f7fc fa2e 	bl	d40a6 <__cxa_guard_acquire>
   d7c4a:	b168      	cbz	r0, d7c68 <_Z22__fetch_global_Serial1v+0x64>
   d7c4c:	6822      	ldr	r2, [r4, #0]
   d7c4e:	682b      	ldr	r3, [r5, #0]
   d7c50:	4809      	ldr	r0, [pc, #36]	; (d7c78 <_Z22__fetch_global_Serial1v+0x74>)
   d7c52:	4631      	mov	r1, r6
   d7c54:	f7ff ffb2 	bl	d7bbc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7c58:	4638      	mov	r0, r7
   d7c5a:	f7fc fa29 	bl	d40b0 <__cxa_guard_release>
   d7c5e:	4a07      	ldr	r2, [pc, #28]	; (d7c7c <_Z22__fetch_global_Serial1v+0x78>)
   d7c60:	4907      	ldr	r1, [pc, #28]	; (d7c80 <_Z22__fetch_global_Serial1v+0x7c>)
   d7c62:	4805      	ldr	r0, [pc, #20]	; (d7c78 <_Z22__fetch_global_Serial1v+0x74>)
   d7c64:	f000 fa14 	bl	d8090 <__aeabi_atexit>
#endif
	return serial1;
}
   d7c68:	4803      	ldr	r0, [pc, #12]	; (d7c78 <_Z22__fetch_global_Serial1v+0x74>)
   d7c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7c6c:	2003e704 	.word	0x2003e704
   d7c70:	2003e6fc 	.word	0x2003e6fc
   d7c74:	2003e700 	.word	0x2003e700
   d7c78:	2003e6e8 	.word	0x2003e6e8
   d7c7c:	2003e24c 	.word	0x2003e24c
   d7c80:	000d7b39 	.word	0x000d7b39

000d7c84 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7c84:	7441      	strb	r1, [r0, #17]
   d7c86:	4770      	bx	lr

000d7c88 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7c88:	4770      	bx	lr

000d7c8a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7c8a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7c8c:	2100      	movs	r1, #0
   d7c8e:	7c00      	ldrb	r0, [r0, #16]
   d7c90:	f7fe f978 	bl	d5f84 <HAL_USB_USART_Receive_Data>
}
   d7c94:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7c98:	bf28      	it	cs
   d7c9a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7c9e:	bd08      	pop	{r3, pc}

000d7ca0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7ca0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7ca2:	2101      	movs	r1, #1
   d7ca4:	7c00      	ldrb	r0, [r0, #16]
   d7ca6:	f7fe f96d 	bl	d5f84 <HAL_USB_USART_Receive_Data>
}
   d7caa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7cae:	bf28      	it	cs
   d7cb0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7cb4:	bd08      	pop	{r3, pc}

000d7cb6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7cb6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7cb8:	7c00      	ldrb	r0, [r0, #16]
   d7cba:	f7fe f95b 	bl	d5f74 <HAL_USB_USART_Available_Data_For_Write>
}
   d7cbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7cc2:	bd08      	pop	{r3, pc}

000d7cc4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7cc4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7cc6:	7c00      	ldrb	r0, [r0, #16]
   d7cc8:	f7fe f94c 	bl	d5f64 <HAL_USB_USART_Available_Data>
}
   d7ccc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7cd0:	bd08      	pop	{r3, pc}

000d7cd2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7cd2:	7c00      	ldrb	r0, [r0, #16]
   d7cd4:	f7fe b966 	b.w	d5fa4 <HAL_USB_USART_Flush_Data>

000d7cd8 <_ZN9USBSerialD0Ev>:
   d7cd8:	b510      	push	{r4, lr}
   d7cda:	2114      	movs	r1, #20
   d7cdc:	4604      	mov	r4, r0
   d7cde:	f000 f9dc 	bl	d809a <_ZdlPvj>
   d7ce2:	4620      	mov	r0, r4
   d7ce4:	bd10      	pop	{r4, pc}

000d7ce6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7ce6:	b538      	push	{r3, r4, r5, lr}
   d7ce8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7cea:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7cec:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7cee:	f7fe f941 	bl	d5f74 <HAL_USB_USART_Available_Data_For_Write>
   d7cf2:	2800      	cmp	r0, #0
   d7cf4:	dc01      	bgt.n	d7cfa <_ZN9USBSerial5writeEh+0x14>
   d7cf6:	7c60      	ldrb	r0, [r4, #17]
   d7cf8:	b128      	cbz	r0, d7d06 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7cfa:	4629      	mov	r1, r5
   d7cfc:	7c20      	ldrb	r0, [r4, #16]
   d7cfe:	f7fe f949 	bl	d5f94 <HAL_USB_USART_Send_Data>
   d7d02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7d06:	bd38      	pop	{r3, r4, r5, pc}

000d7d08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7d08:	b510      	push	{r4, lr}
   d7d0a:	4604      	mov	r4, r0
   d7d0c:	2300      	movs	r3, #0
   d7d0e:	6063      	str	r3, [r4, #4]
   d7d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7d14:	60a3      	str	r3, [r4, #8]
   d7d16:	4b05      	ldr	r3, [pc, #20]	; (d7d2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7d18:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7d1a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7d1c:	4608      	mov	r0, r1
{
  _serial = serial;
   d7d1e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7d20:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7d22:	4611      	mov	r1, r2
   d7d24:	f7fe f90e 	bl	d5f44 <HAL_USB_USART_Init>
}
   d7d28:	4620      	mov	r0, r4
   d7d2a:	bd10      	pop	{r4, pc}
   d7d2c:	000d9f28 	.word	0x000d9f28

000d7d30 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7d30:	2200      	movs	r2, #0
   d7d32:	7c00      	ldrb	r0, [r0, #16]
   d7d34:	f7fe b90e 	b.w	d5f54 <HAL_USB_USART_Begin>

000d7d38 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7d38:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7d3a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7d3c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7d3e:	2100      	movs	r1, #0
   d7d40:	f001 fcbb 	bl	d96ba <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7d44:	4620      	mov	r0, r4
   d7d46:	bd10      	pop	{r4, pc}

000d7d48 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7d48:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7d4a:	4d0e      	ldr	r5, [pc, #56]	; (d7d84 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7d4c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7d4e:	a801      	add	r0, sp, #4
   d7d50:	f7ff fff2 	bl	d7d38 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7d54:	6829      	ldr	r1, [r5, #0]
   d7d56:	f011 0401 	ands.w	r4, r1, #1
   d7d5a:	d110      	bne.n	d7d7e <_Z16_fetch_usbserialv+0x36>
   d7d5c:	4628      	mov	r0, r5
   d7d5e:	f7fc f9a2 	bl	d40a6 <__cxa_guard_acquire>
   d7d62:	b160      	cbz	r0, d7d7e <_Z16_fetch_usbserialv+0x36>
   d7d64:	aa01      	add	r2, sp, #4
   d7d66:	4621      	mov	r1, r4
   d7d68:	4807      	ldr	r0, [pc, #28]	; (d7d88 <_Z16_fetch_usbserialv+0x40>)
   d7d6a:	f7ff ffcd 	bl	d7d08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7d6e:	4628      	mov	r0, r5
   d7d70:	f7fc f99e 	bl	d40b0 <__cxa_guard_release>
   d7d74:	4a05      	ldr	r2, [pc, #20]	; (d7d8c <_Z16_fetch_usbserialv+0x44>)
   d7d76:	4906      	ldr	r1, [pc, #24]	; (d7d90 <_Z16_fetch_usbserialv+0x48>)
   d7d78:	4803      	ldr	r0, [pc, #12]	; (d7d88 <_Z16_fetch_usbserialv+0x40>)
   d7d7a:	f000 f989 	bl	d8090 <__aeabi_atexit>
	return _usbserial;
}
   d7d7e:	4802      	ldr	r0, [pc, #8]	; (d7d88 <_Z16_fetch_usbserialv+0x40>)
   d7d80:	b007      	add	sp, #28
   d7d82:	bd30      	pop	{r4, r5, pc}
   d7d84:	2003e708 	.word	0x2003e708
   d7d88:	2003e70c 	.word	0x2003e70c
   d7d8c:	2003e24c 	.word	0x2003e24c
   d7d90:	000d7c89 	.word	0x000d7c89

000d7d94 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7d94:	2200      	movs	r2, #0
   d7d96:	4611      	mov	r1, r2
   d7d98:	6840      	ldr	r0, [r0, #4]
   d7d9a:	f7fe b95f 	b.w	d605c <network_ready>

000d7d9e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7d9e:	2200      	movs	r2, #0
   d7da0:	4611      	mov	r1, r2
   d7da2:	6840      	ldr	r0, [r0, #4]
   d7da4:	f7fe b97a 	b.w	d609c <network_listening>

000d7da8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7da8:	2200      	movs	r2, #0
   d7daa:	4611      	mov	r1, r2
   d7dac:	6840      	ldr	r0, [r0, #4]
   d7dae:	f7fe b985 	b.w	d60bc <network_get_listen_timeout>

000d7db2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7db2:	2200      	movs	r2, #0
   d7db4:	6840      	ldr	r0, [r0, #4]
   d7db6:	f7fe b979 	b.w	d60ac <network_set_listen_timeout>

000d7dba <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7dba:	2200      	movs	r2, #0
   d7dbc:	f081 0101 	eor.w	r1, r1, #1
   d7dc0:	6840      	ldr	r0, [r0, #4]
   d7dc2:	f7fe b963 	b.w	d608c <network_listen>

000d7dc6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7dc6:	2300      	movs	r3, #0
   d7dc8:	461a      	mov	r2, r3
   d7dca:	4619      	mov	r1, r3
   d7dcc:	6840      	ldr	r0, [r0, #4]
   d7dce:	f7fe b955 	b.w	d607c <network_off>

000d7dd2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7dd2:	2300      	movs	r3, #0
   d7dd4:	461a      	mov	r2, r3
   d7dd6:	4619      	mov	r1, r3
   d7dd8:	6840      	ldr	r0, [r0, #4]
   d7dda:	f7fe b947 	b.w	d606c <network_on>

000d7dde <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7dde:	2200      	movs	r2, #0
   d7de0:	4611      	mov	r1, r2
   d7de2:	6840      	ldr	r0, [r0, #4]
   d7de4:	f7fe b92a 	b.w	d603c <network_connecting>

000d7de8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7de8:	2200      	movs	r2, #0
   d7dea:	2102      	movs	r1, #2
   d7dec:	6840      	ldr	r0, [r0, #4]
   d7dee:	f7fe b92d 	b.w	d604c <network_disconnect>

000d7df2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7df2:	2300      	movs	r3, #0
   d7df4:	461a      	mov	r2, r3
   d7df6:	6840      	ldr	r0, [r0, #4]
   d7df8:	f7fe b918 	b.w	d602c <network_connect>

000d7dfc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7dfc:	4b02      	ldr	r3, [pc, #8]	; (d7e08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7dfe:	2204      	movs	r2, #4
   d7e00:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7e02:	4a02      	ldr	r2, [pc, #8]	; (d7e0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7e04:	601a      	str	r2, [r3, #0]
   d7e06:	4770      	bx	lr
   d7e08:	2003e720 	.word	0x2003e720
   d7e0c:	000d9f58 	.word	0x000d9f58

000d7e10 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7e10:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7e12:	4b0c      	ldr	r3, [pc, #48]	; (d7e44 <serialEventRun+0x34>)
   d7e14:	b133      	cbz	r3, d7e24 <serialEventRun+0x14>
   d7e16:	f7ff ff97 	bl	d7d48 <_Z16_fetch_usbserialv>
   d7e1a:	6803      	ldr	r3, [r0, #0]
   d7e1c:	691b      	ldr	r3, [r3, #16]
   d7e1e:	4798      	blx	r3
   d7e20:	2800      	cmp	r0, #0
   d7e22:	dc09      	bgt.n	d7e38 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7e24:	4b08      	ldr	r3, [pc, #32]	; (d7e48 <serialEventRun+0x38>)
   d7e26:	b163      	cbz	r3, d7e42 <serialEventRun+0x32>
   d7e28:	f7ff feec 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d7e2c:	6803      	ldr	r3, [r0, #0]
   d7e2e:	691b      	ldr	r3, [r3, #16]
   d7e30:	4798      	blx	r3
   d7e32:	2800      	cmp	r0, #0
   d7e34:	dc03      	bgt.n	d7e3e <serialEventRun+0x2e>
   d7e36:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7e38:	f3af 8000 	nop.w
   d7e3c:	e7f2      	b.n	d7e24 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7e3e:	f3af 8000 	nop.w
   d7e42:	bd08      	pop	{r3, pc}
	...

000d7e4c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7e4c:	b508      	push	{r3, lr}
	serialEventRun();
   d7e4e:	f7ff ffdf 	bl	d7e10 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7e52:	f7fd ff1f 	bl	d5c94 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7e56:	4b01      	ldr	r3, [pc, #4]	; (d7e5c <_post_loop+0x10>)
   d7e58:	6018      	str	r0, [r3, #0]
   d7e5a:	bd08      	pop	{r3, pc}
   d7e5c:	2003e730 	.word	0x2003e730

000d7e60 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7e60:	4802      	ldr	r0, [pc, #8]	; (d7e6c <_Z33system_initialize_user_backup_ramv+0xc>)
   d7e62:	4a03      	ldr	r2, [pc, #12]	; (d7e70 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7e64:	4903      	ldr	r1, [pc, #12]	; (d7e74 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7e66:	1a12      	subs	r2, r2, r0
   d7e68:	f001 bc01 	b.w	d966e <memcpy>
   d7e6c:	2003f400 	.word	0x2003f400
   d7e70:	2003f404 	.word	0x2003f404
   d7e74:	000da058 	.word	0x000da058

000d7e78 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7e78:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7e7a:	2300      	movs	r3, #0
   d7e7c:	9300      	str	r3, [sp, #0]
   d7e7e:	461a      	mov	r2, r3
   d7e80:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7e84:	f7fe f8c0 	bl	d6008 <system_ctrl_set_result>
}
   d7e88:	b003      	add	sp, #12
   d7e8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7e90 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7e90:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7e92:	8843      	ldrh	r3, [r0, #2]
   d7e94:	2b0a      	cmp	r3, #10
   d7e96:	d008      	beq.n	d7eaa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7e98:	2b50      	cmp	r3, #80	; 0x50
   d7e9a:	d109      	bne.n	d7eb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7e9c:	4b09      	ldr	r3, [pc, #36]	; (d7ec4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7e9e:	681b      	ldr	r3, [r3, #0]
   d7ea0:	b13b      	cbz	r3, d7eb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7ea2:	b003      	add	sp, #12
   d7ea4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7ea8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7eaa:	f7ff ffe5 	bl	d7e78 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7eae:	e006      	b.n	d7ebe <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7eb0:	2300      	movs	r3, #0
   d7eb2:	9300      	str	r3, [sp, #0]
   d7eb4:	461a      	mov	r2, r3
   d7eb6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7eba:	f7fe f8a5 	bl	d6008 <system_ctrl_set_result>
        break;
    }
}
   d7ebe:	b003      	add	sp, #12
   d7ec0:	f85d fb04 	ldr.w	pc, [sp], #4
   d7ec4:	2003e728 	.word	0x2003e728

000d7ec8 <module_user_init_hook>:

void module_user_init_hook()
{
   d7ec8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7eca:	4c10      	ldr	r4, [pc, #64]	; (d7f0c <module_user_init_hook+0x44>)
   d7ecc:	4d10      	ldr	r5, [pc, #64]	; (d7f10 <module_user_init_hook+0x48>)
   d7ece:	6823      	ldr	r3, [r4, #0]
   d7ed0:	42ab      	cmp	r3, r5
   d7ed2:	4b10      	ldr	r3, [pc, #64]	; (d7f14 <module_user_init_hook+0x4c>)
   d7ed4:	bf0c      	ite	eq
   d7ed6:	2201      	moveq	r2, #1
   d7ed8:	2200      	movne	r2, #0
   d7eda:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7edc:	d002      	beq.n	d7ee4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7ede:	f7ff ffbf 	bl	d7e60 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7ee2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7ee4:	f7fd febe 	bl	d5c64 <HAL_RNG_GetRandomNumber>
   d7ee8:	4604      	mov	r4, r0
    srand(seed);
   d7eea:	f001 fbef 	bl	d96cc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7eee:	4b0a      	ldr	r3, [pc, #40]	; (d7f18 <module_user_init_hook+0x50>)
   d7ef0:	b113      	cbz	r3, d7ef8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7ef2:	4620      	mov	r0, r4
   d7ef4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7ef8:	2100      	movs	r1, #0
   d7efa:	4807      	ldr	r0, [pc, #28]	; (d7f18 <module_user_init_hook+0x50>)
   d7efc:	f7fe f88e 	bl	d601c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7f00:	2100      	movs	r1, #0
   d7f02:	4806      	ldr	r0, [pc, #24]	; (d7f1c <module_user_init_hook+0x54>)
}
   d7f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7f08:	f7fe b874 	b.w	d5ff4 <system_ctrl_set_app_request_handler>
   d7f0c:	2003f400 	.word	0x2003f400
   d7f10:	9a271c1e 	.word	0x9a271c1e
   d7f14:	2003e72c 	.word	0x2003e72c
   d7f18:	00000000 	.word	0x00000000
   d7f1c:	000d7e91 	.word	0x000d7e91

000d7f20 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7f20:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7f22:	4e18      	ldr	r6, [pc, #96]	; (d7f84 <pinAvailable+0x64>)
   d7f24:	6831      	ldr	r1, [r6, #0]
   d7f26:	f011 0501 	ands.w	r5, r1, #1
   d7f2a:	4604      	mov	r4, r0
   d7f2c:	d10a      	bne.n	d7f44 <pinAvailable+0x24>
   d7f2e:	4630      	mov	r0, r6
   d7f30:	f7fc f8b9 	bl	d40a6 <__cxa_guard_acquire>
   d7f34:	b130      	cbz	r0, d7f44 <pinAvailable+0x24>
   d7f36:	4629      	mov	r1, r5
   d7f38:	4813      	ldr	r0, [pc, #76]	; (d7f88 <pinAvailable+0x68>)
   d7f3a:	f7ff fcbb 	bl	d78b4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7f3e:	4630      	mov	r0, r6
   d7f40:	f7fc f8b6 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d7f44:	4810      	ldr	r0, [pc, #64]	; (d7f88 <pinAvailable+0x68>)
   d7f46:	f7ff fd65 	bl	d7a14 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7f4a:	b128      	cbz	r0, d7f58 <pinAvailable+0x38>
   d7f4c:	f1a4 030b 	sub.w	r3, r4, #11
   d7f50:	2b02      	cmp	r3, #2
   d7f52:	d801      	bhi.n	d7f58 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d7f54:	2000      	movs	r0, #0
   d7f56:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7f58:	f000 f874 	bl	d8044 <_Z19__fetch_global_Wirev>
   d7f5c:	f7ff fa4c 	bl	d73f8 <_ZN7TwoWire9isEnabledEv>
   d7f60:	b108      	cbz	r0, d7f66 <pinAvailable+0x46>
   d7f62:	2c01      	cmp	r4, #1
   d7f64:	d9f6      	bls.n	d7f54 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7f66:	f7ff fe4d 	bl	d7c04 <_Z22__fetch_global_Serial1v>
   d7f6a:	f7ff fe47 	bl	d7bfc <_ZN11USARTSerial9isEnabledEv>
   d7f6e:	b118      	cbz	r0, d7f78 <pinAvailable+0x58>
   d7f70:	f1a4 0309 	sub.w	r3, r4, #9
   d7f74:	2b01      	cmp	r3, #1
   d7f76:	d9ed      	bls.n	d7f54 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7f78:	2c23      	cmp	r4, #35	; 0x23
   d7f7a:	bf8c      	ite	hi
   d7f7c:	2000      	movhi	r0, #0
   d7f7e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7f80:	bd70      	pop	{r4, r5, r6, pc}
   d7f82:	bf00      	nop
   d7f84:	2003e250 	.word	0x2003e250
   d7f88:	2003e254 	.word	0x2003e254

000d7f8c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7f8c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7f8e:	b538      	push	{r3, r4, r5, lr}
   d7f90:	4604      	mov	r4, r0
   d7f92:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7f94:	d80a      	bhi.n	d7fac <pinMode+0x20>
   d7f96:	29ff      	cmp	r1, #255	; 0xff
   d7f98:	d008      	beq.n	d7fac <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7f9a:	f7ff ffc1 	bl	d7f20 <pinAvailable>
   d7f9e:	b128      	cbz	r0, d7fac <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7fa0:	4629      	mov	r1, r5
   d7fa2:	4620      	mov	r0, r4
}
   d7fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7fa8:	f7fd be8c 	b.w	d5cc4 <HAL_Pin_Mode>
   d7fac:	bd38      	pop	{r3, r4, r5, pc}

000d7fae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7fae:	b538      	push	{r3, r4, r5, lr}
   d7fb0:	4604      	mov	r4, r0
   d7fb2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7fb4:	f7fd fe8e 	bl	d5cd4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7fb8:	28ff      	cmp	r0, #255	; 0xff
   d7fba:	d010      	beq.n	d7fde <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7fbc:	2806      	cmp	r0, #6
   d7fbe:	d804      	bhi.n	d7fca <digitalWrite+0x1c>
   d7fc0:	234d      	movs	r3, #77	; 0x4d
   d7fc2:	fa23 f000 	lsr.w	r0, r3, r0
   d7fc6:	07c3      	lsls	r3, r0, #31
   d7fc8:	d409      	bmi.n	d7fde <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7fca:	4620      	mov	r0, r4
   d7fcc:	f7ff ffa8 	bl	d7f20 <pinAvailable>
   d7fd0:	b128      	cbz	r0, d7fde <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7fd2:	4629      	mov	r1, r5
   d7fd4:	4620      	mov	r0, r4
}
   d7fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7fda:	f7fd be83 	b.w	d5ce4 <HAL_GPIO_Write>
   d7fde:	bd38      	pop	{r3, r4, r5, pc}

000d7fe0 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7fe0:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7fe2:	b510      	push	{r4, lr}
   d7fe4:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7fe6:	bf9c      	itt	ls
   d7fe8:	340e      	addls	r4, #14
   d7fea:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7fec:	4620      	mov	r0, r4
   d7fee:	f7ff ff97 	bl	d7f20 <pinAvailable>
   d7ff2:	b150      	cbz	r0, d800a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7ff4:	2103      	movs	r1, #3
   d7ff6:	4620      	mov	r0, r4
   d7ff8:	f7fd fe5c 	bl	d5cb4 <HAL_Validate_Pin_Function>
   d7ffc:	2803      	cmp	r0, #3
   d7ffe:	d104      	bne.n	d800a <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8000:	4620      	mov	r0, r4
}
   d8002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8006:	f7fd be85 	b.w	d5d14 <HAL_ADC_Read>
}
   d800a:	2000      	movs	r0, #0
   d800c:	bd10      	pop	{r4, pc}
	...

000d8010 <_Z17acquireWireBufferv>:
   d8010:	b570      	push	{r4, r5, r6, lr}
   d8012:	4604      	mov	r4, r0
   d8014:	2514      	movs	r5, #20
   d8016:	462a      	mov	r2, r5
   d8018:	4e09      	ldr	r6, [pc, #36]	; (d8040 <_Z17acquireWireBufferv+0x30>)
   d801a:	2100      	movs	r1, #0
   d801c:	f001 fb4d 	bl	d96ba <memset>
   d8020:	8025      	strh	r5, [r4, #0]
   d8022:	2520      	movs	r5, #32
   d8024:	4631      	mov	r1, r6
   d8026:	60a5      	str	r5, [r4, #8]
   d8028:	6125      	str	r5, [r4, #16]
   d802a:	4628      	mov	r0, r5
   d802c:	f000 f84f 	bl	d80ce <_ZnajRKSt9nothrow_t>
   d8030:	4631      	mov	r1, r6
   d8032:	6060      	str	r0, [r4, #4]
   d8034:	4628      	mov	r0, r5
   d8036:	f000 f84a 	bl	d80ce <_ZnajRKSt9nothrow_t>
   d803a:	60e0      	str	r0, [r4, #12]
   d803c:	4620      	mov	r0, r4
   d803e:	bd70      	pop	{r4, r5, r6, pc}
   d8040:	000d9f84 	.word	0x000d9f84

000d8044 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8044:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8046:	4d0e      	ldr	r5, [pc, #56]	; (d8080 <_Z19__fetch_global_Wirev+0x3c>)
   d8048:	6829      	ldr	r1, [r5, #0]
   d804a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d804e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8050:	d113      	bne.n	d807a <_Z19__fetch_global_Wirev+0x36>
   d8052:	4628      	mov	r0, r5
   d8054:	f7fc f827 	bl	d40a6 <__cxa_guard_acquire>
   d8058:	b178      	cbz	r0, d807a <_Z19__fetch_global_Wirev+0x36>
   d805a:	a801      	add	r0, sp, #4
   d805c:	f7ff ffd8 	bl	d8010 <_Z17acquireWireBufferv>
   d8060:	aa01      	add	r2, sp, #4
   d8062:	4621      	mov	r1, r4
   d8064:	4807      	ldr	r0, [pc, #28]	; (d8084 <_Z19__fetch_global_Wirev+0x40>)
   d8066:	f7ff f973 	bl	d7350 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d806a:	4628      	mov	r0, r5
   d806c:	f7fc f820 	bl	d40b0 <__cxa_guard_release>
   d8070:	4a05      	ldr	r2, [pc, #20]	; (d8088 <_Z19__fetch_global_Wirev+0x44>)
   d8072:	4906      	ldr	r1, [pc, #24]	; (d808c <_Z19__fetch_global_Wirev+0x48>)
   d8074:	4803      	ldr	r0, [pc, #12]	; (d8084 <_Z19__fetch_global_Wirev+0x40>)
   d8076:	f000 f80b 	bl	d8090 <__aeabi_atexit>
	return wire;
}
   d807a:	4802      	ldr	r0, [pc, #8]	; (d8084 <_Z19__fetch_global_Wirev+0x40>)
   d807c:	b007      	add	sp, #28
   d807e:	bd30      	pop	{r4, r5, pc}
   d8080:	2003e734 	.word	0x2003e734
   d8084:	2003e738 	.word	0x2003e738
   d8088:	2003e24c 	.word	0x2003e24c
   d808c:	000d72f9 	.word	0x000d72f9

000d8090 <__aeabi_atexit>:
   d8090:	460b      	mov	r3, r1
   d8092:	4601      	mov	r1, r0
   d8094:	4618      	mov	r0, r3
   d8096:	f001 bacd 	b.w	d9634 <__cxa_atexit>

000d809a <_ZdlPvj>:
   d809a:	f7fc b800 	b.w	d409e <_ZdlPv>
	...

000d80a0 <_ZSt15get_new_handlerv>:
   d80a0:	4b02      	ldr	r3, [pc, #8]	; (d80ac <_ZSt15get_new_handlerv+0xc>)
   d80a2:	6818      	ldr	r0, [r3, #0]
   d80a4:	f3bf 8f5f 	dmb	sy
   d80a8:	4770      	bx	lr
   d80aa:	bf00      	nop
   d80ac:	2003e74c 	.word	0x2003e74c

000d80b0 <_ZnwjRKSt9nothrow_t>:
   d80b0:	b510      	push	{r4, lr}
   d80b2:	2800      	cmp	r0, #0
   d80b4:	bf14      	ite	ne
   d80b6:	4604      	movne	r4, r0
   d80b8:	2401      	moveq	r4, #1
   d80ba:	4620      	mov	r0, r4
   d80bc:	f7fe f806 	bl	d60cc <malloc>
   d80c0:	b920      	cbnz	r0, d80cc <_ZnwjRKSt9nothrow_t+0x1c>
   d80c2:	f7ff ffed 	bl	d80a0 <_ZSt15get_new_handlerv>
   d80c6:	b108      	cbz	r0, d80cc <_ZnwjRKSt9nothrow_t+0x1c>
   d80c8:	4780      	blx	r0
   d80ca:	e7f6      	b.n	d80ba <_ZnwjRKSt9nothrow_t+0xa>
   d80cc:	bd10      	pop	{r4, pc}

000d80ce <_ZnajRKSt9nothrow_t>:
   d80ce:	f7ff bfef 	b.w	d80b0 <_ZnwjRKSt9nothrow_t>
	...

000d80d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d80d4:	4b24      	ldr	r3, [pc, #144]	; (d8168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d80d6:	681a      	ldr	r2, [r3, #0]
   d80d8:	07d0      	lsls	r0, r2, #31
   d80da:	bf5c      	itt	pl
   d80dc:	2201      	movpl	r2, #1
   d80de:	601a      	strpl	r2, [r3, #0]
   d80e0:	4b22      	ldr	r3, [pc, #136]	; (d816c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d80e2:	681a      	ldr	r2, [r3, #0]
   d80e4:	07d1      	lsls	r1, r2, #31
   d80e6:	bf5c      	itt	pl
   d80e8:	2201      	movpl	r2, #1
   d80ea:	601a      	strpl	r2, [r3, #0]
   d80ec:	4b20      	ldr	r3, [pc, #128]	; (d8170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d80ee:	681a      	ldr	r2, [r3, #0]
   d80f0:	07d2      	lsls	r2, r2, #31
   d80f2:	bf5c      	itt	pl
   d80f4:	2201      	movpl	r2, #1
   d80f6:	601a      	strpl	r2, [r3, #0]
   d80f8:	4b1e      	ldr	r3, [pc, #120]	; (d8174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d80fa:	681a      	ldr	r2, [r3, #0]
   d80fc:	07d0      	lsls	r0, r2, #31
   d80fe:	bf5c      	itt	pl
   d8100:	2201      	movpl	r2, #1
   d8102:	601a      	strpl	r2, [r3, #0]
   d8104:	4b1c      	ldr	r3, [pc, #112]	; (d8178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8106:	681a      	ldr	r2, [r3, #0]
   d8108:	07d1      	lsls	r1, r2, #31
   d810a:	bf5c      	itt	pl
   d810c:	2201      	movpl	r2, #1
   d810e:	601a      	strpl	r2, [r3, #0]
   d8110:	4b1a      	ldr	r3, [pc, #104]	; (d817c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8112:	681a      	ldr	r2, [r3, #0]
   d8114:	07d2      	lsls	r2, r2, #31
   d8116:	bf5c      	itt	pl
   d8118:	2201      	movpl	r2, #1
   d811a:	601a      	strpl	r2, [r3, #0]
   d811c:	4b18      	ldr	r3, [pc, #96]	; (d8180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d811e:	681a      	ldr	r2, [r3, #0]
   d8120:	07d0      	lsls	r0, r2, #31
   d8122:	bf5c      	itt	pl
   d8124:	2201      	movpl	r2, #1
   d8126:	601a      	strpl	r2, [r3, #0]
   d8128:	4b16      	ldr	r3, [pc, #88]	; (d8184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d812a:	681a      	ldr	r2, [r3, #0]
   d812c:	07d1      	lsls	r1, r2, #31
   d812e:	bf5c      	itt	pl
   d8130:	2201      	movpl	r2, #1
   d8132:	601a      	strpl	r2, [r3, #0]
   d8134:	4b14      	ldr	r3, [pc, #80]	; (d8188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8136:	681a      	ldr	r2, [r3, #0]
   d8138:	07d2      	lsls	r2, r2, #31
   d813a:	bf5c      	itt	pl
   d813c:	2201      	movpl	r2, #1
   d813e:	601a      	strpl	r2, [r3, #0]
   d8140:	4b12      	ldr	r3, [pc, #72]	; (d818c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8142:	681a      	ldr	r2, [r3, #0]
   d8144:	07d0      	lsls	r0, r2, #31
   d8146:	bf5c      	itt	pl
   d8148:	2201      	movpl	r2, #1
   d814a:	601a      	strpl	r2, [r3, #0]
   d814c:	4b10      	ldr	r3, [pc, #64]	; (d8190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d814e:	681a      	ldr	r2, [r3, #0]
   d8150:	07d1      	lsls	r1, r2, #31
   d8152:	bf5c      	itt	pl
   d8154:	2201      	movpl	r2, #1
   d8156:	601a      	strpl	r2, [r3, #0]
   d8158:	4b0e      	ldr	r3, [pc, #56]	; (d8194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d815a:	681a      	ldr	r2, [r3, #0]
   d815c:	07d2      	lsls	r2, r2, #31
   d815e:	bf5c      	itt	pl
   d8160:	2201      	movpl	r2, #1
   d8162:	601a      	strpl	r2, [r3, #0]
   d8164:	4770      	bx	lr
   d8166:	bf00      	nop
   d8168:	2003e77c 	.word	0x2003e77c
   d816c:	2003e778 	.word	0x2003e778
   d8170:	2003e774 	.word	0x2003e774
   d8174:	2003e770 	.word	0x2003e770
   d8178:	2003e76c 	.word	0x2003e76c
   d817c:	2003e768 	.word	0x2003e768
   d8180:	2003e764 	.word	0x2003e764
   d8184:	2003e760 	.word	0x2003e760
   d8188:	2003e75c 	.word	0x2003e75c
   d818c:	2003e758 	.word	0x2003e758
   d8190:	2003e754 	.word	0x2003e754
   d8194:	2003e750 	.word	0x2003e750

000d8198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8198:	4b18      	ldr	r3, [pc, #96]	; (d81fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d819a:	681a      	ldr	r2, [r3, #0]
   d819c:	07d1      	lsls	r1, r2, #31
   d819e:	bf5c      	itt	pl
   d81a0:	2201      	movpl	r2, #1
   d81a2:	601a      	strpl	r2, [r3, #0]
   d81a4:	4b16      	ldr	r3, [pc, #88]	; (d8200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d81a6:	681a      	ldr	r2, [r3, #0]
   d81a8:	07d2      	lsls	r2, r2, #31
   d81aa:	bf5c      	itt	pl
   d81ac:	2201      	movpl	r2, #1
   d81ae:	601a      	strpl	r2, [r3, #0]
   d81b0:	4b14      	ldr	r3, [pc, #80]	; (d8204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d81b2:	681a      	ldr	r2, [r3, #0]
   d81b4:	07d0      	lsls	r0, r2, #31
   d81b6:	bf5c      	itt	pl
   d81b8:	2201      	movpl	r2, #1
   d81ba:	601a      	strpl	r2, [r3, #0]
   d81bc:	4b12      	ldr	r3, [pc, #72]	; (d8208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d81be:	681a      	ldr	r2, [r3, #0]
   d81c0:	07d1      	lsls	r1, r2, #31
   d81c2:	bf5c      	itt	pl
   d81c4:	2201      	movpl	r2, #1
   d81c6:	601a      	strpl	r2, [r3, #0]
   d81c8:	4b10      	ldr	r3, [pc, #64]	; (d820c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d81ca:	681a      	ldr	r2, [r3, #0]
   d81cc:	07d2      	lsls	r2, r2, #31
   d81ce:	bf5c      	itt	pl
   d81d0:	2201      	movpl	r2, #1
   d81d2:	601a      	strpl	r2, [r3, #0]
   d81d4:	4b0e      	ldr	r3, [pc, #56]	; (d8210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d81d6:	681a      	ldr	r2, [r3, #0]
   d81d8:	07d0      	lsls	r0, r2, #31
   d81da:	bf5c      	itt	pl
   d81dc:	2201      	movpl	r2, #1
   d81de:	601a      	strpl	r2, [r3, #0]
   d81e0:	4b0c      	ldr	r3, [pc, #48]	; (d8214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d81e2:	681a      	ldr	r2, [r3, #0]
   d81e4:	07d1      	lsls	r1, r2, #31
   d81e6:	bf5c      	itt	pl
   d81e8:	2201      	movpl	r2, #1
   d81ea:	601a      	strpl	r2, [r3, #0]
   d81ec:	4b0a      	ldr	r3, [pc, #40]	; (d8218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d81ee:	681a      	ldr	r2, [r3, #0]
   d81f0:	07d2      	lsls	r2, r2, #31
   d81f2:	bf5c      	itt	pl
   d81f4:	2201      	movpl	r2, #1
   d81f6:	601a      	strpl	r2, [r3, #0]
   d81f8:	4770      	bx	lr
   d81fa:	bf00      	nop
   d81fc:	2003e79c 	.word	0x2003e79c
   d8200:	2003e798 	.word	0x2003e798
   d8204:	2003e794 	.word	0x2003e794
   d8208:	2003e790 	.word	0x2003e790
   d820c:	2003e78c 	.word	0x2003e78c
   d8210:	2003e788 	.word	0x2003e788
   d8214:	2003e784 	.word	0x2003e784
   d8218:	2003e780 	.word	0x2003e780

000d821c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d821c:	4b18      	ldr	r3, [pc, #96]	; (d8280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d821e:	681a      	ldr	r2, [r3, #0]
   d8220:	07d1      	lsls	r1, r2, #31
   d8222:	bf5c      	itt	pl
   d8224:	2201      	movpl	r2, #1
   d8226:	601a      	strpl	r2, [r3, #0]
   d8228:	4b16      	ldr	r3, [pc, #88]	; (d8284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d822a:	681a      	ldr	r2, [r3, #0]
   d822c:	07d2      	lsls	r2, r2, #31
   d822e:	bf5c      	itt	pl
   d8230:	2201      	movpl	r2, #1
   d8232:	601a      	strpl	r2, [r3, #0]
   d8234:	4b14      	ldr	r3, [pc, #80]	; (d8288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8236:	681a      	ldr	r2, [r3, #0]
   d8238:	07d0      	lsls	r0, r2, #31
   d823a:	bf5c      	itt	pl
   d823c:	2201      	movpl	r2, #1
   d823e:	601a      	strpl	r2, [r3, #0]
   d8240:	4b12      	ldr	r3, [pc, #72]	; (d828c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8242:	681a      	ldr	r2, [r3, #0]
   d8244:	07d1      	lsls	r1, r2, #31
   d8246:	bf5c      	itt	pl
   d8248:	2201      	movpl	r2, #1
   d824a:	601a      	strpl	r2, [r3, #0]
   d824c:	4b10      	ldr	r3, [pc, #64]	; (d8290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d824e:	681a      	ldr	r2, [r3, #0]
   d8250:	07d2      	lsls	r2, r2, #31
   d8252:	bf5c      	itt	pl
   d8254:	2201      	movpl	r2, #1
   d8256:	601a      	strpl	r2, [r3, #0]
   d8258:	4b0e      	ldr	r3, [pc, #56]	; (d8294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d825a:	681a      	ldr	r2, [r3, #0]
   d825c:	07d0      	lsls	r0, r2, #31
   d825e:	bf5c      	itt	pl
   d8260:	2201      	movpl	r2, #1
   d8262:	601a      	strpl	r2, [r3, #0]
   d8264:	4b0c      	ldr	r3, [pc, #48]	; (d8298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8266:	681a      	ldr	r2, [r3, #0]
   d8268:	07d1      	lsls	r1, r2, #31
   d826a:	bf5c      	itt	pl
   d826c:	2201      	movpl	r2, #1
   d826e:	601a      	strpl	r2, [r3, #0]
   d8270:	4b0a      	ldr	r3, [pc, #40]	; (d829c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8272:	681a      	ldr	r2, [r3, #0]
   d8274:	07d2      	lsls	r2, r2, #31
   d8276:	bf5c      	itt	pl
   d8278:	2201      	movpl	r2, #1
   d827a:	601a      	strpl	r2, [r3, #0]
   d827c:	4770      	bx	lr
   d827e:	bf00      	nop
   d8280:	2003e7bc 	.word	0x2003e7bc
   d8284:	2003e7b8 	.word	0x2003e7b8
   d8288:	2003e7b4 	.word	0x2003e7b4
   d828c:	2003e7b0 	.word	0x2003e7b0
   d8290:	2003e7ac 	.word	0x2003e7ac
   d8294:	2003e7a8 	.word	0x2003e7a8
   d8298:	2003e7a4 	.word	0x2003e7a4
   d829c:	2003e7a0 	.word	0x2003e7a0

000d82a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d82a0:	4b24      	ldr	r3, [pc, #144]	; (d8334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d82a2:	681a      	ldr	r2, [r3, #0]
   d82a4:	07d0      	lsls	r0, r2, #31
   d82a6:	bf5c      	itt	pl
   d82a8:	2201      	movpl	r2, #1
   d82aa:	601a      	strpl	r2, [r3, #0]
   d82ac:	4b22      	ldr	r3, [pc, #136]	; (d8338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d82ae:	681a      	ldr	r2, [r3, #0]
   d82b0:	07d1      	lsls	r1, r2, #31
   d82b2:	bf5c      	itt	pl
   d82b4:	2201      	movpl	r2, #1
   d82b6:	601a      	strpl	r2, [r3, #0]
   d82b8:	4b20      	ldr	r3, [pc, #128]	; (d833c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d82ba:	681a      	ldr	r2, [r3, #0]
   d82bc:	07d2      	lsls	r2, r2, #31
   d82be:	bf5c      	itt	pl
   d82c0:	2201      	movpl	r2, #1
   d82c2:	601a      	strpl	r2, [r3, #0]
   d82c4:	4b1e      	ldr	r3, [pc, #120]	; (d8340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d82c6:	681a      	ldr	r2, [r3, #0]
   d82c8:	07d0      	lsls	r0, r2, #31
   d82ca:	bf5c      	itt	pl
   d82cc:	2201      	movpl	r2, #1
   d82ce:	601a      	strpl	r2, [r3, #0]
   d82d0:	4b1c      	ldr	r3, [pc, #112]	; (d8344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d82d2:	681a      	ldr	r2, [r3, #0]
   d82d4:	07d1      	lsls	r1, r2, #31
   d82d6:	bf5c      	itt	pl
   d82d8:	2201      	movpl	r2, #1
   d82da:	601a      	strpl	r2, [r3, #0]
   d82dc:	4b1a      	ldr	r3, [pc, #104]	; (d8348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d82de:	681a      	ldr	r2, [r3, #0]
   d82e0:	07d2      	lsls	r2, r2, #31
   d82e2:	bf5c      	itt	pl
   d82e4:	2201      	movpl	r2, #1
   d82e6:	601a      	strpl	r2, [r3, #0]
   d82e8:	4b18      	ldr	r3, [pc, #96]	; (d834c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d82ea:	681a      	ldr	r2, [r3, #0]
   d82ec:	07d0      	lsls	r0, r2, #31
   d82ee:	bf5c      	itt	pl
   d82f0:	2201      	movpl	r2, #1
   d82f2:	601a      	strpl	r2, [r3, #0]
   d82f4:	4b16      	ldr	r3, [pc, #88]	; (d8350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d82f6:	681a      	ldr	r2, [r3, #0]
   d82f8:	07d1      	lsls	r1, r2, #31
   d82fa:	bf5c      	itt	pl
   d82fc:	2201      	movpl	r2, #1
   d82fe:	601a      	strpl	r2, [r3, #0]
   d8300:	4b14      	ldr	r3, [pc, #80]	; (d8354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8302:	681a      	ldr	r2, [r3, #0]
   d8304:	07d2      	lsls	r2, r2, #31
   d8306:	bf5c      	itt	pl
   d8308:	2201      	movpl	r2, #1
   d830a:	601a      	strpl	r2, [r3, #0]
   d830c:	4b12      	ldr	r3, [pc, #72]	; (d8358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d830e:	681a      	ldr	r2, [r3, #0]
   d8310:	07d0      	lsls	r0, r2, #31
   d8312:	bf5c      	itt	pl
   d8314:	2201      	movpl	r2, #1
   d8316:	601a      	strpl	r2, [r3, #0]
   d8318:	4b10      	ldr	r3, [pc, #64]	; (d835c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d831a:	681a      	ldr	r2, [r3, #0]
   d831c:	07d1      	lsls	r1, r2, #31
   d831e:	bf5c      	itt	pl
   d8320:	2201      	movpl	r2, #1
   d8322:	601a      	strpl	r2, [r3, #0]
   d8324:	4b0e      	ldr	r3, [pc, #56]	; (d8360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8326:	681a      	ldr	r2, [r3, #0]
   d8328:	07d2      	lsls	r2, r2, #31
   d832a:	bf5c      	itt	pl
   d832c:	2201      	movpl	r2, #1
   d832e:	601a      	strpl	r2, [r3, #0]
   d8330:	4770      	bx	lr
   d8332:	bf00      	nop
   d8334:	2003e7ec 	.word	0x2003e7ec
   d8338:	2003e7e8 	.word	0x2003e7e8
   d833c:	2003e7e4 	.word	0x2003e7e4
   d8340:	2003e7e0 	.word	0x2003e7e0
   d8344:	2003e7dc 	.word	0x2003e7dc
   d8348:	2003e7d8 	.word	0x2003e7d8
   d834c:	2003e7d4 	.word	0x2003e7d4
   d8350:	2003e7d0 	.word	0x2003e7d0
   d8354:	2003e7cc 	.word	0x2003e7cc
   d8358:	2003e7c8 	.word	0x2003e7c8
   d835c:	2003e7c4 	.word	0x2003e7c4
   d8360:	2003e7c0 	.word	0x2003e7c0

000d8364 <fmaxf>:
   d8364:	b508      	push	{r3, lr}
   d8366:	ed2d 8b02 	vpush	{d8}
   d836a:	eeb0 8a60 	vmov.f32	s16, s1
   d836e:	eef0 8a40 	vmov.f32	s17, s0
   d8372:	f000 f833 	bl	d83dc <__fpclassifyf>
   d8376:	b920      	cbnz	r0, d8382 <fmaxf+0x1e>
   d8378:	eeb0 0a48 	vmov.f32	s0, s16
   d837c:	ecbd 8b02 	vpop	{d8}
   d8380:	bd08      	pop	{r3, pc}
   d8382:	eeb0 0a48 	vmov.f32	s0, s16
   d8386:	f000 f829 	bl	d83dc <__fpclassifyf>
   d838a:	b120      	cbz	r0, d8396 <fmaxf+0x32>
   d838c:	eef4 8ac8 	vcmpe.f32	s17, s16
   d8390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8394:	ddf0      	ble.n	d8378 <fmaxf+0x14>
   d8396:	eeb0 0a68 	vmov.f32	s0, s17
   d839a:	ecbd 8b02 	vpop	{d8}
   d839e:	bd08      	pop	{r3, pc}

000d83a0 <fminf>:
   d83a0:	b508      	push	{r3, lr}
   d83a2:	ed2d 8b02 	vpush	{d8}
   d83a6:	eeb0 8a60 	vmov.f32	s16, s1
   d83aa:	eef0 8a40 	vmov.f32	s17, s0
   d83ae:	f000 f815 	bl	d83dc <__fpclassifyf>
   d83b2:	b920      	cbnz	r0, d83be <fminf+0x1e>
   d83b4:	eeb0 0a48 	vmov.f32	s0, s16
   d83b8:	ecbd 8b02 	vpop	{d8}
   d83bc:	bd08      	pop	{r3, pc}
   d83be:	eeb0 0a48 	vmov.f32	s0, s16
   d83c2:	f000 f80b 	bl	d83dc <__fpclassifyf>
   d83c6:	b120      	cbz	r0, d83d2 <fminf+0x32>
   d83c8:	eef4 8ac8 	vcmpe.f32	s17, s16
   d83cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d83d0:	d5f0      	bpl.n	d83b4 <fminf+0x14>
   d83d2:	eeb0 0a68 	vmov.f32	s0, s17
   d83d6:	ecbd 8b02 	vpop	{d8}
   d83da:	bd08      	pop	{r3, pc}

000d83dc <__fpclassifyf>:
   d83dc:	ee10 3a10 	vmov	r3, s0
   d83e0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
   d83e4:	d101      	bne.n	d83ea <__fpclassifyf+0xe>
   d83e6:	2002      	movs	r0, #2
   d83e8:	4770      	bx	lr
   d83ea:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
   d83ee:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
   d83f2:	d201      	bcs.n	d83f8 <__fpclassifyf+0x1c>
   d83f4:	2004      	movs	r0, #4
   d83f6:	4770      	bx	lr
   d83f8:	4b05      	ldr	r3, [pc, #20]	; (d8410 <__fpclassifyf+0x34>)
   d83fa:	1e42      	subs	r2, r0, #1
   d83fc:	429a      	cmp	r2, r3
   d83fe:	d801      	bhi.n	d8404 <__fpclassifyf+0x28>
   d8400:	2003      	movs	r0, #3
   d8402:	4770      	bx	lr
   d8404:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
   d8408:	fab0 f080 	clz	r0, r0
   d840c:	0940      	lsrs	r0, r0, #5
   d840e:	4770      	bx	lr
   d8410:	007ffffe 	.word	0x007ffffe

000d8414 <atan2f>:
   d8414:	f000 b800 	b.w	d8418 <__ieee754_atan2f>

000d8418 <__ieee754_atan2f>:
   d8418:	b510      	push	{r4, lr}
   d841a:	b082      	sub	sp, #8
   d841c:	edcd 0a01 	vstr	s1, [sp, #4]
   d8420:	9b01      	ldr	r3, [sp, #4]
   d8422:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   d8426:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   d842a:	eef0 7a40 	vmov.f32	s15, s0
   d842e:	dc19      	bgt.n	d8464 <__ieee754_atan2f+0x4c>
   d8430:	ee10 0a10 	vmov	r0, s0
   d8434:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   d8438:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   d843c:	dc12      	bgt.n	d8464 <__ieee754_atan2f+0x4c>
   d843e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   d8442:	d049      	beq.n	d84d8 <__ieee754_atan2f+0xc0>
   d8444:	179c      	asrs	r4, r3, #30
   d8446:	f004 0402 	and.w	r4, r4, #2
   d844a:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   d844e:	b979      	cbnz	r1, d8470 <__ieee754_atan2f+0x58>
   d8450:	2c02      	cmp	r4, #2
   d8452:	d03e      	beq.n	d84d2 <__ieee754_atan2f+0xba>
   d8454:	ed9f 0a40 	vldr	s0, [pc, #256]	; d8558 <__ieee754_atan2f+0x140>
   d8458:	2c03      	cmp	r4, #3
   d845a:	bf18      	it	ne
   d845c:	eeb0 0a67 	vmovne.f32	s0, s15
   d8460:	b002      	add	sp, #8
   d8462:	bd10      	pop	{r4, pc}
   d8464:	ed9d 7a01 	vldr	s14, [sp, #4]
   d8468:	ee37 0a27 	vadd.f32	s0, s14, s15
   d846c:	b002      	add	sp, #8
   d846e:	bd10      	pop	{r4, pc}
   d8470:	b312      	cbz	r2, d84b8 <__ieee754_atan2f+0xa0>
   d8472:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   d8476:	d034      	beq.n	d84e2 <__ieee754_atan2f+0xca>
   d8478:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   d847c:	d01c      	beq.n	d84b8 <__ieee754_atan2f+0xa0>
   d847e:	1a8a      	subs	r2, r1, r2
   d8480:	15d2      	asrs	r2, r2, #23
   d8482:	2a3c      	cmp	r2, #60	; 0x3c
   d8484:	dc22      	bgt.n	d84cc <__ieee754_atan2f+0xb4>
   d8486:	2b00      	cmp	r3, #0
   d8488:	db4b      	blt.n	d8522 <__ieee754_atan2f+0x10a>
   d848a:	ed9d 0a01 	vldr	s0, [sp, #4]
   d848e:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d8492:	f000 f953 	bl	d873c <fabsf>
   d8496:	f000 f875 	bl	d8584 <atanf>
   d849a:	2c01      	cmp	r4, #1
   d849c:	d03a      	beq.n	d8514 <__ieee754_atan2f+0xfc>
   d849e:	2c02      	cmp	r4, #2
   d84a0:	d02f      	beq.n	d8502 <__ieee754_atan2f+0xea>
   d84a2:	2c00      	cmp	r4, #0
   d84a4:	d0e2      	beq.n	d846c <__ieee754_atan2f+0x54>
   d84a6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; d855c <__ieee754_atan2f+0x144>
   d84aa:	eddf 7a2d 	vldr	s15, [pc, #180]	; d8560 <__ieee754_atan2f+0x148>
   d84ae:	ee30 0a07 	vadd.f32	s0, s0, s14
   d84b2:	ee30 0a67 	vsub.f32	s0, s0, s15
   d84b6:	e7d9      	b.n	d846c <__ieee754_atan2f+0x54>
   d84b8:	eddf 7a2a 	vldr	s15, [pc, #168]	; d8564 <__ieee754_atan2f+0x14c>
   d84bc:	ed9f 0a2a 	vldr	s0, [pc, #168]	; d8568 <__ieee754_atan2f+0x150>
   d84c0:	2800      	cmp	r0, #0
   d84c2:	bfa8      	it	ge
   d84c4:	eeb0 0a67 	vmovge.f32	s0, s15
   d84c8:	b002      	add	sp, #8
   d84ca:	bd10      	pop	{r4, pc}
   d84cc:	ed9f 0a25 	vldr	s0, [pc, #148]	; d8564 <__ieee754_atan2f+0x14c>
   d84d0:	e7e3      	b.n	d849a <__ieee754_atan2f+0x82>
   d84d2:	ed9f 0a23 	vldr	s0, [pc, #140]	; d8560 <__ieee754_atan2f+0x148>
   d84d6:	e7c9      	b.n	d846c <__ieee754_atan2f+0x54>
   d84d8:	b002      	add	sp, #8
   d84da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d84de:	f000 b851 	b.w	d8584 <atanf>
   d84e2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   d84e6:	d021      	beq.n	d852c <__ieee754_atan2f+0x114>
   d84e8:	2c02      	cmp	r4, #2
   d84ea:	d0f2      	beq.n	d84d2 <__ieee754_atan2f+0xba>
   d84ec:	2c03      	cmp	r4, #3
   d84ee:	d02a      	beq.n	d8546 <__ieee754_atan2f+0x12e>
   d84f0:	eddf 7a1e 	vldr	s15, [pc, #120]	; d856c <__ieee754_atan2f+0x154>
   d84f4:	ed9f 0a1e 	vldr	s0, [pc, #120]	; d8570 <__ieee754_atan2f+0x158>
   d84f8:	2c01      	cmp	r4, #1
   d84fa:	bf08      	it	eq
   d84fc:	eeb0 0a67 	vmoveq.f32	s0, s15
   d8500:	e7b4      	b.n	d846c <__ieee754_atan2f+0x54>
   d8502:	ed9f 7a16 	vldr	s14, [pc, #88]	; d855c <__ieee754_atan2f+0x144>
   d8506:	eddf 7a16 	vldr	s15, [pc, #88]	; d8560 <__ieee754_atan2f+0x148>
   d850a:	ee30 0a07 	vadd.f32	s0, s0, s14
   d850e:	ee37 0ac0 	vsub.f32	s0, s15, s0
   d8512:	e7ab      	b.n	d846c <__ieee754_atan2f+0x54>
   d8514:	ee10 3a10 	vmov	r3, s0
   d8518:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   d851c:	ee00 3a10 	vmov	s0, r3
   d8520:	e7a4      	b.n	d846c <__ieee754_atan2f+0x54>
   d8522:	323c      	adds	r2, #60	; 0x3c
   d8524:	dab1      	bge.n	d848a <__ieee754_atan2f+0x72>
   d8526:	ed9f 0a12 	vldr	s0, [pc, #72]	; d8570 <__ieee754_atan2f+0x158>
   d852a:	e7b6      	b.n	d849a <__ieee754_atan2f+0x82>
   d852c:	2c02      	cmp	r4, #2
   d852e:	d010      	beq.n	d8552 <__ieee754_atan2f+0x13a>
   d8530:	2c03      	cmp	r4, #3
   d8532:	d00b      	beq.n	d854c <__ieee754_atan2f+0x134>
   d8534:	eddf 7a0f 	vldr	s15, [pc, #60]	; d8574 <__ieee754_atan2f+0x15c>
   d8538:	ed9f 0a0f 	vldr	s0, [pc, #60]	; d8578 <__ieee754_atan2f+0x160>
   d853c:	2c01      	cmp	r4, #1
   d853e:	bf08      	it	eq
   d8540:	eeb0 0a67 	vmoveq.f32	s0, s15
   d8544:	e792      	b.n	d846c <__ieee754_atan2f+0x54>
   d8546:	ed9f 0a04 	vldr	s0, [pc, #16]	; d8558 <__ieee754_atan2f+0x140>
   d854a:	e78f      	b.n	d846c <__ieee754_atan2f+0x54>
   d854c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; d857c <__ieee754_atan2f+0x164>
   d8550:	e78c      	b.n	d846c <__ieee754_atan2f+0x54>
   d8552:	ed9f 0a0b 	vldr	s0, [pc, #44]	; d8580 <__ieee754_atan2f+0x168>
   d8556:	e789      	b.n	d846c <__ieee754_atan2f+0x54>
   d8558:	c0490fdb 	.word	0xc0490fdb
   d855c:	33bbbd2e 	.word	0x33bbbd2e
   d8560:	40490fdb 	.word	0x40490fdb
   d8564:	3fc90fdb 	.word	0x3fc90fdb
   d8568:	bfc90fdb 	.word	0xbfc90fdb
   d856c:	80000000 	.word	0x80000000
   d8570:	00000000 	.word	0x00000000
   d8574:	bf490fdb 	.word	0xbf490fdb
   d8578:	3f490fdb 	.word	0x3f490fdb
   d857c:	c016cbe4 	.word	0xc016cbe4
   d8580:	4016cbe4 	.word	0x4016cbe4

000d8584 <atanf>:
   d8584:	b538      	push	{r3, r4, r5, lr}
   d8586:	ee10 5a10 	vmov	r5, s0
   d858a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   d858e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   d8592:	eef0 7a40 	vmov.f32	s15, s0
   d8596:	db0b      	blt.n	d85b0 <atanf+0x2c>
   d8598:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   d859c:	dc58      	bgt.n	d8650 <atanf+0xcc>
   d859e:	eddf 7a54 	vldr	s15, [pc, #336]	; d86f0 <atanf+0x16c>
   d85a2:	ed9f 0a54 	vldr	s0, [pc, #336]	; d86f4 <atanf+0x170>
   d85a6:	2d00      	cmp	r5, #0
   d85a8:	bfc8      	it	gt
   d85aa:	eeb0 0a67 	vmovgt.f32	s0, s15
   d85ae:	bd38      	pop	{r3, r4, r5, pc}
   d85b0:	4b51      	ldr	r3, [pc, #324]	; (d86f8 <atanf+0x174>)
   d85b2:	429c      	cmp	r4, r3
   d85b4:	dc5d      	bgt.n	d8672 <atanf+0xee>
   d85b6:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   d85ba:	db4c      	blt.n	d8656 <atanf+0xd2>
   d85bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d85c0:	ee67 5aa7 	vmul.f32	s11, s15, s15
   d85c4:	ed9f 1a4d 	vldr	s2, [pc, #308]	; d86fc <atanf+0x178>
   d85c8:	ed9f 2a4d 	vldr	s4, [pc, #308]	; d8700 <atanf+0x17c>
   d85cc:	ed9f 3a4d 	vldr	s6, [pc, #308]	; d8704 <atanf+0x180>
   d85d0:	eddf 1a4d 	vldr	s3, [pc, #308]	; d8708 <atanf+0x184>
   d85d4:	eddf 2a4d 	vldr	s5, [pc, #308]	; d870c <atanf+0x188>
   d85d8:	ed9f 4a4d 	vldr	s8, [pc, #308]	; d8710 <atanf+0x18c>
   d85dc:	eddf 3a4d 	vldr	s7, [pc, #308]	; d8714 <atanf+0x190>
   d85e0:	ed9f 5a4d 	vldr	s10, [pc, #308]	; d8718 <atanf+0x194>
   d85e4:	eddf 4a4d 	vldr	s9, [pc, #308]	; d871c <atanf+0x198>
   d85e8:	ed9f 6a4d 	vldr	s12, [pc, #308]	; d8720 <atanf+0x19c>
   d85ec:	eddf 6a4d 	vldr	s13, [pc, #308]	; d8724 <atanf+0x1a0>
   d85f0:	ee25 7aa5 	vmul.f32	s14, s11, s11
   d85f4:	1c5a      	adds	r2, r3, #1
   d85f6:	eea7 2a01 	vfma.f32	s4, s14, s2
   d85fa:	eee7 2a21 	vfma.f32	s5, s14, s3
   d85fe:	eea7 3a02 	vfma.f32	s6, s14, s4
   d8602:	eee7 3a22 	vfma.f32	s7, s14, s5
   d8606:	eea7 4a03 	vfma.f32	s8, s14, s6
   d860a:	eee7 4a23 	vfma.f32	s9, s14, s7
   d860e:	eea7 5a04 	vfma.f32	s10, s14, s8
   d8612:	eee7 6a24 	vfma.f32	s13, s14, s9
   d8616:	eea7 6a05 	vfma.f32	s12, s14, s10
   d861a:	ee26 7a87 	vmul.f32	s14, s13, s14
   d861e:	ee66 6a25 	vmul.f32	s13, s12, s11
   d8622:	d03e      	beq.n	d86a2 <atanf+0x11e>
   d8624:	4a40      	ldr	r2, [pc, #256]	; (d8728 <atanf+0x1a4>)
   d8626:	4941      	ldr	r1, [pc, #260]	; (d872c <atanf+0x1a8>)
   d8628:	009b      	lsls	r3, r3, #2
   d862a:	441a      	add	r2, r3
   d862c:	ee76 6a87 	vadd.f32	s13, s13, s14
   d8630:	ed92 7a00 	vldr	s14, [r2]
   d8634:	ee97 7aa6 	vfnms.f32	s14, s15, s13
   d8638:	440b      	add	r3, r1
   d863a:	2d00      	cmp	r5, #0
   d863c:	ed93 0a00 	vldr	s0, [r3]
   d8640:	ee77 7a67 	vsub.f32	s15, s14, s15
   d8644:	ee70 7a67 	vsub.f32	s15, s0, s15
   d8648:	db28      	blt.n	d869c <atanf+0x118>
   d864a:	eeb0 0a67 	vmov.f32	s0, s15
   d864e:	bd38      	pop	{r3, r4, r5, pc}
   d8650:	ee30 0a00 	vadd.f32	s0, s0, s0
   d8654:	bd38      	pop	{r3, r4, r5, pc}
   d8656:	ed9f 7a36 	vldr	s14, [pc, #216]	; d8730 <atanf+0x1ac>
   d865a:	ee30 7a07 	vadd.f32	s14, s0, s14
   d865e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   d8662:	eeb4 7ae6 	vcmpe.f32	s14, s13
   d8666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d866a:	dda7      	ble.n	d85bc <atanf+0x38>
   d866c:	eeb0 0a67 	vmov.f32	s0, s15
   d8670:	bd38      	pop	{r3, r4, r5, pc}
   d8672:	f000 f863 	bl	d873c <fabsf>
   d8676:	4b2f      	ldr	r3, [pc, #188]	; (d8734 <atanf+0x1b0>)
   d8678:	429c      	cmp	r4, r3
   d867a:	dc19      	bgt.n	d86b0 <atanf+0x12c>
   d867c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   d8680:	429c      	cmp	r4, r3
   d8682:	dc2a      	bgt.n	d86da <atanf+0x156>
   d8684:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d8688:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   d868c:	eea0 7a27 	vfma.f32	s14, s0, s15
   d8690:	2300      	movs	r3, #0
   d8692:	ee30 0a27 	vadd.f32	s0, s0, s15
   d8696:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d869a:	e791      	b.n	d85c0 <atanf+0x3c>
   d869c:	eeb1 0a67 	vneg.f32	s0, s15
   d86a0:	bd38      	pop	{r3, r4, r5, pc}
   d86a2:	ee76 6a87 	vadd.f32	s13, s13, s14
   d86a6:	eeb0 0a67 	vmov.f32	s0, s15
   d86aa:	eea7 0ae6 	vfms.f32	s0, s15, s13
   d86ae:	bd38      	pop	{r3, r4, r5, pc}
   d86b0:	4b21      	ldr	r3, [pc, #132]	; (d8738 <atanf+0x1b4>)
   d86b2:	429c      	cmp	r4, r3
   d86b4:	dc0b      	bgt.n	d86ce <atanf+0x14a>
   d86b6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   d86ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d86be:	eea0 7a27 	vfma.f32	s14, s0, s15
   d86c2:	2302      	movs	r3, #2
   d86c4:	ee30 0a67 	vsub.f32	s0, s0, s15
   d86c8:	eec0 7a07 	vdiv.f32	s15, s0, s14
   d86cc:	e778      	b.n	d85c0 <atanf+0x3c>
   d86ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   d86d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d86d6:	2303      	movs	r3, #3
   d86d8:	e772      	b.n	d85c0 <atanf+0x3c>
   d86da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d86de:	ee30 7a67 	vsub.f32	s14, s0, s15
   d86e2:	ee30 0a27 	vadd.f32	s0, s0, s15
   d86e6:	2301      	movs	r3, #1
   d86e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d86ec:	e768      	b.n	d85c0 <atanf+0x3c>
   d86ee:	bf00      	nop
   d86f0:	3fc90fdb 	.word	0x3fc90fdb
   d86f4:	bfc90fdb 	.word	0xbfc90fdb
   d86f8:	3edfffff 	.word	0x3edfffff
   d86fc:	3c8569d7 	.word	0x3c8569d7
   d8700:	3d4bda59 	.word	0x3d4bda59
   d8704:	3d886b35 	.word	0x3d886b35
   d8708:	bd15a221 	.word	0xbd15a221
   d870c:	bd6ef16b 	.word	0xbd6ef16b
   d8710:	3dba2e6e 	.word	0x3dba2e6e
   d8714:	bd9d8795 	.word	0xbd9d8795
   d8718:	3e124925 	.word	0x3e124925
   d871c:	bde38e38 	.word	0xbde38e38
   d8720:	3eaaaaab 	.word	0x3eaaaaab
   d8724:	be4ccccd 	.word	0xbe4ccccd
   d8728:	000d9f88 	.word	0x000d9f88
   d872c:	000d9f98 	.word	0x000d9f98
   d8730:	7149f2ca 	.word	0x7149f2ca
   d8734:	3f97ffff 	.word	0x3f97ffff
   d8738:	401bffff 	.word	0x401bffff

000d873c <fabsf>:
   d873c:	ee10 3a10 	vmov	r3, s0
   d8740:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d8744:	ee00 3a10 	vmov	s0, r3
   d8748:	4770      	bx	lr
   d874a:	bf00      	nop

000d874c <__aeabi_drsub>:
   d874c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8750:	e002      	b.n	d8758 <__adddf3>
   d8752:	bf00      	nop

000d8754 <__aeabi_dsub>:
   d8754:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8758 <__adddf3>:
   d8758:	b530      	push	{r4, r5, lr}
   d875a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d875e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8762:	ea94 0f05 	teq	r4, r5
   d8766:	bf08      	it	eq
   d8768:	ea90 0f02 	teqeq	r0, r2
   d876c:	bf1f      	itttt	ne
   d876e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8772:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8776:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d877a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d877e:	f000 80e2 	beq.w	d8946 <__adddf3+0x1ee>
   d8782:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8786:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d878a:	bfb8      	it	lt
   d878c:	426d      	neglt	r5, r5
   d878e:	dd0c      	ble.n	d87aa <__adddf3+0x52>
   d8790:	442c      	add	r4, r5
   d8792:	ea80 0202 	eor.w	r2, r0, r2
   d8796:	ea81 0303 	eor.w	r3, r1, r3
   d879a:	ea82 0000 	eor.w	r0, r2, r0
   d879e:	ea83 0101 	eor.w	r1, r3, r1
   d87a2:	ea80 0202 	eor.w	r2, r0, r2
   d87a6:	ea81 0303 	eor.w	r3, r1, r3
   d87aa:	2d36      	cmp	r5, #54	; 0x36
   d87ac:	bf88      	it	hi
   d87ae:	bd30      	pophi	{r4, r5, pc}
   d87b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d87b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d87b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d87bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d87c0:	d002      	beq.n	d87c8 <__adddf3+0x70>
   d87c2:	4240      	negs	r0, r0
   d87c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d87c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d87cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d87d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d87d4:	d002      	beq.n	d87dc <__adddf3+0x84>
   d87d6:	4252      	negs	r2, r2
   d87d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d87dc:	ea94 0f05 	teq	r4, r5
   d87e0:	f000 80a7 	beq.w	d8932 <__adddf3+0x1da>
   d87e4:	f1a4 0401 	sub.w	r4, r4, #1
   d87e8:	f1d5 0e20 	rsbs	lr, r5, #32
   d87ec:	db0d      	blt.n	d880a <__adddf3+0xb2>
   d87ee:	fa02 fc0e 	lsl.w	ip, r2, lr
   d87f2:	fa22 f205 	lsr.w	r2, r2, r5
   d87f6:	1880      	adds	r0, r0, r2
   d87f8:	f141 0100 	adc.w	r1, r1, #0
   d87fc:	fa03 f20e 	lsl.w	r2, r3, lr
   d8800:	1880      	adds	r0, r0, r2
   d8802:	fa43 f305 	asr.w	r3, r3, r5
   d8806:	4159      	adcs	r1, r3
   d8808:	e00e      	b.n	d8828 <__adddf3+0xd0>
   d880a:	f1a5 0520 	sub.w	r5, r5, #32
   d880e:	f10e 0e20 	add.w	lr, lr, #32
   d8812:	2a01      	cmp	r2, #1
   d8814:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8818:	bf28      	it	cs
   d881a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d881e:	fa43 f305 	asr.w	r3, r3, r5
   d8822:	18c0      	adds	r0, r0, r3
   d8824:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8828:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d882c:	d507      	bpl.n	d883e <__adddf3+0xe6>
   d882e:	f04f 0e00 	mov.w	lr, #0
   d8832:	f1dc 0c00 	rsbs	ip, ip, #0
   d8836:	eb7e 0000 	sbcs.w	r0, lr, r0
   d883a:	eb6e 0101 	sbc.w	r1, lr, r1
   d883e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8842:	d31b      	bcc.n	d887c <__adddf3+0x124>
   d8844:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8848:	d30c      	bcc.n	d8864 <__adddf3+0x10c>
   d884a:	0849      	lsrs	r1, r1, #1
   d884c:	ea5f 0030 	movs.w	r0, r0, rrx
   d8850:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8854:	f104 0401 	add.w	r4, r4, #1
   d8858:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d885c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8860:	f080 809a 	bcs.w	d8998 <__adddf3+0x240>
   d8864:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8868:	bf08      	it	eq
   d886a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d886e:	f150 0000 	adcs.w	r0, r0, #0
   d8872:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8876:	ea41 0105 	orr.w	r1, r1, r5
   d887a:	bd30      	pop	{r4, r5, pc}
   d887c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8880:	4140      	adcs	r0, r0
   d8882:	eb41 0101 	adc.w	r1, r1, r1
   d8886:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d888a:	f1a4 0401 	sub.w	r4, r4, #1
   d888e:	d1e9      	bne.n	d8864 <__adddf3+0x10c>
   d8890:	f091 0f00 	teq	r1, #0
   d8894:	bf04      	itt	eq
   d8896:	4601      	moveq	r1, r0
   d8898:	2000      	moveq	r0, #0
   d889a:	fab1 f381 	clz	r3, r1
   d889e:	bf08      	it	eq
   d88a0:	3320      	addeq	r3, #32
   d88a2:	f1a3 030b 	sub.w	r3, r3, #11
   d88a6:	f1b3 0220 	subs.w	r2, r3, #32
   d88aa:	da0c      	bge.n	d88c6 <__adddf3+0x16e>
   d88ac:	320c      	adds	r2, #12
   d88ae:	dd08      	ble.n	d88c2 <__adddf3+0x16a>
   d88b0:	f102 0c14 	add.w	ip, r2, #20
   d88b4:	f1c2 020c 	rsb	r2, r2, #12
   d88b8:	fa01 f00c 	lsl.w	r0, r1, ip
   d88bc:	fa21 f102 	lsr.w	r1, r1, r2
   d88c0:	e00c      	b.n	d88dc <__adddf3+0x184>
   d88c2:	f102 0214 	add.w	r2, r2, #20
   d88c6:	bfd8      	it	le
   d88c8:	f1c2 0c20 	rsble	ip, r2, #32
   d88cc:	fa01 f102 	lsl.w	r1, r1, r2
   d88d0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d88d4:	bfdc      	itt	le
   d88d6:	ea41 010c 	orrle.w	r1, r1, ip
   d88da:	4090      	lslle	r0, r2
   d88dc:	1ae4      	subs	r4, r4, r3
   d88de:	bfa2      	ittt	ge
   d88e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d88e4:	4329      	orrge	r1, r5
   d88e6:	bd30      	popge	{r4, r5, pc}
   d88e8:	ea6f 0404 	mvn.w	r4, r4
   d88ec:	3c1f      	subs	r4, #31
   d88ee:	da1c      	bge.n	d892a <__adddf3+0x1d2>
   d88f0:	340c      	adds	r4, #12
   d88f2:	dc0e      	bgt.n	d8912 <__adddf3+0x1ba>
   d88f4:	f104 0414 	add.w	r4, r4, #20
   d88f8:	f1c4 0220 	rsb	r2, r4, #32
   d88fc:	fa20 f004 	lsr.w	r0, r0, r4
   d8900:	fa01 f302 	lsl.w	r3, r1, r2
   d8904:	ea40 0003 	orr.w	r0, r0, r3
   d8908:	fa21 f304 	lsr.w	r3, r1, r4
   d890c:	ea45 0103 	orr.w	r1, r5, r3
   d8910:	bd30      	pop	{r4, r5, pc}
   d8912:	f1c4 040c 	rsb	r4, r4, #12
   d8916:	f1c4 0220 	rsb	r2, r4, #32
   d891a:	fa20 f002 	lsr.w	r0, r0, r2
   d891e:	fa01 f304 	lsl.w	r3, r1, r4
   d8922:	ea40 0003 	orr.w	r0, r0, r3
   d8926:	4629      	mov	r1, r5
   d8928:	bd30      	pop	{r4, r5, pc}
   d892a:	fa21 f004 	lsr.w	r0, r1, r4
   d892e:	4629      	mov	r1, r5
   d8930:	bd30      	pop	{r4, r5, pc}
   d8932:	f094 0f00 	teq	r4, #0
   d8936:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d893a:	bf06      	itte	eq
   d893c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8940:	3401      	addeq	r4, #1
   d8942:	3d01      	subne	r5, #1
   d8944:	e74e      	b.n	d87e4 <__adddf3+0x8c>
   d8946:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d894a:	bf18      	it	ne
   d894c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8950:	d029      	beq.n	d89a6 <__adddf3+0x24e>
   d8952:	ea94 0f05 	teq	r4, r5
   d8956:	bf08      	it	eq
   d8958:	ea90 0f02 	teqeq	r0, r2
   d895c:	d005      	beq.n	d896a <__adddf3+0x212>
   d895e:	ea54 0c00 	orrs.w	ip, r4, r0
   d8962:	bf04      	itt	eq
   d8964:	4619      	moveq	r1, r3
   d8966:	4610      	moveq	r0, r2
   d8968:	bd30      	pop	{r4, r5, pc}
   d896a:	ea91 0f03 	teq	r1, r3
   d896e:	bf1e      	ittt	ne
   d8970:	2100      	movne	r1, #0
   d8972:	2000      	movne	r0, #0
   d8974:	bd30      	popne	{r4, r5, pc}
   d8976:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d897a:	d105      	bne.n	d8988 <__adddf3+0x230>
   d897c:	0040      	lsls	r0, r0, #1
   d897e:	4149      	adcs	r1, r1
   d8980:	bf28      	it	cs
   d8982:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8986:	bd30      	pop	{r4, r5, pc}
   d8988:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d898c:	bf3c      	itt	cc
   d898e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8992:	bd30      	popcc	{r4, r5, pc}
   d8994:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8998:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d899c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d89a0:	f04f 0000 	mov.w	r0, #0
   d89a4:	bd30      	pop	{r4, r5, pc}
   d89a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d89aa:	bf1a      	itte	ne
   d89ac:	4619      	movne	r1, r3
   d89ae:	4610      	movne	r0, r2
   d89b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d89b4:	bf1c      	itt	ne
   d89b6:	460b      	movne	r3, r1
   d89b8:	4602      	movne	r2, r0
   d89ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d89be:	bf06      	itte	eq
   d89c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d89c4:	ea91 0f03 	teqeq	r1, r3
   d89c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d89cc:	bd30      	pop	{r4, r5, pc}
   d89ce:	bf00      	nop

000d89d0 <__aeabi_ui2d>:
   d89d0:	f090 0f00 	teq	r0, #0
   d89d4:	bf04      	itt	eq
   d89d6:	2100      	moveq	r1, #0
   d89d8:	4770      	bxeq	lr
   d89da:	b530      	push	{r4, r5, lr}
   d89dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d89e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d89e4:	f04f 0500 	mov.w	r5, #0
   d89e8:	f04f 0100 	mov.w	r1, #0
   d89ec:	e750      	b.n	d8890 <__adddf3+0x138>
   d89ee:	bf00      	nop

000d89f0 <__aeabi_i2d>:
   d89f0:	f090 0f00 	teq	r0, #0
   d89f4:	bf04      	itt	eq
   d89f6:	2100      	moveq	r1, #0
   d89f8:	4770      	bxeq	lr
   d89fa:	b530      	push	{r4, r5, lr}
   d89fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a04:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8a08:	bf48      	it	mi
   d8a0a:	4240      	negmi	r0, r0
   d8a0c:	f04f 0100 	mov.w	r1, #0
   d8a10:	e73e      	b.n	d8890 <__adddf3+0x138>
   d8a12:	bf00      	nop

000d8a14 <__aeabi_f2d>:
   d8a14:	0042      	lsls	r2, r0, #1
   d8a16:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8a1a:	ea4f 0131 	mov.w	r1, r1, rrx
   d8a1e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8a22:	bf1f      	itttt	ne
   d8a24:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8a28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8a2c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8a30:	4770      	bxne	lr
   d8a32:	f092 0f00 	teq	r2, #0
   d8a36:	bf14      	ite	ne
   d8a38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8a3c:	4770      	bxeq	lr
   d8a3e:	b530      	push	{r4, r5, lr}
   d8a40:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8a44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8a48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8a4c:	e720      	b.n	d8890 <__adddf3+0x138>
   d8a4e:	bf00      	nop

000d8a50 <__aeabi_ul2d>:
   d8a50:	ea50 0201 	orrs.w	r2, r0, r1
   d8a54:	bf08      	it	eq
   d8a56:	4770      	bxeq	lr
   d8a58:	b530      	push	{r4, r5, lr}
   d8a5a:	f04f 0500 	mov.w	r5, #0
   d8a5e:	e00a      	b.n	d8a76 <__aeabi_l2d+0x16>

000d8a60 <__aeabi_l2d>:
   d8a60:	ea50 0201 	orrs.w	r2, r0, r1
   d8a64:	bf08      	it	eq
   d8a66:	4770      	bxeq	lr
   d8a68:	b530      	push	{r4, r5, lr}
   d8a6a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8a6e:	d502      	bpl.n	d8a76 <__aeabi_l2d+0x16>
   d8a70:	4240      	negs	r0, r0
   d8a72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8a76:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a7a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a7e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8a82:	f43f aedc 	beq.w	d883e <__adddf3+0xe6>
   d8a86:	f04f 0203 	mov.w	r2, #3
   d8a8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8a8e:	bf18      	it	ne
   d8a90:	3203      	addne	r2, #3
   d8a92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8a96:	bf18      	it	ne
   d8a98:	3203      	addne	r2, #3
   d8a9a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8a9e:	f1c2 0320 	rsb	r3, r2, #32
   d8aa2:	fa00 fc03 	lsl.w	ip, r0, r3
   d8aa6:	fa20 f002 	lsr.w	r0, r0, r2
   d8aaa:	fa01 fe03 	lsl.w	lr, r1, r3
   d8aae:	ea40 000e 	orr.w	r0, r0, lr
   d8ab2:	fa21 f102 	lsr.w	r1, r1, r2
   d8ab6:	4414      	add	r4, r2
   d8ab8:	e6c1      	b.n	d883e <__adddf3+0xe6>
   d8aba:	bf00      	nop

000d8abc <__aeabi_dmul>:
   d8abc:	b570      	push	{r4, r5, r6, lr}
   d8abe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8ac2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8ac6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8aca:	bf1d      	ittte	ne
   d8acc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8ad0:	ea94 0f0c 	teqne	r4, ip
   d8ad4:	ea95 0f0c 	teqne	r5, ip
   d8ad8:	f000 f8de 	bleq	d8c98 <__aeabi_dmul+0x1dc>
   d8adc:	442c      	add	r4, r5
   d8ade:	ea81 0603 	eor.w	r6, r1, r3
   d8ae2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8ae6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8aea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8aee:	bf18      	it	ne
   d8af0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8af4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8af8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8afc:	d038      	beq.n	d8b70 <__aeabi_dmul+0xb4>
   d8afe:	fba0 ce02 	umull	ip, lr, r0, r2
   d8b02:	f04f 0500 	mov.w	r5, #0
   d8b06:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8b0a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8b0e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8b12:	f04f 0600 	mov.w	r6, #0
   d8b16:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8b1a:	f09c 0f00 	teq	ip, #0
   d8b1e:	bf18      	it	ne
   d8b20:	f04e 0e01 	orrne.w	lr, lr, #1
   d8b24:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8b28:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8b2c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8b30:	d204      	bcs.n	d8b3c <__aeabi_dmul+0x80>
   d8b32:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8b36:	416d      	adcs	r5, r5
   d8b38:	eb46 0606 	adc.w	r6, r6, r6
   d8b3c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8b40:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8b44:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8b48:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8b4c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8b50:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8b54:	bf88      	it	hi
   d8b56:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8b5a:	d81e      	bhi.n	d8b9a <__aeabi_dmul+0xde>
   d8b5c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8b60:	bf08      	it	eq
   d8b62:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8b66:	f150 0000 	adcs.w	r0, r0, #0
   d8b6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8b6e:	bd70      	pop	{r4, r5, r6, pc}
   d8b70:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8b74:	ea46 0101 	orr.w	r1, r6, r1
   d8b78:	ea40 0002 	orr.w	r0, r0, r2
   d8b7c:	ea81 0103 	eor.w	r1, r1, r3
   d8b80:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8b84:	bfc2      	ittt	gt
   d8b86:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8b8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8b8e:	bd70      	popgt	{r4, r5, r6, pc}
   d8b90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b94:	f04f 0e00 	mov.w	lr, #0
   d8b98:	3c01      	subs	r4, #1
   d8b9a:	f300 80ab 	bgt.w	d8cf4 <__aeabi_dmul+0x238>
   d8b9e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8ba2:	bfde      	ittt	le
   d8ba4:	2000      	movle	r0, #0
   d8ba6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8baa:	bd70      	pople	{r4, r5, r6, pc}
   d8bac:	f1c4 0400 	rsb	r4, r4, #0
   d8bb0:	3c20      	subs	r4, #32
   d8bb2:	da35      	bge.n	d8c20 <__aeabi_dmul+0x164>
   d8bb4:	340c      	adds	r4, #12
   d8bb6:	dc1b      	bgt.n	d8bf0 <__aeabi_dmul+0x134>
   d8bb8:	f104 0414 	add.w	r4, r4, #20
   d8bbc:	f1c4 0520 	rsb	r5, r4, #32
   d8bc0:	fa00 f305 	lsl.w	r3, r0, r5
   d8bc4:	fa20 f004 	lsr.w	r0, r0, r4
   d8bc8:	fa01 f205 	lsl.w	r2, r1, r5
   d8bcc:	ea40 0002 	orr.w	r0, r0, r2
   d8bd0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8bd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8bd8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8bdc:	fa21 f604 	lsr.w	r6, r1, r4
   d8be0:	eb42 0106 	adc.w	r1, r2, r6
   d8be4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8be8:	bf08      	it	eq
   d8bea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8bee:	bd70      	pop	{r4, r5, r6, pc}
   d8bf0:	f1c4 040c 	rsb	r4, r4, #12
   d8bf4:	f1c4 0520 	rsb	r5, r4, #32
   d8bf8:	fa00 f304 	lsl.w	r3, r0, r4
   d8bfc:	fa20 f005 	lsr.w	r0, r0, r5
   d8c00:	fa01 f204 	lsl.w	r2, r1, r4
   d8c04:	ea40 0002 	orr.w	r0, r0, r2
   d8c08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8c10:	f141 0100 	adc.w	r1, r1, #0
   d8c14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8c18:	bf08      	it	eq
   d8c1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8c1e:	bd70      	pop	{r4, r5, r6, pc}
   d8c20:	f1c4 0520 	rsb	r5, r4, #32
   d8c24:	fa00 f205 	lsl.w	r2, r0, r5
   d8c28:	ea4e 0e02 	orr.w	lr, lr, r2
   d8c2c:	fa20 f304 	lsr.w	r3, r0, r4
   d8c30:	fa01 f205 	lsl.w	r2, r1, r5
   d8c34:	ea43 0302 	orr.w	r3, r3, r2
   d8c38:	fa21 f004 	lsr.w	r0, r1, r4
   d8c3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c40:	fa21 f204 	lsr.w	r2, r1, r4
   d8c44:	ea20 0002 	bic.w	r0, r0, r2
   d8c48:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8c4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8c50:	bf08      	it	eq
   d8c52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8c56:	bd70      	pop	{r4, r5, r6, pc}
   d8c58:	f094 0f00 	teq	r4, #0
   d8c5c:	d10f      	bne.n	d8c7e <__aeabi_dmul+0x1c2>
   d8c5e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8c62:	0040      	lsls	r0, r0, #1
   d8c64:	eb41 0101 	adc.w	r1, r1, r1
   d8c68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8c6c:	bf08      	it	eq
   d8c6e:	3c01      	subeq	r4, #1
   d8c70:	d0f7      	beq.n	d8c62 <__aeabi_dmul+0x1a6>
   d8c72:	ea41 0106 	orr.w	r1, r1, r6
   d8c76:	f095 0f00 	teq	r5, #0
   d8c7a:	bf18      	it	ne
   d8c7c:	4770      	bxne	lr
   d8c7e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8c82:	0052      	lsls	r2, r2, #1
   d8c84:	eb43 0303 	adc.w	r3, r3, r3
   d8c88:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8c8c:	bf08      	it	eq
   d8c8e:	3d01      	subeq	r5, #1
   d8c90:	d0f7      	beq.n	d8c82 <__aeabi_dmul+0x1c6>
   d8c92:	ea43 0306 	orr.w	r3, r3, r6
   d8c96:	4770      	bx	lr
   d8c98:	ea94 0f0c 	teq	r4, ip
   d8c9c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8ca0:	bf18      	it	ne
   d8ca2:	ea95 0f0c 	teqne	r5, ip
   d8ca6:	d00c      	beq.n	d8cc2 <__aeabi_dmul+0x206>
   d8ca8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8cac:	bf18      	it	ne
   d8cae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8cb2:	d1d1      	bne.n	d8c58 <__aeabi_dmul+0x19c>
   d8cb4:	ea81 0103 	eor.w	r1, r1, r3
   d8cb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8cbc:	f04f 0000 	mov.w	r0, #0
   d8cc0:	bd70      	pop	{r4, r5, r6, pc}
   d8cc2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8cc6:	bf06      	itte	eq
   d8cc8:	4610      	moveq	r0, r2
   d8cca:	4619      	moveq	r1, r3
   d8ccc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8cd0:	d019      	beq.n	d8d06 <__aeabi_dmul+0x24a>
   d8cd2:	ea94 0f0c 	teq	r4, ip
   d8cd6:	d102      	bne.n	d8cde <__aeabi_dmul+0x222>
   d8cd8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8cdc:	d113      	bne.n	d8d06 <__aeabi_dmul+0x24a>
   d8cde:	ea95 0f0c 	teq	r5, ip
   d8ce2:	d105      	bne.n	d8cf0 <__aeabi_dmul+0x234>
   d8ce4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8ce8:	bf1c      	itt	ne
   d8cea:	4610      	movne	r0, r2
   d8cec:	4619      	movne	r1, r3
   d8cee:	d10a      	bne.n	d8d06 <__aeabi_dmul+0x24a>
   d8cf0:	ea81 0103 	eor.w	r1, r1, r3
   d8cf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8cf8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8cfc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8d00:	f04f 0000 	mov.w	r0, #0
   d8d04:	bd70      	pop	{r4, r5, r6, pc}
   d8d06:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8d0a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8d0e:	bd70      	pop	{r4, r5, r6, pc}

000d8d10 <__aeabi_ddiv>:
   d8d10:	b570      	push	{r4, r5, r6, lr}
   d8d12:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8d16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8d1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8d1e:	bf1d      	ittte	ne
   d8d20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8d24:	ea94 0f0c 	teqne	r4, ip
   d8d28:	ea95 0f0c 	teqne	r5, ip
   d8d2c:	f000 f8a7 	bleq	d8e7e <__aeabi_ddiv+0x16e>
   d8d30:	eba4 0405 	sub.w	r4, r4, r5
   d8d34:	ea81 0e03 	eor.w	lr, r1, r3
   d8d38:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8d3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8d40:	f000 8088 	beq.w	d8e54 <__aeabi_ddiv+0x144>
   d8d44:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8d48:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8d4c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8d50:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8d54:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8d58:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8d5c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8d60:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8d64:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8d68:	429d      	cmp	r5, r3
   d8d6a:	bf08      	it	eq
   d8d6c:	4296      	cmpeq	r6, r2
   d8d6e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8d72:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8d76:	d202      	bcs.n	d8d7e <__aeabi_ddiv+0x6e>
   d8d78:	085b      	lsrs	r3, r3, #1
   d8d7a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d7e:	1ab6      	subs	r6, r6, r2
   d8d80:	eb65 0503 	sbc.w	r5, r5, r3
   d8d84:	085b      	lsrs	r3, r3, #1
   d8d86:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d8a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8d8e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8d92:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d96:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d9a:	bf22      	ittt	cs
   d8d9c:	1ab6      	subcs	r6, r6, r2
   d8d9e:	4675      	movcs	r5, lr
   d8da0:	ea40 000c 	orrcs.w	r0, r0, ip
   d8da4:	085b      	lsrs	r3, r3, #1
   d8da6:	ea4f 0232 	mov.w	r2, r2, rrx
   d8daa:	ebb6 0e02 	subs.w	lr, r6, r2
   d8dae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8db2:	bf22      	ittt	cs
   d8db4:	1ab6      	subcs	r6, r6, r2
   d8db6:	4675      	movcs	r5, lr
   d8db8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8dbc:	085b      	lsrs	r3, r3, #1
   d8dbe:	ea4f 0232 	mov.w	r2, r2, rrx
   d8dc2:	ebb6 0e02 	subs.w	lr, r6, r2
   d8dc6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8dca:	bf22      	ittt	cs
   d8dcc:	1ab6      	subcs	r6, r6, r2
   d8dce:	4675      	movcs	r5, lr
   d8dd0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8dd4:	085b      	lsrs	r3, r3, #1
   d8dd6:	ea4f 0232 	mov.w	r2, r2, rrx
   d8dda:	ebb6 0e02 	subs.w	lr, r6, r2
   d8dde:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8de2:	bf22      	ittt	cs
   d8de4:	1ab6      	subcs	r6, r6, r2
   d8de6:	4675      	movcs	r5, lr
   d8de8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8dec:	ea55 0e06 	orrs.w	lr, r5, r6
   d8df0:	d018      	beq.n	d8e24 <__aeabi_ddiv+0x114>
   d8df2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8df6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8dfa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8dfe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8e02:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8e06:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8e0a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8e0e:	d1c0      	bne.n	d8d92 <__aeabi_ddiv+0x82>
   d8e10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8e14:	d10b      	bne.n	d8e2e <__aeabi_ddiv+0x11e>
   d8e16:	ea41 0100 	orr.w	r1, r1, r0
   d8e1a:	f04f 0000 	mov.w	r0, #0
   d8e1e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8e22:	e7b6      	b.n	d8d92 <__aeabi_ddiv+0x82>
   d8e24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8e28:	bf04      	itt	eq
   d8e2a:	4301      	orreq	r1, r0
   d8e2c:	2000      	moveq	r0, #0
   d8e2e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8e32:	bf88      	it	hi
   d8e34:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8e38:	f63f aeaf 	bhi.w	d8b9a <__aeabi_dmul+0xde>
   d8e3c:	ebb5 0c03 	subs.w	ip, r5, r3
   d8e40:	bf04      	itt	eq
   d8e42:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8e46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8e4a:	f150 0000 	adcs.w	r0, r0, #0
   d8e4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8e52:	bd70      	pop	{r4, r5, r6, pc}
   d8e54:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8e58:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8e5c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8e60:	bfc2      	ittt	gt
   d8e62:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8e66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8e6a:	bd70      	popgt	{r4, r5, r6, pc}
   d8e6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8e70:	f04f 0e00 	mov.w	lr, #0
   d8e74:	3c01      	subs	r4, #1
   d8e76:	e690      	b.n	d8b9a <__aeabi_dmul+0xde>
   d8e78:	ea45 0e06 	orr.w	lr, r5, r6
   d8e7c:	e68d      	b.n	d8b9a <__aeabi_dmul+0xde>
   d8e7e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8e82:	ea94 0f0c 	teq	r4, ip
   d8e86:	bf08      	it	eq
   d8e88:	ea95 0f0c 	teqeq	r5, ip
   d8e8c:	f43f af3b 	beq.w	d8d06 <__aeabi_dmul+0x24a>
   d8e90:	ea94 0f0c 	teq	r4, ip
   d8e94:	d10a      	bne.n	d8eac <__aeabi_ddiv+0x19c>
   d8e96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8e9a:	f47f af34 	bne.w	d8d06 <__aeabi_dmul+0x24a>
   d8e9e:	ea95 0f0c 	teq	r5, ip
   d8ea2:	f47f af25 	bne.w	d8cf0 <__aeabi_dmul+0x234>
   d8ea6:	4610      	mov	r0, r2
   d8ea8:	4619      	mov	r1, r3
   d8eaa:	e72c      	b.n	d8d06 <__aeabi_dmul+0x24a>
   d8eac:	ea95 0f0c 	teq	r5, ip
   d8eb0:	d106      	bne.n	d8ec0 <__aeabi_ddiv+0x1b0>
   d8eb2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8eb6:	f43f aefd 	beq.w	d8cb4 <__aeabi_dmul+0x1f8>
   d8eba:	4610      	mov	r0, r2
   d8ebc:	4619      	mov	r1, r3
   d8ebe:	e722      	b.n	d8d06 <__aeabi_dmul+0x24a>
   d8ec0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8ec4:	bf18      	it	ne
   d8ec6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8eca:	f47f aec5 	bne.w	d8c58 <__aeabi_dmul+0x19c>
   d8ece:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8ed2:	f47f af0d 	bne.w	d8cf0 <__aeabi_dmul+0x234>
   d8ed6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8eda:	f47f aeeb 	bne.w	d8cb4 <__aeabi_dmul+0x1f8>
   d8ede:	e712      	b.n	d8d06 <__aeabi_dmul+0x24a>

000d8ee0 <__gedf2>:
   d8ee0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8ee4:	e006      	b.n	d8ef4 <__cmpdf2+0x4>
   d8ee6:	bf00      	nop

000d8ee8 <__ledf2>:
   d8ee8:	f04f 0c01 	mov.w	ip, #1
   d8eec:	e002      	b.n	d8ef4 <__cmpdf2+0x4>
   d8eee:	bf00      	nop

000d8ef0 <__cmpdf2>:
   d8ef0:	f04f 0c01 	mov.w	ip, #1
   d8ef4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8ef8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8efc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8f04:	bf18      	it	ne
   d8f06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8f0a:	d01b      	beq.n	d8f44 <__cmpdf2+0x54>
   d8f0c:	b001      	add	sp, #4
   d8f0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8f12:	bf0c      	ite	eq
   d8f14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8f18:	ea91 0f03 	teqne	r1, r3
   d8f1c:	bf02      	ittt	eq
   d8f1e:	ea90 0f02 	teqeq	r0, r2
   d8f22:	2000      	moveq	r0, #0
   d8f24:	4770      	bxeq	lr
   d8f26:	f110 0f00 	cmn.w	r0, #0
   d8f2a:	ea91 0f03 	teq	r1, r3
   d8f2e:	bf58      	it	pl
   d8f30:	4299      	cmppl	r1, r3
   d8f32:	bf08      	it	eq
   d8f34:	4290      	cmpeq	r0, r2
   d8f36:	bf2c      	ite	cs
   d8f38:	17d8      	asrcs	r0, r3, #31
   d8f3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8f3e:	f040 0001 	orr.w	r0, r0, #1
   d8f42:	4770      	bx	lr
   d8f44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8f48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f4c:	d102      	bne.n	d8f54 <__cmpdf2+0x64>
   d8f4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8f52:	d107      	bne.n	d8f64 <__cmpdf2+0x74>
   d8f54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8f58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f5c:	d1d6      	bne.n	d8f0c <__cmpdf2+0x1c>
   d8f5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8f62:	d0d3      	beq.n	d8f0c <__cmpdf2+0x1c>
   d8f64:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8f68:	4770      	bx	lr
   d8f6a:	bf00      	nop

000d8f6c <__aeabi_cdrcmple>:
   d8f6c:	4684      	mov	ip, r0
   d8f6e:	4610      	mov	r0, r2
   d8f70:	4662      	mov	r2, ip
   d8f72:	468c      	mov	ip, r1
   d8f74:	4619      	mov	r1, r3
   d8f76:	4663      	mov	r3, ip
   d8f78:	e000      	b.n	d8f7c <__aeabi_cdcmpeq>
   d8f7a:	bf00      	nop

000d8f7c <__aeabi_cdcmpeq>:
   d8f7c:	b501      	push	{r0, lr}
   d8f7e:	f7ff ffb7 	bl	d8ef0 <__cmpdf2>
   d8f82:	2800      	cmp	r0, #0
   d8f84:	bf48      	it	mi
   d8f86:	f110 0f00 	cmnmi.w	r0, #0
   d8f8a:	bd01      	pop	{r0, pc}

000d8f8c <__aeabi_dcmpeq>:
   d8f8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f90:	f7ff fff4 	bl	d8f7c <__aeabi_cdcmpeq>
   d8f94:	bf0c      	ite	eq
   d8f96:	2001      	moveq	r0, #1
   d8f98:	2000      	movne	r0, #0
   d8f9a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f9e:	bf00      	nop

000d8fa0 <__aeabi_dcmplt>:
   d8fa0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8fa4:	f7ff ffea 	bl	d8f7c <__aeabi_cdcmpeq>
   d8fa8:	bf34      	ite	cc
   d8faa:	2001      	movcc	r0, #1
   d8fac:	2000      	movcs	r0, #0
   d8fae:	f85d fb08 	ldr.w	pc, [sp], #8
   d8fb2:	bf00      	nop

000d8fb4 <__aeabi_dcmple>:
   d8fb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8fb8:	f7ff ffe0 	bl	d8f7c <__aeabi_cdcmpeq>
   d8fbc:	bf94      	ite	ls
   d8fbe:	2001      	movls	r0, #1
   d8fc0:	2000      	movhi	r0, #0
   d8fc2:	f85d fb08 	ldr.w	pc, [sp], #8
   d8fc6:	bf00      	nop

000d8fc8 <__aeabi_dcmpge>:
   d8fc8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8fcc:	f7ff ffce 	bl	d8f6c <__aeabi_cdrcmple>
   d8fd0:	bf94      	ite	ls
   d8fd2:	2001      	movls	r0, #1
   d8fd4:	2000      	movhi	r0, #0
   d8fd6:	f85d fb08 	ldr.w	pc, [sp], #8
   d8fda:	bf00      	nop

000d8fdc <__aeabi_dcmpgt>:
   d8fdc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8fe0:	f7ff ffc4 	bl	d8f6c <__aeabi_cdrcmple>
   d8fe4:	bf34      	ite	cc
   d8fe6:	2001      	movcc	r0, #1
   d8fe8:	2000      	movcs	r0, #0
   d8fea:	f85d fb08 	ldr.w	pc, [sp], #8
   d8fee:	bf00      	nop

000d8ff0 <__aeabi_d2f>:
   d8ff0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8ff4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8ff8:	bf24      	itt	cs
   d8ffa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8ffe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9002:	d90d      	bls.n	d9020 <__aeabi_d2f+0x30>
   d9004:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9008:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d900c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9010:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9014:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9018:	bf08      	it	eq
   d901a:	f020 0001 	biceq.w	r0, r0, #1
   d901e:	4770      	bx	lr
   d9020:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9024:	d121      	bne.n	d906a <__aeabi_d2f+0x7a>
   d9026:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d902a:	bfbc      	itt	lt
   d902c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9030:	4770      	bxlt	lr
   d9032:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9036:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d903a:	f1c2 0218 	rsb	r2, r2, #24
   d903e:	f1c2 0c20 	rsb	ip, r2, #32
   d9042:	fa10 f30c 	lsls.w	r3, r0, ip
   d9046:	fa20 f002 	lsr.w	r0, r0, r2
   d904a:	bf18      	it	ne
   d904c:	f040 0001 	orrne.w	r0, r0, #1
   d9050:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9054:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9058:	fa03 fc0c 	lsl.w	ip, r3, ip
   d905c:	ea40 000c 	orr.w	r0, r0, ip
   d9060:	fa23 f302 	lsr.w	r3, r3, r2
   d9064:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9068:	e7cc      	b.n	d9004 <__aeabi_d2f+0x14>
   d906a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d906e:	d107      	bne.n	d9080 <__aeabi_d2f+0x90>
   d9070:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9074:	bf1e      	ittt	ne
   d9076:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d907a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d907e:	4770      	bxne	lr
   d9080:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9084:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9088:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d908c:	4770      	bx	lr
   d908e:	bf00      	nop

000d9090 <__aeabi_frsub>:
   d9090:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d9094:	e002      	b.n	d909c <__addsf3>
   d9096:	bf00      	nop

000d9098 <__aeabi_fsub>:
   d9098:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000d909c <__addsf3>:
   d909c:	0042      	lsls	r2, r0, #1
   d909e:	bf1f      	itttt	ne
   d90a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   d90a4:	ea92 0f03 	teqne	r2, r3
   d90a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   d90ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d90b0:	d06a      	beq.n	d9188 <__addsf3+0xec>
   d90b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   d90b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   d90ba:	bfc1      	itttt	gt
   d90bc:	18d2      	addgt	r2, r2, r3
   d90be:	4041      	eorgt	r1, r0
   d90c0:	4048      	eorgt	r0, r1
   d90c2:	4041      	eorgt	r1, r0
   d90c4:	bfb8      	it	lt
   d90c6:	425b      	neglt	r3, r3
   d90c8:	2b19      	cmp	r3, #25
   d90ca:	bf88      	it	hi
   d90cc:	4770      	bxhi	lr
   d90ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   d90d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d90d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   d90da:	bf18      	it	ne
   d90dc:	4240      	negne	r0, r0
   d90de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d90e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   d90e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   d90ea:	bf18      	it	ne
   d90ec:	4249      	negne	r1, r1
   d90ee:	ea92 0f03 	teq	r2, r3
   d90f2:	d03f      	beq.n	d9174 <__addsf3+0xd8>
   d90f4:	f1a2 0201 	sub.w	r2, r2, #1
   d90f8:	fa41 fc03 	asr.w	ip, r1, r3
   d90fc:	eb10 000c 	adds.w	r0, r0, ip
   d9100:	f1c3 0320 	rsb	r3, r3, #32
   d9104:	fa01 f103 	lsl.w	r1, r1, r3
   d9108:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d910c:	d502      	bpl.n	d9114 <__addsf3+0x78>
   d910e:	4249      	negs	r1, r1
   d9110:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   d9114:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d9118:	d313      	bcc.n	d9142 <__addsf3+0xa6>
   d911a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   d911e:	d306      	bcc.n	d912e <__addsf3+0x92>
   d9120:	0840      	lsrs	r0, r0, #1
   d9122:	ea4f 0131 	mov.w	r1, r1, rrx
   d9126:	f102 0201 	add.w	r2, r2, #1
   d912a:	2afe      	cmp	r2, #254	; 0xfe
   d912c:	d251      	bcs.n	d91d2 <__addsf3+0x136>
   d912e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   d9132:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   d9136:	bf08      	it	eq
   d9138:	f020 0001 	biceq.w	r0, r0, #1
   d913c:	ea40 0003 	orr.w	r0, r0, r3
   d9140:	4770      	bx	lr
   d9142:	0049      	lsls	r1, r1, #1
   d9144:	eb40 0000 	adc.w	r0, r0, r0
   d9148:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   d914c:	f1a2 0201 	sub.w	r2, r2, #1
   d9150:	d1ed      	bne.n	d912e <__addsf3+0x92>
   d9152:	fab0 fc80 	clz	ip, r0
   d9156:	f1ac 0c08 	sub.w	ip, ip, #8
   d915a:	ebb2 020c 	subs.w	r2, r2, ip
   d915e:	fa00 f00c 	lsl.w	r0, r0, ip
   d9162:	bfaa      	itet	ge
   d9164:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   d9168:	4252      	neglt	r2, r2
   d916a:	4318      	orrge	r0, r3
   d916c:	bfbc      	itt	lt
   d916e:	40d0      	lsrlt	r0, r2
   d9170:	4318      	orrlt	r0, r3
   d9172:	4770      	bx	lr
   d9174:	f092 0f00 	teq	r2, #0
   d9178:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   d917c:	bf06      	itte	eq
   d917e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   d9182:	3201      	addeq	r2, #1
   d9184:	3b01      	subne	r3, #1
   d9186:	e7b5      	b.n	d90f4 <__addsf3+0x58>
   d9188:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d918c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   d9190:	bf18      	it	ne
   d9192:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d9196:	d021      	beq.n	d91dc <__addsf3+0x140>
   d9198:	ea92 0f03 	teq	r2, r3
   d919c:	d004      	beq.n	d91a8 <__addsf3+0x10c>
   d919e:	f092 0f00 	teq	r2, #0
   d91a2:	bf08      	it	eq
   d91a4:	4608      	moveq	r0, r1
   d91a6:	4770      	bx	lr
   d91a8:	ea90 0f01 	teq	r0, r1
   d91ac:	bf1c      	itt	ne
   d91ae:	2000      	movne	r0, #0
   d91b0:	4770      	bxne	lr
   d91b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   d91b6:	d104      	bne.n	d91c2 <__addsf3+0x126>
   d91b8:	0040      	lsls	r0, r0, #1
   d91ba:	bf28      	it	cs
   d91bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   d91c0:	4770      	bx	lr
   d91c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   d91c6:	bf3c      	itt	cc
   d91c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   d91cc:	4770      	bxcc	lr
   d91ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d91d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   d91d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d91da:	4770      	bx	lr
   d91dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
   d91e0:	bf16      	itet	ne
   d91e2:	4608      	movne	r0, r1
   d91e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   d91e8:	4601      	movne	r1, r0
   d91ea:	0242      	lsls	r2, r0, #9
   d91ec:	bf06      	itte	eq
   d91ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   d91f2:	ea90 0f01 	teqeq	r0, r1
   d91f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   d91fa:	4770      	bx	lr

000d91fc <__aeabi_ui2f>:
   d91fc:	f04f 0300 	mov.w	r3, #0
   d9200:	e004      	b.n	d920c <__aeabi_i2f+0x8>
   d9202:	bf00      	nop

000d9204 <__aeabi_i2f>:
   d9204:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   d9208:	bf48      	it	mi
   d920a:	4240      	negmi	r0, r0
   d920c:	ea5f 0c00 	movs.w	ip, r0
   d9210:	bf08      	it	eq
   d9212:	4770      	bxeq	lr
   d9214:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   d9218:	4601      	mov	r1, r0
   d921a:	f04f 0000 	mov.w	r0, #0
   d921e:	e01c      	b.n	d925a <__aeabi_l2f+0x2a>

000d9220 <__aeabi_ul2f>:
   d9220:	ea50 0201 	orrs.w	r2, r0, r1
   d9224:	bf08      	it	eq
   d9226:	4770      	bxeq	lr
   d9228:	f04f 0300 	mov.w	r3, #0
   d922c:	e00a      	b.n	d9244 <__aeabi_l2f+0x14>
   d922e:	bf00      	nop

000d9230 <__aeabi_l2f>:
   d9230:	ea50 0201 	orrs.w	r2, r0, r1
   d9234:	bf08      	it	eq
   d9236:	4770      	bxeq	lr
   d9238:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   d923c:	d502      	bpl.n	d9244 <__aeabi_l2f+0x14>
   d923e:	4240      	negs	r0, r0
   d9240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9244:	ea5f 0c01 	movs.w	ip, r1
   d9248:	bf02      	ittt	eq
   d924a:	4684      	moveq	ip, r0
   d924c:	4601      	moveq	r1, r0
   d924e:	2000      	moveq	r0, #0
   d9250:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   d9254:	bf08      	it	eq
   d9256:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   d925a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   d925e:	fabc f28c 	clz	r2, ip
   d9262:	3a08      	subs	r2, #8
   d9264:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   d9268:	db10      	blt.n	d928c <__aeabi_l2f+0x5c>
   d926a:	fa01 fc02 	lsl.w	ip, r1, r2
   d926e:	4463      	add	r3, ip
   d9270:	fa00 fc02 	lsl.w	ip, r0, r2
   d9274:	f1c2 0220 	rsb	r2, r2, #32
   d9278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d927c:	fa20 f202 	lsr.w	r2, r0, r2
   d9280:	eb43 0002 	adc.w	r0, r3, r2
   d9284:	bf08      	it	eq
   d9286:	f020 0001 	biceq.w	r0, r0, #1
   d928a:	4770      	bx	lr
   d928c:	f102 0220 	add.w	r2, r2, #32
   d9290:	fa01 fc02 	lsl.w	ip, r1, r2
   d9294:	f1c2 0220 	rsb	r2, r2, #32
   d9298:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   d929c:	fa21 f202 	lsr.w	r2, r1, r2
   d92a0:	eb43 0002 	adc.w	r0, r3, r2
   d92a4:	bf08      	it	eq
   d92a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   d92aa:	4770      	bx	lr

000d92ac <__aeabi_ldivmod>:
   d92ac:	b97b      	cbnz	r3, d92ce <__aeabi_ldivmod+0x22>
   d92ae:	b972      	cbnz	r2, d92ce <__aeabi_ldivmod+0x22>
   d92b0:	2900      	cmp	r1, #0
   d92b2:	bfbe      	ittt	lt
   d92b4:	2000      	movlt	r0, #0
   d92b6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d92ba:	e006      	blt.n	d92ca <__aeabi_ldivmod+0x1e>
   d92bc:	bf08      	it	eq
   d92be:	2800      	cmpeq	r0, #0
   d92c0:	bf1c      	itt	ne
   d92c2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d92c6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d92ca:	f000 b9b1 	b.w	d9630 <__aeabi_idiv0>
   d92ce:	f1ad 0c08 	sub.w	ip, sp, #8
   d92d2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d92d6:	2900      	cmp	r1, #0
   d92d8:	db09      	blt.n	d92ee <__aeabi_ldivmod+0x42>
   d92da:	2b00      	cmp	r3, #0
   d92dc:	db1a      	blt.n	d9314 <__aeabi_ldivmod+0x68>
   d92de:	f000 f835 	bl	d934c <__udivmoddi4>
   d92e2:	f8dd e004 	ldr.w	lr, [sp, #4]
   d92e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d92ea:	b004      	add	sp, #16
   d92ec:	4770      	bx	lr
   d92ee:	4240      	negs	r0, r0
   d92f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d92f4:	2b00      	cmp	r3, #0
   d92f6:	db1b      	blt.n	d9330 <__aeabi_ldivmod+0x84>
   d92f8:	f000 f828 	bl	d934c <__udivmoddi4>
   d92fc:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9304:	b004      	add	sp, #16
   d9306:	4240      	negs	r0, r0
   d9308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d930c:	4252      	negs	r2, r2
   d930e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9312:	4770      	bx	lr
   d9314:	4252      	negs	r2, r2
   d9316:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d931a:	f000 f817 	bl	d934c <__udivmoddi4>
   d931e:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9322:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9326:	b004      	add	sp, #16
   d9328:	4240      	negs	r0, r0
   d932a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d932e:	4770      	bx	lr
   d9330:	4252      	negs	r2, r2
   d9332:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9336:	f000 f809 	bl	d934c <__udivmoddi4>
   d933a:	f8dd e004 	ldr.w	lr, [sp, #4]
   d933e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9342:	b004      	add	sp, #16
   d9344:	4252      	negs	r2, r2
   d9346:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d934a:	4770      	bx	lr

000d934c <__udivmoddi4>:
   d934c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9350:	468c      	mov	ip, r1
   d9352:	460e      	mov	r6, r1
   d9354:	4604      	mov	r4, r0
   d9356:	9d08      	ldr	r5, [sp, #32]
   d9358:	2b00      	cmp	r3, #0
   d935a:	d150      	bne.n	d93fe <__udivmoddi4+0xb2>
   d935c:	428a      	cmp	r2, r1
   d935e:	4617      	mov	r7, r2
   d9360:	d96c      	bls.n	d943c <__udivmoddi4+0xf0>
   d9362:	fab2 fe82 	clz	lr, r2
   d9366:	f1be 0f00 	cmp.w	lr, #0
   d936a:	d00b      	beq.n	d9384 <__udivmoddi4+0x38>
   d936c:	f1ce 0420 	rsb	r4, lr, #32
   d9370:	fa20 f404 	lsr.w	r4, r0, r4
   d9374:	fa01 f60e 	lsl.w	r6, r1, lr
   d9378:	ea44 0c06 	orr.w	ip, r4, r6
   d937c:	fa02 f70e 	lsl.w	r7, r2, lr
   d9380:	fa00 f40e 	lsl.w	r4, r0, lr
   d9384:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d9388:	0c22      	lsrs	r2, r4, #16
   d938a:	fbbc f0f9 	udiv	r0, ip, r9
   d938e:	fa1f f887 	uxth.w	r8, r7
   d9392:	fb09 c610 	mls	r6, r9, r0, ip
   d9396:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d939a:	fb00 f308 	mul.w	r3, r0, r8
   d939e:	42b3      	cmp	r3, r6
   d93a0:	d909      	bls.n	d93b6 <__udivmoddi4+0x6a>
   d93a2:	19f6      	adds	r6, r6, r7
   d93a4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d93a8:	f080 8122 	bcs.w	d95f0 <__udivmoddi4+0x2a4>
   d93ac:	42b3      	cmp	r3, r6
   d93ae:	f240 811f 	bls.w	d95f0 <__udivmoddi4+0x2a4>
   d93b2:	3802      	subs	r0, #2
   d93b4:	443e      	add	r6, r7
   d93b6:	1af6      	subs	r6, r6, r3
   d93b8:	b2a2      	uxth	r2, r4
   d93ba:	fbb6 f3f9 	udiv	r3, r6, r9
   d93be:	fb09 6613 	mls	r6, r9, r3, r6
   d93c2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d93c6:	fb03 f808 	mul.w	r8, r3, r8
   d93ca:	45a0      	cmp	r8, r4
   d93cc:	d909      	bls.n	d93e2 <__udivmoddi4+0x96>
   d93ce:	19e4      	adds	r4, r4, r7
   d93d0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d93d4:	f080 810a 	bcs.w	d95ec <__udivmoddi4+0x2a0>
   d93d8:	45a0      	cmp	r8, r4
   d93da:	f240 8107 	bls.w	d95ec <__udivmoddi4+0x2a0>
   d93de:	3b02      	subs	r3, #2
   d93e0:	443c      	add	r4, r7
   d93e2:	ebc8 0404 	rsb	r4, r8, r4
   d93e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d93ea:	2100      	movs	r1, #0
   d93ec:	2d00      	cmp	r5, #0
   d93ee:	d062      	beq.n	d94b6 <__udivmoddi4+0x16a>
   d93f0:	fa24 f40e 	lsr.w	r4, r4, lr
   d93f4:	2300      	movs	r3, #0
   d93f6:	602c      	str	r4, [r5, #0]
   d93f8:	606b      	str	r3, [r5, #4]
   d93fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d93fe:	428b      	cmp	r3, r1
   d9400:	d907      	bls.n	d9412 <__udivmoddi4+0xc6>
   d9402:	2d00      	cmp	r5, #0
   d9404:	d055      	beq.n	d94b2 <__udivmoddi4+0x166>
   d9406:	2100      	movs	r1, #0
   d9408:	e885 0041 	stmia.w	r5, {r0, r6}
   d940c:	4608      	mov	r0, r1
   d940e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9412:	fab3 f183 	clz	r1, r3
   d9416:	2900      	cmp	r1, #0
   d9418:	f040 8090 	bne.w	d953c <__udivmoddi4+0x1f0>
   d941c:	42b3      	cmp	r3, r6
   d941e:	d302      	bcc.n	d9426 <__udivmoddi4+0xda>
   d9420:	4282      	cmp	r2, r0
   d9422:	f200 80f8 	bhi.w	d9616 <__udivmoddi4+0x2ca>
   d9426:	1a84      	subs	r4, r0, r2
   d9428:	eb66 0603 	sbc.w	r6, r6, r3
   d942c:	2001      	movs	r0, #1
   d942e:	46b4      	mov	ip, r6
   d9430:	2d00      	cmp	r5, #0
   d9432:	d040      	beq.n	d94b6 <__udivmoddi4+0x16a>
   d9434:	e885 1010 	stmia.w	r5, {r4, ip}
   d9438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d943c:	b912      	cbnz	r2, d9444 <__udivmoddi4+0xf8>
   d943e:	2701      	movs	r7, #1
   d9440:	fbb7 f7f2 	udiv	r7, r7, r2
   d9444:	fab7 fe87 	clz	lr, r7
   d9448:	f1be 0f00 	cmp.w	lr, #0
   d944c:	d135      	bne.n	d94ba <__udivmoddi4+0x16e>
   d944e:	1bf3      	subs	r3, r6, r7
   d9450:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d9454:	fa1f fc87 	uxth.w	ip, r7
   d9458:	2101      	movs	r1, #1
   d945a:	fbb3 f0f8 	udiv	r0, r3, r8
   d945e:	0c22      	lsrs	r2, r4, #16
   d9460:	fb08 3610 	mls	r6, r8, r0, r3
   d9464:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d9468:	fb0c f300 	mul.w	r3, ip, r0
   d946c:	42b3      	cmp	r3, r6
   d946e:	d907      	bls.n	d9480 <__udivmoddi4+0x134>
   d9470:	19f6      	adds	r6, r6, r7
   d9472:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d9476:	d202      	bcs.n	d947e <__udivmoddi4+0x132>
   d9478:	42b3      	cmp	r3, r6
   d947a:	f200 80ce 	bhi.w	d961a <__udivmoddi4+0x2ce>
   d947e:	4610      	mov	r0, r2
   d9480:	1af6      	subs	r6, r6, r3
   d9482:	b2a2      	uxth	r2, r4
   d9484:	fbb6 f3f8 	udiv	r3, r6, r8
   d9488:	fb08 6613 	mls	r6, r8, r3, r6
   d948c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d9490:	fb0c fc03 	mul.w	ip, ip, r3
   d9494:	45a4      	cmp	ip, r4
   d9496:	d907      	bls.n	d94a8 <__udivmoddi4+0x15c>
   d9498:	19e4      	adds	r4, r4, r7
   d949a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d949e:	d202      	bcs.n	d94a6 <__udivmoddi4+0x15a>
   d94a0:	45a4      	cmp	ip, r4
   d94a2:	f200 80b5 	bhi.w	d9610 <__udivmoddi4+0x2c4>
   d94a6:	4613      	mov	r3, r2
   d94a8:	ebcc 0404 	rsb	r4, ip, r4
   d94ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d94b0:	e79c      	b.n	d93ec <__udivmoddi4+0xa0>
   d94b2:	4629      	mov	r1, r5
   d94b4:	4628      	mov	r0, r5
   d94b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d94ba:	f1ce 0120 	rsb	r1, lr, #32
   d94be:	fa06 f30e 	lsl.w	r3, r6, lr
   d94c2:	fa07 f70e 	lsl.w	r7, r7, lr
   d94c6:	fa20 f901 	lsr.w	r9, r0, r1
   d94ca:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d94ce:	40ce      	lsrs	r6, r1
   d94d0:	ea49 0903 	orr.w	r9, r9, r3
   d94d4:	fbb6 faf8 	udiv	sl, r6, r8
   d94d8:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d94dc:	fb08 661a 	mls	r6, r8, sl, r6
   d94e0:	fa1f fc87 	uxth.w	ip, r7
   d94e4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d94e8:	fb0a f20c 	mul.w	r2, sl, ip
   d94ec:	429a      	cmp	r2, r3
   d94ee:	fa00 f40e 	lsl.w	r4, r0, lr
   d94f2:	d90a      	bls.n	d950a <__udivmoddi4+0x1be>
   d94f4:	19db      	adds	r3, r3, r7
   d94f6:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d94fa:	f080 8087 	bcs.w	d960c <__udivmoddi4+0x2c0>
   d94fe:	429a      	cmp	r2, r3
   d9500:	f240 8084 	bls.w	d960c <__udivmoddi4+0x2c0>
   d9504:	f1aa 0a02 	sub.w	sl, sl, #2
   d9508:	443b      	add	r3, r7
   d950a:	1a9b      	subs	r3, r3, r2
   d950c:	fa1f f989 	uxth.w	r9, r9
   d9510:	fbb3 f1f8 	udiv	r1, r3, r8
   d9514:	fb08 3311 	mls	r3, r8, r1, r3
   d9518:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d951c:	fb01 f60c 	mul.w	r6, r1, ip
   d9520:	429e      	cmp	r6, r3
   d9522:	d907      	bls.n	d9534 <__udivmoddi4+0x1e8>
   d9524:	19db      	adds	r3, r3, r7
   d9526:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d952a:	d26b      	bcs.n	d9604 <__udivmoddi4+0x2b8>
   d952c:	429e      	cmp	r6, r3
   d952e:	d969      	bls.n	d9604 <__udivmoddi4+0x2b8>
   d9530:	3902      	subs	r1, #2
   d9532:	443b      	add	r3, r7
   d9534:	1b9b      	subs	r3, r3, r6
   d9536:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d953a:	e78e      	b.n	d945a <__udivmoddi4+0x10e>
   d953c:	f1c1 0e20 	rsb	lr, r1, #32
   d9540:	fa22 f40e 	lsr.w	r4, r2, lr
   d9544:	408b      	lsls	r3, r1
   d9546:	4323      	orrs	r3, r4
   d9548:	fa20 f70e 	lsr.w	r7, r0, lr
   d954c:	fa06 f401 	lsl.w	r4, r6, r1
   d9550:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d9554:	fa26 f60e 	lsr.w	r6, r6, lr
   d9558:	433c      	orrs	r4, r7
   d955a:	fbb6 f9fc 	udiv	r9, r6, ip
   d955e:	0c27      	lsrs	r7, r4, #16
   d9560:	fb0c 6619 	mls	r6, ip, r9, r6
   d9564:	fa1f f883 	uxth.w	r8, r3
   d9568:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d956c:	fb09 f708 	mul.w	r7, r9, r8
   d9570:	42b7      	cmp	r7, r6
   d9572:	fa02 f201 	lsl.w	r2, r2, r1
   d9576:	fa00 fa01 	lsl.w	sl, r0, r1
   d957a:	d908      	bls.n	d958e <__udivmoddi4+0x242>
   d957c:	18f6      	adds	r6, r6, r3
   d957e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d9582:	d241      	bcs.n	d9608 <__udivmoddi4+0x2bc>
   d9584:	42b7      	cmp	r7, r6
   d9586:	d93f      	bls.n	d9608 <__udivmoddi4+0x2bc>
   d9588:	f1a9 0902 	sub.w	r9, r9, #2
   d958c:	441e      	add	r6, r3
   d958e:	1bf6      	subs	r6, r6, r7
   d9590:	b2a0      	uxth	r0, r4
   d9592:	fbb6 f4fc 	udiv	r4, r6, ip
   d9596:	fb0c 6614 	mls	r6, ip, r4, r6
   d959a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d959e:	fb04 f808 	mul.w	r8, r4, r8
   d95a2:	45b8      	cmp	r8, r7
   d95a4:	d907      	bls.n	d95b6 <__udivmoddi4+0x26a>
   d95a6:	18ff      	adds	r7, r7, r3
   d95a8:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d95ac:	d228      	bcs.n	d9600 <__udivmoddi4+0x2b4>
   d95ae:	45b8      	cmp	r8, r7
   d95b0:	d926      	bls.n	d9600 <__udivmoddi4+0x2b4>
   d95b2:	3c02      	subs	r4, #2
   d95b4:	441f      	add	r7, r3
   d95b6:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d95ba:	ebc8 0707 	rsb	r7, r8, r7
   d95be:	fba0 8902 	umull	r8, r9, r0, r2
   d95c2:	454f      	cmp	r7, r9
   d95c4:	4644      	mov	r4, r8
   d95c6:	464e      	mov	r6, r9
   d95c8:	d314      	bcc.n	d95f4 <__udivmoddi4+0x2a8>
   d95ca:	d029      	beq.n	d9620 <__udivmoddi4+0x2d4>
   d95cc:	b365      	cbz	r5, d9628 <__udivmoddi4+0x2dc>
   d95ce:	ebba 0304 	subs.w	r3, sl, r4
   d95d2:	eb67 0706 	sbc.w	r7, r7, r6
   d95d6:	fa07 fe0e 	lsl.w	lr, r7, lr
   d95da:	40cb      	lsrs	r3, r1
   d95dc:	40cf      	lsrs	r7, r1
   d95de:	ea4e 0303 	orr.w	r3, lr, r3
   d95e2:	e885 0088 	stmia.w	r5, {r3, r7}
   d95e6:	2100      	movs	r1, #0
   d95e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d95ec:	4613      	mov	r3, r2
   d95ee:	e6f8      	b.n	d93e2 <__udivmoddi4+0x96>
   d95f0:	4610      	mov	r0, r2
   d95f2:	e6e0      	b.n	d93b6 <__udivmoddi4+0x6a>
   d95f4:	ebb8 0402 	subs.w	r4, r8, r2
   d95f8:	eb69 0603 	sbc.w	r6, r9, r3
   d95fc:	3801      	subs	r0, #1
   d95fe:	e7e5      	b.n	d95cc <__udivmoddi4+0x280>
   d9600:	4604      	mov	r4, r0
   d9602:	e7d8      	b.n	d95b6 <__udivmoddi4+0x26a>
   d9604:	4611      	mov	r1, r2
   d9606:	e795      	b.n	d9534 <__udivmoddi4+0x1e8>
   d9608:	4681      	mov	r9, r0
   d960a:	e7c0      	b.n	d958e <__udivmoddi4+0x242>
   d960c:	468a      	mov	sl, r1
   d960e:	e77c      	b.n	d950a <__udivmoddi4+0x1be>
   d9610:	3b02      	subs	r3, #2
   d9612:	443c      	add	r4, r7
   d9614:	e748      	b.n	d94a8 <__udivmoddi4+0x15c>
   d9616:	4608      	mov	r0, r1
   d9618:	e70a      	b.n	d9430 <__udivmoddi4+0xe4>
   d961a:	3802      	subs	r0, #2
   d961c:	443e      	add	r6, r7
   d961e:	e72f      	b.n	d9480 <__udivmoddi4+0x134>
   d9620:	45c2      	cmp	sl, r8
   d9622:	d3e7      	bcc.n	d95f4 <__udivmoddi4+0x2a8>
   d9624:	463e      	mov	r6, r7
   d9626:	e7d1      	b.n	d95cc <__udivmoddi4+0x280>
   d9628:	4629      	mov	r1, r5
   d962a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d962e:	bf00      	nop

000d9630 <__aeabi_idiv0>:
   d9630:	4770      	bx	lr
   d9632:	bf00      	nop

000d9634 <__cxa_atexit>:
   d9634:	b510      	push	{r4, lr}
   d9636:	4c05      	ldr	r4, [pc, #20]	; (d964c <__cxa_atexit+0x18>)
   d9638:	4613      	mov	r3, r2
   d963a:	b12c      	cbz	r4, d9648 <__cxa_atexit+0x14>
   d963c:	460a      	mov	r2, r1
   d963e:	4601      	mov	r1, r0
   d9640:	2002      	movs	r0, #2
   d9642:	f3af 8000 	nop.w
   d9646:	bd10      	pop	{r4, pc}
   d9648:	4620      	mov	r0, r4
   d964a:	bd10      	pop	{r4, pc}
   d964c:	00000000 	.word	0x00000000

000d9650 <memcmp>:
   d9650:	b510      	push	{r4, lr}
   d9652:	3901      	subs	r1, #1
   d9654:	4402      	add	r2, r0
   d9656:	4290      	cmp	r0, r2
   d9658:	d007      	beq.n	d966a <memcmp+0x1a>
   d965a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d965e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9662:	42a3      	cmp	r3, r4
   d9664:	d0f7      	beq.n	d9656 <memcmp+0x6>
   d9666:	1b18      	subs	r0, r3, r4
   d9668:	bd10      	pop	{r4, pc}
   d966a:	2000      	movs	r0, #0
   d966c:	bd10      	pop	{r4, pc}

000d966e <memcpy>:
   d966e:	b510      	push	{r4, lr}
   d9670:	1e43      	subs	r3, r0, #1
   d9672:	440a      	add	r2, r1
   d9674:	4291      	cmp	r1, r2
   d9676:	d004      	beq.n	d9682 <memcpy+0x14>
   d9678:	f811 4b01 	ldrb.w	r4, [r1], #1
   d967c:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9680:	e7f8      	b.n	d9674 <memcpy+0x6>
   d9682:	bd10      	pop	{r4, pc}

000d9684 <memmove>:
   d9684:	4288      	cmp	r0, r1
   d9686:	b510      	push	{r4, lr}
   d9688:	eb01 0302 	add.w	r3, r1, r2
   d968c:	d801      	bhi.n	d9692 <memmove+0xe>
   d968e:	1e42      	subs	r2, r0, #1
   d9690:	e00b      	b.n	d96aa <memmove+0x26>
   d9692:	4298      	cmp	r0, r3
   d9694:	d2fb      	bcs.n	d968e <memmove+0xa>
   d9696:	1881      	adds	r1, r0, r2
   d9698:	1ad2      	subs	r2, r2, r3
   d969a:	42d3      	cmn	r3, r2
   d969c:	d004      	beq.n	d96a8 <memmove+0x24>
   d969e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d96a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d96a6:	e7f8      	b.n	d969a <memmove+0x16>
   d96a8:	bd10      	pop	{r4, pc}
   d96aa:	4299      	cmp	r1, r3
   d96ac:	d004      	beq.n	d96b8 <memmove+0x34>
   d96ae:	f811 4b01 	ldrb.w	r4, [r1], #1
   d96b2:	f802 4f01 	strb.w	r4, [r2, #1]!
   d96b6:	e7f8      	b.n	d96aa <memmove+0x26>
   d96b8:	bd10      	pop	{r4, pc}

000d96ba <memset>:
   d96ba:	4402      	add	r2, r0
   d96bc:	4603      	mov	r3, r0
   d96be:	4293      	cmp	r3, r2
   d96c0:	d002      	beq.n	d96c8 <memset+0xe>
   d96c2:	f803 1b01 	strb.w	r1, [r3], #1
   d96c6:	e7fa      	b.n	d96be <memset+0x4>
   d96c8:	4770      	bx	lr
	...

000d96cc <srand>:
   d96cc:	b538      	push	{r3, r4, r5, lr}
   d96ce:	4b12      	ldr	r3, [pc, #72]	; (d9718 <srand+0x4c>)
   d96d0:	681c      	ldr	r4, [r3, #0]
   d96d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d96d4:	4605      	mov	r5, r0
   d96d6:	b9d3      	cbnz	r3, d970e <srand+0x42>
   d96d8:	2018      	movs	r0, #24
   d96da:	f7fc fcf7 	bl	d60cc <malloc>
   d96de:	f243 330e 	movw	r3, #13070	; 0x330e
   d96e2:	63a0      	str	r0, [r4, #56]	; 0x38
   d96e4:	8003      	strh	r3, [r0, #0]
   d96e6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d96ea:	8043      	strh	r3, [r0, #2]
   d96ec:	f241 2334 	movw	r3, #4660	; 0x1234
   d96f0:	8083      	strh	r3, [r0, #4]
   d96f2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d96f6:	80c3      	strh	r3, [r0, #6]
   d96f8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d96fc:	8103      	strh	r3, [r0, #8]
   d96fe:	2305      	movs	r3, #5
   d9700:	8143      	strh	r3, [r0, #10]
   d9702:	230b      	movs	r3, #11
   d9704:	8183      	strh	r3, [r0, #12]
   d9706:	2201      	movs	r2, #1
   d9708:	2300      	movs	r3, #0
   d970a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d970e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9710:	2200      	movs	r2, #0
   d9712:	611d      	str	r5, [r3, #16]
   d9714:	615a      	str	r2, [r3, #20]
   d9716:	bd38      	pop	{r3, r4, r5, pc}
   d9718:	2003e248 	.word	0x2003e248

000d971c <strcpy>:
   d971c:	4603      	mov	r3, r0
   d971e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9722:	f803 2b01 	strb.w	r2, [r3], #1
   d9726:	2a00      	cmp	r2, #0
   d9728:	d1f9      	bne.n	d971e <strcpy+0x2>
   d972a:	4770      	bx	lr

000d972c <strlen>:
   d972c:	4603      	mov	r3, r0
   d972e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9732:	2a00      	cmp	r2, #0
   d9734:	d1fb      	bne.n	d972e <strlen+0x2>
   d9736:	1a18      	subs	r0, r3, r0
   d9738:	3801      	subs	r0, #1
   d973a:	4770      	bx	lr

000d973c <strnlen>:
   d973c:	b510      	push	{r4, lr}
   d973e:	4603      	mov	r3, r0
   d9740:	4401      	add	r1, r0
   d9742:	428b      	cmp	r3, r1
   d9744:	d004      	beq.n	d9750 <strnlen+0x14>
   d9746:	781a      	ldrb	r2, [r3, #0]
   d9748:	1c5c      	adds	r4, r3, #1
   d974a:	b10a      	cbz	r2, d9750 <strnlen+0x14>
   d974c:	4623      	mov	r3, r4
   d974e:	e7f8      	b.n	d9742 <strnlen+0x6>
   d9750:	1a18      	subs	r0, r3, r0
   d9752:	bd10      	pop	{r4, pc}

000d9754 <dynalib_user>:
   d9754:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d9764:	0000 0000                                   ....

000d9768 <CSWTCH.20>:
   d9768:	0100 0102 0103 0101 0104 0101 0101 0101     ................
   d9778:	4a05 686f 206e 655a 6568 6e74 7265 2020     .John Zehetner  
   d9788:	2020 4620 6b61 2065 654b 7473 6572 006c        Fake Kestrel.
   d9798:	654b 7473 6572 206c 7962 4e20 004b 4946     Kestrel by NK.FI
   d97a8:	4552 2d20 3220 3333 3334 3935 3500 3035     RE - 2334359.550
   d97b8:	4630 4c57 5200 7665 3120 4231 3100 322e     0FWL.Rev 11B.1.2
   d97c8:	0031 4946 4552 5300 6174 7574 2073 203d     1.FIRE.Status = 
   d97d8:	3025 0058 3425 312e 2066 504d 2048 2520     %0X.%4.1f MPH  %
   d97e8:	2e33 6630 6325 2020 3325 302e 2566 4663     3.0f%c  %3.0f%cF
   d97f8:	2020 3225 302e 2566 0025 3425 312e 2066       %2.0f%%.%4.1f 
   d9808:	504d 2048 2520 2e33 6630 6325 2020 3525     MPH  %3.0f%c  %5
   d9818:	312e 6d66 2042 4220 7461 3325 302e 2566     .1fmB  Bat%3.0f%
   d9828:	0025 7257 6e6f 2067 6373 6572 6e65 6e20     %.Wrong screen n
   d9838:	6d75 6562 0072 3330 3932 3030 3030 452d     umber.03290000-E
   d9848:	4241 2d34 4544 3141 422d 3432 2d45 3434     AB4-DEA1-B24E-44
   d9858:	4345 3230 3833 3437 4244 3000 3030 3130     EC023874DB.00001
   d9868:	3038 2d61 3030 3030 312d 3030 2d30 3038     80a-0000-1000-80
   d9878:	3030 302d 3830 3530 3966 3362 6634 0062     00-00805f9b34fb.
   d9888:	3030 3030 3831 6630 302d 3030 2d30 3031     0000180f-0000-10
   d9898:	3030 382d 3030 2d30 3030 3038 6635 6239     00-8000-00805f9b
   d98a8:	3433 6266 3000 3030 3230 3261 2d39 3030     34fb.00002a29-00
   d98b8:	3030 312d 3030 2d30 3038 3030 302d 3830     00-1000-8000-008
   d98c8:	3530 3966 3362 6634 0062 3030 3030 6132     05f9b34fb.00002a
   d98d8:	3030 302d 3030 2d30 3031 3030 382d 3030     00-0000-1000-800
   d98e8:	2d30 3030 3038 6635 6239 3433 6266 3000     0-00805f9b34fb.0
   d98f8:	3030 3230 3061 2d31 3030 3030 312d 3030     0002a01-0000-100
   d9908:	2d30 3038 3030 302d 3830 3530 3966 3362     0-8000-00805f9b3
   d9918:	6634 0062 3030 3030 6132 3532 302d 3030     4fb.00002a25-000
   d9928:	2d30 3031 3030 382d 3030 2d30 3030 3038     0-1000-8000-0080
   d9938:	6635 6239 3433 6266 3000 3030 3230 3261     5f9b34fb.00002a2
   d9948:	2d37 3030 3030 312d 3030 2d30 3038 3030     7-0000-1000-8000
   d9958:	302d 3830 3530 3966 3362 6634 0062 3030     -00805f9b34fb.00
   d9968:	3030 6132 3632 302d 3030 2d30 3031 3030     002a26-0000-1000
   d9978:	382d 3030 2d30 3030 3038 6635 6239 3433     -8000-00805f9b34
   d9988:	6266 3000 3030 3230 3261 2d38 3030 3030     fb.00002a28-0000
   d9998:	312d 3030 2d30 3038 3030 302d 3830 3530     -1000-8000-00805
   d99a8:	3966 3362 6634 0062 3030 3030 6132 3432     f9b34fb.00002a24
   d99b8:	302d 3030 2d30 3031 3030 382d 3030 2d30     -0000-1000-8000-
   d99c8:	3030 3038 6635 6239 3433 6266 3000 3233     00805f9b34fb.032
   d99d8:	3039 3133 2d30 4145 3442 442d 4145 2d31     90310-EAB4-DEA1-
   d99e8:	3242 4534 342d 4534 3043 3332 3738 4434     B24E-44EC023874D
   d99f8:	0042 3330 3932 3330 3032 452d 4241 2d34     B.03290320-EAB4-
   d9a08:	4544 3141 422d 3432 2d45 3434 4345 3230     DEA1-B24E-44EC02
   d9a18:	3833 3437 4244 3000 3030 3230 3161 2d39     3874DB.00002a19-
   d9a28:	3030 3030 312d 3030 2d30 3038 3030 302d     0000-1000-8000-0
   d9a38:	3830 3530 3966 3362 6634 0062 6564 6976     0805f9b34fb.devi
   d9a48:	6563 6e20 6d61 0065 7041 6570 7261 6e61     ce name.Appearan
   d9a58:	6563 6d00 6766 6e20 6d61 0065 6f6d 6564     ce.mfg name.mode
   d9a68:	206c 756e 626d 7265 7300 7265 6169 206c     l number.serial 
   d9a78:	756e 626d 7265 6800 7261 7764 7261 2065     number.hardware 
   d9a88:	6576 7372 6f69 006e 6966 6d72 6177 6572     version.firmware
   d9a98:	7620 7265 6973 6e6f 7300 666f 7774 7261      version.softwar
   d9aa8:	2065 6576 7372 6f69 006e 6843 7261 6361     e version.Charac
   d9ab8:	6574 6972 7473 6369 3120 2d36 6962 0074     teristic 16-bit.
   d9ac8:	6843 7261 6361 6574 6972 7473 6369 3320     Characteristic 3
   d9ad8:	2d32 6962 0074 6142 7474 7265 2079 614c     2-bit.Battery La
   d9ae8:	6576 006c                                   vel.

000d9aec <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9af4:	611f 000d 6125 000d 6e85 000d 614f 000d     .a..%a...n..Oa..
   d9b04:	6121 000d                                   !a..

000d9b08 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9b10:	6119 000d 6133 000d 6f91 000d 6153 000d     .a..3a...o..Sa..
   d9b20:	611b 000d                                   .a..

000d9b24 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9b2c:	6113 000d 6141 000d 6971 000d 6157 000d     .a..Aa..qi..Wa..
   d9b3c:	6115 000d                                   .a..

000d9b40 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d9b40:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   d9b50:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   d9b60:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   d9b70:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   d9b80:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   d9b90:	7265 7369 6974 7363 002e 6550 7265 6420     eristics..Peer d
   d9ba0:	7665 6369 2065 7369 6d20 7369 6973 676e     evice is missing
   d9bb0:	0021 6146 6c69 6465 7420 206f 7061 6570     !.Failed to appe
   d9bc0:	646e 7020 6565 2072 6543 746e 6172 206c     nd peer Central 
   d9bd0:	6564 6976 6563 002e 6f43 6e6e 6365 6574     device..Connecte
   d9be0:	2064 7962 4320 6e65 7274 6c61 6420 7665     d by Central dev
   d9bf0:	6369 2e65 4400 7369 6f63 6e6e 6365 6574     ice..Disconnecte
   d9c00:	2064 7962 7220 6d65 746f 2065 6564 6976     d by remote devi
   d9c10:	6563 002e 6143 6e6e 746f 6120 6464 6e20     ce..Cannot add n
   d9c20:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   d9c30:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   d9c40:	2073 6f63 6e6e 6365 6574 2e64 4600 6961     s connected..Fai
   d9c50:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d9c60:	6373 766f 7265 6465 6320 6168 6172 7463     scovered charact
   d9c70:	7265 7369 6974 2e63 4600 6961 656c 2064     eristic..Failed 
   d9c80:	6f74 6120 7070 6e65 2064 6964 6373 766f     to append discov
   d9c90:	7265 6465 7320 7265 6976 6563 002e 6146     ered service..Fa
   d9ca0:	6c69 6465 7420 206f 7061 6570 646e 6c20     iled to append l
   d9cb0:	636f 6c61 6320 6168 6172 7463 7265 7369     ocal characteris
   d9cc0:	6974 2e63 4400 7075 696c 6163 6574 2064     tic..Duplicated 
   d9cd0:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   d9ce0:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..

000d9cf0 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d9cf0:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000d9d00 <_ZTVN5spark13EthernetClassE>:
	...
   d9d08:	72d9 000d 72cf 000d 72c5 000d 72bb 000d     .r...r...r...r..
   d9d18:	72af 000d 72a3 000d 7297 000d 728f 000d     .r...r...r...r..
   d9d28:	7285 000d 727b 000d 772d 000d               .r..{r..-w..

000d9d34 <_ZTV7TwoWire>:
	...
   d9d3c:	72f9 000d 7343 000d 731b 000d 72fb 000d     .r..Cs...s...r..
   d9d4c:	7323 000d 732b 000d 7333 000d 733b 000d     #s..+s..3s..;s..

000d9d5c <_ZTV9IPAddress>:
	...
   d9d64:	7465 000d 7455 000d 7457 000d 6162 6475     et..Ut..Wt..baud
   d9d74:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d9d84:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d9d94:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d9da4:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d9db4:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d9dc4:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d9dd4:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d9de4:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d9df4:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d9e04:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d9e14:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d9e24:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d9e34:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d9e44:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d9e54 <_ZTVN5spark9MeshClassE>:
	...
   d9e5c:	75a7 000d 759d 000d 7593 000d 7589 000d     .u...u...u...u..
   d9e6c:	757d 000d 7571 000d 7565 000d 755d 000d     }u..qu..eu..]u..
   d9e7c:	7553 000d 7549 000d 772d 000d               Su..Iu..-w..

000d9e88 <_ZTVN5spark12NetworkClassE>:
	...
   d9e90:	76c5 000d 76cf 000d 76d9 000d 76e3 000d     .v...v...v...v..
   d9ea0:	76ed 000d 76f9 000d 7705 000d 7711 000d     .v...v...w...w..
   d9eb0:	7719 000d 7723 000d 772d 000d               .w..#w..-w..

000d9ebc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9ebc:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   d9ecc:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d9edc:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d9eec:	0000 0000                                   ....

000d9ef0 <_ZTV11USARTSerial>:
	...
   d9ef8:	7b39 000d 7b89 000d 7b97 000d 780d 000d     9{...{...{...x..
   d9f08:	7b4d 000d 7b6f 000d 7b5b 000d 7b83 000d     M{..o{..[{...{..
   d9f18:	7b3b 000d 7b3f 000d                         ;{..?{..

000d9f20 <_ZTV9USBSerial>:
	...
   d9f28:	7c89 000d 7cd9 000d 7ce7 000d 780d 000d     .|...|...|...x..
   d9f38:	7cc5 000d 7c8b 000d 7ca1 000d 7cd3 000d     .|...|...|...|..
   d9f48:	7cb7 000d 7c85 000d                         .|...|..

000d9f50 <_ZTVN5spark9WiFiClassE>:
	...
   d9f58:	7df3 000d 7de9 000d 7ddf 000d 7d95 000d     .}...}...}...}..
   d9f68:	7dd3 000d 7dc7 000d 7dbb 000d 7db3 000d     .}...}...}...}..
   d9f78:	7da9 000d 7d9f 000d 772d 000d               .}...}..-w..

000d9f84 <_ZSt7nothrow>:
   d9f84:	0000 0000                                   ....

000d9f88 <atanlo>:
   d9f88:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3

000d9f98 <atanhi>:
   d9f98:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000d9fa8 <__sf_fake_stdin>:
	...

000d9fc8 <__sf_fake_stdout>:
	...

000d9fe8 <__sf_fake_stderr>:
	...
   da008:	0043                                        C.

000da00a <link_const_variable_data_end>:
	...

000da00c <link_constructors_location>:
   da00c:	000d45c3 	.word	0x000d45c3
   da010:	000d4e2d 	.word	0x000d4e2d
   da014:	000d5afd 	.word	0x000d5afd
   da018:	000d7241 	.word	0x000d7241
   da01c:	000d72e5 	.word	0x000d72e5
   da020:	000d7539 	.word	0x000d7539
   da024:	000d7675 	.word	0x000d7675
   da028:	000d77f9 	.word	0x000d77f9
   da02c:	000d788d 	.word	0x000d788d
   da030:	000d7af1 	.word	0x000d7af1
   da034:	000d7b25 	.word	0x000d7b25
   da038:	000d7dfd 	.word	0x000d7dfd
   da03c:	000d80d5 	.word	0x000d80d5
   da040:	000d8199 	.word	0x000d8199
   da044:	000d821d 	.word	0x000d821d
   da048:	000d82a1 	.word	0x000d82a1

000da04c <link_constructors_end>:
   da04c:	00000000 	.word	0x00000000
