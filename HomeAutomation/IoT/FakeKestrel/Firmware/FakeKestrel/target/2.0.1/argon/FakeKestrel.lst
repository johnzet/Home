
/Users/johnzet/projects/Home/HomeAutomation/IoT/FakeKestrel/Firmware/FakeKestrel/target/2.0.1/argon/FakeKestrel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006000  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000da020  000da020  0000a020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000da028  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  2003e3a4  000da02c  0001e3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003e4  2003e40c  2003e40c  0002e40c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000da094  000da094  0002a094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000da0bc  000da0bc  0002a0bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00164183  00000000  00000000  0002a0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00016fbe  00000000  00000000  0018e243  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002d98d  00000000  00000000  001a5201  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002c30  00000000  00000000  001d2b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00007d70  00000000  00000000  001d57be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003a597  00000000  00000000  001dd52e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003aac1  00000000  00000000  00217ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010de9b  00000000  00000000  00252586  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00007d84  00000000  00000000  00360424  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fabd 	bl	d95b0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fadf 	bl	d9600 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e3a4 	.word	0x2003e3a4
   d404c:	000da02c 	.word	0x000da02c
   d4050:	2003e40c 	.word	0x2003e40c
   d4054:	2003e40c 	.word	0x2003e40c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 ff31 	bl	d7ec8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9ff4 	.word	0x000d9ff4
   d4080:	000da018 	.word	0x000da018

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba7a 	b.w	d457c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fb01 	bl	d4690 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 bedb 	b.w	d7e4c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 b8a3 	b.w	d61e0 <malloc>

000d409a <_Znaj>:
   d409a:	f002 b8a1 	b.w	d61e0 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 b8a7 	b.w	d61f0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40b2:	b510      	push	{r4, lr}
   d40b4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40b6:	6800      	ldr	r0, [r0, #0]
   d40b8:	b108      	cbz	r0, d40be <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40ba:	f002 f899 	bl	d61f0 <free>
class SystemClass {
   d40be:	4620      	mov	r0, r4
   d40c0:	bd10      	pop	{r4, pc}

000d40c2 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d40c2:	b513      	push	{r0, r1, r4, lr}
   d40c4:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d40c6:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d40c8:	b159      	cbz	r1, d40e2 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d40ca:	9101      	str	r1, [sp, #4]
   d40cc:	f005 fad6 	bl	d967c <strlen>
   d40d0:	6823      	ldr	r3, [r4, #0]
   d40d2:	9901      	ldr	r1, [sp, #4]
   d40d4:	68db      	ldr	r3, [r3, #12]
   d40d6:	4602      	mov	r2, r0
   d40d8:	4620      	mov	r0, r4
    }
   d40da:	b002      	add	sp, #8
   d40dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d40e0:	4718      	bx	r3
    }
   d40e2:	b002      	add	sp, #8
   d40e4:	bd10      	pop	{r4, pc}

000d40e6 <_ZN11USARTSerial5writeEi>:
  bool breakRx(void);

  inline size_t write(unsigned long n) { return write((uint16_t)n); }
  inline size_t write(long n) { return write((uint16_t)n); }
  inline size_t write(unsigned int n) { return write((uint16_t)n); }
  inline size_t write(int n) { return write((uint16_t)n); }
   d40e6:	b289      	uxth	r1, r1
   d40e8:	f003 bd81 	b.w	d7bee <_ZN11USARTSerial5writeEt>

000d40ec <_Z21setBluetoothDataBytes13sampleBytes_t>:
    sampleBytes.altitude = static_cast<uint32_t>(sample.altitudeM * 10000);

    setBluetoothDataBytes(sampleBytes);
}

void setBluetoothDataBytes(sampleBytes_t sampleBytes) {
   d40ec:	b510      	push	{r4, lr}
   d40ee:	b08a      	sub	sp, #40	; 0x28
   d40f0:	466c      	mov	r4, sp
   d40f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint8_t data32bit[bufferSize]; 
    memset(data16bit, 0, bufferSize);
    memset(data32bit, 0, bufferSize);

    // memcpy will copy in reverse order since this is a little-endian machine
    memcpy(data16bit+0, &sampleBytes.windSpeed, sizeof(sampleBytes.windSpeed));
   d40f6:	f8bd 3000 	ldrh.w	r3, [sp]
   d40fa:	f8ad 3010 	strh.w	r3, [sp, #16]
    memcpy(data16bit+2, &sampleBytes.temperature, sizeof(sampleBytes.temperature));
   d40fe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d4102:	f8ad 3012 	strh.w	r3, [sp, #18]
    memcpy(data16bit+6, &sampleBytes.humidity, sizeof(sampleBytes.humidity));
   d4106:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d410a:	f8ad 3016 	strh.w	r3, [sp, #22]
    memcpy(data16bit+8, &sampleBytes.pressure, sizeof(sampleBytes.pressure));
   d410e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   d4112:	f8ad 3018 	strh.w	r3, [sp, #24]
    memcpy(data16bit+10, &sampleBytes.windDirection, sizeof(sampleBytes.windDirection));
   d4116:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   d411a:	f8ad 301a 	strh.w	r3, [sp, #26]
    memset(data16bit, 0, bufferSize);
   d411e:	2400      	movs	r4, #0
    memcpy(data32bit+4, &sampleBytes.altitude, sizeof(sampleBytes.altitude));
   d4120:	9b03      	ldr	r3, [sp, #12]
   d4122:	9308      	str	r3, [sp, #32]
    
    characteristic16bit.setValue(data16bit, bufferSize);
   d4124:	a904      	add	r1, sp, #16
   d4126:	4623      	mov	r3, r4
   d4128:	220c      	movs	r2, #12
   d412a:	4807      	ldr	r0, [pc, #28]	; (d4148 <_Z21setBluetoothDataBytes13sampleBytes_t+0x5c>)
    memset(data16bit, 0, bufferSize);
   d412c:	f8ad 4014 	strh.w	r4, [sp, #20]
    memset(data32bit, 0, bufferSize);
   d4130:	9407      	str	r4, [sp, #28]
   d4132:	9409      	str	r4, [sp, #36]	; 0x24
    characteristic16bit.setValue(data16bit, bufferSize);
   d4134:	f002 fb5c 	bl	d67f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    characteristic32bit.setValue(data32bit, bufferSize);
   d4138:	4623      	mov	r3, r4
   d413a:	220c      	movs	r2, #12
   d413c:	a907      	add	r1, sp, #28
   d413e:	4803      	ldr	r0, [pc, #12]	; (d414c <_Z21setBluetoothDataBytes13sampleBytes_t+0x60>)
   d4140:	f002 fb56 	bl	d67f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
}
   d4144:	b00a      	add	sp, #40	; 0x28
   d4146:	bd10      	pop	{r4, pc}
   d4148:	2003e6a0 	.word	0x2003e6a0
   d414c:	2003e6a8 	.word	0x2003e6a8

000d4150 <_Z16setBluetoothData8sample_t>:
void setBluetoothData(sample_t sample) {
   d4150:	b084      	sub	sp, #16
   d4152:	b084      	sub	sp, #16
   d4154:	f10d 0c10 	add.w	ip, sp, #16
   d4158:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
   d415c:	ed9f 7a21 	vldr	s14, [pc, #132]	; d41e4 <_Z16setBluetoothData8sample_t+0x94>
   d4160:	eddd 7a04 	vldr	s15, [sp, #16]
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
   d4164:	eddf 6a20 	vldr	s13, [pc, #128]	; d41e8 <_Z16setBluetoothData8sample_t+0x98>
    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
   d4168:	ee67 7a87 	vmul.f32	s15, s15, s14
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
   d416c:	ed9d 7a06 	vldr	s14, [sp, #24]
    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
   d4170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
   d4174:	ee27 7a26 	vmul.f32	s14, s14, s13
    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
   d4178:	ee17 3a90 	vmov	r3, s15
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
   d417c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    sampleBytes.humidity = static_cast<uint16_t>(sample.humidity * 100);
   d4180:	eddd 7a07 	vldr	s15, [sp, #28]
    sampleBytes.windSpeed = static_cast<uint16_t>(sample.windSpeedMps * 1000);
   d4184:	f8ad 3000 	strh.w	r3, [sp]
    sampleBytes.humidity = static_cast<uint16_t>(sample.humidity * 100);
   d4188:	ee67 7aa6 	vmul.f32	s15, s15, s13
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
   d418c:	ee17 3a10 	vmov	r3, s14
    sampleBytes.pressure = static_cast<uint16_t>(sample.pressureBar * 10000);
   d4190:	eddf 6a16 	vldr	s13, [pc, #88]	; d41ec <_Z16setBluetoothData8sample_t+0x9c>
   d4194:	ed9d 7a08 	vldr	s14, [sp, #32]
    sampleBytes.temperature = static_cast<uint16_t>(sample.temperatureC * 100);
   d4198:	f8ad 3004 	strh.w	r3, [sp, #4]
    sampleBytes.humidity = static_cast<uint16_t>(sample.humidity * 100);
   d419c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    sampleBytes.pressure = static_cast<uint16_t>(sample.pressureBar * 10000);
   d41a0:	ee27 7a26 	vmul.f32	s14, s14, s13
    sampleBytes.humidity = static_cast<uint16_t>(sample.humidity * 100);
   d41a4:	ee17 3a90 	vmov	r3, s15
    sampleBytes.pressure = static_cast<uint16_t>(sample.pressureBar * 10000);
   d41a8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    sampleBytes.humidity = static_cast<uint16_t>(sample.humidity * 100);
   d41ac:	f8ad 3006 	strh.w	r3, [sp, #6]
    sampleBytes.altitude = static_cast<uint32_t>(sample.altitudeM * 10000);
   d41b0:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
    sampleBytes.pressure = static_cast<uint16_t>(sample.pressureBar * 10000);
   d41b4:	ee17 3a10 	vmov	r3, s14
    sampleBytes.windDirection = static_cast<uint16_t>(sample.windDirectionDeg);
   d41b8:	ed9d 7a05 	vldr	s14, [sp, #20]
    sampleBytes.pressure = static_cast<uint16_t>(sample.pressureBar * 10000);
   d41bc:	f8ad 3008 	strh.w	r3, [sp, #8]
    sampleBytes.windDirection = static_cast<uint16_t>(sample.windDirectionDeg);
   d41c0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    sampleBytes.altitude = static_cast<uint32_t>(sample.altitudeM * 10000);
   d41c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    sampleBytes.windDirection = static_cast<uint16_t>(sample.windDirectionDeg);
   d41c8:	ee17 3a10 	vmov	r3, s14
    sampleBytes.altitude = static_cast<uint32_t>(sample.altitudeM * 10000);
   d41cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    sampleBytes.windDirection = static_cast<uint16_t>(sample.windDirectionDeg);
   d41d0:	f8ad 3002 	strh.w	r3, [sp, #2]
    sampleBytes.altitude = static_cast<uint32_t>(sample.altitudeM * 10000);
   d41d4:	edcd 7a03 	vstr	s15, [sp, #12]
    setBluetoothDataBytes(sampleBytes);
   d41d8:	e91c 000f 	ldmdb	ip, {r0, r1, r2, r3}
}
   d41dc:	b004      	add	sp, #16
   d41de:	b004      	add	sp, #16
    setBluetoothDataBytes(sampleBytes);
   d41e0:	f7ff bf84 	b.w	d40ec <_Z21setBluetoothDataBytes13sampleBytes_t>
   d41e4:	447a0000 	.word	0x447a0000
   d41e8:	42c80000 	.word	0x42c80000
   d41ec:	461c4000 	.word	0x461c4000

000d41f0 <_Z8setupLCDv>:
    // WiFi.setCredentials("zhome", "fydua1vare", WPA2);
    WiFi.connect();
    Particle.connect();
}

void setupLCD() {
   d41f0:	b508      	push	{r3, lr}
    Serial1.begin(9600); //Begin communication with OpenLCD
   d41f2:	f003 fcff 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d41f6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41fa:	f003 fcf5 	bl	d7be8 <_ZN11USARTSerial5beginEm>
    
    delay(250);
   d41fe:	20fa      	movs	r0, #250	; 0xfa
   d4200:	f002 f816 	bl	d6230 <delay>

    Serial1.write('|'); //Put LCD into setting mode
   d4204:	f003 fcf6 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d4208:	217c      	movs	r1, #124	; 0x7c
   d420a:	f7ff ff6c 	bl	d40e6 <_ZN11USARTSerial5writeEi>
    Serial1.write('-'); //Clear
   d420e:	f003 fcf1 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d4212:	212d      	movs	r1, #45	; 0x2d
   d4214:	f7ff ff67 	bl	d40e6 <_ZN11USARTSerial5writeEi>

    Serial1.write('|'); //Put LCD into setting mode
   d4218:	f003 fcec 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d421c:	217c      	movs	r1, #124	; 0x7c
   d421e:	f7ff ff62 	bl	d40e6 <_ZN11USARTSerial5writeEi>
    Serial1.write(128 + 0); //Set white/red backlight amount to 0-29    
   d4222:	f003 fce7 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d4226:	2180      	movs	r1, #128	; 0x80
   d4228:	f7ff ff5d 	bl	d40e6 <_ZN11USARTSerial5writeEi>

    Serial1.write('|'); //Put LCD into setting mode
   d422c:	f003 fce2 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d4230:	217c      	movs	r1, #124	; 0x7c
   d4232:	f7ff ff58 	bl	d40e6 <_ZN11USARTSerial5writeEi>
    Serial1.write(158 + 0); //Set green backlight amount to 0-29
   d4236:	f003 fcdd 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d423a:	219e      	movs	r1, #158	; 0x9e
   d423c:	f7ff ff53 	bl	d40e6 <_ZN11USARTSerial5writeEi>

    Serial1.write('|'); //Put LCD into setting mode
   d4240:	f003 fcd8 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d4244:	217c      	movs	r1, #124	; 0x7c
   d4246:	f7ff ff4e 	bl	d40e6 <_ZN11USARTSerial5writeEi>
    Serial1.write(188 + 15); //Set blue backlight amount to 0-29
   d424a:	f003 fcd3 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d424e:	21cb      	movs	r1, #203	; 0xcb
   d4250:	f7ff ff49 	bl	d40e6 <_ZN11USARTSerial5writeEi>

    Serial1.write('|'); //Put LCD into setting mode
   d4254:	f003 fcce 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d4258:	217c      	movs	r1, #124	; 0x7c
   d425a:	f7ff ff44 	bl	d40e6 <_ZN11USARTSerial5writeEi>
    Serial1.write('-'); //Clear
   d425e:	f003 fcc9 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d4262:	212d      	movs	r1, #45	; 0x2d
   d4264:	f7ff ff3f 	bl	d40e6 <_ZN11USARTSerial5writeEi>

    Serial1.write("John Zehetner     Fake Kestrel");
   d4268:	f003 fcc4 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d426c:	4904      	ldr	r1, [pc, #16]	; (d4280 <_Z8setupLCDv+0x90>)
   d426e:	f7ff ff28 	bl	d40c2 <_ZN5Print5writeEPKc>
    delay(1000);
}
   d4272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(1000);
   d4276:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d427a:	f001 bfd9 	b.w	d6230 <delay>
   d427e:	bf00      	nop
   d4280:	000d96bc 	.word	0x000d96bc

000d4284 <_Z8setupBLEv>:

void setupBLE() {
   d4284:	b510      	push	{r4, lr}
   d4286:	b09a      	sub	sp, #104	; 0x68
    BLE.selectAntenna((BleAntennaType) BLE_ANT_EXTERNAL);
   d4288:	f002 fbbe 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d428c:	2102      	movs	r1, #2
   d428e:	f002 fc24 	bl	d6ada <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
    BLE.on();
   d4292:	f002 fbb9 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4296:	f002 fc01 	bl	d6a9c <_ZNK8particle14BleLocalDevice2onEv>
    BLE.addCharacteristic(modelNumberCharacteristic);
   d429a:	f002 fbb5 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d429e:	4a6d      	ldr	r2, [pc, #436]	; (d4454 <_Z8setupBLEv+0x1d0>)
   d42a0:	4601      	mov	r1, r0
   d42a2:	a811      	add	r0, sp, #68	; 0x44
   d42a4:	f002 ff70 	bl	d7188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d42a8:	a811      	add	r0, sp, #68	; 0x44
   d42aa:	f002 fcaf 	bl	d6c0c <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(mfgNameCharacteristic);
   d42ae:	f002 fbab 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42b2:	4a69      	ldr	r2, [pc, #420]	; (d4458 <_Z8setupBLEv+0x1d4>)
   d42b4:	4601      	mov	r1, r0
   d42b6:	a811      	add	r0, sp, #68	; 0x44
   d42b8:	f002 ff66 	bl	d7188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d42bc:	a811      	add	r0, sp, #68	; 0x44
   d42be:	f002 fca5 	bl	d6c0c <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(deviceNameCharacteristic);
   d42c2:	f002 fba1 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42c6:	4a65      	ldr	r2, [pc, #404]	; (d445c <_Z8setupBLEv+0x1d8>)
   d42c8:	4601      	mov	r1, r0
   d42ca:	a811      	add	r0, sp, #68	; 0x44
   d42cc:	f002 ff5c 	bl	d7188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d42d0:	a811      	add	r0, sp, #68	; 0x44
   d42d2:	f002 fc9b 	bl	d6c0c <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(appearanceCharacteristic);
   d42d6:	f002 fb97 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42da:	4a61      	ldr	r2, [pc, #388]	; (d4460 <_Z8setupBLEv+0x1dc>)
   d42dc:	4601      	mov	r1, r0
   d42de:	a811      	add	r0, sp, #68	; 0x44
   d42e0:	f002 ff52 	bl	d7188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d42e4:	a811      	add	r0, sp, #68	; 0x44
   d42e6:	f002 fc91 	bl	d6c0c <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(serialNumberCharacteristic);
   d42ea:	f002 fb8d 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42ee:	4a5d      	ldr	r2, [pc, #372]	; (d4464 <_Z8setupBLEv+0x1e0>)
   d42f0:	4601      	mov	r1, r0
   d42f2:	a811      	add	r0, sp, #68	; 0x44
   d42f4:	f002 ff48 	bl	d7188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d42f8:	a811      	add	r0, sp, #68	; 0x44
   d42fa:	f002 fc87 	bl	d6c0c <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(hardwareVersionCharacteristic);
   d42fe:	f002 fb83 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4302:	4a59      	ldr	r2, [pc, #356]	; (d4468 <_Z8setupBLEv+0x1e4>)
   d4304:	4601      	mov	r1, r0
   d4306:	a811      	add	r0, sp, #68	; 0x44
   d4308:	f002 ff3e 	bl	d7188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d430c:	a811      	add	r0, sp, #68	; 0x44
   d430e:	f002 fc7d 	bl	d6c0c <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(firmwareVersionCharacteristic);
   d4312:	f002 fb79 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4316:	4a55      	ldr	r2, [pc, #340]	; (d446c <_Z8setupBLEv+0x1e8>)
   d4318:	4601      	mov	r1, r0
   d431a:	a811      	add	r0, sp, #68	; 0x44
   d431c:	f002 ff34 	bl	d7188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4320:	a811      	add	r0, sp, #68	; 0x44
   d4322:	f002 fc73 	bl	d6c0c <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(softwareVersionCharacteristic);
   d4326:	f002 fb6f 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d432a:	4a51      	ldr	r2, [pc, #324]	; (d4470 <_Z8setupBLEv+0x1ec>)
   d432c:	4601      	mov	r1, r0
   d432e:	a811      	add	r0, sp, #68	; 0x44
   d4330:	f002 ff2a 	bl	d7188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4334:	a811      	add	r0, sp, #68	; 0x44
   d4336:	f002 fc69 	bl	d6c0c <_ZN8particle17BleCharacteristicD1Ev>

    BLE.addCharacteristic(characteristic16bit);
   d433a:	f002 fb65 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d433e:	4a4d      	ldr	r2, [pc, #308]	; (d4474 <_Z8setupBLEv+0x1f0>)
   d4340:	4601      	mov	r1, r0
   d4342:	a811      	add	r0, sp, #68	; 0x44
   d4344:	f002 ff20 	bl	d7188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4348:	a811      	add	r0, sp, #68	; 0x44
   d434a:	f002 fc5f 	bl	d6c0c <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(characteristic32bit);
   d434e:	f002 fb5b 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4352:	4a49      	ldr	r2, [pc, #292]	; (d4478 <_Z8setupBLEv+0x1f4>)
   d4354:	4601      	mov	r1, r0
   d4356:	a811      	add	r0, sp, #68	; 0x44
   d4358:	f002 ff16 	bl	d7188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d435c:	a811      	add	r0, sp, #68	; 0x44
   d435e:	f002 fc55 	bl	d6c0c <_ZN8particle17BleCharacteristicD1Ev>
    // BLE.addCharacteristic(unknownCharacteristic200);
    // BLE.addCharacteristic(unknownCharacteristic300);
    // BLE.addCharacteristic(unknownCharacteristic330);
    // BLE.addCharacteristic(unknownCharacteristic340);
    
    BLE.addCharacteristic(batteryLevelCharacteristic);
   d4362:	f002 fb51 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4366:	4a45      	ldr	r2, [pc, #276]	; (d447c <_Z8setupBLEv+0x1f8>)
   d4368:	4601      	mov	r1, r0
   d436a:	a811      	add	r0, sp, #68	; 0x44
   d436c:	f002 ff0c 	bl	d7188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4370:	a811      	add	r0, sp, #68	; 0x44
   d4372:	f002 fc4b 	bl	d6c0c <_ZN8particle17BleCharacteristicD1Ev>

    String deviceName = "FIRE - 2334359";
   d4376:	4942      	ldr	r1, [pc, #264]	; (d4480 <_Z8setupBLEv+0x1fc>)
   d4378:	a803      	add	r0, sp, #12
   d437a:	f003 fb8e 	bl	d7a9a <_ZN6StringC1EPKc>
    mfgNameCharacteristic.setValue("Kestrel by NK");
   d437e:	4941      	ldr	r1, [pc, #260]	; (d4484 <_Z8setupBLEv+0x200>)
   d4380:	4835      	ldr	r0, [pc, #212]	; (d4458 <_Z8setupBLEv+0x1d4>)
   d4382:	2200      	movs	r2, #0
   d4384:	f002 fa99 	bl	d68ba <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    deviceNameCharacteristic.setValue(deviceName);
   d4388:	2200      	movs	r2, #0
   d438a:	a903      	add	r1, sp, #12
   d438c:	4833      	ldr	r0, [pc, #204]	; (d445c <_Z8setupBLEv+0x1d8>)
   d438e:	f002 fa8f 	bl	d68b0 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>
    appearanceCharacteristic.setValue("1");
   d4392:	493d      	ldr	r1, [pc, #244]	; (d4488 <_Z8setupBLEv+0x204>)
   d4394:	4832      	ldr	r0, [pc, #200]	; (d4460 <_Z8setupBLEv+0x1dc>)
   d4396:	2200      	movs	r2, #0
   d4398:	f002 fa8f 	bl	d68ba <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    modelNumberCharacteristic.setValue("5500FWL");
   d439c:	493b      	ldr	r1, [pc, #236]	; (d448c <_Z8setupBLEv+0x208>)
   d439e:	482d      	ldr	r0, [pc, #180]	; (d4454 <_Z8setupBLEv+0x1d0>)
   d43a0:	2200      	movs	r2, #0
   d43a2:	f002 fa8a 	bl	d68ba <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    serialNumberCharacteristic.setValue("2334359");
   d43a6:	493a      	ldr	r1, [pc, #232]	; (d4490 <_Z8setupBLEv+0x20c>)
   d43a8:	482e      	ldr	r0, [pc, #184]	; (d4464 <_Z8setupBLEv+0x1e0>)
   d43aa:	2200      	movs	r2, #0
   d43ac:	f002 fa85 	bl	d68ba <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    hardwareVersionCharacteristic.setValue("Rev 11B");
   d43b0:	4938      	ldr	r1, [pc, #224]	; (d4494 <_Z8setupBLEv+0x210>)
   d43b2:	482d      	ldr	r0, [pc, #180]	; (d4468 <_Z8setupBLEv+0x1e4>)
   d43b4:	2200      	movs	r2, #0
   d43b6:	f002 fa80 	bl	d68ba <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    firmwareVersionCharacteristic.setValue("1.21");
   d43ba:	4937      	ldr	r1, [pc, #220]	; (d4498 <_Z8setupBLEv+0x214>)
   d43bc:	482b      	ldr	r0, [pc, #172]	; (d446c <_Z8setupBLEv+0x1e8>)
   d43be:	2200      	movs	r2, #0
   d43c0:	f002 fa7b 	bl	d68ba <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    softwareVersionCharacteristic.setValue("1");
   d43c4:	2200      	movs	r2, #0
   d43c6:	4930      	ldr	r1, [pc, #192]	; (d4488 <_Z8setupBLEv+0x204>)
   d43c8:	4829      	ldr	r0, [pc, #164]	; (d4470 <_Z8setupBLEv+0x1ec>)
   d43ca:	f002 fa76 	bl	d68ba <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    // unknownCharacteristic200.setValue("0.06\x00");
    // unknownCharacteristic300.setValue("{\x7f` \x00");
    // unknownCharacteristic330.setValue("g\x04\x1a\t\x00\xff\xff\xff\xff\xff\xff\xff\x01\x80\x01\x80T\x06}\t");
    // unknownCharacteristic340.setValue("\xff\xff\xff\x01\x80\xff\xff\xff\x01\x80\x01\x80\xa0\x0f\xff\xff\xff\xff\xff\xff");

    BleAdvertisingData data;
   d43ce:	a811      	add	r0, sp, #68	; 0x44
   d43d0:	f002 f964 	bl	d669c <_ZN8particle18BleAdvertisingDataC1Ev>
    data.appendLocalName("FIRE");  // don't change this
   d43d4:	4931      	ldr	r1, [pc, #196]	; (d449c <_Z8setupBLEv+0x218>)
   d43d6:	a811      	add	r0, sp, #68	; 0x44
   d43d8:	f002 f979 	bl	d66ce <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    data.appendServiceUUID(kestrelServiceUuid);
   d43dc:	4930      	ldr	r1, [pc, #192]	; (d44a0 <_Z8setupBLEv+0x21c>)
   d43de:	a807      	add	r0, sp, #28
   d43e0:	f002 f808 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d43e4:	a907      	add	r1, sp, #28
   d43e6:	a80c      	add	r0, sp, #48	; 0x30
   d43e8:	f002 f804 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d43ec:	a80c      	add	r0, sp, #48	; 0x30
   d43ee:	f002 f847 	bl	d6480 <_ZNK8particle7BleUuid4typeEv>
   d43f2:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d43f4:	a80c      	add	r0, sp, #48	; 0x30
        if (tempUUID.type() == BleUuidType::SHORT) {
   d43f6:	bb2c      	cbnz	r4, d4444 <_Z8setupBLEv+0x1c0>
            uint16_t uuid16 = tempUUID.shorted();
   d43f8:	f002 f861 	bl	d64be <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d43fc:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d43fe:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4402:	2302      	movs	r3, #2
   d4404:	f10d 020a 	add.w	r2, sp, #10
   d4408:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d440a:	a811      	add	r0, sp, #68	; 0x44
   d440c:	f002 f8fe 	bl	d660c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    data.deviceName((char*)deviceName.c_str(), deviceName.length());
   d4410:	9a05      	ldr	r2, [sp, #20]
   d4412:	9903      	ldr	r1, [sp, #12]
   d4414:	a811      	add	r0, sp, #68	; 0x44
   d4416:	f002 f9a3 	bl	d6760 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    // data.appendServiceUUID(batteryServiceUuid);  // won't pair with this added
    BLE.setDeviceName(deviceName);
   d441a:	f002 faf5 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d441e:	a903      	add	r1, sp, #12
   d4420:	f002 fb58 	bl	d6ad4 <_ZNK8particle14BleLocalDevice13setDeviceNameERK6String>
    BLE.setAdvertisingType(BleAdvertisingEventType::CONNECTABLE_SCANNABLE_UNDIRECRED);
   d4424:	f002 faf0 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4428:	2100      	movs	r1, #0
   d442a:	f002 fb5a 	bl	d6ae2 <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE>
    BLE.advertise(&data);
   d442e:	f002 faeb 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4432:	2200      	movs	r2, #0
   d4434:	a911      	add	r1, sp, #68	; 0x44
   d4436:	f002 fb9a 	bl	d6b6e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    String deviceName = "FIRE - 2334359";
   d443a:	a803      	add	r0, sp, #12
   d443c:	f003 fae2 	bl	d7a04 <_ZN6StringD1Ev>
}
   d4440:	b01a      	add	sp, #104	; 0x68
   d4442:	bd10      	pop	{r4, pc}
   d4444:	f002 f840 	bl	d64c8 <_ZNK8particle7BleUuid8rawBytesEv>
   d4448:	2300      	movs	r3, #0
   d444a:	9300      	str	r3, [sp, #0]
   d444c:	4602      	mov	r2, r0
   d444e:	2310      	movs	r3, #16
   d4450:	2107      	movs	r1, #7
   d4452:	e7da      	b.n	d440a <_Z8setupBLEv+0x186>
   d4454:	2003e718 	.word	0x2003e718
   d4458:	2003e6cc 	.word	0x2003e6cc
   d445c:	2003e6b4 	.word	0x2003e6b4
   d4460:	2003e5e8 	.word	0x2003e5e8
   d4464:	2003e728 	.word	0x2003e728
   d4468:	2003e6c4 	.word	0x2003e6c4
   d446c:	2003e6bc 	.word	0x2003e6bc
   d4470:	2003e730 	.word	0x2003e730
   d4474:	2003e6a0 	.word	0x2003e6a0
   d4478:	2003e6a8 	.word	0x2003e6a8
   d447c:	2003e5f0 	.word	0x2003e5f0
   d4480:	000d96db 	.word	0x000d96db
   d4484:	000d96ea 	.word	0x000d96ea
   d4488:	000d970b 	.word	0x000d970b
   d448c:	000d96f8 	.word	0x000d96f8
   d4490:	000d96e2 	.word	0x000d96e2
   d4494:	000d9700 	.word	0x000d9700
   d4498:	000d9708 	.word	0x000d9708
   d449c:	000d970d 	.word	0x000d970d
   d44a0:	2003e4a8 	.word	0x2003e4a8

000d44a4 <_Z17setupMagnetometerv>:

void setupMagnetometer() {
   d44a4:	b513      	push	{r0, r1, r4, lr}
    Wire.begin();
   d44a6:	f003 fdd9 	bl	d805c <_Z19__fetch_global_Wirev>
   d44aa:	f003 f803 	bl	d74b4 <_ZN7TwoWire5beginEv>
    // I2C
    // Arduino A4 = SDA
    // Arduino A5 = SCL
    // DRDY ("Data Ready"line connected to A3 (omit third parameter to used timed reads)
    // uint8_t status = mlx.begin(0, 0, A3);
    uint8_t status = mlx.begin(0, 0, -1, Wire);
   d44ae:	f003 fdd5 	bl	d805c <_Z19__fetch_global_Wirev>
   d44b2:	4c1f      	ldr	r4, [pc, #124]	; (d4530 <_Z17setupMagnetometerv+0x8c>)
   d44b4:	9000      	str	r0, [sp, #0]
   d44b6:	2200      	movs	r2, #0
   d44b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d44bc:	4611      	mov	r1, r2
   d44be:	4620      	mov	r0, r4
   d44c0:	f000 ff1e 	bl	d5300 <_ZN8MLX903935beginEhhiR7TwoWire>

    mlx.writeRegister(MLX90393::GAIN_SEL_REG, 0);
   d44c4:	2200      	movs	r2, #0
   d44c6:	4611      	mov	r1, r2
   d44c8:	4620      	mov	r0, r4
   d44ca:	f000 fe33 	bl	d5134 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::HALLCONF_REG, 0);
   d44ce:	2200      	movs	r2, #0
   d44d0:	4611      	mov	r1, r2
   d44d2:	4620      	mov	r0, r4
   d44d4:	f000 fe2e 	bl	d5134 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::TCMP_EN_REG, 0);
   d44d8:	2200      	movs	r2, #0
   d44da:	2101      	movs	r1, #1
   d44dc:	4620      	mov	r0, r4
   d44de:	f000 fe29 	bl	d5134 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::BURST_SEL_REG, 0);
   d44e2:	2200      	movs	r2, #0
   d44e4:	2101      	movs	r1, #1
   d44e6:	4620      	mov	r0, r4
   d44e8:	f000 fe24 	bl	d5134 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::RES_XYZ_REG, 0);
   d44ec:	2200      	movs	r2, #0
   d44ee:	2102      	movs	r1, #2
   d44f0:	4620      	mov	r0, r4
   d44f2:	f000 fe1f 	bl	d5134 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::RES_XYZ_REG, 0);
   d44f6:	2200      	movs	r2, #0
   d44f8:	2102      	movs	r1, #2
   d44fa:	4620      	mov	r0, r4
   d44fc:	f000 fe1a 	bl	d5134 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::DIG_FLT_REG, 7);
   d4500:	2207      	movs	r2, #7
   d4502:	2102      	movs	r1, #2
   d4504:	4620      	mov	r0, r4
   d4506:	f000 fe15 	bl	d5134 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::OSR_REG, 0);
   d450a:	2200      	movs	r2, #0
   d450c:	2102      	movs	r1, #2
   d450e:	4620      	mov	r0, r4
   d4510:	f000 fe10 	bl	d5134 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::X_OFFSET_REG, 0);
   d4514:	2200      	movs	r2, #0
   d4516:	2104      	movs	r1, #4
   d4518:	4620      	mov	r0, r4
   d451a:	f000 fe0b 	bl	d5134 <_ZN8MLX9039313writeRegisterEht>
    mlx.writeRegister(MLX90393::Y_OFFSET_REG, 0);
   d451e:	2200      	movs	r2, #0
   d4520:	2105      	movs	r1, #5
   d4522:	4620      	mov	r0, r4
}
   d4524:	b002      	add	sp, #8
   d4526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mlx.writeRegister(MLX90393::Y_OFFSET_REG, 0);
   d452a:	f000 be03 	b.w	d5134 <_ZN8MLX9039313writeRegisterEht>
   d452e:	bf00      	nop
   d4530:	2003e6d4 	.word	0x2003e6d4

000d4534 <_Z15setupHallSensorv>:

void setupHallSensor() {
   d4534:	b507      	push	{r0, r1, r2, lr}
    void hallSensorInterrupt();
    byte hallSensorPin = D2;
    pinMode(hallSensorPin, INPUT);
   d4536:	2100      	movs	r1, #0
   d4538:	2002      	movs	r0, #2
   d453a:	f003 fd35 	bl	d7fa8 <pinMode>
    attachInterrupt(hallSensorPin, hallSensorInterrupt, FALLING);
   d453e:	2202      	movs	r2, #2
   d4540:	2300      	movs	r3, #0
   d4542:	9300      	str	r3, [sp, #0]
   d4544:	4904      	ldr	r1, [pc, #16]	; (d4558 <_Z15setupHallSensorv+0x24>)
   d4546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d454a:	4610      	mov	r0, r2
   d454c:	f002 fff0 	bl	d7530 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d4550:	b003      	add	sp, #12
   d4552:	f85d fb04 	ldr.w	pc, [sp], #4
   d4556:	bf00      	nop
   d4558:	000d49bd 	.word	0x000d49bd

000d455c <_Z11setupBME280v>:

void setupBME280() {
    bme280.settings.commInterface = I2C_MODE;
   d455c:	4805      	ldr	r0, [pc, #20]	; (d4574 <_Z11setupBME280v+0x18>)
   d455e:	f44f 43ee 	mov.w	r3, #30464	; 0x7700
   d4562:	8003      	strh	r3, [r0, #0]

    //runMode can be:
    //  0, Sleep mode
    //  1 or 2, Forced mode
    //  3, Normal mode
    bme280.settings.runMode = 3;
   d4564:	2303      	movs	r3, #3
   d4566:	70c3      	strb	r3, [r0, #3]
    bme280.settings.tStandby = 0;
   d4568:	4b03      	ldr	r3, [pc, #12]	; (d4578 <_Z11setupBME280v+0x1c>)
   d456a:	6043      	str	r3, [r0, #4]
    bme280.settings.humidOverSample = 1;
   d456c:	2301      	movs	r3, #1
   d456e:	7203      	strb	r3, [r0, #8]
    
    bme280.begin();
   d4570:	f001 ba16 	b.w	d59a0 <_ZN6BME2805beginEv>
   d4574:	2003e5f8 	.word	0x2003e5f8
   d4578:	01010000 	.word	0x01010000

000d457c <setup>:
void setup() {
   d457c:	b508      	push	{r3, lr}
    Serial.begin(115200);
   d457e:	f003 fbdb 	bl	d7d38 <_Z16_fetch_usbserialv>
   d4582:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4586:	f003 fbcb 	bl	d7d20 <_ZN9USBSerial5beginEl>
    Serial.println("\n\nFake Kestrel\nBeginning setup.");
   d458a:	f003 fbd5 	bl	d7d38 <_Z16_fetch_usbserialv>
   d458e:	4907      	ldr	r1, [pc, #28]	; (d45ac <setup+0x30>)
   d4590:	f003 f93f 	bl	d7812 <_ZN5Print7printlnEPKc>
    setupBLE();
   d4594:	f7ff fe76 	bl	d4284 <_Z8setupBLEv>
    setupLCD();
   d4598:	f7ff fe2a 	bl	d41f0 <_Z8setupLCDv>
    setupMagnetometer();
   d459c:	f7ff ff82 	bl	d44a4 <_Z17setupMagnetometerv>
    setupHallSensor();
   d45a0:	f7ff ffc8 	bl	d4534 <_Z15setupHallSensorv>
}
   d45a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setupBME280();
   d45a8:	f7ff bfd8 	b.w	d455c <_Z11setupBME280v>
   d45ac:	000d9712 	.word	0x000d9712

000d45b0 <_Z10debugPrintPKc>:
    Serial1.write('|'); //Put LCD into setting mode
    Serial1.write('-'); //Clear
    Serial1.write(msg);
}

void debugPrint(const char* message) {
   d45b0:	b510      	push	{r4, lr}
   d45b2:	4604      	mov	r4, r0
    Serial1.write('|'); //Put LCD into setting mode
   d45b4:	f003 fb1e 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d45b8:	217c      	movs	r1, #124	; 0x7c
   d45ba:	f7ff fd94 	bl	d40e6 <_ZN11USARTSerial5writeEi>
    Serial1.write('-'); //Clear
   d45be:	f003 fb19 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d45c2:	212d      	movs	r1, #45	; 0x2d
   d45c4:	f7ff fd8f 	bl	d40e6 <_ZN11USARTSerial5writeEi>
    Serial1.write(message);
   d45c8:	f003 fb14 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d45cc:	4621      	mov	r1, r4
   d45ce:	f7ff fd78 	bl	d40c2 <_ZN5Print5writeEPKc>
}
   d45d2:	bd10      	pop	{r4, pc}
   d45d4:	0000      	movs	r0, r0
	...

000d45d8 <_Z11readCompassv>:

float readCompass() {
   d45d8:	b507      	push	{r0, r1, r2, lr}
    mlx.sendCommand(MLX90393::CMD_START_MEASUREMENT | MLX90393::X_FLAG | MLX90393::Y_FLAG);
   d45da:	2136      	movs	r1, #54	; 0x36
   d45dc:	4828      	ldr	r0, [pc, #160]	; (d4680 <_Z11readCompassv+0xa8>)
   d45de:	f000 fcaf 	bl	d4f40 <_ZN8MLX9039311sendCommandEh>
    delay(500);
   d45e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d45e6:	f001 fe23 	bl	d6230 <delay>
    MLX90393::txyzRaw data;
    const uint8_t status = mlx.readMeasurement(MLX90393::X_FLAG | MLX90393::Y_FLAG, data);
   d45ea:	466a      	mov	r2, sp
   d45ec:	4824      	ldr	r0, [pc, #144]	; (d4680 <_Z11readCompassv+0xa8>)
   d45ee:	2106      	movs	r1, #6
   d45f0:	f000 fcc9 	bl	d4f86 <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE>
    if (status == MLX90393::STATUS_ERROR) {
   d45f4:	28ff      	cmp	r0, #255	; 0xff
    const uint8_t status = mlx.readMeasurement(MLX90393::X_FLAG | MLX90393::Y_FLAG, data);
   d45f6:	4602      	mov	r2, r0
    if (status == MLX90393::STATUS_ERROR) {
   d45f8:	d10a      	bne.n	d4610 <_Z11readCompassv+0x38>
        sprintf(buffer1, "Status = %0X", status);
   d45fa:	4922      	ldr	r1, [pc, #136]	; (d4684 <_Z11readCompassv+0xac>)
   d45fc:	4822      	ldr	r0, [pc, #136]	; (d4688 <_Z11readCompassv+0xb0>)
   d45fe:	f001 fe07 	bl	d6210 <sprintf>
        debugPrint(buffer1);
   d4602:	4821      	ldr	r0, [pc, #132]	; (d4688 <_Z11readCompassv+0xb0>)
   d4604:	f7ff ffd4 	bl	d45b0 <_Z10debugPrintPKc>
        delay(1000);
   d4608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d460c:	f001 fe10 	bl	d6230 <delay>
    }

    float heading = atan2f(float(int16_t(-data.y)), float(int16_t(data.x)));
   d4610:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
   d4614:	ee00 3a90 	vmov	s1, r3
   d4618:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d461c:	425b      	negs	r3, r3
   d461e:	b21b      	sxth	r3, r3
   d4620:	ee00 3a10 	vmov	s0, r3
   d4624:	eef8 0ae0 	vcvt.f32.s32	s1, s1
   d4628:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d462c:	f003 feb2 	bl	d8394 <atan2f>
    if (heading < 0) {
   d4630:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d4634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float heading = atan2f(float(int16_t(-data.y)), float(int16_t(data.x)));
   d4638:	ee10 0a10 	vmov	r0, s0
    if (heading < 0) {
   d463c:	d508      	bpl.n	d4650 <_Z11readCompassv+0x78>
        heading += 2*3.14159;
   d463e:	f004 f997 	bl	d8970 <__aeabi_f2d>
   d4642:	a30b      	add	r3, pc, #44	; (adr r3, d4670 <_Z11readCompassv+0x98>)
   d4644:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4648:	f004 f834 	bl	d86b4 <__adddf3>
   d464c:	f004 fc82 	bl	d8f54 <__aeabi_d2f>
    }
    return heading * (360.0/(2*3.14159));
   d4650:	f004 f98e 	bl	d8970 <__aeabi_f2d>
   d4654:	a308      	add	r3, pc, #32	; (adr r3, d4678 <_Z11readCompassv+0xa0>)
   d4656:	e9d3 2300 	ldrd	r2, r3, [r3]
   d465a:	f004 f9e1 	bl	d8a20 <__aeabi_dmul>
   d465e:	f004 fc79 	bl	d8f54 <__aeabi_d2f>
}
   d4662:	ee00 0a10 	vmov	s0, r0
   d4666:	b003      	add	sp, #12
   d4668:	f85d fb04 	ldr.w	pc, [sp], #4
   d466c:	f3af 8000 	nop.w
   d4670:	f01b866e 	.word	0xf01b866e
   d4674:	401921f9 	.word	0x401921f9
   d4678:	b05cc3e8 	.word	0xb05cc3e8
   d467c:	404ca5dd 	.word	0x404ca5dd
   d4680:	2003e6d4 	.word	0x2003e6d4
   d4684:	000d9732 	.word	0x000d9732
   d4688:	2003e63c 	.word	0x2003e63c
   d468c:	00000000 	.word	0x00000000

000d4690 <loop>:
void loop() {
   d4690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4694:	ed2d 8b02 	vpush	{d8}
   d4698:	b094      	sub	sp, #80	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d469a:	f001 fd41 	bl	d6120 <spark_cloud_flag_connected>
    if (Particle.connected() == true) {
   d469e:	b128      	cbz	r0, d46ac <loop+0x1c>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d46a0:	f001 fb72 	bl	d5d88 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d46a4:	4bb4      	ldr	r3, [pc, #720]	; (d4978 <loop+0x2e8>)
   d46a6:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d46a8:	f001 fd32 	bl	d6110 <spark_process>
    if ((micros() - currentMicroseconds) < (1000.0 * 1000.0 * 20.0)) {
   d46ac:	4cb3      	ldr	r4, [pc, #716]	; (d497c <loop+0x2ec>)
   d46ae:	4db4      	ldr	r5, [pc, #720]	; (d4980 <loop+0x2f0>)
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d46b0:	f001 fb62 	bl	d5d78 <HAL_Timer_Get_Micro_Seconds>
   d46b4:	6823      	ldr	r3, [r4, #0]
   d46b6:	4ab3      	ldr	r2, [pc, #716]	; (d4984 <loop+0x2f4>)
   d46b8:	1ac0      	subs	r0, r0, r3
   d46ba:	4290      	cmp	r0, r2
   d46bc:	f200 80bd 	bhi.w	d483a <loop+0x1aa>
        float periodS = float(currentMicroseconds - previousMicroseconds) / (1000.0 * 1000.0);
   d46c0:	6828      	ldr	r0, [r5, #0]
   d46c2:	1a18      	subs	r0, r3, r0
   d46c4:	ee07 0a90 	vmov	s15, r0
   d46c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d46cc:	ee17 0a90 	vmov	r0, s15
   d46d0:	f004 f94e 	bl	d8970 <__aeabi_f2d>
   d46d4:	a39a      	add	r3, pc, #616	; (adr r3, d4940 <loop+0x2b0>)
   d46d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46da:	f004 facb 	bl	d8c74 <__aeabi_ddiv>
   d46de:	f004 fc39 	bl	d8f54 <__aeabi_d2f>
   d46e2:	ee07 0a10 	vmov	s14, r0
        if (periodS < 20.0 && periodS > 0.1) {
   d46e6:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
   d46ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d46ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d46f2:	f140 80a6 	bpl.w	d4842 <loop+0x1b2>
   d46f6:	f004 f93b 	bl	d8970 <__aeabi_f2d>
   d46fa:	a393      	add	r3, pc, #588	; (adr r3, d4948 <loop+0x2b8>)
   d46fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4700:	4604      	mov	r4, r0
   d4702:	460d      	mov	r5, r1
   d4704:	f004 fc1c 	bl	d8f40 <__aeabi_dcmpgt>
   d4708:	2800      	cmp	r0, #0
   d470a:	f000 809a 	beq.w	d4842 <loop+0x1b2>
            windSpeedKph = 9.64 / periodS + 0.0;  // Calibration constant
   d470e:	462b      	mov	r3, r5
   d4710:	4622      	mov	r2, r4
   d4712:	a18f      	add	r1, pc, #572	; (adr r1, d4950 <loop+0x2c0>)
   d4714:	e9d1 0100 	ldrd	r0, r1, [r1]
   d4718:	f004 faac 	bl	d8c74 <__aeabi_ddiv>
   d471c:	2200      	movs	r2, #0
   d471e:	2300      	movs	r3, #0
   d4720:	f003 ffc8 	bl	d86b4 <__adddf3>
   d4724:	f004 fc16 	bl	d8f54 <__aeabi_d2f>
   d4728:	4605      	mov	r5, r0
    float heading = fminf(359, readCompass());  // contains a delay
   d472a:	f7ff ff55 	bl	d45d8 <_Z11readCompassv>
   d472e:	eef0 0a40 	vmov.f32	s1, s0
   d4732:	ed9f 0a95 	vldr	s0, [pc, #596]	; d4988 <loop+0x2f8>
   d4736:	f003 fdf3 	bl	d8320 <fminf>
    float battVoltage = analogRead(BATT) * 0.0011224;
   d473a:	2021      	movs	r0, #33	; 0x21
    float heading = fminf(359, readCompass());  // contains a delay
   d473c:	ee10 6a10 	vmov	r6, s0
    float battVoltage = analogRead(BATT) * 0.0011224;
   d4740:	f003 fc5c 	bl	d7ffc <analogRead>
   d4744:	f004 f902 	bl	d894c <__aeabi_i2d>
   d4748:	a383      	add	r3, pc, #524	; (adr r3, d4958 <loop+0x2c8>)
   d474a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d474e:	f004 f967 	bl	d8a20 <__aeabi_dmul>
   d4752:	f004 fbff 	bl	d8f54 <__aeabi_d2f>
    float battPercent = fmaxf(0, 100.0 * (battVoltage - lipoLow) / (lipoHigh - lipoLow));
   d4756:	ee07 0a10 	vmov	s14, r0
   d475a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   d475e:	ee77 7a67 	vsub.f32	s15, s14, s15
   d4762:	ee17 0a90 	vmov	r0, s15
   d4766:	f004 f903 	bl	d8970 <__aeabi_f2d>
   d476a:	4b88      	ldr	r3, [pc, #544]	; (d498c <loop+0x2fc>)
   d476c:	2200      	movs	r2, #0
   d476e:	f004 f957 	bl	d8a20 <__aeabi_dmul>
   d4772:	a37b      	add	r3, pc, #492	; (adr r3, d4960 <loop+0x2d0>)
   d4774:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4778:	f004 fa7c 	bl	d8c74 <__aeabi_ddiv>
   d477c:	f004 fbea 	bl	d8f54 <__aeabi_d2f>
   d4780:	ed9f 0a83 	vldr	s0, [pc, #524]	; d4990 <loop+0x300>
   d4784:	ee00 0a90 	vmov	s1, r0
   d4788:	f003 fdac 	bl	d82e4 <fmaxf>
   d478c:	eef0 0a40 	vmov.f32	s1, s0
    battPercent = fminf(100.0, battPercent);
   d4790:	ed9f 0a80 	vldr	s0, [pc, #512]	; d4994 <loop+0x304>
   d4794:	f003 fdc4 	bl	d8320 <fminf>
    uint8_t battPctByte = static_cast<uint8_t>(battPercent);
   d4798:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    delay(500);
   d479c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    uint8_t battPctByte = static_cast<uint8_t>(battPercent);
   d47a0:	ee17 3a90 	vmov	r3, s15
    battPercent = fminf(100.0, battPercent);
   d47a4:	eeb0 8a40 	vmov.f32	s16, s0
    uint8_t battPctByte = static_cast<uint8_t>(battPercent);
   d47a8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    delay(500);
   d47ac:	f001 fd40 	bl	d6230 <delay>
    if (BLE.connected()) {
   d47b0:	f002 f92a 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d47b4:	f002 f9f8 	bl	d6ba8 <_ZNK8particle14BleLocalDevice9connectedEv>
   d47b8:	b380      	cbz	r0, d481c <loop+0x18c>
float convertCToF(float degC) {
    return 32.0 + 1.8 * degC;
}

float convertKphToMps(float kph) {
    return kph * 0.2778;
   d47ba:	4628      	mov	r0, r5
   d47bc:	f004 f8d8 	bl	d8970 <__aeabi_f2d>
   d47c0:	a369      	add	r3, pc, #420	; (adr r3, d4968 <loop+0x2d8>)
   d47c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47c6:	f004 f92b 	bl	d8a20 <__aeabi_dmul>
   d47ca:	f004 fbc3 	bl	d8f54 <__aeabi_d2f>
   d47ce:	900e      	str	r0, [sp, #56]	; 0x38
        sample.temperatureC =       bme280.readTempC();
   d47d0:	4871      	ldr	r0, [pc, #452]	; (d4998 <loop+0x308>)
   d47d2:	f000 ff7b 	bl	d56cc <_ZN6BME2809readTempCEv>
        sample.humidity =           bme280.readFloatHumidity();
   d47d6:	4870      	ldr	r0, [pc, #448]	; (d4998 <loop+0x308>)
        sample.temperatureC =       bme280.readTempC();
   d47d8:	ed8d 0a10 	vstr	s0, [sp, #64]	; 0x40
        sample.humidity =           bme280.readFloatHumidity();
   d47dc:	f000 ff30 	bl	d5640 <_ZN6BME28017readFloatHumidityEv>
        sample.pressureBar =        bme280.readFloatPressure()/100000.0f;
   d47e0:	486d      	ldr	r0, [pc, #436]	; (d4998 <loop+0x308>)
        sample.humidity =           bme280.readFloatHumidity();
   d47e2:	ed8d 0a11 	vstr	s0, [sp, #68]	; 0x44
        sample.pressureBar =        bme280.readFloatPressure()/100000.0f;
   d47e6:	f000 fe55 	bl	d5494 <_ZN6BME28017readFloatPressureEv>
   d47ea:	ed9f 7a6c 	vldr	s14, [pc, #432]	; d499c <loop+0x30c>
        sample.altitudeM =          1.483;  // Pawnee Sportsmen's Center, Briggsdale, CO = 4865 ft
   d47ee:	4b6c      	ldr	r3, [pc, #432]	; (d49a0 <loop+0x310>)
   d47f0:	9313      	str	r3, [sp, #76]	; 0x4c
        sample.pressureBar =        bme280.readFloatPressure()/100000.0f;
   d47f2:	eec0 7a07 	vdiv.f32	s15, s0, s14
        setBluetoothData(sample);
   d47f6:	ab14      	add	r3, sp, #80	; 0x50
        sample.windDirectionDeg =   heading;
   d47f8:	960f      	str	r6, [sp, #60]	; 0x3c
        sample.pressureBar =        bme280.readFloatPressure()/100000.0f;
   d47fa:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
        setBluetoothData(sample);
   d47fe:	e913 0003 	ldmdb	r3, {r0, r1}
   d4802:	e88d 0003 	stmia.w	sp, {r0, r1}
   d4806:	ab0e      	add	r3, sp, #56	; 0x38
   d4808:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   d480a:	f7ff fca1 	bl	d4150 <_Z16setBluetoothData8sample_t>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d480e:	4865      	ldr	r0, [pc, #404]	; (d49a4 <loop+0x314>)
   d4810:	2300      	movs	r3, #0
   d4812:	2201      	movs	r2, #1
   d4814:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   d4818:	f001 ffea 	bl	d67f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    switch (screenNumber/4) {
   d481c:	4c62      	ldr	r4, [pc, #392]	; (d49a8 <loop+0x318>)
   d481e:	6823      	ldr	r3, [r4, #0]
   d4820:	2b00      	cmp	r3, #0
   d4822:	bfb8      	it	lt
   d4824:	3303      	addlt	r3, #3
   d4826:	109b      	asrs	r3, r3, #2
   d4828:	d00d      	beq.n	d4846 <loop+0x1b6>
   d482a:	2b01      	cmp	r3, #1
   d482c:	d041      	beq.n	d48b2 <loop+0x222>
            sprintf(buffer1, "Wrong screen number");
   d482e:	495f      	ldr	r1, [pc, #380]	; (d49ac <loop+0x31c>)
   d4830:	485f      	ldr	r0, [pc, #380]	; (d49b0 <loop+0x320>)
   d4832:	f004 ff1b 	bl	d966c <strcpy>
            screenNumber = 0;
   d4836:	2300      	movs	r3, #0
   d4838:	e039      	b.n	d48ae <loop+0x21e>
   d483a:	f001 fa9d 	bl	d5d78 <HAL_Timer_Get_Micro_Seconds>
        previousMicroseconds = micros();
   d483e:	6028      	str	r0, [r5, #0]
        currentMicroseconds = previousMicroseconds;
   d4840:	6020      	str	r0, [r4, #0]
    float windSpeedKph = 0.0;
   d4842:	2500      	movs	r5, #0
   d4844:	e771      	b.n	d472a <loop+0x9a>
            sprintf(buffer1, "%4.1f MPH  %3.0f%c  %4.1f%cF  %2.0f%%", convertKphToMph(windSpeedKph), heading, degreeSymbol, bme280.readTempF(), degreeSymbol, bme280.readFloatHumidity());
   d4846:	4854      	ldr	r0, [pc, #336]	; (d4998 <loop+0x308>)
   d4848:	f000 ff78 	bl	d573c <_ZN6BME2809readTempFEv>
   d484c:	4852      	ldr	r0, [pc, #328]	; (d4998 <loop+0x308>)
   d484e:	ee10 7a10 	vmov	r7, s0
   d4852:	f000 fef5 	bl	d5640 <_ZN6BME28017readFloatHumidityEv>
    return kph * 0.6214;
   d4856:	4628      	mov	r0, r5
            sprintf(buffer1, "%4.1f MPH  %3.0f%c  %4.1f%cF  %2.0f%%", convertKphToMph(windSpeedKph), heading, degreeSymbol, bme280.readTempF(), degreeSymbol, bme280.readFloatHumidity());
   d4858:	ee10 8a10 	vmov	r8, s0
    return kph * 0.6214;
   d485c:	f004 f888 	bl	d8970 <__aeabi_f2d>
   d4860:	a343      	add	r3, pc, #268	; (adr r3, d4970 <loop+0x2e0>)
   d4862:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4866:	f004 f8db 	bl	d8a20 <__aeabi_dmul>
   d486a:	f004 fb73 	bl	d8f54 <__aeabi_d2f>
            sprintf(buffer1, "%4.1f MPH  %3.0f%c  %4.1f%cF  %2.0f%%", convertKphToMph(windSpeedKph), heading, degreeSymbol, bme280.readTempF(), degreeSymbol, bme280.readFloatHumidity());
   d486e:	f004 f87f 	bl	d8970 <__aeabi_f2d>
   d4872:	4602      	mov	r2, r0
   d4874:	460b      	mov	r3, r1
   d4876:	4640      	mov	r0, r8
   d4878:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d487c:	f004 f878 	bl	d8970 <__aeabi_f2d>
   d4880:	25df      	movs	r5, #223	; 0xdf
   d4882:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4886:	4638      	mov	r0, r7
   d4888:	9506      	str	r5, [sp, #24]
   d488a:	f004 f871 	bl	d8970 <__aeabi_f2d>
   d488e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4892:	4630      	mov	r0, r6
   d4894:	9502      	str	r5, [sp, #8]
   d4896:	f004 f86b 	bl	d8970 <__aeabi_f2d>
   d489a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d489e:	e9cd 0100 	strd	r0, r1, [sp]
   d48a2:	4944      	ldr	r1, [pc, #272]	; (d49b4 <loop+0x324>)
   d48a4:	4842      	ldr	r0, [pc, #264]	; (d49b0 <loop+0x320>)
   d48a6:	f001 fcb3 	bl	d6210 <sprintf>
            screenNumber++;
   d48aa:	6823      	ldr	r3, [r4, #0]
   d48ac:	3301      	adds	r3, #1
            screenNumber = 0;
   d48ae:	6023      	str	r3, [r4, #0]
   d48b0:	e037      	b.n	d4922 <loop+0x292>
            sprintf(buffer1, "%4.1f MPH  %3.0f%c  %5.1fmB  Bat%3.0f%%", convertKphToMph(windSpeedKph), heading, degreeSymbol, bme280.readFloatPressure()/100.0f, battPercent);
   d48b2:	4839      	ldr	r0, [pc, #228]	; (d4998 <loop+0x308>)
   d48b4:	f000 fdee 	bl	d5494 <_ZN6BME28017readFloatPressureEv>
    return kph * 0.6214;
   d48b8:	4628      	mov	r0, r5
            sprintf(buffer1, "%4.1f MPH  %3.0f%c  %5.1fmB  Bat%3.0f%%", convertKphToMph(windSpeedKph), heading, degreeSymbol, bme280.readFloatPressure()/100.0f, battPercent);
   d48ba:	eef0 8a40 	vmov.f32	s17, s0
    return kph * 0.6214;
   d48be:	f004 f857 	bl	d8970 <__aeabi_f2d>
   d48c2:	a32b      	add	r3, pc, #172	; (adr r3, d4970 <loop+0x2e0>)
   d48c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d48c8:	f004 f8aa 	bl	d8a20 <__aeabi_dmul>
   d48cc:	f004 fb42 	bl	d8f54 <__aeabi_d2f>
            sprintf(buffer1, "%4.1f MPH  %3.0f%c  %5.1fmB  Bat%3.0f%%", convertKphToMph(windSpeedKph), heading, degreeSymbol, bme280.readFloatPressure()/100.0f, battPercent);
   d48d0:	f004 f84e 	bl	d8970 <__aeabi_f2d>
   d48d4:	4602      	mov	r2, r0
   d48d6:	460b      	mov	r3, r1
   d48d8:	ee18 0a10 	vmov	r0, s16
   d48dc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d48e0:	f004 f846 	bl	d8970 <__aeabi_f2d>
   d48e4:	eddf 7a2b 	vldr	s15, [pc, #172]	; d4994 <loop+0x304>
   d48e8:	eec8 7aa7 	vdiv.f32	s15, s17, s15
   d48ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d48f0:	ee17 0a90 	vmov	r0, s15
   d48f4:	f004 f83c 	bl	d8970 <__aeabi_f2d>
   d48f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d48fc:	21df      	movs	r1, #223	; 0xdf
   d48fe:	4630      	mov	r0, r6
   d4900:	9102      	str	r1, [sp, #8]
   d4902:	f004 f835 	bl	d8970 <__aeabi_f2d>
   d4906:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d490a:	e9cd 0100 	strd	r0, r1, [sp]
   d490e:	492a      	ldr	r1, [pc, #168]	; (d49b8 <loop+0x328>)
   d4910:	4827      	ldr	r0, [pc, #156]	; (d49b0 <loop+0x320>)
   d4912:	f001 fc7d 	bl	d6210 <sprintf>
            screenNumber++;
   d4916:	6823      	ldr	r3, [r4, #0]
            if (screenNumber == 8) {
   d4918:	2b07      	cmp	r3, #7
            screenNumber++;
   d491a:	f103 0201 	add.w	r2, r3, #1
            if (screenNumber == 8) {
   d491e:	d08a      	beq.n	d4836 <loop+0x1a6>
            screenNumber++;
   d4920:	6022      	str	r2, [r4, #0]
    Serial.println(buffer1);
   d4922:	f003 fa09 	bl	d7d38 <_Z16_fetch_usbserialv>
   d4926:	4922      	ldr	r1, [pc, #136]	; (d49b0 <loop+0x320>)
   d4928:	f002 ff73 	bl	d7812 <_ZN5Print7printlnEPKc>
    rewriteLcd(buffer1);
   d492c:	4820      	ldr	r0, [pc, #128]	; (d49b0 <loop+0x320>)
   d492e:	f7ff fe3f 	bl	d45b0 <_Z10debugPrintPKc>
}
   d4932:	b014      	add	sp, #80	; 0x50
   d4934:	ecbd 8b02 	vpop	{d8}
   d4938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d493c:	f3af 8000 	nop.w
   d4940:	00000000 	.word	0x00000000
   d4944:	412e8480 	.word	0x412e8480
   d4948:	9999999a 	.word	0x9999999a
   d494c:	3fb99999 	.word	0x3fb99999
   d4950:	147ae148 	.word	0x147ae148
   d4954:	402347ae 	.word	0x402347ae
   d4958:	d2c10294 	.word	0xd2c10294
   d495c:	3f5263af 	.word	0x3f5263af
   d4960:	00000000 	.word	0x00000000
   d4964:	3ff0cccd 	.word	0x3ff0cccd
   d4968:	a6b50b0f 	.word	0xa6b50b0f
   d496c:	3fd1c779 	.word	0x3fd1c779
   d4970:	40b78034 	.word	0x40b78034
   d4974:	3fe3e282 	.word	0x3fe3e282
   d4978:	2003e7d4 	.word	0x2003e7d4
   d497c:	2003e6b0 	.word	0x2003e6b0
   d4980:	2003e720 	.word	0x2003e720
   d4984:	01312cff 	.word	0x01312cff
   d4988:	43b38000 	.word	0x43b38000
   d498c:	40590000 	.word	0x40590000
   d4990:	00000000 	.word	0x00000000
   d4994:	42c80000 	.word	0x42c80000
   d4998:	2003e5f8 	.word	0x2003e5f8
   d499c:	47c35000 	.word	0x47c35000
   d49a0:	3fbdd2f2 	.word	0x3fbdd2f2
   d49a4:	2003e5f0 	.word	0x2003e5f0
   d49a8:	2003e724 	.word	0x2003e724
   d49ac:	000d978d 	.word	0x000d978d
   d49b0:	2003e63c 	.word	0x2003e63c
   d49b4:	000d973f 	.word	0x000d973f
   d49b8:	000d9765 	.word	0x000d9765

000d49bc <_Z19hallSensorInterruptv>:
void hallSensorInterrupt() {
   d49bc:	b538      	push	{r3, r4, r5, lr}
    if (previousMicroseconds <=0) {
   d49be:	4d07      	ldr	r5, [pc, #28]	; (d49dc <_Z19hallSensorInterruptv+0x20>)
   d49c0:	4c07      	ldr	r4, [pc, #28]	; (d49e0 <_Z19hallSensorInterruptv+0x24>)
   d49c2:	682b      	ldr	r3, [r5, #0]
   d49c4:	b923      	cbnz	r3, d49d0 <_Z19hallSensorInterruptv+0x14>
   d49c6:	f001 f9d7 	bl	d5d78 <HAL_Timer_Get_Micro_Seconds>
        previousMicroseconds = micros();
   d49ca:	6028      	str	r0, [r5, #0]
    currentMicroseconds = micros();   
   d49cc:	6020      	str	r0, [r4, #0]
}
   d49ce:	bd38      	pop	{r3, r4, r5, pc}
    previousMicroseconds = currentMicroseconds;
   d49d0:	6823      	ldr	r3, [r4, #0]
   d49d2:	602b      	str	r3, [r5, #0]
   d49d4:	f001 f9d0 	bl	d5d78 <HAL_Timer_Get_Micro_Seconds>
   d49d8:	e7f8      	b.n	d49cc <_Z19hallSensorInterruptv+0x10>
   d49da:	bf00      	nop
   d49dc:	2003e720 	.word	0x2003e720
   d49e0:	2003e6b0 	.word	0x2003e6b0

000d49e4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d49e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d49e6:	4616      	mov	r6, r2
   d49e8:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d49ea:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d49ec:	e9c0 2200 	strd	r2, r2, [r0]
   d49f0:	4604      	mov	r4, r0
   d49f2:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   d49f4:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d49f6:	4619      	mov	r1, r3
   d49f8:	a806      	add	r0, sp, #24
   d49fa:	f001 fcfb 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d49fe:	9916      	ldr	r1, [sp, #88]	; 0x58
   d4a00:	4638      	mov	r0, r7
   d4a02:	f001 fcf7 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d4a06:	7833      	ldrb	r3, [r6, #0]
   d4a08:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4a0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d4a0e:	9302      	str	r3, [sp, #8]
   d4a10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d4a12:	4620      	mov	r0, r4
   d4a14:	e9cd 7300 	strd	r7, r3, [sp]
   d4a18:	aa05      	add	r2, sp, #20
   d4a1a:	ab06      	add	r3, sp, #24
   d4a1c:	4629      	mov	r1, r5
   d4a1e:	f002 f949 	bl	d6cb4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d4a22:	4620      	mov	r0, r4
   d4a24:	b011      	add	sp, #68	; 0x44
   d4a26:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a28 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
}

float convertMbarToInHg(float mBar) {
    return mBar * 0.02953;
}
   d4a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
SYSTEM_THREAD(ENABLED)
   d4a2c:	2100      	movs	r1, #0
}
   d4a2e:	b091      	sub	sp, #68	; 0x44
              error_(SYSTEM_ERROR_NONE) {
   d4a30:	4dc3      	ldr	r5, [pc, #780]	; (d4d40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x318>)
SYSTEM_MODE(MANUAL)
   d4a32:	4ec4      	ldr	r6, [pc, #784]	; (d4d44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x31c>)
const BleUuid deviceInfoServiceUuid(            "0000180a-0000-1000-8000-00805f9b34fb");
   d4a34:	f8df 83f4 	ldr.w	r8, [pc, #1012]	; d4e2c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x404>
const BleUuid mfgNameUuid(                      "00002a29-0000-1000-8000-00805f9b34fb");
   d4a38:	f8df 93f4 	ldr.w	r9, [pc, #1012]	; d4e30 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x408>
const BleUuid appearanceUuid(                   "00002a01-0000-1000-8000-00805f9b34fb");
   d4a3c:	f8df a3f4 	ldr.w	sl, [pc, #1012]	; d4e34 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x40c>
BleCharacteristic deviceNameCharacteristic("Device Name", BleCharacteristicProperty::READ, deviceNameUuid, deviceInfoServiceUuid);
   d4a40:	4fc1      	ldr	r7, [pc, #772]	; (d4d48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x320>)
SYSTEM_THREAD(ENABLED)
   d4a42:	2001      	movs	r0, #1
   d4a44:	2400      	movs	r4, #0
   d4a46:	f001 fb47 	bl	d60d8 <system_thread_set_state>
    SleepResult() {}
   d4a4a:	4bc0      	ldr	r3, [pc, #768]	; (d4d4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x324>)
   d4a4c:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4a4e:	602c      	str	r4, [r5, #0]
   d4a50:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4a52:	71ac      	strb	r4, [r5, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4a54:	2003      	movs	r0, #3
   d4a56:	f001 fb2f 	bl	d60b8 <set_system_mode>
SYSTEM_MODE(MANUAL)
   d4a5a:	4632      	mov	r2, r6
   d4a5c:	49bc      	ldr	r1, [pc, #752]	; (d4d50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x328>)
   d4a5e:	4628      	mov	r0, r5
   d4a60:	f003 fb24 	bl	d80ac <__aeabi_atexit>
const BleUuid kestrelServiceUuid(               "03290000-EAB4-DEA1-B24E-44EC023874DB");
   d4a64:	49bb      	ldr	r1, [pc, #748]	; (d4d54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x32c>)
   d4a66:	48bc      	ldr	r0, [pc, #752]	; (d4d58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>)
const BleUuid deviceNameUuid(                   "00002a00-0000-1000-8000-00805f9b34fb");
   d4a68:	4dbc      	ldr	r5, [pc, #752]	; (d4d5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x334>)
const BleUuid kestrelServiceUuid(               "03290000-EAB4-DEA1-B24E-44EC023874DB");
   d4a6a:	f001 fdc3 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid deviceInfoServiceUuid(            "0000180a-0000-1000-8000-00805f9b34fb");
   d4a6e:	49bc      	ldr	r1, [pc, #752]	; (d4d60 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x338>)
   d4a70:	4640      	mov	r0, r8
   d4a72:	f001 fdbf 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid batteryServiceUuid(               "0000180f-0000-1000-8000-00805f9b34fb");
   d4a76:	49bb      	ldr	r1, [pc, #748]	; (d4d64 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x33c>)
   d4a78:	48bb      	ldr	r0, [pc, #748]	; (d4d68 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x340>)
   d4a7a:	f001 fdbb 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid mfgNameUuid(                      "00002a29-0000-1000-8000-00805f9b34fb");
   d4a7e:	49bb      	ldr	r1, [pc, #748]	; (d4d6c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x344>)
   d4a80:	4648      	mov	r0, r9
   d4a82:	f001 fdb7 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid deviceNameUuid(                   "00002a00-0000-1000-8000-00805f9b34fb");
   d4a86:	49ba      	ldr	r1, [pc, #744]	; (d4d70 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x348>)
   d4a88:	4628      	mov	r0, r5
   d4a8a:	f001 fdb3 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid appearanceUuid(                   "00002a01-0000-1000-8000-00805f9b34fb");
   d4a8e:	49b9      	ldr	r1, [pc, #740]	; (d4d74 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x34c>)
   d4a90:	4650      	mov	r0, sl
   d4a92:	f001 fdaf 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid serialNumberUuid(                 "00002a25-0000-1000-8000-00805f9b34fb");
   d4a96:	49b8      	ldr	r1, [pc, #736]	; (d4d78 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x350>)
   d4a98:	48b8      	ldr	r0, [pc, #736]	; (d4d7c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   d4a9a:	f001 fdab 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid hardwareVersionUuid(              "00002a27-0000-1000-8000-00805f9b34fb");
   d4a9e:	49b8      	ldr	r1, [pc, #736]	; (d4d80 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x358>)
   d4aa0:	48b8      	ldr	r0, [pc, #736]	; (d4d84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   d4aa2:	f001 fda7 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid firmwareVersionUuid(              "00002a26-0000-1000-8000-00805f9b34fb");
   d4aa6:	49b8      	ldr	r1, [pc, #736]	; (d4d88 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x360>)
   d4aa8:	48b8      	ldr	r0, [pc, #736]	; (d4d8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   d4aaa:	f001 fda3 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid softwareVersionUuid(              "00002a28-0000-1000-8000-00805f9b34fb");
   d4aae:	49b8      	ldr	r1, [pc, #736]	; (d4d90 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x368>)
   d4ab0:	48b8      	ldr	r0, [pc, #736]	; (d4d94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   d4ab2:	f001 fd9f 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid modelNumberUuid(                  "00002a24-0000-1000-8000-00805f9b34fb");
   d4ab6:	49b8      	ldr	r1, [pc, #736]	; (d4d98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x370>)
   d4ab8:	48b8      	ldr	r0, [pc, #736]	; (d4d9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   d4aba:	f001 fd9b 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid characteristic16bitUuid(          "03290310-EAB4-DEA1-B24E-44EC023874DB");
   d4abe:	49b8      	ldr	r1, [pc, #736]	; (d4da0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x378>)
   d4ac0:	48b8      	ldr	r0, [pc, #736]	; (d4da4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   d4ac2:	f001 fd97 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid characteristic32bitUuid(          "03290320-EAB4-DEA1-B24E-44EC023874DB");
   d4ac6:	49b8      	ldr	r1, [pc, #736]	; (d4da8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x380>)
   d4ac8:	48b8      	ldr	r0, [pc, #736]	; (d4dac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   d4aca:	f001 fd93 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid unknownCharacteristic101Uuid(     "03290101-EAB4-DEA1-B24E-44EC023874DB");
   d4ace:	49b8      	ldr	r1, [pc, #736]	; (d4db0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x388>)
   d4ad0:	48b8      	ldr	r0, [pc, #736]	; (d4db4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x38c>)
   d4ad2:	f001 fd8f 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid unknownCharacteristic102Uuid(     "03290102-EAB4-DEA1-B24E-44EC023874DB");
   d4ad6:	49b8      	ldr	r1, [pc, #736]	; (d4db8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x390>)
   d4ad8:	48b8      	ldr	r0, [pc, #736]	; (d4dbc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x394>)
   d4ada:	f001 fd8b 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid unknownCharacteristic103Uuid(     "03290103-EAB4-DEA1-B24E-44EC023874DB");
   d4ade:	49b8      	ldr	r1, [pc, #736]	; (d4dc0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x398>)
   d4ae0:	48b8      	ldr	r0, [pc, #736]	; (d4dc4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x39c>)
   d4ae2:	f001 fd87 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid unknownCharacteristic104Uuid(     "03290104-EAB4-DEA1-B24E-44EC023874DB");
   d4ae6:	49b8      	ldr	r1, [pc, #736]	; (d4dc8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a0>)
   d4ae8:	48b8      	ldr	r0, [pc, #736]	; (d4dcc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a4>)
   d4aea:	f001 fd83 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid unknownCharacteristic105Uuid(     "03290105-EAB4-DEA1-B24E-44EC023874DB");
   d4aee:	49b8      	ldr	r1, [pc, #736]	; (d4dd0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3a8>)
   d4af0:	48b8      	ldr	r0, [pc, #736]	; (d4dd4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3ac>)
   d4af2:	f001 fd7f 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid unknownCharacteristic200Uuid(     "03290200-EAB4-DEA1-B24E-44EC023874DB");
   d4af6:	49b8      	ldr	r1, [pc, #736]	; (d4dd8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3b0>)
   d4af8:	48b8      	ldr	r0, [pc, #736]	; (d4ddc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3b4>)
   d4afa:	f001 fd7b 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid unknownCharacteristic300Uuid(     "03290300-EAB4-DEA1-B24E-44EC023874DB");
   d4afe:	49b8      	ldr	r1, [pc, #736]	; (d4de0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3b8>)
   d4b00:	48b8      	ldr	r0, [pc, #736]	; (d4de4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3bc>)
   d4b02:	f001 fd77 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid unknownCharacteristic330Uuid(     "03290330-EAB4-DEA1-B24E-44EC023874DB");
   d4b06:	49b8      	ldr	r1, [pc, #736]	; (d4de8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3c0>)
   d4b08:	48b8      	ldr	r0, [pc, #736]	; (d4dec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3c4>)
   d4b0a:	f001 fd73 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid unknownCharacteristic340Uuid(     "03290340-EAB4-DEA1-B24E-44EC023874DB");
   d4b0e:	49b8      	ldr	r1, [pc, #736]	; (d4df0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3c8>)
   d4b10:	48b8      	ldr	r0, [pc, #736]	; (d4df4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3cc>)
   d4b12:	f001 fd6f 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid batteryLevelUuid(                 "00002a19-0000-1000-8000-00805f9b34fb");
   d4b16:	49b8      	ldr	r1, [pc, #736]	; (d4df8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3d0>)
   d4b18:	48b8      	ldr	r0, [pc, #736]	; (d4dfc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3d4>)
    value_ = static_cast<ValueType>(value);
   d4b1a:	f04f 0b02 	mov.w	fp, #2
   d4b1e:	f001 fd69 	bl	d65f4 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic deviceNameCharacteristic("Device Name", BleCharacteristicProperty::READ, deviceNameUuid, deviceInfoServiceUuid);
   d4b22:	4629      	mov	r1, r5
   d4b24:	a80b      	add	r0, sp, #44	; 0x2c
   d4b26:	ad06      	add	r5, sp, #24
   d4b28:	f88d b014 	strb.w	fp, [sp, #20]
   d4b2c:	f001 fc62 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4b30:	4641      	mov	r1, r8
   d4b32:	4628      	mov	r0, r5
   d4b34:	f001 fc5e 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4b38:	ab0b      	add	r3, sp, #44	; 0x2c
   d4b3a:	aa05      	add	r2, sp, #20
   d4b3c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4b40:	49af      	ldr	r1, [pc, #700]	; (d4e00 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3d8>)
   d4b42:	9500      	str	r5, [sp, #0]
   d4b44:	48af      	ldr	r0, [pc, #700]	; (d4e04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3dc>)
   d4b46:	f7ff ff4d 	bl	d49e4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4b4a:	4632      	mov	r2, r6
   d4b4c:	4639      	mov	r1, r7
   d4b4e:	48ad      	ldr	r0, [pc, #692]	; (d4e04 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3dc>)
   d4b50:	f003 faac 	bl	d80ac <__aeabi_atexit>
BleCharacteristic appearanceCharacteristic("Appearance", BleCharacteristicProperty::READ, appearanceUuid, deviceInfoServiceUuid);
   d4b54:	4651      	mov	r1, sl
   d4b56:	a80b      	add	r0, sp, #44	; 0x2c
   d4b58:	f8df a2dc 	ldr.w	sl, [pc, #732]	; d4e38 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x410>
   d4b5c:	f88d b014 	strb.w	fp, [sp, #20]
   d4b60:	f001 fc48 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4b64:	4641      	mov	r1, r8
   d4b66:	4628      	mov	r0, r5
   d4b68:	f001 fc44 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4b6c:	ab0b      	add	r3, sp, #44	; 0x2c
   d4b6e:	aa05      	add	r2, sp, #20
   d4b70:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4b74:	49a4      	ldr	r1, [pc, #656]	; (d4e08 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3e0>)
   d4b76:	9500      	str	r5, [sp, #0]
   d4b78:	4650      	mov	r0, sl
   d4b7a:	f7ff ff33 	bl	d49e4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4b7e:	4632      	mov	r2, r6
   d4b80:	4639      	mov	r1, r7
   d4b82:	4650      	mov	r0, sl
   d4b84:	f003 fa92 	bl	d80ac <__aeabi_atexit>
BleCharacteristic mfgNameCharacteristic("Manufacturer Name String", BleCharacteristicProperty::READ, mfgNameUuid, deviceInfoServiceUuid);
   d4b88:	4649      	mov	r1, r9
   d4b8a:	a80b      	add	r0, sp, #44	; 0x2c
   d4b8c:	f8df 92ac 	ldr.w	r9, [pc, #684]	; d4e3c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x414>
   d4b90:	f88d b014 	strb.w	fp, [sp, #20]
   d4b94:	f001 fc2e 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4b98:	4641      	mov	r1, r8
   d4b9a:	4628      	mov	r0, r5
   d4b9c:	f001 fc2a 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4ba0:	ab0b      	add	r3, sp, #44	; 0x2c
   d4ba2:	aa05      	add	r2, sp, #20
   d4ba4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4ba8:	4998      	ldr	r1, [pc, #608]	; (d4e0c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3e4>)
   d4baa:	9500      	str	r5, [sp, #0]
   d4bac:	4648      	mov	r0, r9
   d4bae:	f7ff ff19 	bl	d49e4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4bb2:	4632      	mov	r2, r6
   d4bb4:	4639      	mov	r1, r7
   d4bb6:	4648      	mov	r0, r9
   d4bb8:	f003 fa78 	bl	d80ac <__aeabi_atexit>
BleCharacteristic modelNumberCharacteristic("Model Number String", BleCharacteristicProperty::READ, modelNumberUuid, deviceInfoServiceUuid);
   d4bbc:	f8df 9280 	ldr.w	r9, [pc, #640]	; d4e40 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x418>
   d4bc0:	4976      	ldr	r1, [pc, #472]	; (d4d9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x374>)
   d4bc2:	f88d b014 	strb.w	fp, [sp, #20]
   d4bc6:	a80b      	add	r0, sp, #44	; 0x2c
   d4bc8:	f001 fc14 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4bcc:	4641      	mov	r1, r8
   d4bce:	4628      	mov	r0, r5
   d4bd0:	f001 fc10 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4bd4:	ab0b      	add	r3, sp, #44	; 0x2c
   d4bd6:	aa05      	add	r2, sp, #20
   d4bd8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4bdc:	498c      	ldr	r1, [pc, #560]	; (d4e10 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3e8>)
   d4bde:	9500      	str	r5, [sp, #0]
   d4be0:	4648      	mov	r0, r9
   d4be2:	f7ff feff 	bl	d49e4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4be6:	4632      	mov	r2, r6
   d4be8:	4639      	mov	r1, r7
   d4bea:	4648      	mov	r0, r9
   d4bec:	f003 fa5e 	bl	d80ac <__aeabi_atexit>
BleCharacteristic serialNumberCharacteristic("Serial Number String", BleCharacteristicProperty::READ, serialNumberUuid, deviceInfoServiceUuid);
   d4bf0:	f8df 9250 	ldr.w	r9, [pc, #592]	; d4e44 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x41c>
   d4bf4:	4961      	ldr	r1, [pc, #388]	; (d4d7c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x354>)
   d4bf6:	f88d b014 	strb.w	fp, [sp, #20]
   d4bfa:	a80b      	add	r0, sp, #44	; 0x2c
   d4bfc:	f001 fbfa 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4c00:	4641      	mov	r1, r8
   d4c02:	4628      	mov	r0, r5
   d4c04:	f001 fbf6 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4c08:	ab0b      	add	r3, sp, #44	; 0x2c
   d4c0a:	aa05      	add	r2, sp, #20
   d4c0c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4c10:	4980      	ldr	r1, [pc, #512]	; (d4e14 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3ec>)
   d4c12:	9500      	str	r5, [sp, #0]
   d4c14:	4648      	mov	r0, r9
   d4c16:	f7ff fee5 	bl	d49e4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4c1a:	4632      	mov	r2, r6
   d4c1c:	4639      	mov	r1, r7
   d4c1e:	4648      	mov	r0, r9
   d4c20:	f003 fa44 	bl	d80ac <__aeabi_atexit>
BleCharacteristic hardwareVersionCharacteristic("Hardware Revision String", BleCharacteristicProperty::READ, hardwareVersionUuid, deviceInfoServiceUuid);
   d4c24:	f8df 9220 	ldr.w	r9, [pc, #544]	; d4e48 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x420>
   d4c28:	4956      	ldr	r1, [pc, #344]	; (d4d84 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x35c>)
   d4c2a:	f88d b014 	strb.w	fp, [sp, #20]
   d4c2e:	a80b      	add	r0, sp, #44	; 0x2c
   d4c30:	f001 fbe0 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4c34:	4641      	mov	r1, r8
   d4c36:	4628      	mov	r0, r5
   d4c38:	f001 fbdc 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4c3c:	ab0b      	add	r3, sp, #44	; 0x2c
   d4c3e:	aa05      	add	r2, sp, #20
   d4c40:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4c44:	4974      	ldr	r1, [pc, #464]	; (d4e18 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3f0>)
   d4c46:	9500      	str	r5, [sp, #0]
   d4c48:	4648      	mov	r0, r9
   d4c4a:	f7ff fecb 	bl	d49e4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4c4e:	4632      	mov	r2, r6
   d4c50:	4639      	mov	r1, r7
   d4c52:	4648      	mov	r0, r9
   d4c54:	f003 fa2a 	bl	d80ac <__aeabi_atexit>
BleCharacteristic firmwareVersionCharacteristic("Firmware Revision String", BleCharacteristicProperty::READ, firmwareVersionUuid, deviceInfoServiceUuid);
   d4c58:	f8df 91f0 	ldr.w	r9, [pc, #496]	; d4e4c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x424>
   d4c5c:	494b      	ldr	r1, [pc, #300]	; (d4d8c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x364>)
   d4c5e:	f88d b014 	strb.w	fp, [sp, #20]
   d4c62:	a80b      	add	r0, sp, #44	; 0x2c
   d4c64:	f001 fbc6 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4c68:	4641      	mov	r1, r8
   d4c6a:	4628      	mov	r0, r5
   d4c6c:	f001 fbc2 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4c70:	ab0b      	add	r3, sp, #44	; 0x2c
   d4c72:	aa05      	add	r2, sp, #20
   d4c74:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4c78:	4968      	ldr	r1, [pc, #416]	; (d4e1c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3f4>)
   d4c7a:	9500      	str	r5, [sp, #0]
   d4c7c:	4648      	mov	r0, r9
   d4c7e:	f7ff feb1 	bl	d49e4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4c82:	4632      	mov	r2, r6
   d4c84:	4639      	mov	r1, r7
   d4c86:	4648      	mov	r0, r9
   d4c88:	f003 fa10 	bl	d80ac <__aeabi_atexit>
BleCharacteristic softwareVersionCharacteristic("Software Revision String", BleCharacteristicProperty::READ, softwareVersionUuid, deviceInfoServiceUuid);
   d4c8c:	4941      	ldr	r1, [pc, #260]	; (d4d94 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x36c>)
   d4c8e:	f88d b014 	strb.w	fp, [sp, #20]
   d4c92:	a80b      	add	r0, sp, #44	; 0x2c
   d4c94:	f001 fbae 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4c98:	4641      	mov	r1, r8
   d4c9a:	f8df 81b4 	ldr.w	r8, [pc, #436]	; d4e50 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x428>
BleCharacteristic characteristic16bit("Characteristic 16-bit", BleCharacteristicProperty::READ | BleCharacteristicProperty::NOTIFY, characteristic16bitUuid, kestrelServiceUuid);
   d4c9e:	f8df 91b4 	ldr.w	r9, [pc, #436]	; d4e54 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x42c>
BleCharacteristic softwareVersionCharacteristic("Software Revision String", BleCharacteristicProperty::READ, softwareVersionUuid, deviceInfoServiceUuid);
   d4ca2:	4628      	mov	r0, r5
   d4ca4:	f001 fba6 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4ca8:	ab0b      	add	r3, sp, #44	; 0x2c
   d4caa:	aa05      	add	r2, sp, #20
   d4cac:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4cb0:	495b      	ldr	r1, [pc, #364]	; (d4e20 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3f8>)
   d4cb2:	9500      	str	r5, [sp, #0]
   d4cb4:	4640      	mov	r0, r8
   d4cb6:	f7ff fe95 	bl	d49e4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4cba:	4632      	mov	r2, r6
   d4cbc:	4639      	mov	r1, r7
   d4cbe:	4640      	mov	r0, r8
   d4cc0:	f003 f9f4 	bl	d80ac <__aeabi_atexit>
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(ValueType value)
        : value_(value) {
   d4cc4:	f04f 0812 	mov.w	r8, #18
BleCharacteristic characteristic16bit("Characteristic 16-bit", BleCharacteristicProperty::READ | BleCharacteristicProperty::NOTIFY, characteristic16bitUuid, kestrelServiceUuid);
   d4cc8:	4936      	ldr	r1, [pc, #216]	; (d4da4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x37c>)
   d4cca:	f88d 8014 	strb.w	r8, [sp, #20]
   d4cce:	a80b      	add	r0, sp, #44	; 0x2c
   d4cd0:	f001 fb90 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4cd4:	4920      	ldr	r1, [pc, #128]	; (d4d58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>)
   d4cd6:	4628      	mov	r0, r5
   d4cd8:	f001 fb8c 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4cdc:	ab0b      	add	r3, sp, #44	; 0x2c
   d4cde:	aa05      	add	r2, sp, #20
   d4ce0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4ce4:	494f      	ldr	r1, [pc, #316]	; (d4e24 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3fc>)
   d4ce6:	9500      	str	r5, [sp, #0]
   d4ce8:	4648      	mov	r0, r9
   d4cea:	f7ff fe7b 	bl	d49e4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4cee:	4632      	mov	r2, r6
   d4cf0:	4639      	mov	r1, r7
   d4cf2:	4648      	mov	r0, r9
   d4cf4:	f003 f9da 	bl	d80ac <__aeabi_atexit>
BleCharacteristic characteristic32bit("Characteristic 32-bit", BleCharacteristicProperty::READ | BleCharacteristicProperty::NOTIFY, characteristic32bitUuid, kestrelServiceUuid);
   d4cf8:	f8df 915c 	ldr.w	r9, [pc, #348]	; d4e58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x430>
   d4cfc:	492b      	ldr	r1, [pc, #172]	; (d4dac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x384>)
   d4cfe:	f88d 8014 	strb.w	r8, [sp, #20]
   d4d02:	a80b      	add	r0, sp, #44	; 0x2c
   d4d04:	f001 fb76 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4d08:	4913      	ldr	r1, [pc, #76]	; (d4d58 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x330>)
   d4d0a:	4628      	mov	r0, r5
   d4d0c:	f001 fb72 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4d10:	ab0b      	add	r3, sp, #44	; 0x2c
   d4d12:	aa05      	add	r2, sp, #20
   d4d14:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4d18:	4943      	ldr	r1, [pc, #268]	; (d4e28 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x400>)
   d4d1a:	9500      	str	r5, [sp, #0]
   d4d1c:	4648      	mov	r0, r9
   d4d1e:	f7ff fe61 	bl	d49e4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4d22:	4632      	mov	r2, r6
   d4d24:	4639      	mov	r1, r7
   d4d26:	4648      	mov	r0, r9
   d4d28:	f003 f9c0 	bl	d80ac <__aeabi_atexit>
   d4d2c:	f88d 8014 	strb.w	r8, [sp, #20]
BleCharacteristic batteryLevelCharacteristic("Battery Lavel", BleCharacteristicProperty::READ | BleCharacteristicProperty::NOTIFY, batteryLevelUuid, batteryServiceUuid);
   d4d30:	4932      	ldr	r1, [pc, #200]	; (d4dfc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x3d4>)
   d4d32:	f8df 8128 	ldr.w	r8, [pc, #296]	; d4e5c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x434>
   d4d36:	a80b      	add	r0, sp, #44	; 0x2c
   d4d38:	f001 fb5c 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4d3c:	e090      	b.n	d4e60 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x438>
   d4d3e:	bf00      	nop
   d4d40:	2003e410 	.word	0x2003e410
   d4d44:	2003e40c 	.word	0x2003e40c
   d4d48:	000d6c0d 	.word	0x000d6c0d
   d4d4c:	ffff0000 	.word	0xffff0000
   d4d50:	000d40b3 	.word	0x000d40b3
   d4d54:	000d97a1 	.word	0x000d97a1
   d4d58:	2003e4a8 	.word	0x2003e4a8
   d4d5c:	2003e444 	.word	0x2003e444
   d4d60:	000d97c6 	.word	0x000d97c6
   d4d64:	000d97eb 	.word	0x000d97eb
   d4d68:	2003e494 	.word	0x2003e494
   d4d6c:	000d9810 	.word	0x000d9810
   d4d70:	000d9835 	.word	0x000d9835
   d4d74:	000d985a 	.word	0x000d985a
   d4d78:	000d987f 	.word	0x000d987f
   d4d7c:	2003e480 	.word	0x2003e480
   d4d80:	000d98a4 	.word	0x000d98a4
   d4d84:	2003e4d0 	.word	0x2003e4d0
   d4d88:	000d98c9 	.word	0x000d98c9
   d4d8c:	2003e4bc 	.word	0x2003e4bc
   d4d90:	000d98ee 	.word	0x000d98ee
   d4d94:	2003e4e4 	.word	0x2003e4e4
   d4d98:	000d9913 	.word	0x000d9913
   d4d9c:	2003e458 	.word	0x2003e458
   d4da0:	000d9938 	.word	0x000d9938
   d4da4:	2003e50c 	.word	0x2003e50c
   d4da8:	000d995d 	.word	0x000d995d
   d4dac:	2003e520 	.word	0x2003e520
   d4db0:	000d9982 	.word	0x000d9982
   d4db4:	2003e534 	.word	0x2003e534
   d4db8:	000d99a7 	.word	0x000d99a7
   d4dbc:	2003e548 	.word	0x2003e548
   d4dc0:	000d99cc 	.word	0x000d99cc
   d4dc4:	2003e55c 	.word	0x2003e55c
   d4dc8:	000d99f1 	.word	0x000d99f1
   d4dcc:	2003e570 	.word	0x2003e570
   d4dd0:	000d9a16 	.word	0x000d9a16
   d4dd4:	2003e584 	.word	0x2003e584
   d4dd8:	000d9a3b 	.word	0x000d9a3b
   d4ddc:	2003e598 	.word	0x2003e598
   d4de0:	000d9a60 	.word	0x000d9a60
   d4de4:	2003e5ac 	.word	0x2003e5ac
   d4de8:	000d9a85 	.word	0x000d9a85
   d4dec:	2003e5c0 	.word	0x2003e5c0
   d4df0:	000d9aaa 	.word	0x000d9aaa
   d4df4:	2003e5d4 	.word	0x2003e5d4
   d4df8:	000d9acf 	.word	0x000d9acf
   d4dfc:	2003e46c 	.word	0x2003e46c
   d4e00:	000d9af4 	.word	0x000d9af4
   d4e04:	2003e6b4 	.word	0x2003e6b4
   d4e08:	000d9b00 	.word	0x000d9b00
   d4e0c:	000d9b0b 	.word	0x000d9b0b
   d4e10:	000d9b24 	.word	0x000d9b24
   d4e14:	000d9b38 	.word	0x000d9b38
   d4e18:	000d9b4d 	.word	0x000d9b4d
   d4e1c:	000d9b66 	.word	0x000d9b66
   d4e20:	000d9b7f 	.word	0x000d9b7f
   d4e24:	000d9b98 	.word	0x000d9b98
   d4e28:	000d9bae 	.word	0x000d9bae
   d4e2c:	2003e4f8 	.word	0x2003e4f8
   d4e30:	2003e41c 	.word	0x2003e41c
   d4e34:	2003e430 	.word	0x2003e430
   d4e38:	2003e5e8 	.word	0x2003e5e8
   d4e3c:	2003e6cc 	.word	0x2003e6cc
   d4e40:	2003e718 	.word	0x2003e718
   d4e44:	2003e728 	.word	0x2003e728
   d4e48:	2003e6c4 	.word	0x2003e6c4
   d4e4c:	2003e6bc 	.word	0x2003e6bc
   d4e50:	2003e730 	.word	0x2003e730
   d4e54:	2003e6a0 	.word	0x2003e6a0
   d4e58:	2003e6a8 	.word	0x2003e6a8
   d4e5c:	2003e5f0 	.word	0x2003e5f0
   d4e60:	490d      	ldr	r1, [pc, #52]	; (d4e98 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x470>)
   d4e62:	4628      	mov	r0, r5
   d4e64:	f001 fac6 	bl	d63f4 <_ZN8particle7BleUuidC1ERKS0_>
   d4e68:	ab0b      	add	r3, sp, #44	; 0x2c
   d4e6a:	aa05      	add	r2, sp, #20
   d4e6c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4e70:	490a      	ldr	r1, [pc, #40]	; (d4e9c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x474>)
   d4e72:	9500      	str	r5, [sp, #0]
   d4e74:	4640      	mov	r0, r8
   d4e76:	f7ff fdb5 	bl	d49e4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4e7a:	4632      	mov	r2, r6
   d4e7c:	4639      	mov	r1, r7
   d4e7e:	4640      	mov	r0, r8
   d4e80:	f003 f914 	bl	d80ac <__aeabi_atexit>
MLX90393 mlx;
   d4e84:	4806      	ldr	r0, [pc, #24]	; (d4ea0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x478>)
   d4e86:	f000 f815 	bl	d4eb4 <_ZN8MLX90393C1Ev>
BME280 bme280;
   d4e8a:	4806      	ldr	r0, [pc, #24]	; (d4ea4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x47c>)
   d4e8c:	f000 fa78 	bl	d5380 <_ZN6BME280C1Ev>
}
   d4e90:	b011      	add	sp, #68	; 0x44
   d4e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4e96:	bf00      	nop
   d4e98:	2003e494 	.word	0x2003e494
   d4e9c:	000d9bc4 	.word	0x000d9bc4
   d4ea0:	2003e6d4 	.word	0x2003e6d4
   d4ea4:	2003e5f8 	.word	0x2003e5f8

000d4ea8 <_GLOBAL__sub_I_SystemMode>:
   d4ea8:	f7ff bdbe 	b.w	d4a28 <_Z41__static_initialization_and_destruction_0ii.constprop.0>

000d4eac <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4eac:	6803      	ldr	r3, [r0, #0]
   d4eae:	b2c9      	uxtb	r1, r1
   d4eb0:	689b      	ldr	r3, [r3, #8]
   d4eb2:	4718      	bx	r3

000d4eb4 <_ZN8MLX90393C1Ev>:
#include <MLX90393.h>

MLX90393::
MLX90393()
{
  I2C_address = 0;
   d4eb4:	2200      	movs	r2, #0
   d4eb6:	7082      	strb	r2, [r0, #2]

void
MLX90393::
cache_invalidate()
{
  cache.dirty = cache_t::ALL_DIRTY_MASK;
   d4eb8:	2208      	movs	r2, #8
   d4eba:	7202      	strb	r2, [r0, #8]
  gain_multipliers[0] = 5.f;
   d4ebc:	4a0d      	ldr	r2, [pc, #52]	; (d4ef4 <_ZN8MLX90393C1Ev+0x40>)
   d4ebe:	6102      	str	r2, [r0, #16]
  gain_multipliers[1] = 4.f;
   d4ec0:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
   d4ec4:	6142      	str	r2, [r0, #20]
  gain_multipliers[2] = 3.f;
   d4ec6:	4a0c      	ldr	r2, [pc, #48]	; (d4ef8 <_ZN8MLX90393C1Ev+0x44>)
   d4ec8:	6182      	str	r2, [r0, #24]
  gain_multipliers[3] = 2.5f;
   d4eca:	4a0c      	ldr	r2, [pc, #48]	; (d4efc <_ZN8MLX90393C1Ev+0x48>)
   d4ecc:	61c2      	str	r2, [r0, #28]
  gain_multipliers[4] = 2.f;
   d4ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d4ed2:	6202      	str	r2, [r0, #32]
  gain_multipliers[5] = 1.66666667f;
   d4ed4:	4a0a      	ldr	r2, [pc, #40]	; (d4f00 <_ZN8MLX90393C1Ev+0x4c>)
   d4ed6:	6242      	str	r2, [r0, #36]	; 0x24
  gain_multipliers[6] = 1.33333333f;
   d4ed8:	4a0a      	ldr	r2, [pc, #40]	; (d4f04 <_ZN8MLX90393C1Ev+0x50>)
   d4eda:	6282      	str	r2, [r0, #40]	; 0x28
  gain_multipliers[7] = 1.f;
   d4edc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   d4ee0:	62c2      	str	r2, [r0, #44]	; 0x2c
  base_xy_sens_hc0 = 0.196f;
   d4ee2:	4a09      	ldr	r2, [pc, #36]	; (d4f08 <_ZN8MLX90393C1Ev+0x54>)
   d4ee4:	6302      	str	r2, [r0, #48]	; 0x30
  base_z_sens_hc0 = 0.316f;
   d4ee6:	4a09      	ldr	r2, [pc, #36]	; (d4f0c <_ZN8MLX90393C1Ev+0x58>)
   d4ee8:	6342      	str	r2, [r0, #52]	; 0x34
  base_xy_sens_hc0xc = 0.150f;
   d4eea:	4a09      	ldr	r2, [pc, #36]	; (d4f10 <_ZN8MLX90393C1Ev+0x5c>)
   d4eec:	6382      	str	r2, [r0, #56]	; 0x38
  base_z_sens_hc0xc = 0.242f;
   d4eee:	4a09      	ldr	r2, [pc, #36]	; (d4f14 <_ZN8MLX90393C1Ev+0x60>)
   d4ef0:	63c2      	str	r2, [r0, #60]	; 0x3c
}
   d4ef2:	4770      	bx	lr
   d4ef4:	40a00000 	.word	0x40a00000
   d4ef8:	40400000 	.word	0x40400000
   d4efc:	40200000 	.word	0x40200000
   d4f00:	3fd55555 	.word	0x3fd55555
   d4f04:	3faaaaab 	.word	0x3faaaaab
   d4f08:	3e48b439 	.word	0x3e48b439
   d4f0c:	3ea1cac1 	.word	0x3ea1cac1
   d4f10:	3e19999a 	.word	0x3e19999a
   d4f14:	3e77ced9 	.word	0x3e77ced9

000d4f18 <_ZN8MLX9039316cache_invalidateEh>:

void
MLX90393::
cache_invalidate(uint8_t address)
{
  cache.dirty |= cache_t::ALL_DIRTY_MASK & (1<<address);
   d4f18:	2301      	movs	r3, #1
   d4f1a:	408b      	lsls	r3, r1
   d4f1c:	7a01      	ldrb	r1, [r0, #8]
   d4f1e:	f003 0308 	and.w	r3, r3, #8
   d4f22:	430b      	orrs	r3, r1
   d4f24:	7203      	strb	r3, [r0, #8]
}
   d4f26:	4770      	bx	lr

000d4f28 <_ZN8MLX903939cache_setEht>:

void
MLX90393::
cache_set(uint8_t address, uint16_t data){
  if (address < cache_t::SIZE){
   d4f28:	2902      	cmp	r1, #2
   d4f2a:	d808      	bhi.n	d4f3e <_ZN8MLX903939cache_setEht+0x16>
    cache.reg[address] = data;
   d4f2c:	eb00 0341 	add.w	r3, r0, r1, lsl #1
   d4f30:	815a      	strh	r2, [r3, #10]
    cache.dirty &= ~(1 << address);
   d4f32:	2301      	movs	r3, #1
   d4f34:	408b      	lsls	r3, r1
   d4f36:	7a01      	ldrb	r1, [r0, #8]
   d4f38:	ea21 0103 	bic.w	r1, r1, r3
   d4f3c:	7201      	strb	r1, [r0, #8]
  }
}
   d4f3e:	4770      	bx	lr

000d4f40 <_ZN8MLX9039311sendCommandEh>:


uint8_t
MLX90393::
sendCommand(uint8_t cmd)
{
   d4f40:	b538      	push	{r3, r4, r5, lr}
   d4f42:	4604      	mov	r4, r0
   d4f44:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(I2C_address);
   d4f46:	7881      	ldrb	r1, [r0, #2]
   d4f48:	6c00      	ldr	r0, [r0, #64]	; 0x40
   d4f4a:	f002 fae5 	bl	d7518 <_ZN7TwoWire17beginTransmissionEh>
  if (_i2cPort->write(cmd) != 1){ return STATUS_ERROR; }
   d4f4e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d4f50:	6803      	ldr	r3, [r0, #0]
   d4f52:	4629      	mov	r1, r5
   d4f54:	689b      	ldr	r3, [r3, #8]
   d4f56:	4798      	blx	r3
   d4f58:	2801      	cmp	r0, #1
   d4f5a:	4605      	mov	r5, r0
   d4f5c:	d001      	beq.n	d4f62 <_ZN8MLX9039311sendCommandEh+0x22>
   d4f5e:	20ff      	movs	r0, #255	; 0xff
  if (_i2cPort->endTransmission()){ return STATUS_ERROR; }
  if (_i2cPort->requestFrom(I2C_address, uint8_t(1)) != 1){ return STATUS_ERROR; }

  return _i2cPort->read();
}
   d4f60:	bd38      	pop	{r3, r4, r5, pc}
  if (_i2cPort->endTransmission()){ return STATUS_ERROR; }
   d4f62:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d4f64:	f002 fae0 	bl	d7528 <_ZN7TwoWire15endTransmissionEv>
   d4f68:	2800      	cmp	r0, #0
   d4f6a:	d1f8      	bne.n	d4f5e <_ZN8MLX9039311sendCommandEh+0x1e>
  if (_i2cPort->requestFrom(I2C_address, uint8_t(1)) != 1){ return STATUS_ERROR; }
   d4f6c:	78a1      	ldrb	r1, [r4, #2]
   d4f6e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d4f70:	462a      	mov	r2, r5
   d4f72:	f002 face 	bl	d7512 <_ZN7TwoWire11requestFromEhj>
   d4f76:	2801      	cmp	r0, #1
   d4f78:	d1f1      	bne.n	d4f5e <_ZN8MLX9039311sendCommandEh+0x1e>
  return _i2cPort->read();
   d4f7a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d4f7c:	6803      	ldr	r3, [r0, #0]
   d4f7e:	695b      	ldr	r3, [r3, #20]
   d4f80:	4798      	blx	r3
   d4f82:	b2c0      	uxtb	r0, r0
   d4f84:	e7ec      	b.n	d4f60 <_ZN8MLX9039311sendCommandEh+0x20>

000d4f86 <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE>:
}

uint8_t
MLX90393::
readMeasurement(uint8_t zyxt_flags, txyzRaw& txyz_result)
{
   d4f86:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d4f8a:	4681      	mov	r9, r0
   d4f8c:	460c      	mov	r4, r1
  uint8_t cmd = CMD_READ_MEASUREMENT | (zyxt_flags & 0xf);
  _i2cPort->beginTransmission(I2C_address);
   d4f8e:	7881      	ldrb	r1, [r0, #2]
   d4f90:	6c00      	ldr	r0, [r0, #64]	; 0x40
{
   d4f92:	4616      	mov	r6, r2
  _i2cPort->beginTransmission(I2C_address);
   d4f94:	f002 fac0 	bl	d7518 <_ZN7TwoWire17beginTransmissionEh>
  if(_i2cPort->write(cmd) != 1){
   d4f98:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
   d4f9c:	6803      	ldr	r3, [r0, #0]
  uint8_t cmd = CMD_READ_MEASUREMENT | (zyxt_flags & 0xf);
   d4f9e:	f004 010f 	and.w	r1, r4, #15
  if(_i2cPort->write(cmd) != 1){
   d4fa2:	689b      	ldr	r3, [r3, #8]
   d4fa4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   d4fa8:	4798      	blx	r3
   d4faa:	2801      	cmp	r0, #1
   d4fac:	d003      	beq.n	d4fb6 <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0x30>
                       ((zyxt_flags & Y_FLAG)?2:0) +
                       ((zyxt_flags & X_FLAG)?2:0) +
                       ((zyxt_flags & T_FLAG)?2:0) );

  if(_i2cPort->requestFrom(I2C_address, count) != count){
    return STATUS_ERROR;
   d4fae:	20ff      	movs	r0, #255	; 0xff
  } else {
    txyz_result.z = 0;
  }

  return buffer[0];
}
   d4fb0:	b004      	add	sp, #16
   d4fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (_i2cPort->endTransmission()){
   d4fb6:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
   d4fba:	f002 fab5 	bl	d7528 <_ZN7TwoWire15endTransmissionEv>
   d4fbe:	4680      	mov	r8, r0
   d4fc0:	2800      	cmp	r0, #0
   d4fc2:	d1f4      	bne.n	d4fae <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0x28>
                       ((zyxt_flags & X_FLAG)?2:0) +
   d4fc4:	f004 0702 	and.w	r7, r4, #2
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
   d4fc8:	10a5      	asrs	r5, r4, #2
   d4fca:	1c7b      	adds	r3, r7, #1
   d4fcc:	f005 0502 	and.w	r5, r5, #2
   d4fd0:	441d      	add	r5, r3
                       ((zyxt_flags & Y_FLAG)?2:0) +
   d4fd2:	1063      	asrs	r3, r4, #1
   d4fd4:	f003 0302 	and.w	r3, r3, #2
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
   d4fd8:	441d      	add	r5, r3
                       ((zyxt_flags & T_FLAG)?2:0) );
   d4fda:	0063      	lsls	r3, r4, #1
   d4fdc:	f003 0302 	and.w	r3, r3, #2
  uint8_t count = 1 + (((zyxt_flags & Z_FLAG)?2:0) +
   d4fe0:	441d      	add	r5, r3
  if(_i2cPort->requestFrom(I2C_address, count) != count){
   d4fe2:	f899 1002 	ldrb.w	r1, [r9, #2]
   d4fe6:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
   d4fea:	462a      	mov	r2, r5
   d4fec:	f002 fa91 	bl	d7512 <_ZN7TwoWire11requestFromEhj>
   d4ff0:	4285      	cmp	r5, r0
   d4ff2:	d1dc      	bne.n	d4fae <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0x28>
   d4ff4:	f10d 0a04 	add.w	sl, sp, #4
    if (_i2cPort->available()){
   d4ff8:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
   d4ffc:	6803      	ldr	r3, [r0, #0]
   d4ffe:	691b      	ldr	r3, [r3, #16]
   d5000:	4798      	blx	r3
   d5002:	2800      	cmp	r0, #0
   d5004:	d0d3      	beq.n	d4fae <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0x28>
      buffer[i] = _i2cPort->read();
   d5006:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
   d500a:	6803      	ldr	r3, [r0, #0]
   d500c:	695b      	ldr	r3, [r3, #20]
   d500e:	4798      	blx	r3
  for (uint8_t i=0; i < count; i++){
   d5010:	f108 0801 	add.w	r8, r8, #1
   d5014:	fa5f f888 	uxtb.w	r8, r8
   d5018:	4545      	cmp	r5, r8
      buffer[i] = _i2cPort->read();
   d501a:	f80a 0b01 	strb.w	r0, [sl], #1
  for (uint8_t i=0; i < count; i++){
   d501e:	d1eb      	bne.n	d4ff8 <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0x72>
  if (zyxt_flags & T_FLAG){
   d5020:	f014 0201 	ands.w	r2, r4, #1
    txyz_result.t =  (uint16_t(buffer[i])<<8) | buffer[i+1];
   d5024:	bf1d      	ittte	ne
   d5026:	f89d 3005 	ldrbne.w	r3, [sp, #5]
   d502a:	f89d 2006 	ldrbne.w	r2, [sp, #6]
   d502e:	ea42 2203 	orrne.w	r2, r2, r3, lsl #8
  uint8_t i = 1;
   d5032:	2301      	moveq	r3, #1
    i += 2;
   d5034:	bf18      	it	ne
   d5036:	2303      	movne	r3, #3
   d5038:	8032      	strh	r2, [r6, #0]
  if (zyxt_flags & X_FLAG){
   d503a:	b33f      	cbz	r7, d508c <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0x106>
    txyz_result.x =  (uint16_t(buffer[i])<<8) | buffer[i+1];
   d503c:	aa04      	add	r2, sp, #16
   d503e:	18d1      	adds	r1, r2, r3
    i += 2;
   d5040:	3302      	adds	r3, #2
    txyz_result.x =  (uint16_t(buffer[i])<<8) | buffer[i+1];
   d5042:	f811 0c0c 	ldrb.w	r0, [r1, #-12]
   d5046:	f811 2c0b 	ldrb.w	r2, [r1, #-11]
    i += 2;
   d504a:	b2db      	uxtb	r3, r3
    txyz_result.x =  (uint16_t(buffer[i])<<8) | buffer[i+1];
   d504c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    i += 2;
   d5050:	8072      	strh	r2, [r6, #2]
  if (zyxt_flags & Y_FLAG){
   d5052:	f014 0204 	ands.w	r2, r4, #4
   d5056:	d009      	beq.n	d506c <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0xe6>
    txyz_result.y =  (uint16_t(buffer[i])<<8) | buffer[i+1];
   d5058:	aa04      	add	r2, sp, #16
   d505a:	18d1      	adds	r1, r2, r3
    i += 2;
   d505c:	3302      	adds	r3, #2
    txyz_result.y =  (uint16_t(buffer[i])<<8) | buffer[i+1];
   d505e:	f811 0c0c 	ldrb.w	r0, [r1, #-12]
   d5062:	f811 2c0b 	ldrb.w	r2, [r1, #-11]
    i += 2;
   d5066:	b2db      	uxtb	r3, r3
    txyz_result.y =  (uint16_t(buffer[i])<<8) | buffer[i+1];
   d5068:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  if (zyxt_flags & Z_FLAG){
   d506c:	f014 0408 	ands.w	r4, r4, #8
   d5070:	80b2      	strh	r2, [r6, #4]
   d5072:	d007      	beq.n	d5084 <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0xfe>
    txyz_result.z =  (uint16_t(buffer[i])<<8) | buffer[i+1];
   d5074:	aa04      	add	r2, sp, #16
   d5076:	4413      	add	r3, r2
   d5078:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
   d507c:	f813 4c0b 	ldrb.w	r4, [r3, #-11]
   d5080:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
  return buffer[0];
   d5084:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d5088:	80f4      	strh	r4, [r6, #6]
   d508a:	e791      	b.n	d4fb0 <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0x2a>
    txyz_result.x = 0;
   d508c:	463a      	mov	r2, r7
   d508e:	e7df      	b.n	d5050 <_ZN8MLX9039315readMeasurementEhRNS_7txyzRawE+0xca>

000d5090 <_ZN8MLX9039312readRegisterEhRt>:

uint8_t
MLX90393::
readRegister(uint8_t address, uint16_t& data)
{
   d5090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5094:	4604      	mov	r4, r0
   d5096:	460e      	mov	r6, r1
  _i2cPort->beginTransmission(I2C_address);
   d5098:	7881      	ldrb	r1, [r0, #2]
   d509a:	6c00      	ldr	r0, [r0, #64]	; 0x40
{
   d509c:	4617      	mov	r7, r2
  _i2cPort->beginTransmission(I2C_address);
   d509e:	f002 fa3b 	bl	d7518 <_ZN7TwoWire17beginTransmissionEh>
  if (_i2cPort->write(CMD_READ_REGISTER) != 1){ return STATUS_ERROR; }
   d50a2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d50a4:	2150      	movs	r1, #80	; 0x50
   d50a6:	f7ff ff01 	bl	d4eac <_ZN7TwoWire5writeEi>
   d50aa:	2801      	cmp	r0, #1
   d50ac:	d003      	beq.n	d50b6 <_ZN8MLX9039312readRegisterEhRt+0x26>
   d50ae:	25ff      	movs	r5, #255	; 0xff
  b_l = _i2cPort->read();

  data = (uint16_t(b_h)<<8) | b_l;
  cache_set(address, data);
  return status;
}
   d50b0:	4628      	mov	r0, r5
   d50b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (_i2cPort->write((address & 0x3f)<<2) != 1){ return STATUS_ERROR; }
   d50b6:	00b1      	lsls	r1, r6, #2
   d50b8:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d50ba:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   d50be:	f7ff fef5 	bl	d4eac <_ZN7TwoWire5writeEi>
   d50c2:	2801      	cmp	r0, #1
   d50c4:	d1f3      	bne.n	d50ae <_ZN8MLX9039312readRegisterEhRt+0x1e>
  if (_i2cPort->endTransmission()){ return STATUS_ERROR; }
   d50c6:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d50c8:	f002 fa2e 	bl	d7528 <_ZN7TwoWire15endTransmissionEv>
   d50cc:	2800      	cmp	r0, #0
   d50ce:	d1ee      	bne.n	d50ae <_ZN8MLX9039312readRegisterEhRt+0x1e>
  if (_i2cPort->requestFrom(I2C_address, uint8_t(3)) != 3){ return STATUS_ERROR; }
   d50d0:	78a1      	ldrb	r1, [r4, #2]
   d50d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d50d4:	2203      	movs	r2, #3
   d50d6:	f002 fa1c 	bl	d7512 <_ZN7TwoWire11requestFromEhj>
   d50da:	2803      	cmp	r0, #3
   d50dc:	d1e7      	bne.n	d50ae <_ZN8MLX9039312readRegisterEhRt+0x1e>
  if (!_i2cPort->available()){ return STATUS_ERROR; }
   d50de:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d50e0:	6803      	ldr	r3, [r0, #0]
   d50e2:	691b      	ldr	r3, [r3, #16]
   d50e4:	4798      	blx	r3
   d50e6:	2800      	cmp	r0, #0
   d50e8:	d0e1      	beq.n	d50ae <_ZN8MLX9039312readRegisterEhRt+0x1e>
  status = _i2cPort->read();
   d50ea:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d50ec:	6803      	ldr	r3, [r0, #0]
   d50ee:	695b      	ldr	r3, [r3, #20]
   d50f0:	4798      	blx	r3
   d50f2:	4605      	mov	r5, r0
  if (!_i2cPort->available()){ return STATUS_ERROR; }
   d50f4:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d50f6:	6803      	ldr	r3, [r0, #0]
   d50f8:	691b      	ldr	r3, [r3, #16]
   d50fa:	4798      	blx	r3
   d50fc:	2800      	cmp	r0, #0
   d50fe:	d0d6      	beq.n	d50ae <_ZN8MLX9039312readRegisterEhRt+0x1e>
  b_h = _i2cPort->read();
   d5100:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d5102:	6803      	ldr	r3, [r0, #0]
   d5104:	695b      	ldr	r3, [r3, #20]
   d5106:	4798      	blx	r3
   d5108:	4680      	mov	r8, r0
  if (!_i2cPort->available()){ return STATUS_ERROR; }
   d510a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d510c:	6803      	ldr	r3, [r0, #0]
   d510e:	691b      	ldr	r3, [r3, #16]
   d5110:	4798      	blx	r3
   d5112:	2800      	cmp	r0, #0
   d5114:	d0cb      	beq.n	d50ae <_ZN8MLX9039312readRegisterEhRt+0x1e>
  b_l = _i2cPort->read();
   d5116:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d5118:	6803      	ldr	r3, [r0, #0]
   d511a:	695b      	ldr	r3, [r3, #20]
   d511c:	4798      	blx	r3
  data = (uint16_t(b_h)<<8) | b_l;
   d511e:	b2c3      	uxtb	r3, r0
   d5120:	ea43 2008 	orr.w	r0, r3, r8, lsl #8
   d5124:	b282      	uxth	r2, r0
   d5126:	803a      	strh	r2, [r7, #0]
  cache_set(address, data);
   d5128:	4631      	mov	r1, r6
   d512a:	4620      	mov	r0, r4
  status = _i2cPort->read();
   d512c:	b2ed      	uxtb	r5, r5
  cache_set(address, data);
   d512e:	f7ff fefb 	bl	d4f28 <_ZN8MLX903939cache_setEht>
  return status;
   d5132:	e7bd      	b.n	d50b0 <_ZN8MLX9039312readRegisterEhRt+0x20>

000d5134 <_ZN8MLX9039313writeRegisterEht>:

uint8_t
MLX90393::
writeRegister(uint8_t address, uint16_t data)
{
   d5134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5136:	4604      	mov	r4, r0
   d5138:	4615      	mov	r5, r2
   d513a:	460e      	mov	r6, r1
  cache_invalidate(address);
   d513c:	f7ff feec 	bl	d4f18 <_ZN8MLX9039316cache_invalidateEh>

  _i2cPort->beginTransmission(I2C_address);
   d5140:	7881      	ldrb	r1, [r0, #2]
   d5142:	6c00      	ldr	r0, [r0, #64]	; 0x40
   d5144:	f002 f9e8 	bl	d7518 <_ZN7TwoWire17beginTransmissionEh>
  if (_i2cPort->write(CMD_WRITE_REGISTER) != 1){ return STATUS_ERROR; }
   d5148:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d514a:	2160      	movs	r1, #96	; 0x60
   d514c:	f7ff feae 	bl	d4eac <_ZN7TwoWire5writeEi>
   d5150:	2801      	cmp	r0, #1
   d5152:	d002      	beq.n	d515a <_ZN8MLX9039313writeRegisterEht+0x26>
   d5154:	27ff      	movs	r7, #255	; 0xff
  const uint8_t status = _i2cPort->read();
  if (isOK(status)) {
    cache_set(address, data);
  }
  return status;
}
   d5156:	4638      	mov	r0, r7
   d5158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (_i2cPort->write((data & 0xff00) >> 8) != 1){ return STATUS_ERROR; }
   d515a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d515c:	0a29      	lsrs	r1, r5, #8
   d515e:	f7ff fea5 	bl	d4eac <_ZN7TwoWire5writeEi>
   d5162:	2801      	cmp	r0, #1
   d5164:	d1f6      	bne.n	d5154 <_ZN8MLX9039313writeRegisterEht+0x20>
  if (_i2cPort->write(data & 0x00ff) != 1){ return STATUS_ERROR; }
   d5166:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d5168:	b2e9      	uxtb	r1, r5
   d516a:	f7ff fe9f 	bl	d4eac <_ZN7TwoWire5writeEi>
   d516e:	2801      	cmp	r0, #1
   d5170:	d1f0      	bne.n	d5154 <_ZN8MLX9039313writeRegisterEht+0x20>
  if (_i2cPort->write((address & 0x3f)<<2) != 1){ return STATUS_ERROR; }
   d5172:	00b1      	lsls	r1, r6, #2
   d5174:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d5176:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   d517a:	f7ff fe97 	bl	d4eac <_ZN7TwoWire5writeEi>
   d517e:	2801      	cmp	r0, #1
   d5180:	4607      	mov	r7, r0
   d5182:	d1e7      	bne.n	d5154 <_ZN8MLX9039313writeRegisterEht+0x20>
  if (_i2cPort->endTransmission()){ return STATUS_ERROR; }
   d5184:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d5186:	f002 f9cf 	bl	d7528 <_ZN7TwoWire15endTransmissionEv>
   d518a:	2800      	cmp	r0, #0
   d518c:	d1e2      	bne.n	d5154 <_ZN8MLX9039313writeRegisterEht+0x20>
  if (_i2cPort->requestFrom(I2C_address, uint8_t(1)) != 1){ return STATUS_ERROR; }
   d518e:	78a1      	ldrb	r1, [r4, #2]
   d5190:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d5192:	463a      	mov	r2, r7
   d5194:	f002 f9bd 	bl	d7512 <_ZN7TwoWire11requestFromEhj>
   d5198:	2801      	cmp	r0, #1
   d519a:	d1db      	bne.n	d5154 <_ZN8MLX9039313writeRegisterEht+0x20>
  if (!_i2cPort->available()){ return STATUS_ERROR; }
   d519c:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d519e:	6803      	ldr	r3, [r0, #0]
   d51a0:	691b      	ldr	r3, [r3, #16]
   d51a2:	4798      	blx	r3
   d51a4:	2800      	cmp	r0, #0
   d51a6:	d0d5      	beq.n	d5154 <_ZN8MLX9039313writeRegisterEht+0x20>
  const uint8_t status = _i2cPort->read();
   d51a8:	6c20      	ldr	r0, [r4, #64]	; 0x40
   d51aa:	6803      	ldr	r3, [r0, #0]
   d51ac:	695b      	ldr	r3, [r3, #20]
   d51ae:	4798      	blx	r3
  if (isOK(status)) {
   d51b0:	06c3      	lsls	r3, r0, #27
  const uint8_t status = _i2cPort->read();
   d51b2:	b2c7      	uxtb	r7, r0
  if (isOK(status)) {
   d51b4:	d4cf      	bmi.n	d5156 <_ZN8MLX9039313writeRegisterEht+0x22>
    cache_set(address, data);
   d51b6:	462a      	mov	r2, r5
   d51b8:	4631      	mov	r1, r6
   d51ba:	4620      	mov	r0, r4
   d51bc:	f7ff feb4 	bl	d4f28 <_ZN8MLX903939cache_setEht>
   d51c0:	e7c9      	b.n	d5156 <_ZN8MLX9039313writeRegisterEht+0x22>

000d51c2 <_ZN8MLX903935resetEv>:
  cache.dirty = cache_t::ALL_DIRTY_MASK;
   d51c2:	2308      	movs	r3, #8

uint8_t
MLX90393::
reset()
{
   d51c4:	b510      	push	{r4, lr}
  cache_invalidate();

  uint8_t status = sendCommand(CMD_RESET);
   d51c6:	21f0      	movs	r1, #240	; 0xf0
  cache.dirty = cache_t::ALL_DIRTY_MASK;
   d51c8:	7203      	strb	r3, [r0, #8]
  uint8_t status = sendCommand(CMD_RESET);
   d51ca:	f7ff feb9 	bl	d4f40 <_ZN8MLX9039311sendCommandEh>
   d51ce:	4604      	mov	r4, r0
  //Device now resets. We must give it time to complete
  delay(2);
   d51d0:	2002      	movs	r0, #2
   d51d2:	f001 f82d 	bl	d6230 <delay>
  // POR is 1.6ms max. Software reset time limit is not specified.
  // 2ms was found to be good.

  return status;
}
   d51d6:	4620      	mov	r0, r4
   d51d8:	bd10      	pop	{r4, pc}

000d51da <_ZN8MLX9039310setGainSelEh>:
}

uint8_t
MLX90393::
setGainSel(uint8_t gain_sel)
{
   d51da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d51dc:	460d      	mov	r5, r1
  uint16_t old_val;
  uint8_t status1 = readRegister(GAIN_SEL_REG, old_val);
   d51de:	f10d 0206 	add.w	r2, sp, #6
   d51e2:	2100      	movs	r1, #0
{
   d51e4:	4606      	mov	r6, r0
  uint8_t status1 = readRegister(GAIN_SEL_REG, old_val);
   d51e6:	f7ff ff53 	bl	d5090 <_ZN8MLX9039312readRegisterEhRt>

  uint8_t status2 = writeRegister(GAIN_SEL_REG,
                                  (old_val & ~GAIN_SEL_MASK) |
   d51ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
                                  ((uint16_t(gain_sel) << GAIN_SEL_SHIFT) &
   d51ee:	012d      	lsls	r5, r5, #4
   d51f0:	f005 0570 	and.w	r5, r5, #112	; 0x70
                                  (old_val & ~GAIN_SEL_MASK) |
   d51f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   d51f8:	432a      	orrs	r2, r5
  uint8_t status1 = readRegister(GAIN_SEL_REG, old_val);
   d51fa:	4604      	mov	r4, r0
  uint8_t status2 = writeRegister(GAIN_SEL_REG,
   d51fc:	b292      	uxth	r2, r2
   d51fe:	2100      	movs	r1, #0
   d5200:	4630      	mov	r0, r6
   d5202:	f7ff ff97 	bl	d5134 <_ZN8MLX9039313writeRegisterEht>
  return (status & ERROR_BIT) ? STATUS_ERROR : STATUS_OK;
   d5206:	4320      	orrs	r0, r4
                                   GAIN_SEL_MASK));
  return checkStatus(status1) | checkStatus(status2);
   d5208:	f340 1000 	sbfx	r0, r0, #4, #1
}
   d520c:	b2c0      	uxtb	r0, r0
   d520e:	b002      	add	sp, #8
   d5210:	bd70      	pop	{r4, r5, r6, pc}

000d5212 <_ZN8MLX9039315setOverSamplingEh>:
}

uint8_t
MLX90393::
setOverSampling(uint8_t osr)
{
   d5212:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5214:	460d      	mov	r5, r1
  uint16_t old_val;
  uint8_t status1 = readRegister(OSR_REG, old_val);
   d5216:	f10d 0206 	add.w	r2, sp, #6
   d521a:	2102      	movs	r1, #2
{
   d521c:	4606      	mov	r6, r0
  uint8_t status1 = readRegister(OSR_REG, old_val);
   d521e:	f7ff ff37 	bl	d5090 <_ZN8MLX9039312readRegisterEhRt>
  uint8_t status2 = writeRegister(OSR_REG,
                                  (old_val & ~OSR_MASK) |
   d5222:	f8bd 2006 	ldrh.w	r2, [sp, #6]
                                  ((uint16_t(osr) << OSR_SHIFT) & OSR_MASK));
   d5226:	f005 0503 	and.w	r5, r5, #3
                                  (old_val & ~OSR_MASK) |
   d522a:	f022 0203 	bic.w	r2, r2, #3
   d522e:	432a      	orrs	r2, r5
  uint8_t status1 = readRegister(OSR_REG, old_val);
   d5230:	4604      	mov	r4, r0
  uint8_t status2 = writeRegister(OSR_REG,
   d5232:	b292      	uxth	r2, r2
   d5234:	2102      	movs	r1, #2
   d5236:	4630      	mov	r0, r6
   d5238:	f7ff ff7c 	bl	d5134 <_ZN8MLX9039313writeRegisterEht>
  return (status & ERROR_BIT) ? STATUS_ERROR : STATUS_OK;
   d523c:	4320      	orrs	r0, r4
  return checkStatus(status1) | checkStatus(status2);
   d523e:	f340 1000 	sbfx	r0, r0, #4, #1
}
   d5242:	b2c0      	uxtb	r0, r0
   d5244:	b002      	add	sp, #8
   d5246:	bd70      	pop	{r4, r5, r6, pc}

000d5248 <_ZN8MLX9039319setDigitalFilteringEh>:
}

uint8_t
MLX90393::
setDigitalFiltering(uint8_t dig_flt)
{
   d5248:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d524a:	460d      	mov	r5, r1
  uint16_t old_val;
  uint8_t status1 = readRegister(DIG_FLT_REG, old_val);
   d524c:	f10d 0206 	add.w	r2, sp, #6
   d5250:	2102      	movs	r1, #2
{
   d5252:	4606      	mov	r6, r0
  uint8_t status1 = readRegister(DIG_FLT_REG, old_val);
   d5254:	f7ff ff1c 	bl	d5090 <_ZN8MLX9039312readRegisterEhRt>
  uint8_t status2 = writeRegister(DIG_FLT_REG,
                                  (old_val & ~DIG_FLT_MASK) |
   d5258:	f8bd 2006 	ldrh.w	r2, [sp, #6]
                                  ((uint16_t(dig_flt) << DIG_FLT_SHIFT) &
   d525c:	00ad      	lsls	r5, r5, #2
   d525e:	f005 051c 	and.w	r5, r5, #28
                                  (old_val & ~DIG_FLT_MASK) |
   d5262:	f022 021c 	bic.w	r2, r2, #28
   d5266:	432a      	orrs	r2, r5
  uint8_t status1 = readRegister(DIG_FLT_REG, old_val);
   d5268:	4604      	mov	r4, r0
  uint8_t status2 = writeRegister(DIG_FLT_REG,
   d526a:	b292      	uxth	r2, r2
   d526c:	2102      	movs	r1, #2
   d526e:	4630      	mov	r0, r6
   d5270:	f7ff ff60 	bl	d5134 <_ZN8MLX9039313writeRegisterEht>
  return (status & ERROR_BIT) ? STATUS_ERROR : STATUS_OK;
   d5274:	4320      	orrs	r0, r4
                                   DIG_FLT_MASK));
  return checkStatus(status1) | checkStatus(status2);
   d5276:	f340 1000 	sbfx	r0, r0, #4, #1
}
   d527a:	b2c0      	uxtb	r0, r0
   d527c:	b002      	add	sp, #8
   d527e:	bd70      	pop	{r4, r5, r6, pc}

000d5280 <_ZN8MLX9039313setResolutionEhhh>:
}

uint8_t
MLX90393::
setResolution(uint8_t res_x, uint8_t res_y, uint8_t res_z)
{
   d5280:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint16_t res_xyz = ((res_z & 0x3)<<4) | ((res_y & 0x3)<<2) | (res_x & 0x3);
   d5282:	0092      	lsls	r2, r2, #2
   d5284:	f002 050c 	and.w	r5, r2, #12
   d5288:	f001 0103 	and.w	r1, r1, #3
   d528c:	4329      	orrs	r1, r5
   d528e:	011d      	lsls	r5, r3, #4
   d5290:	f005 0530 	and.w	r5, r5, #48	; 0x30
   d5294:	430d      	orrs	r5, r1
  uint16_t old_val;
  uint8_t status1 = readRegister(RES_XYZ_REG, old_val);
   d5296:	f10d 0206 	add.w	r2, sp, #6
   d529a:	2102      	movs	r1, #2
{
   d529c:	4606      	mov	r6, r0
  uint8_t status1 = readRegister(RES_XYZ_REG, old_val);
   d529e:	f7ff fef7 	bl	d5090 <_ZN8MLX9039312readRegisterEhRt>
  uint8_t status2 = writeRegister(RES_XYZ_REG,
                                  (old_val & ~RES_XYZ_MASK) |
   d52a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d52a6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
   d52aa:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
  uint8_t status1 = readRegister(RES_XYZ_REG, old_val);
   d52ae:	4604      	mov	r4, r0
  uint8_t status2 = writeRegister(RES_XYZ_REG,
   d52b0:	b292      	uxth	r2, r2
   d52b2:	2102      	movs	r1, #2
   d52b4:	4630      	mov	r0, r6
   d52b6:	f7ff ff3d 	bl	d5134 <_ZN8MLX9039313writeRegisterEht>
  return (status & ERROR_BIT) ? STATUS_ERROR : STATUS_OK;
   d52ba:	4320      	orrs	r0, r4
                                  (res_xyz << RES_XYZ_SHIFT) & RES_XYZ_MASK);
  return checkStatus(status1) | checkStatus(status2);
   d52bc:	f340 1000 	sbfx	r0, r0, #4, #1
}
   d52c0:	b2c0      	uxtb	r0, r0
   d52c2:	b002      	add	sp, #8
   d52c4:	bd70      	pop	{r4, r5, r6, pc}

000d52c6 <_ZN8MLX9039326setTemperatureCompensationEh>:
}

uint8_t
MLX90393::
setTemperatureCompensation(uint8_t enabled)
{
   d52c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d52c8:	460d      	mov	r5, r1
  uint8_t tcmp_en = enabled?1:0;
  uint16_t old_val;
  uint8_t status1 = readRegister(TCMP_EN_REG, old_val);
   d52ca:	f10d 0206 	add.w	r2, sp, #6
   d52ce:	2101      	movs	r1, #1
{
   d52d0:	4606      	mov	r6, r0
  uint8_t status1 = readRegister(TCMP_EN_REG, old_val);
   d52d2:	f7ff fedd 	bl	d5090 <_ZN8MLX9039312readRegisterEhRt>
  uint8_t status2 = writeRegister(TCMP_EN_REG,
                                  (old_val & ~TCMP_EN_MASK) |
   d52d6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  uint8_t tcmp_en = enabled?1:0;
   d52da:	3d00      	subs	r5, #0
   d52dc:	bf18      	it	ne
   d52de:	2501      	movne	r5, #1
                                  (old_val & ~TCMP_EN_MASK) |
   d52e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   d52e4:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
  uint8_t status1 = readRegister(TCMP_EN_REG, old_val);
   d52e8:	4604      	mov	r4, r0
  uint8_t status2 = writeRegister(TCMP_EN_REG,
   d52ea:	b292      	uxth	r2, r2
   d52ec:	2101      	movs	r1, #1
   d52ee:	4630      	mov	r0, r6
   d52f0:	f7ff ff20 	bl	d5134 <_ZN8MLX9039313writeRegisterEht>
  return (status & ERROR_BIT) ? STATUS_ERROR : STATUS_OK;
   d52f4:	4320      	orrs	r0, r4
                                  ((uint16_t(tcmp_en) << TCMP_EN_SHIFT) &
                                   TCMP_EN_MASK));
  return checkStatus(status1) | checkStatus(status2);
   d52f6:	f340 1000 	sbfx	r0, r0, #4, #1
}
   d52fa:	b2c0      	uxtb	r0, r0
   d52fc:	b002      	add	sp, #8
   d52fe:	bd70      	pop	{r4, r5, r6, pc}

000d5300 <_ZN8MLX903935beginEhhiR7TwoWire>:
  I2C_address = I2C_BASE_ADDR | (a1?2:0) | (a0?1:0);
   d5300:	2900      	cmp	r1, #0
   d5302:	bf14      	ite	ne
   d5304:	210e      	movne	r1, #14
   d5306:	210c      	moveq	r1, #12
   d5308:	2a00      	cmp	r2, #0
   d530a:	bf0c      	ite	eq
   d530c:	460a      	moveq	r2, r1
   d530e:	f041 0201 	orrne.w	r2, r1, #1
  if (DRDY_pin >= 0){
   d5312:	2b00      	cmp	r3, #0
{
   d5314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5318:	4604      	mov	r4, r0
  I2C_address = I2C_BASE_ADDR | (a1?2:0) | (a0?1:0);
   d531a:	7082      	strb	r2, [r0, #2]
  this->DRDY_pin = DRDY_pin;
   d531c:	6043      	str	r3, [r0, #4]
  if (DRDY_pin >= 0){
   d531e:	db03      	blt.n	d5328 <_ZN8MLX903935beginEhhiR7TwoWire+0x28>
    pinMode(DRDY_pin, INPUT);
   d5320:	2100      	movs	r1, #0
   d5322:	b298      	uxth	r0, r3
   d5324:	f002 fe40 	bl	d7fa8 <pinMode>
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d5328:	9b08      	ldr	r3, [sp, #32]
   d532a:	6423      	str	r3, [r4, #64]	; 0x40
  uint8_t status1 = checkStatus(reset());
   d532c:	4620      	mov	r0, r4
   d532e:	f7ff ff48 	bl	d51c2 <_ZN8MLX903935resetEv>
  uint8_t status2 = setGainSel(7);
   d5332:	2107      	movs	r1, #7
  uint8_t status1 = checkStatus(reset());
   d5334:	4605      	mov	r5, r0
  uint8_t status2 = setGainSel(7);
   d5336:	4620      	mov	r0, r4
   d5338:	f7ff ff4f 	bl	d51da <_ZN8MLX9039310setGainSelEh>
  uint8_t status3 = setResolution(0, 0, 0);
   d533c:	2300      	movs	r3, #0
   d533e:	461a      	mov	r2, r3
   d5340:	4619      	mov	r1, r3
  uint8_t status2 = setGainSel(7);
   d5342:	4680      	mov	r8, r0
  uint8_t status3 = setResolution(0, 0, 0);
   d5344:	4620      	mov	r0, r4
   d5346:	f7ff ff9b 	bl	d5280 <_ZN8MLX9039313setResolutionEhhh>
  uint8_t status4 = setOverSampling(3);
   d534a:	2103      	movs	r1, #3
  uint8_t status3 = setResolution(0, 0, 0);
   d534c:	4681      	mov	r9, r0
  uint8_t status4 = setOverSampling(3);
   d534e:	4620      	mov	r0, r4
   d5350:	f7ff ff5f 	bl	d5212 <_ZN8MLX9039315setOverSamplingEh>
  uint8_t status5 = setDigitalFiltering(7);
   d5354:	2107      	movs	r1, #7
  uint8_t status4 = setOverSampling(3);
   d5356:	4607      	mov	r7, r0
  uint8_t status5 = setDigitalFiltering(7);
   d5358:	4620      	mov	r0, r4
   d535a:	f7ff ff75 	bl	d5248 <_ZN8MLX9039319setDigitalFilteringEh>
  uint8_t status6 = setTemperatureCompensation(0);
   d535e:	2100      	movs	r1, #0
  uint8_t status5 = setDigitalFiltering(7);
   d5360:	4606      	mov	r6, r0
  uint8_t status6 = setTemperatureCompensation(0);
   d5362:	4620      	mov	r0, r4
   d5364:	f7ff ffaf 	bl	d52c6 <_ZN8MLX9039326setTemperatureCompensationEh>
  return status1 | status2 | status3 | status4 | status5 | status6;
   d5368:	ea48 0309 	orr.w	r3, r8, r9
   d536c:	433b      	orrs	r3, r7
   d536e:	4333      	orrs	r3, r6
   d5370:	4303      	orrs	r3, r0
  return (status & ERROR_BIT) ? STATUS_ERROR : STATUS_OK;
   d5372:	f345 1000 	sbfx	r0, r5, #4, #1
  return status1 | status2 | status3 | status4 | status5 | status6;
   d5376:	4318      	orrs	r0, r3
}
   d5378:	b2c0      	uxtb	r0, r0
   d537a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d5380 <_ZN6BME280C1Ev>:
//  Settings and configuration
//
//****************************************************************************//

//Constructor -- Specifies default configuration
BME280::BME280( void )
   d5380:	b538      	push	{r3, r4, r5, lr}
   d5382:	2300      	movs	r3, #0
   d5384:	63c3      	str	r3, [r0, #60]	; 0x3c
   d5386:	4b0b      	ldr	r3, [pc, #44]	; (d53b4 <_ZN6BME280C1Ev+0x34>)
   d5388:	6403      	str	r3, [r0, #64]	; 0x40
   d538a:	2501      	movs	r5, #1
{
	//Construct with these default settings

	settings.commInterface = I2C_MODE; //Default to I2C
   d538c:	f44f 43ee 	mov.w	r3, #30464	; 0x7700
BME280::BME280( void )
   d5390:	4604      	mov	r4, r0
   d5392:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
	settings.commInterface = I2C_MODE; //Default to I2C
   d5396:	8003      	strh	r3, [r0, #0]

	settings.I2CAddress = 0x77; //Default, jumper open is 0x77
	_hardPort = &Wire; //Default to Wire port
   d5398:	f002 fe60 	bl	d805c <_Z19__fetch_global_Wirev>

	settings.chipSelectPin = 10; //Select CS pin for SPI
   d539c:	f240 330a 	movw	r3, #778	; 0x30a
   d53a0:	8063      	strh	r3, [r4, #2]
	
	//These are deprecated settings
	settings.runMode = 3; //Normal/Run
	settings.tStandby = 0; //0.5ms
   d53a2:	4b05      	ldr	r3, [pc, #20]	; (d53b8 <_ZN6BME280C1Ev+0x38>)
   d53a4:	6063      	str	r3, [r4, #4]
	settings.filter = 0; //Filter off
	settings.tempOverSample = 1;
	settings.pressOverSample = 1;
	settings.humidOverSample = 1;
    settings.tempCorrection = 0.0; // correction of temperature - added to the result
   d53a6:	2300      	movs	r3, #0
	_hardPort = &Wire; //Default to Wire port
   d53a8:	63e0      	str	r0, [r4, #60]	; 0x3c
	settings.humidOverSample = 1;
   d53aa:	7225      	strb	r5, [r4, #8]
    settings.tempCorrection = 0.0; // correction of temperature - added to the result
   d53ac:	60e3      	str	r3, [r4, #12]
}
   d53ae:	4620      	mov	r0, r4
   d53b0:	bd38      	pop	{r3, r4, r5, pc}
   d53b2:	bf00      	nop
   d53b4:	47c5e680 	.word	0x47c5e680
   d53b8:	01010000 	.word	0x01010000

000d53bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d53bc:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d53be:	4c0b      	ldr	r4, [pc, #44]	; (d53ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d53c0:	7821      	ldrb	r1, [r4, #0]
   d53c2:	f3bf 8f5b 	dmb	ish
   d53c6:	f011 0101 	ands.w	r1, r1, #1
   d53ca:	d10b      	bne.n	d53e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d53cc:	4620      	mov	r0, r4
   d53ce:	9101      	str	r1, [sp, #4]
   d53d0:	f7fe fe67 	bl	d40a2 <__cxa_guard_acquire>
   d53d4:	9901      	ldr	r1, [sp, #4]
   d53d6:	b128      	cbz	r0, d53e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d53d8:	4805      	ldr	r0, [pc, #20]	; (d53f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d53da:	f002 fa5d 	bl	d7898 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d53de:	4620      	mov	r0, r4
   d53e0:	f7fe fe64 	bl	d40ac <__cxa_guard_release>
        return instance;
    }
   d53e4:	4802      	ldr	r0, [pc, #8]	; (d53f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d53e6:	b002      	add	sp, #8
   d53e8:	bd10      	pop	{r4, pc}
   d53ea:	bf00      	nop
   d53ec:	2003e738 	.word	0x2003e738
   d53f0:	2003e73c 	.word	0x2003e73c

000d53f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d53f4:	b507      	push	{r0, r1, r2, lr}
   d53f6:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   d53f8:	f7ff ffe0 	bl	d53bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d53fc:	9901      	ldr	r1, [sp, #4]
    }
   d53fe:	b003      	add	sp, #12
   d5400:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   d5404:	f002 baf8 	b.w	d79f8 <_ZN8SPIClass8transferEh>

000d5408 <_ZN6BME28018readRegisterRegionEPhhh>:
//
//  Utility
//
//****************************************************************************//
void BME280::readRegisterRegion(uint8_t *outputPointer , uint8_t offset, uint8_t length)
{
   d5408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d540a:	461e      	mov	r6, r3
	//define pointer that will point to the external space
	uint8_t i = 0;
	char c = 0;

	switch (settings.commInterface)
   d540c:	7803      	ldrb	r3, [r0, #0]
{
   d540e:	4604      	mov	r4, r0
   d5410:	460d      	mov	r5, r1
   d5412:	4617      	mov	r7, r2
	switch (settings.commInterface)
   d5414:	b113      	cbz	r3, d541c <_ZN6BME28018readRegisterRegionEPhhh+0x14>
   d5416:	2b01      	cmp	r3, #1
   d5418:	d025      	beq.n	d5466 <_ZN6BME28018readRegisterRegionEPhhh+0x5e>

	default:
		break;
	}

}
   d541a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch(_wireType)
   d541c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d5420:	2b01      	cmp	r3, #1
   d5422:	d1fa      	bne.n	d541a <_ZN6BME28018readRegisterRegionEPhhh+0x12>
				_hardPort->beginTransmission(settings.I2CAddress);
   d5424:	7841      	ldrb	r1, [r0, #1]
   d5426:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d5428:	f002 f876 	bl	d7518 <_ZN7TwoWire17beginTransmissionEh>
				_hardPort->write(offset);
   d542c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d542e:	6803      	ldr	r3, [r0, #0]
   d5430:	4639      	mov	r1, r7
   d5432:	689b      	ldr	r3, [r3, #8]
   d5434:	4798      	blx	r3
				_hardPort->endTransmission();
   d5436:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d5438:	f002 f876 	bl	d7528 <_ZN7TwoWire15endTransmissionEv>
				_hardPort->requestFrom(settings.I2CAddress, length);
   d543c:	4632      	mov	r2, r6
   d543e:	7861      	ldrb	r1, [r4, #1]
   d5440:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d5442:	f002 f866 	bl	d7512 <_ZN7TwoWire11requestFromEhj>
   d5446:	442e      	add	r6, r5
				while ( (_hardPort->available()) && (i < length))  // slave may send less than requested
   d5448:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d544a:	6803      	ldr	r3, [r0, #0]
   d544c:	691b      	ldr	r3, [r3, #16]
   d544e:	4798      	blx	r3
   d5450:	2800      	cmp	r0, #0
   d5452:	d0e2      	beq.n	d541a <_ZN6BME28018readRegisterRegionEPhhh+0x12>
   d5454:	42b5      	cmp	r5, r6
   d5456:	d0e0      	beq.n	d541a <_ZN6BME28018readRegisterRegionEPhhh+0x12>
					c = _hardPort->read(); // receive a byte as character
   d5458:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d545a:	6803      	ldr	r3, [r0, #0]
   d545c:	695b      	ldr	r3, [r3, #20]
   d545e:	4798      	blx	r3
   d5460:	f805 0b01 	strb.w	r0, [r5], #1
				while ( (_hardPort->available()) && (i < length))  // slave may send less than requested
   d5464:	e7f0      	b.n	d5448 <_ZN6BME28018readRegisterRegionEPhhh+0x40>
		digitalWrite(settings.chipSelectPin, LOW);
   d5466:	7880      	ldrb	r0, [r0, #2]
   d5468:	2100      	movs	r1, #0
   d546a:	f002 fdae 	bl	d7fca <digitalWrite>
		SPI.transfer(offset | 0x80);  //Ored with "read request" bit
   d546e:	f047 0080 	orr.w	r0, r7, #128	; 0x80
   d5472:	f7ff ffbf 	bl	d53f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   d5476:	442e      	add	r6, r5
		while ( i < length ) // slave may send less than requested
   d5478:	42b5      	cmp	r5, r6
   d547a:	d005      	beq.n	d5488 <_ZN6BME28018readRegisterRegionEPhhh+0x80>
			c = SPI.transfer(0x00); // receive a byte as character
   d547c:	2000      	movs	r0, #0
   d547e:	f7ff ffb9 	bl	d53f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
			*outputPointer = c;
   d5482:	f805 0b01 	strb.w	r0, [r5], #1
		while ( i < length ) // slave may send less than requested
   d5486:	e7f7      	b.n	d5478 <_ZN6BME28018readRegisterRegionEPhhh+0x70>
		digitalWrite(settings.chipSelectPin, HIGH);
   d5488:	78a0      	ldrb	r0, [r4, #2]
   d548a:	2101      	movs	r1, #1
}
   d548c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		digitalWrite(settings.chipSelectPin, HIGH);
   d5490:	f002 bd9b 	b.w	d7fca <digitalWrite>

000d5494 <_ZN6BME28017readFloatPressureEv>:
{
   d5494:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5498:	4604      	mov	r4, r0
	readRegisterRegion(buffer, BME280_PRESSURE_MSB_REG, 3);
   d549a:	2303      	movs	r3, #3
   d549c:	22f7      	movs	r2, #247	; 0xf7
   d549e:	a901      	add	r1, sp, #4
   d54a0:	f7ff ffb2 	bl	d5408 <_ZN6BME28018readRegisterRegionEPhhh>
	var1 = ((int64_t)t_fine) - 128000;
   d54a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
	var1 = ((var1 * var1 * (int64_t)calibration.dig_P3)>>8) + ((var1 * (int64_t)calibration.dig_P2)<<12);
   d54a6:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
	var1 = ((int64_t)t_fine) - 128000;
   d54aa:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d54ae:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d54b2:	f141 32ff 	adc.w	r2, r1, #4294967295	; 0xffffffff
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
   d54b6:	fba3 8903 	umull	r8, r9, r3, r3
   d54ba:	fb03 f102 	mul.w	r1, r3, r2
   d54be:	eb09 0941 	add.w	r9, r9, r1, lsl #1
	var1 = ((var1 * var1 * (int64_t)calibration.dig_P3)>>8) + ((var1 * (int64_t)calibration.dig_P2)<<12);
   d54c2:	17f7      	asrs	r7, r6, #31
   d54c4:	fb06 f102 	mul.w	r1, r6, r2
   d54c8:	fb03 1107 	mla	r1, r3, r7, r1
   d54cc:	fba6 6703 	umull	r6, r7, r6, r3
   d54d0:	440f      	add	r7, r1
   d54d2:	0339      	lsls	r1, r7, #12
   d54d4:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d54d8:	0335      	lsls	r5, r6, #12
   d54da:	f9b4 601a 	ldrsh.w	r6, [r4, #26]
   d54de:	17f7      	asrs	r7, r6, #31
   d54e0:	fb06 f009 	mul.w	r0, r6, r9
   d54e4:	fb08 0007 	mla	r0, r8, r7, r0
   d54e8:	fba6 6708 	umull	r6, r7, r6, r8
   d54ec:	4407      	add	r7, r0
   d54ee:	0a30      	lsrs	r0, r6, #8
   d54f0:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)calibration.dig_P1)>>33;
   d54f4:	8ae6      	ldrh	r6, [r4, #22]
	var1 = ((var1 * var1 * (int64_t)calibration.dig_P3)>>8) + ((var1 * (int64_t)calibration.dig_P2)<<12);
   d54f6:	ea4f 2c27 	mov.w	ip, r7, asr #8
   d54fa:	1940      	adds	r0, r0, r5
   d54fc:	eb4c 0c01 	adc.w	ip, ip, r1
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)calibration.dig_P1)>>33;
   d5500:	3000      	adds	r0, #0
   d5502:	f54c 4c00 	adc.w	ip, ip, #32768	; 0x8000
   d5506:	fba0 0106 	umull	r0, r1, r0, r6
   d550a:	fb06 110c 	mla	r1, r6, ip, r1
   d550e:	104e      	asrs	r6, r1, #1
   d5510:	17cf      	asrs	r7, r1, #31
	if (var1 == 0)
   d5512:	ea56 0107 	orrs.w	r1, r6, r7
   d5516:	f000 808c 	beq.w	d5632 <_ZN6BME28017readFloatPressureEv+0x19e>
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
   d551a:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
   d551e:	fb00 f509 	mul.w	r5, r0, r9
   d5522:	17c1      	asrs	r1, r0, #31
   d5524:	fb08 5501 	mla	r5, r8, r1, r5
   d5528:	fba0 0108 	umull	r0, r1, r0, r8
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
   d552c:	f9b4 801e 	ldrsh.w	r8, [r4, #30]
   d5530:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d5534:	fb08 f202 	mul.w	r2, r8, r2
   d5538:	fb03 2209 	mla	r2, r3, r9, r2
   d553c:	fba8 8903 	umull	r8, r9, r8, r3
   d5540:	4491      	add	r9, r2
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
   d5542:	4429      	add	r1, r5
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
   d5544:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d5548:	ea4f 4549 	mov.w	r5, r9, lsl #17
   d554c:	1812      	adds	r2, r2, r0
   d554e:	ea45 35d8 	orr.w	r5, r5, r8, lsr #15
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
   d5552:	f89d 3006 	ldrb.w	r3, [sp, #6]
	var2 = var2 + (((int64_t)calibration.dig_P4)<<35);
   d5556:	f9b4 801c 	ldrsh.w	r8, [r4, #28]
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
   d555a:	eb41 0505 	adc.w	r5, r1, r5
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
   d555e:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d5562:	091b      	lsrs	r3, r3, #4
   d5564:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
   d5568:	f89d 1004 	ldrb.w	r1, [sp, #4]
   d556c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
	p_acc = 1048576 - adc_P;
   d5570:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
   d5574:	17d9      	asrs	r1, r3, #31
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
   d5576:	ea4f 7cc1 	mov.w	ip, r1, lsl #31
   d557a:	ea4c 0c53 	orr.w	ip, ip, r3, lsr #1
   d557e:	07d8      	lsls	r0, r3, #31
	var2 = var2 + (((int64_t)calibration.dig_P4)<<35);
   d5580:	2300      	movs	r3, #0
   d5582:	189a      	adds	r2, r3, r2
   d5584:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d5588:	eb41 0505 	adc.w	r5, r1, r5
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
   d558c:	f640 4335 	movw	r3, #3125	; 0xc35
   d5590:	1a80      	subs	r0, r0, r2
   d5592:	eb6c 0c05 	sbc.w	ip, ip, r5
   d5596:	fba0 0103 	umull	r0, r1, r0, r3
   d559a:	fb03 110c 	mla	r1, r3, ip, r1
   d559e:	4632      	mov	r2, r6
   d55a0:	463b      	mov	r3, r7
   d55a2:	f003 fe35 	bl	d9210 <__aeabi_ldivmod>
	var1 = (((int64_t)calibration.dig_P9) * (p_acc>>13) * (p_acc>>13)) >> 25;
   d55a6:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
   d55aa:	134d      	asrs	r5, r1, #13
   d55ac:	0b46      	lsrs	r6, r0, #13
   d55ae:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d55b2:	fb02 f705 	mul.w	r7, r2, r5
   d55b6:	17d3      	asrs	r3, r2, #31
   d55b8:	fb06 7703 	mla	r7, r6, r3, r7
   d55bc:	fba2 2306 	umull	r2, r3, r2, r6
   d55c0:	443b      	add	r3, r7
   d55c2:	4355      	muls	r5, r2
   d55c4:	fb06 5503 	mla	r5, r6, r3, r5
   d55c8:	fba2 2306 	umull	r2, r3, r2, r6
   d55cc:	442b      	add	r3, r5
   d55ce:	0e55      	lsrs	r5, r2, #25
   d55d0:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
   d55d4:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
   d55d8:	f9b4 4022 	ldrsh.w	r4, [r4, #34]	; 0x22
   d55dc:	182d      	adds	r5, r5, r0
	var1 = (((int64_t)calibration.dig_P9) * (p_acc>>13) * (p_acc>>13)) >> 25;
   d55de:	ea4f 6663 	mov.w	r6, r3, asr #25
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
   d55e2:	eb41 0606 	adc.w	r6, r1, r6
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
   d55e6:	17d3      	asrs	r3, r2, #31
   d55e8:	4351      	muls	r1, r2
   d55ea:	fb00 1103 	mla	r1, r0, r3, r1
   d55ee:	fba2 2300 	umull	r2, r3, r2, r0
   d55f2:	440b      	add	r3, r1
   d55f4:	0cd1      	lsrs	r1, r2, #19
   d55f6:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
   d55fa:	186d      	adds	r5, r5, r1
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
   d55fc:	ea4f 40e3 	mov.w	r0, r3, asr #19
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
   d5600:	eb46 0300 	adc.w	r3, r6, r0
   d5604:	0a2a      	lsrs	r2, r5, #8
   d5606:	17e5      	asrs	r5, r4, #31
   d5608:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d560c:	1219      	asrs	r1, r3, #8
   d560e:	0120      	lsls	r0, r4, #4
   d5610:	012b      	lsls	r3, r5, #4
   d5612:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
	return (float)p_acc / 256.0;
   d5616:	1880      	adds	r0, r0, r2
   d5618:	eb43 0101 	adc.w	r1, r3, r1
   d561c:	f003 fdba 	bl	d9194 <__aeabi_l2f>
   d5620:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5638 <_ZN6BME28017readFloatPressureEv+0x1a4>
   d5624:	ee07 0a90 	vmov	s15, r0
   d5628:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d562c:	b003      	add	sp, #12
   d562e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return 0; // avoid exception caused by division by zero
   d5632:	ed9f 0a02 	vldr	s0, [pc, #8]	; d563c <_ZN6BME28017readFloatPressureEv+0x1a8>
   d5636:	e7f9      	b.n	d562c <_ZN6BME28017readFloatPressureEv+0x198>
   d5638:	3b800000 	.word	0x3b800000
   d563c:	00000000 	.word	0x00000000

000d5640 <_ZN6BME28017readFloatHumidityEv>:
{
   d5640:	b513      	push	{r0, r1, r4, lr}
	readRegisterRegion(buffer, BME280_HUMIDITY_MSB_REG, 2);
   d5642:	2302      	movs	r3, #2
{
   d5644:	4604      	mov	r4, r0
	readRegisterRegion(buffer, BME280_HUMIDITY_MSB_REG, 2);
   d5646:	a901      	add	r1, sp, #4
   d5648:	22fd      	movs	r2, #253	; 0xfd
   d564a:	f7ff fedd 	bl	d5408 <_ZN6BME28018readRegisterRegionEPhhh>
    int32_t adc_H = ((uint32_t)buffer[0] << 8) | ((uint32_t)buffer[1]);
   d564e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
   d5652:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
	var1 = (t_fine - ((int32_t)76800));
   d5656:	6b62      	ldr	r2, [r4, #52]	; 0x34
    int32_t adc_H = ((uint32_t)buffer[0] << 8) | ((uint32_t)buffer[1]);
   d5658:	ba49      	rev16	r1, r1
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
   d565a:	051b      	lsls	r3, r3, #20
    int32_t adc_H = ((uint32_t)buffer[0] << 8) | ((uint32_t)buffer[1]);
   d565c:	b289      	uxth	r1, r1
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
   d565e:	ebc3 3181 	rsb	r1, r3, r1, lsl #14
   d5662:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
	var1 = (t_fine - ((int32_t)76800));
   d5666:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
   d566a:	fb02 1313 	mls	r3, r2, r3, r1
   d566e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
	((int32_t)16384)) >> 15) * (((((((var1 * ((int32_t)calibration.dig_H6)) >> 10) * (((var1 * ((int32_t)calibration.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
   d5672:	13d9      	asrs	r1, r3, #15
   d5674:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d5678:	4353      	muls	r3, r2
   d567a:	12db      	asrs	r3, r3, #11
   d567c:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
   d5680:	f994 3032 	ldrsb.w	r3, [r4, #50]	; 0x32
   d5684:	4353      	muls	r3, r2
   d5686:	129b      	asrs	r3, r3, #10
   d5688:	4343      	muls	r3, r0
   d568a:	129b      	asrs	r3, r3, #10
   d568c:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
	((int32_t)calibration.dig_H2) + 8192) >> 14));
   d5690:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
	((int32_t)16384)) >> 15) * (((((((var1 * ((int32_t)calibration.dig_H6)) >> 10) * (((var1 * ((int32_t)calibration.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
   d5694:	4353      	muls	r3, r2
	((int32_t)calibration.dig_H2) + 8192) >> 14));
   d5696:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d569a:	139b      	asrs	r3, r3, #14
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
   d569c:	434b      	muls	r3, r1
	var1 = (var1 - (((((var1 >> 15) * (var1 >> 15)) >> 7) * ((int32_t)calibration.dig_H1)) >> 4));
   d569e:	13da      	asrs	r2, r3, #15
   d56a0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d56a4:	4352      	muls	r2, r2
   d56a6:	11d2      	asrs	r2, r2, #7
   d56a8:	434a      	muls	r2, r1
   d56aa:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	var1 = (var1 < 0 ? 0 : var1);
   d56ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	var1 = (var1 > 419430400 ? 419430400 : var1);
   d56b2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d56b6:	bfa8      	it	ge
   d56b8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	return (float)(var1>>12) / 1024.0;
   d56bc:	131b      	asrs	r3, r3, #12
   d56be:	ee00 3a10 	vmov	s0, r3
}
   d56c2:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d56c6:	b002      	add	sp, #8
   d56c8:	bd10      	pop	{r4, pc}
	...

000d56cc <_ZN6BME2809readTempCEv>:
{
   d56cc:	b513      	push	{r0, r1, r4, lr}
	readRegisterRegion(buffer, BME280_TEMPERATURE_MSB_REG, 3);
   d56ce:	2303      	movs	r3, #3
   d56d0:	a901      	add	r1, sp, #4
   d56d2:	22fa      	movs	r2, #250	; 0xfa
{
   d56d4:	4604      	mov	r4, r0
	readRegisterRegion(buffer, BME280_TEMPERATURE_MSB_REG, 3);
   d56d6:	f7ff fe97 	bl	d5408 <_ZN6BME28018readRegisterRegionEPhhh>
    int32_t adc_T = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
   d56da:	f89d 2005 	ldrb.w	r2, [sp, #5]
   d56de:	f89d 3004 	ldrb.w	r3, [sp, #4]
	output = output / 100 + settings.tempCorrection;
   d56e2:	ed9f 7a15 	vldr	s14, [pc, #84]	; d5738 <_ZN6BME2809readTempCEv+0x6c>
    int32_t adc_T = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
   d56e6:	0112      	lsls	r2, r2, #4
   d56e8:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   d56ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d56f0:	ea42 1113 	orr.w	r1, r2, r3, lsr #4
	var1 = ((((adc_T>>3) - ((int32_t)calibration.dig_T1<<1))) * ((int32_t)calibration.dig_T2)) >> 11;
   d56f4:	8a23      	ldrh	r3, [r4, #16]
	var2 = (((((adc_T>>4) - ((int32_t)calibration.dig_T1)) * ((adc_T>>4) - ((int32_t)calibration.dig_T1))) >> 12) *
   d56f6:	ebc3 1212 	rsb	r2, r3, r2, lsr #4
	var1 = ((((adc_T>>3) - ((int32_t)calibration.dig_T1<<1))) * ((int32_t)calibration.dig_T2)) >> 11;
   d56fa:	005b      	lsls	r3, r3, #1
   d56fc:	ebc3 03d1 	rsb	r3, r3, r1, lsr #3
   d5700:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
	var2 = (((((adc_T>>4) - ((int32_t)calibration.dig_T1)) * ((adc_T>>4) - ((int32_t)calibration.dig_T1))) >> 12) *
   d5704:	4352      	muls	r2, r2
	var1 = ((((adc_T>>3) - ((int32_t)calibration.dig_T1<<1))) * ((int32_t)calibration.dig_T2)) >> 11;
   d5706:	4359      	muls	r1, r3
	((int32_t)calibration.dig_T3)) >> 14;
   d5708:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
	var2 = (((((adc_T>>4) - ((int32_t)calibration.dig_T1)) * ((adc_T>>4) - ((int32_t)calibration.dig_T1))) >> 12) *
   d570c:	1312      	asrs	r2, r2, #12
   d570e:	4353      	muls	r3, r2
	((int32_t)calibration.dig_T3)) >> 14;
   d5710:	139b      	asrs	r3, r3, #14
	t_fine = var1 + var2;
   d5712:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d5716:	6363      	str	r3, [r4, #52]	; 0x34
	float output = (t_fine * 5 + 128) >> 8;
   d5718:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d571c:	3380      	adds	r3, #128	; 0x80
   d571e:	121b      	asrs	r3, r3, #8
   d5720:	ee07 3a90 	vmov	s15, r3
   d5724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	output = output / 100 + settings.tempCorrection;
   d5728:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d572c:	edd4 7a03 	vldr	s15, [r4, #12]
}
   d5730:	ee30 0a27 	vadd.f32	s0, s0, s15
   d5734:	b002      	add	sp, #8
   d5736:	bd10      	pop	{r4, pc}
   d5738:	42c80000 	.word	0x42c80000

000d573c <_ZN6BME2809readTempFEv>:
{
   d573c:	b508      	push	{r3, lr}
	float output = readTempC();
   d573e:	f7ff ffc5 	bl	d56cc <_ZN6BME2809readTempCEv>
	output = (output * 9) / 5 + 32;
   d5742:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d5746:	ee20 0a27 	vmul.f32	s0, s0, s15
   d574a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d574e:	ee80 7a27 	vdiv.f32	s14, s0, s15
}
   d5752:	ed9f 0a02 	vldr	s0, [pc, #8]	; d575c <_ZN6BME2809readTempFEv+0x20>
   d5756:	ee37 0a00 	vadd.f32	s0, s14, s0
   d575a:	bd08      	pop	{r3, pc}
   d575c:	42000000 	.word	0x42000000

000d5760 <_ZN6BME28012readRegisterEh>:

uint8_t BME280::readRegister(uint8_t offset)
{
   d5760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Return value
	uint8_t result = 0;
	uint8_t numBytes = 1;
	switch (settings.commInterface) {
   d5762:	7805      	ldrb	r5, [r0, #0]
{
   d5764:	4604      	mov	r4, r0
   d5766:	460e      	mov	r6, r1
	switch (settings.commInterface) {
   d5768:	b125      	cbz	r5, d5774 <_ZN6BME28012readRegisterEh+0x14>
   d576a:	2d01      	cmp	r5, #1
   d576c:	d023      	beq.n	d57b6 <_ZN6BME28012readRegisterEh+0x56>
   d576e:	2500      	movs	r5, #0

	default:
		break;
	}
	return result;
}
   d5770:	4628      	mov	r0, r5
   d5772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch(_wireType)
   d5774:	f890 7038 	ldrb.w	r7, [r0, #56]	; 0x38
   d5778:	2f01      	cmp	r7, #1
   d577a:	d1f9      	bne.n	d5770 <_ZN6BME28012readRegisterEh+0x10>
				_hardPort->beginTransmission(settings.I2CAddress);
   d577c:	7841      	ldrb	r1, [r0, #1]
   d577e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d5780:	f001 feca 	bl	d7518 <_ZN7TwoWire17beginTransmissionEh>
				_hardPort->write(offset);
   d5784:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d5786:	6803      	ldr	r3, [r0, #0]
   d5788:	4631      	mov	r1, r6
   d578a:	689b      	ldr	r3, [r3, #8]
   d578c:	4798      	blx	r3
				_hardPort->endTransmission();
   d578e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d5790:	f001 feca 	bl	d7528 <_ZN7TwoWire15endTransmissionEv>
				_hardPort->requestFrom(settings.I2CAddress, numBytes);
   d5794:	7861      	ldrb	r1, [r4, #1]
   d5796:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d5798:	463a      	mov	r2, r7
   d579a:	f001 feba 	bl	d7512 <_ZN7TwoWire11requestFromEhj>
				while ( _hardPort->available() ) // slave may send less than requested
   d579e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d57a0:	6803      	ldr	r3, [r0, #0]
   d57a2:	691b      	ldr	r3, [r3, #16]
   d57a4:	4798      	blx	r3
   d57a6:	2800      	cmp	r0, #0
   d57a8:	d0e2      	beq.n	d5770 <_ZN6BME28012readRegisterEh+0x10>
					result = _hardPort->read(); // receive a byte as a proper uint8_t
   d57aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d57ac:	6803      	ldr	r3, [r0, #0]
   d57ae:	695b      	ldr	r3, [r3, #20]
   d57b0:	4798      	blx	r3
   d57b2:	b2c5      	uxtb	r5, r0
				while ( _hardPort->available() ) // slave may send less than requested
   d57b4:	e7f3      	b.n	d579e <_ZN6BME28012readRegisterEh+0x3e>
		digitalWrite(settings.chipSelectPin, LOW);
   d57b6:	2100      	movs	r1, #0
   d57b8:	7880      	ldrb	r0, [r0, #2]
   d57ba:	f002 fc06 	bl	d7fca <digitalWrite>
		SPI.transfer(offset | 0x80);  //Ored with "read request" bit
   d57be:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   d57c2:	f7ff fe17 	bl	d53f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
		result = SPI.transfer(0x00);
   d57c6:	2000      	movs	r0, #0
   d57c8:	f7ff fe14 	bl	d53f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
		digitalWrite(settings.chipSelectPin, HIGH);
   d57cc:	2101      	movs	r1, #1
		result = SPI.transfer(0x00);
   d57ce:	4605      	mov	r5, r0
		digitalWrite(settings.chipSelectPin, HIGH);
   d57d0:	78a0      	ldrb	r0, [r4, #2]
   d57d2:	f002 fbfa 	bl	d7fca <digitalWrite>
		break;
   d57d6:	e7cb      	b.n	d5770 <_ZN6BME28012readRegisterEh+0x10>

000d57d8 <_ZN6BME2807getModeEv>:
{
   d57d8:	b508      	push	{r3, lr}
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
   d57da:	21f4      	movs	r1, #244	; 0xf4
   d57dc:	f7ff ffc0 	bl	d5760 <_ZN6BME28012readRegisterEh>
}
   d57e0:	f000 0003 	and.w	r0, r0, #3
   d57e4:	bd08      	pop	{r3, pc}

000d57e6 <_ZN6BME28013writeRegisterEhh>:
	
	return output;
}

void BME280::writeRegister(uint8_t offset, uint8_t dataToWrite)
{
   d57e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (settings.commInterface)
   d57e8:	7807      	ldrb	r7, [r0, #0]
{
   d57ea:	4604      	mov	r4, r0
   d57ec:	460e      	mov	r6, r1
   d57ee:	4615      	mov	r5, r2
	switch (settings.commInterface)
   d57f0:	b117      	cbz	r7, d57f8 <_ZN6BME28013writeRegisterEhh+0x12>
   d57f2:	2f01      	cmp	r7, #1
   d57f4:	d017      	beq.n	d5826 <_ZN6BME28013writeRegisterEhh+0x40>
		break;

	default:
		break;
	}
}
   d57f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch(_wireType)
   d57f8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d57fc:	2b01      	cmp	r3, #1
   d57fe:	d1fa      	bne.n	d57f6 <_ZN6BME28013writeRegisterEhh+0x10>
				_hardPort->beginTransmission(settings.I2CAddress);
   d5800:	7841      	ldrb	r1, [r0, #1]
   d5802:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d5804:	f001 fe88 	bl	d7518 <_ZN7TwoWire17beginTransmissionEh>
				_hardPort->write(offset);
   d5808:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d580a:	6803      	ldr	r3, [r0, #0]
   d580c:	4631      	mov	r1, r6
   d580e:	689b      	ldr	r3, [r3, #8]
   d5810:	4798      	blx	r3
				_hardPort->write(dataToWrite);
   d5812:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d5814:	6803      	ldr	r3, [r0, #0]
   d5816:	4629      	mov	r1, r5
   d5818:	689b      	ldr	r3, [r3, #8]
   d581a:	4798      	blx	r3
				_hardPort->endTransmission();
   d581c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   d581e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				_hardPort->endTransmission();
   d5822:	f001 be81 	b.w	d7528 <_ZN7TwoWire15endTransmissionEv>
		digitalWrite(settings.chipSelectPin, LOW);
   d5826:	2100      	movs	r1, #0
   d5828:	7880      	ldrb	r0, [r0, #2]
   d582a:	f002 fbce 	bl	d7fca <digitalWrite>
		SPI.transfer(offset & 0x7F);
   d582e:	f006 007f 	and.w	r0, r6, #127	; 0x7f
   d5832:	f7ff fddf 	bl	d53f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
		SPI.transfer(dataToWrite);
   d5836:	4628      	mov	r0, r5
   d5838:	f7ff fddc 	bl	d53f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
		digitalWrite(settings.chipSelectPin, HIGH);
   d583c:	78a0      	ldrb	r0, [r4, #2]
   d583e:	4639      	mov	r1, r7
}
   d5840:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		digitalWrite(settings.chipSelectPin, HIGH);
   d5844:	f002 bbc1 	b.w	d7fca <digitalWrite>

000d5848 <_ZN6BME2807setModeEh>:
{
   d5848:	b538      	push	{r3, r4, r5, lr}
	if(mode > 0b11) mode = 0; //Error check. Default to sleep mode
   d584a:	2903      	cmp	r1, #3
   d584c:	bf94      	ite	ls
   d584e:	460c      	movls	r4, r1
   d5850:	2400      	movhi	r4, #0
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
   d5852:	21f4      	movs	r1, #244	; 0xf4
{
   d5854:	4605      	mov	r5, r0
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
   d5856:	f7ff ff83 	bl	d5760 <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<1) | (1<<0) ); //Clear the mode[1:0] bits
   d585a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
	writeRegister(BME280_CTRL_MEAS_REG, controlData);
   d585e:	ea44 0200 	orr.w	r2, r4, r0
   d5862:	21f4      	movs	r1, #244	; 0xf4
   d5864:	4628      	mov	r0, r5
}
   d5866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(BME280_CTRL_MEAS_REG, controlData);
   d586a:	f7ff bfbc 	b.w	d57e6 <_ZN6BME28013writeRegisterEhh>

000d586e <_ZN6BME28014setStandbyTimeEh>:
{
   d586e:	b538      	push	{r3, r4, r5, lr}
	if(timeSetting > 0b111) timeSetting = 0; //Error check. Default to 0.5ms
   d5870:	2907      	cmp	r1, #7
   d5872:	bf94      	ite	ls
   d5874:	460c      	movls	r4, r1
   d5876:	2400      	movhi	r4, #0
	uint8_t controlData = readRegister(BME280_CONFIG_REG);
   d5878:	21f5      	movs	r1, #245	; 0xf5
{
   d587a:	4605      	mov	r5, r0
	uint8_t controlData = readRegister(BME280_CONFIG_REG);
   d587c:	f7ff ff70 	bl	d5760 <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<7) | (1<<6) | (1<<5) ); //Clear the 7/6/5 bits
   d5880:	f000 021f 	and.w	r2, r0, #31
	controlData |= (timeSetting << 5); //Align with bits 7/6/5
   d5884:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	writeRegister(BME280_CONFIG_REG, controlData);
   d5888:	4628      	mov	r0, r5
   d588a:	b2d2      	uxtb	r2, r2
}
   d588c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(BME280_CONFIG_REG, controlData);
   d5890:	21f5      	movs	r1, #245	; 0xf5
   d5892:	f7ff bfa8 	b.w	d57e6 <_ZN6BME28013writeRegisterEhh>

000d5896 <_ZN6BME2809setFilterEh>:
{
   d5896:	b538      	push	{r3, r4, r5, lr}
	if(filterSetting > 0b111) filterSetting = 0; //Error check. Default to filter off
   d5898:	2907      	cmp	r1, #7
   d589a:	bf94      	ite	ls
   d589c:	460c      	movls	r4, r1
   d589e:	2400      	movhi	r4, #0
	uint8_t controlData = readRegister(BME280_CONFIG_REG);
   d58a0:	21f5      	movs	r1, #245	; 0xf5
{
   d58a2:	4605      	mov	r5, r0
	uint8_t controlData = readRegister(BME280_CONFIG_REG);
   d58a4:	f7ff ff5c 	bl	d5760 <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<4) | (1<<3) | (1<<2) ); //Clear the 4/3/2 bits
   d58a8:	f020 021c 	bic.w	r2, r0, #28
	controlData |= (filterSetting << 2); //Align with bits 4/3/2
   d58ac:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
	writeRegister(BME280_CONFIG_REG, controlData);
   d58b0:	4628      	mov	r0, r5
   d58b2:	b2d2      	uxtb	r2, r2
}
   d58b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(BME280_CONFIG_REG, controlData);
   d58b8:	21f5      	movs	r1, #245	; 0xf5
   d58ba:	f7ff bf94 	b.w	d57e6 <_ZN6BME28013writeRegisterEhh>
	...

000d58c0 <_ZN6BME28017setTempOverSampleEh>:
	overSampleAmount = checkSampleValue(overSampleAmount); //Error check
   d58c0:	2910      	cmp	r1, #16
   d58c2:	bf98      	it	ls
   d58c4:	4b10      	ldrls	r3, [pc, #64]	; (d5908 <_ZN6BME28017setTempOverSampleEh+0x48>)
{
   d58c6:	b570      	push	{r4, r5, r6, lr}
   d58c8:	bf98      	it	ls
   d58ca:	5c5e      	ldrbls	r6, [r3, r1]
   d58cc:	4604      	mov	r4, r0
   d58ce:	bf88      	it	hi
   d58d0:	2601      	movhi	r6, #1
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
   d58d2:	f7ff ff81 	bl	d57d8 <_ZN6BME2807getModeEv>
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
   d58d6:	2100      	movs	r1, #0
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
   d58d8:	4605      	mov	r5, r0
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
   d58da:	4620      	mov	r0, r4
   d58dc:	f7ff ffb4 	bl	d5848 <_ZN6BME2807setModeEh>
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
   d58e0:	21f4      	movs	r1, #244	; 0xf4
   d58e2:	4620      	mov	r0, r4
   d58e4:	f7ff ff3c 	bl	d5760 <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<7) | (1<<6) | (1<<5) ); //Clear bits 765
   d58e8:	f000 021f 	and.w	r2, r0, #31
	controlData |= overSampleAmount << 5; //Align overSampleAmount to bits 7/6/5
   d58ec:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	writeRegister(BME280_CTRL_MEAS_REG, controlData);
   d58f0:	4620      	mov	r0, r4
   d58f2:	21f4      	movs	r1, #244	; 0xf4
   d58f4:	b2d2      	uxtb	r2, r2
   d58f6:	f7ff ff76 	bl	d57e6 <_ZN6BME28013writeRegisterEhh>
	setMode(originalMode); //Return to the original user's choice
   d58fa:	4629      	mov	r1, r5
   d58fc:	4620      	mov	r0, r4
}
   d58fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setMode(originalMode); //Return to the original user's choice
   d5902:	f7ff bfa1 	b.w	d5848 <_ZN6BME2807setModeEh>
   d5906:	bf00      	nop
   d5908:	000d9bd2 	.word	0x000d9bd2

000d590c <_ZN6BME28021setPressureOverSampleEh>:
	overSampleAmount = checkSampleValue(overSampleAmount); //Error check
   d590c:	2910      	cmp	r1, #16
   d590e:	bf98      	it	ls
   d5910:	4b10      	ldrls	r3, [pc, #64]	; (d5954 <_ZN6BME28021setPressureOverSampleEh+0x48>)
{
   d5912:	b570      	push	{r4, r5, r6, lr}
   d5914:	bf98      	it	ls
   d5916:	5c5e      	ldrbls	r6, [r3, r1]
   d5918:	4604      	mov	r4, r0
   d591a:	bf88      	it	hi
   d591c:	2601      	movhi	r6, #1
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
   d591e:	f7ff ff5b 	bl	d57d8 <_ZN6BME2807getModeEv>
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
   d5922:	2100      	movs	r1, #0
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
   d5924:	4605      	mov	r5, r0
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
   d5926:	4620      	mov	r0, r4
   d5928:	f7ff ff8e 	bl	d5848 <_ZN6BME2807setModeEh>
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
   d592c:	21f4      	movs	r1, #244	; 0xf4
   d592e:	4620      	mov	r0, r4
   d5930:	f7ff ff16 	bl	d5760 <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<4) | (1<<3) | (1<<2) ); //Clear bits 432
   d5934:	f020 021c 	bic.w	r2, r0, #28
	controlData |= overSampleAmount << 2; //Align overSampleAmount to bits 4/3/2
   d5938:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
	writeRegister(BME280_CTRL_MEAS_REG, controlData);
   d593c:	4620      	mov	r0, r4
   d593e:	21f4      	movs	r1, #244	; 0xf4
   d5940:	b2d2      	uxtb	r2, r2
   d5942:	f7ff ff50 	bl	d57e6 <_ZN6BME28013writeRegisterEhh>
	setMode(originalMode); //Return to the original user's choice
   d5946:	4629      	mov	r1, r5
   d5948:	4620      	mov	r0, r4
}
   d594a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setMode(originalMode); //Return to the original user's choice
   d594e:	f7ff bf7b 	b.w	d5848 <_ZN6BME2807setModeEh>
   d5952:	bf00      	nop
   d5954:	000d9bd2 	.word	0x000d9bd2

000d5958 <_ZN6BME28021setHumidityOverSampleEh>:
	overSampleAmount = checkSampleValue(overSampleAmount); //Error check
   d5958:	2910      	cmp	r1, #16
   d595a:	bf98      	it	ls
   d595c:	4b0f      	ldrls	r3, [pc, #60]	; (d599c <_ZN6BME28021setHumidityOverSampleEh+0x44>)
{
   d595e:	b570      	push	{r4, r5, r6, lr}
   d5960:	bf98      	it	ls
   d5962:	5c5e      	ldrbls	r6, [r3, r1]
   d5964:	4604      	mov	r4, r0
   d5966:	bf88      	it	hi
   d5968:	2601      	movhi	r6, #1
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
   d596a:	f7ff ff35 	bl	d57d8 <_ZN6BME2807getModeEv>
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
   d596e:	2100      	movs	r1, #0
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
   d5970:	4605      	mov	r5, r0
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
   d5972:	4620      	mov	r0, r4
   d5974:	f7ff ff68 	bl	d5848 <_ZN6BME2807setModeEh>
	uint8_t controlData = readRegister(BME280_CTRL_HUMIDITY_REG);
   d5978:	21f2      	movs	r1, #242	; 0xf2
   d597a:	4620      	mov	r0, r4
   d597c:	f7ff fef0 	bl	d5760 <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<2) | (1<<1) | (1<<0) ); //Clear bits 2/1/0
   d5980:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
	writeRegister(BME280_CTRL_HUMIDITY_REG, controlData);
   d5984:	ea40 0206 	orr.w	r2, r0, r6
   d5988:	21f2      	movs	r1, #242	; 0xf2
   d598a:	4620      	mov	r0, r4
   d598c:	f7ff ff2b 	bl	d57e6 <_ZN6BME28013writeRegisterEhh>
	setMode(originalMode); //Return to the original user's choice
   d5990:	4629      	mov	r1, r5
   d5992:	4620      	mov	r0, r4
}
   d5994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setMode(originalMode); //Return to the original user's choice
   d5998:	f7ff bf56 	b.w	d5848 <_ZN6BME2807setModeEh>
   d599c:	000d9bd2 	.word	0x000d9bd2

000d59a0 <_ZN6BME2805beginEv>:
{
   d59a0:	b538      	push	{r3, r4, r5, lr}
   d59a2:	4604      	mov	r4, r0
	delay(2);  //Make sure sensor had enough time to turn on. BME280 requires 2ms to start up.
   d59a4:	2002      	movs	r0, #2
   d59a6:	f000 fc43 	bl	d6230 <delay>
	switch (settings.commInterface)
   d59aa:	7825      	ldrb	r5, [r4, #0]
   d59ac:	2d00      	cmp	r5, #0
   d59ae:	f000 80f3 	beq.w	d5b98 <_ZN6BME2805beginEv+0x1f8>
   d59b2:	2d01      	cmp	r5, #1
   d59b4:	f000 80f9 	beq.w	d5baa <_ZN6BME2805beginEv+0x20a>
	uint8_t chipID = readRegister(BME280_CHIP_ID_REG); //Should return 0x60 or 0x58
   d59b8:	21d0      	movs	r1, #208	; 0xd0
   d59ba:	4620      	mov	r0, r4
   d59bc:	f7ff fed0 	bl	d5760 <_ZN6BME28012readRegisterEh>
	if(chipID != 0x58 && chipID != 0x60) // Is this BMP or BME?
   d59c0:	2858      	cmp	r0, #88	; 0x58
   d59c2:	d002      	beq.n	d59ca <_ZN6BME2805beginEv+0x2a>
   d59c4:	2860      	cmp	r0, #96	; 0x60
   d59c6:	f040 810c 	bne.w	d5be2 <_ZN6BME2805beginEv+0x242>
	calibration.dig_T1 = ((uint16_t)((readRegister(BME280_DIG_T1_MSB_REG) << 8) + readRegister(BME280_DIG_T1_LSB_REG)));
   d59ca:	2189      	movs	r1, #137	; 0x89
   d59cc:	4620      	mov	r0, r4
   d59ce:	f7ff fec7 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d59d2:	2188      	movs	r1, #136	; 0x88
   d59d4:	4605      	mov	r5, r0
   d59d6:	4620      	mov	r0, r4
   d59d8:	f7ff fec2 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d59dc:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d59e0:	8220      	strh	r0, [r4, #16]
	calibration.dig_T2 = ((int16_t)((readRegister(BME280_DIG_T2_MSB_REG) << 8) + readRegister(BME280_DIG_T2_LSB_REG)));
   d59e2:	218b      	movs	r1, #139	; 0x8b
   d59e4:	4620      	mov	r0, r4
   d59e6:	f7ff febb 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d59ea:	218a      	movs	r1, #138	; 0x8a
   d59ec:	4605      	mov	r5, r0
   d59ee:	4620      	mov	r0, r4
   d59f0:	f7ff feb6 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d59f4:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d59f8:	8260      	strh	r0, [r4, #18]
	calibration.dig_T3 = ((int16_t)((readRegister(BME280_DIG_T3_MSB_REG) << 8) + readRegister(BME280_DIG_T3_LSB_REG)));
   d59fa:	218d      	movs	r1, #141	; 0x8d
   d59fc:	4620      	mov	r0, r4
   d59fe:	f7ff feaf 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5a02:	218c      	movs	r1, #140	; 0x8c
   d5a04:	4605      	mov	r5, r0
   d5a06:	4620      	mov	r0, r4
   d5a08:	f7ff feaa 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5a0c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d5a10:	82a0      	strh	r0, [r4, #20]
	calibration.dig_P1 = ((uint16_t)((readRegister(BME280_DIG_P1_MSB_REG) << 8) + readRegister(BME280_DIG_P1_LSB_REG)));
   d5a12:	218f      	movs	r1, #143	; 0x8f
   d5a14:	4620      	mov	r0, r4
   d5a16:	f7ff fea3 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5a1a:	218e      	movs	r1, #142	; 0x8e
   d5a1c:	4605      	mov	r5, r0
   d5a1e:	4620      	mov	r0, r4
   d5a20:	f7ff fe9e 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5a24:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d5a28:	82e0      	strh	r0, [r4, #22]
	calibration.dig_P2 = ((int16_t)((readRegister(BME280_DIG_P2_MSB_REG) << 8) + readRegister(BME280_DIG_P2_LSB_REG)));
   d5a2a:	2191      	movs	r1, #145	; 0x91
   d5a2c:	4620      	mov	r0, r4
   d5a2e:	f7ff fe97 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5a32:	2190      	movs	r1, #144	; 0x90
   d5a34:	4605      	mov	r5, r0
   d5a36:	4620      	mov	r0, r4
   d5a38:	f7ff fe92 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5a3c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d5a40:	8320      	strh	r0, [r4, #24]
	calibration.dig_P3 = ((int16_t)((readRegister(BME280_DIG_P3_MSB_REG) << 8) + readRegister(BME280_DIG_P3_LSB_REG)));
   d5a42:	2193      	movs	r1, #147	; 0x93
   d5a44:	4620      	mov	r0, r4
   d5a46:	f7ff fe8b 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5a4a:	2192      	movs	r1, #146	; 0x92
   d5a4c:	4605      	mov	r5, r0
   d5a4e:	4620      	mov	r0, r4
   d5a50:	f7ff fe86 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5a54:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d5a58:	8360      	strh	r0, [r4, #26]
	calibration.dig_P4 = ((int16_t)((readRegister(BME280_DIG_P4_MSB_REG) << 8) + readRegister(BME280_DIG_P4_LSB_REG)));
   d5a5a:	2195      	movs	r1, #149	; 0x95
   d5a5c:	4620      	mov	r0, r4
   d5a5e:	f7ff fe7f 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5a62:	2194      	movs	r1, #148	; 0x94
   d5a64:	4605      	mov	r5, r0
   d5a66:	4620      	mov	r0, r4
   d5a68:	f7ff fe7a 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5a6c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d5a70:	83a0      	strh	r0, [r4, #28]
	calibration.dig_P5 = ((int16_t)((readRegister(BME280_DIG_P5_MSB_REG) << 8) + readRegister(BME280_DIG_P5_LSB_REG)));
   d5a72:	2197      	movs	r1, #151	; 0x97
   d5a74:	4620      	mov	r0, r4
   d5a76:	f7ff fe73 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5a7a:	2196      	movs	r1, #150	; 0x96
   d5a7c:	4605      	mov	r5, r0
   d5a7e:	4620      	mov	r0, r4
   d5a80:	f7ff fe6e 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5a84:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d5a88:	83e0      	strh	r0, [r4, #30]
	calibration.dig_P6 = ((int16_t)((readRegister(BME280_DIG_P6_MSB_REG) << 8) + readRegister(BME280_DIG_P6_LSB_REG)));
   d5a8a:	2199      	movs	r1, #153	; 0x99
   d5a8c:	4620      	mov	r0, r4
   d5a8e:	f7ff fe67 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5a92:	2198      	movs	r1, #152	; 0x98
   d5a94:	4605      	mov	r5, r0
   d5a96:	4620      	mov	r0, r4
   d5a98:	f7ff fe62 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5a9c:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d5aa0:	8420      	strh	r0, [r4, #32]
	calibration.dig_P7 = ((int16_t)((readRegister(BME280_DIG_P7_MSB_REG) << 8) + readRegister(BME280_DIG_P7_LSB_REG)));
   d5aa2:	219b      	movs	r1, #155	; 0x9b
   d5aa4:	4620      	mov	r0, r4
   d5aa6:	f7ff fe5b 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5aaa:	219a      	movs	r1, #154	; 0x9a
   d5aac:	4605      	mov	r5, r0
   d5aae:	4620      	mov	r0, r4
   d5ab0:	f7ff fe56 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5ab4:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d5ab8:	8460      	strh	r0, [r4, #34]	; 0x22
	calibration.dig_P8 = ((int16_t)((readRegister(BME280_DIG_P8_MSB_REG) << 8) + readRegister(BME280_DIG_P8_LSB_REG)));
   d5aba:	219d      	movs	r1, #157	; 0x9d
   d5abc:	4620      	mov	r0, r4
   d5abe:	f7ff fe4f 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5ac2:	219c      	movs	r1, #156	; 0x9c
   d5ac4:	4605      	mov	r5, r0
   d5ac6:	4620      	mov	r0, r4
   d5ac8:	f7ff fe4a 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5acc:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d5ad0:	84a0      	strh	r0, [r4, #36]	; 0x24
	calibration.dig_P9 = ((int16_t)((readRegister(BME280_DIG_P9_MSB_REG) << 8) + readRegister(BME280_DIG_P9_LSB_REG)));
   d5ad2:	219f      	movs	r1, #159	; 0x9f
   d5ad4:	4620      	mov	r0, r4
   d5ad6:	f7ff fe43 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5ada:	219e      	movs	r1, #158	; 0x9e
   d5adc:	4605      	mov	r5, r0
   d5ade:	4620      	mov	r0, r4
   d5ae0:	f7ff fe3e 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5ae4:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d5ae8:	84e0      	strh	r0, [r4, #38]	; 0x26
	calibration.dig_H1 = ((uint8_t)(readRegister(BME280_DIG_H1_REG)));
   d5aea:	21a1      	movs	r1, #161	; 0xa1
   d5aec:	4620      	mov	r0, r4
   d5aee:	f7ff fe37 	bl	d5760 <_ZN6BME28012readRegisterEh>
	calibration.dig_H2 = ((int16_t)((readRegister(BME280_DIG_H2_MSB_REG) << 8) + readRegister(BME280_DIG_H2_LSB_REG)));
   d5af2:	21e2      	movs	r1, #226	; 0xe2
	calibration.dig_H1 = ((uint8_t)(readRegister(BME280_DIG_H1_REG)));
   d5af4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	calibration.dig_H2 = ((int16_t)((readRegister(BME280_DIG_H2_MSB_REG) << 8) + readRegister(BME280_DIG_H2_LSB_REG)));
   d5af8:	4620      	mov	r0, r4
   d5afa:	f7ff fe31 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5afe:	21e1      	movs	r1, #225	; 0xe1
   d5b00:	4605      	mov	r5, r0
   d5b02:	4620      	mov	r0, r4
   d5b04:	f7ff fe2c 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5b08:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   d5b0c:	8560      	strh	r0, [r4, #42]	; 0x2a
	calibration.dig_H3 = ((uint8_t)(readRegister(BME280_DIG_H3_REG)));
   d5b0e:	21e3      	movs	r1, #227	; 0xe3
   d5b10:	4620      	mov	r0, r4
   d5b12:	f7ff fe25 	bl	d5760 <_ZN6BME28012readRegisterEh>
	calibration.dig_H4 = ((int16_t)((readRegister(BME280_DIG_H4_MSB_REG) << 4) + (readRegister(BME280_DIG_H4_LSB_REG) & 0x0F)));
   d5b16:	21e4      	movs	r1, #228	; 0xe4
	calibration.dig_H3 = ((uint8_t)(readRegister(BME280_DIG_H3_REG)));
   d5b18:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
	calibration.dig_H4 = ((int16_t)((readRegister(BME280_DIG_H4_MSB_REG) << 4) + (readRegister(BME280_DIG_H4_LSB_REG) & 0x0F)));
   d5b1c:	4620      	mov	r0, r4
   d5b1e:	f7ff fe1f 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5b22:	21e5      	movs	r1, #229	; 0xe5
   d5b24:	4605      	mov	r5, r0
   d5b26:	4620      	mov	r0, r4
   d5b28:	f7ff fe1a 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5b2c:	f000 030f 	and.w	r3, r0, #15
   d5b30:	eb03 1005 	add.w	r0, r3, r5, lsl #4
   d5b34:	85e0      	strh	r0, [r4, #46]	; 0x2e
	calibration.dig_H5 = ((int16_t)((readRegister(BME280_DIG_H5_MSB_REG) << 4) + ((readRegister(BME280_DIG_H4_LSB_REG) >> 4) & 0x0F)));
   d5b36:	21e6      	movs	r1, #230	; 0xe6
   d5b38:	4620      	mov	r0, r4
   d5b3a:	f7ff fe11 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5b3e:	21e5      	movs	r1, #229	; 0xe5
   d5b40:	4605      	mov	r5, r0
   d5b42:	4620      	mov	r0, r4
   d5b44:	f7ff fe0c 	bl	d5760 <_ZN6BME28012readRegisterEh>
   d5b48:	1103      	asrs	r3, r0, #4
   d5b4a:	eb03 1005 	add.w	r0, r3, r5, lsl #4
   d5b4e:	8620      	strh	r0, [r4, #48]	; 0x30
	calibration.dig_H6 = ((int8_t)readRegister(BME280_DIG_H6_REG));
   d5b50:	21e7      	movs	r1, #231	; 0xe7
   d5b52:	4620      	mov	r0, r4
   d5b54:	f7ff fe04 	bl	d5760 <_ZN6BME28012readRegisterEh>
	setStandbyTime(settings.tStandby);
   d5b58:	7921      	ldrb	r1, [r4, #4]
	calibration.dig_H6 = ((int8_t)readRegister(BME280_DIG_H6_REG));
   d5b5a:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	setStandbyTime(settings.tStandby);
   d5b5e:	4620      	mov	r0, r4
   d5b60:	f7ff fe85 	bl	d586e <_ZN6BME28014setStandbyTimeEh>
	setFilter(settings.filter);
   d5b64:	7961      	ldrb	r1, [r4, #5]
   d5b66:	4620      	mov	r0, r4
   d5b68:	f7ff fe95 	bl	d5896 <_ZN6BME2809setFilterEh>
	setPressureOverSample(settings.pressOverSample); //Default of 1x oversample
   d5b6c:	79e1      	ldrb	r1, [r4, #7]
   d5b6e:	4620      	mov	r0, r4
   d5b70:	f7ff fecc 	bl	d590c <_ZN6BME28021setPressureOverSampleEh>
	setHumidityOverSample(settings.humidOverSample); //Default of 1x oversample
   d5b74:	7a21      	ldrb	r1, [r4, #8]
   d5b76:	4620      	mov	r0, r4
   d5b78:	f7ff feee 	bl	d5958 <_ZN6BME28021setHumidityOverSampleEh>
	setTempOverSample(settings.tempOverSample); //Default of 1x oversample
   d5b7c:	79a1      	ldrb	r1, [r4, #6]
   d5b7e:	4620      	mov	r0, r4
   d5b80:	f7ff fe9e 	bl	d58c0 <_ZN6BME28017setTempOverSampleEh>
	setMode(MODE_NORMAL); //Go!
   d5b84:	4620      	mov	r0, r4
   d5b86:	2103      	movs	r1, #3
   d5b88:	f7ff fe5e 	bl	d5848 <_ZN6BME2807setModeEh>
	return(readRegister(BME280_CHIP_ID_REG)); //Should return 0x60
   d5b8c:	4620      	mov	r0, r4
   d5b8e:	21d0      	movs	r1, #208	; 0xd0
}
   d5b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return(readRegister(BME280_CHIP_ID_REG)); //Should return 0x60
   d5b94:	f7ff bde4 	b.w	d5760 <_ZN6BME28012readRegisterEh>
		switch(_wireType)
   d5b98:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   d5b9c:	2b01      	cmp	r3, #1
   d5b9e:	f47f af0b 	bne.w	d59b8 <_ZN6BME2805beginEv+0x18>
				_hardPort->begin(); //The caller can begin their port and set the speed. We just confirm it here otherwise it can be hard to debug.
   d5ba2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d5ba4:	f001 fc86 	bl	d74b4 <_ZN7TwoWire5beginEv>
				break;
   d5ba8:	e706      	b.n	d59b8 <_ZN6BME2805beginEv+0x18>
        instance().begin();
   d5baa:	f7ff fc07 	bl	d53bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5bae:	f001 fe7d 	bl	d78ac <_ZN8SPIClass5beginEv>
        instance().setClockDivider(divider);
   d5bb2:	f7ff fc03 	bl	d53bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5bb6:	2120      	movs	r1, #32
   d5bb8:	f001 fef8 	bl	d79ac <_ZN8SPIClass15setClockDividerEh>
        instance().setBitOrder(order);
   d5bbc:	f7ff fbfe 	bl	d53bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5bc0:	4629      	mov	r1, r5
   d5bc2:	f001 fe84 	bl	d78ce <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
   d5bc6:	f7ff fbf9 	bl	d53bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5bca:	2103      	movs	r1, #3
   d5bcc:	f001 fe92 	bl	d78f4 <_ZN8SPIClass11setDataModeEh>
		pinMode(settings.chipSelectPin, OUTPUT);
   d5bd0:	78a0      	ldrb	r0, [r4, #2]
   d5bd2:	4629      	mov	r1, r5
   d5bd4:	f002 f9e8 	bl	d7fa8 <pinMode>
		digitalWrite(settings.chipSelectPin, HIGH);
   d5bd8:	78a0      	ldrb	r0, [r4, #2]
   d5bda:	4629      	mov	r1, r5
   d5bdc:	f002 f9f5 	bl	d7fca <digitalWrite>
		break;
   d5be0:	e6ea      	b.n	d59b8 <_ZN6BME2805beginEv+0x18>
}
   d5be2:	bd38      	pop	{r3, r4, r5, pc}

000d5be4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d5be4:	b508      	push	{r3, lr}
   d5be6:	4b02      	ldr	r3, [pc, #8]	; (d5bf0 <hal_ble_stack_init+0xc>)
   d5be8:	681b      	ldr	r3, [r3, #0]
   d5bea:	689b      	ldr	r3, [r3, #8]
   d5bec:	9301      	str	r3, [sp, #4]
   d5bee:	bd08      	pop	{r3, pc}
   d5bf0:	00030278 	.word	0x00030278

000d5bf4 <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   d5bf4:	b508      	push	{r3, lr}
   d5bf6:	4b02      	ldr	r3, [pc, #8]	; (d5c00 <hal_ble_select_antenna+0xc>)
   d5bf8:	681b      	ldr	r3, [r3, #0]
   d5bfa:	691b      	ldr	r3, [r3, #16]
   d5bfc:	9301      	str	r3, [sp, #4]
   d5bfe:	bd08      	pop	{r3, pc}
   d5c00:	00030278 	.word	0x00030278

000d5c04 <hal_ble_gap_set_device_name>:
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events_deprecated, int(hal_ble_on_generic_evt_cb_deprecated_t, void*, void*))
DYNALIB_FN(6, hal_ble, hal_ble_gap_set_device_address, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
DYNALIB_FN(8, hal_ble, hal_ble_gap_set_device_name, int(const char*, size_t, void*))
   d5c04:	b508      	push	{r3, lr}
   d5c06:	4b02      	ldr	r3, [pc, #8]	; (d5c10 <hal_ble_gap_set_device_name+0xc>)
   d5c08:	681b      	ldr	r3, [r3, #0]
   d5c0a:	6a1b      	ldr	r3, [r3, #32]
   d5c0c:	9301      	str	r3, [sp, #4]
   d5c0e:	bd08      	pop	{r3, pc}
   d5c10:	00030278 	.word	0x00030278

000d5c14 <hal_ble_gap_set_advertising_parameters>:
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
   d5c14:	b508      	push	{r3, lr}
   d5c16:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <hal_ble_gap_set_advertising_parameters+0xc>)
   d5c18:	681b      	ldr	r3, [r3, #0]
   d5c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5c1c:	9301      	str	r3, [sp, #4]
   d5c1e:	bd08      	pop	{r3, pc}
   d5c20:	00030278 	.word	0x00030278

000d5c24 <hal_ble_gap_get_advertising_parameters>:
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
   d5c24:	b508      	push	{r3, lr}
   d5c26:	4b02      	ldr	r3, [pc, #8]	; (d5c30 <hal_ble_gap_get_advertising_parameters+0xc>)
   d5c28:	681b      	ldr	r3, [r3, #0]
   d5c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	bd08      	pop	{r3, pc}
   d5c30:	00030278 	.word	0x00030278

000d5c34 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d5c34:	b508      	push	{r3, lr}
   d5c36:	4b02      	ldr	r3, [pc, #8]	; (d5c40 <hal_ble_gap_set_advertising_data+0xc>)
   d5c38:	681b      	ldr	r3, [r3, #0]
   d5c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5c3c:	9301      	str	r3, [sp, #4]
   d5c3e:	bd08      	pop	{r3, pc}
   d5c40:	00030278 	.word	0x00030278

000d5c44 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d5c44:	b508      	push	{r3, lr}
   d5c46:	4b02      	ldr	r3, [pc, #8]	; (d5c50 <hal_ble_gap_set_scan_response_data+0xc>)
   d5c48:	681b      	ldr	r3, [r3, #0]
   d5c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5c4c:	9301      	str	r3, [sp, #4]
   d5c4e:	bd08      	pop	{r3, pc}
   d5c50:	00030278 	.word	0x00030278

000d5c54 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4b02      	ldr	r3, [pc, #8]	; (d5c60 <hal_ble_gap_start_advertising+0xc>)
   d5c58:	681b      	ldr	r3, [r3, #0]
   d5c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5c5c:	9301      	str	r3, [sp, #4]
   d5c5e:	bd08      	pop	{r3, pc}
   d5c60:	00030278 	.word	0x00030278

000d5c64 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d5c64:	b508      	push	{r3, lr}
   d5c66:	4b03      	ldr	r3, [pc, #12]	; (d5c74 <hal_ble_gap_disconnect+0x10>)
   d5c68:	681b      	ldr	r3, [r3, #0]
   d5c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5c6e:	9301      	str	r3, [sp, #4]
   d5c70:	bd08      	pop	{r3, pc}
   d5c72:	0000      	.short	0x0000
   d5c74:	00030278 	.word	0x00030278

000d5c78 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d5c78:	b508      	push	{r3, lr}
   d5c7a:	4b03      	ldr	r3, [pc, #12]	; (d5c88 <hal_ble_gatt_server_add_service+0x10>)
   d5c7c:	681b      	ldr	r3, [r3, #0]
   d5c7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d5c82:	9301      	str	r3, [sp, #4]
   d5c84:	bd08      	pop	{r3, pc}
   d5c86:	0000      	.short	0x0000
   d5c88:	00030278 	.word	0x00030278

000d5c8c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b03      	ldr	r3, [pc, #12]	; (d5c9c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d5c96:	9301      	str	r3, [sp, #4]
   d5c98:	bd08      	pop	{r3, pc}
   d5c9a:	0000      	.short	0x0000
   d5c9c:	00030278 	.word	0x00030278

000d5ca0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b03      	ldr	r3, [pc, #12]	; (d5cb0 <hal_ble_gatt_client_write_with_response+0x10>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d5caa:	9301      	str	r3, [sp, #4]
   d5cac:	bd08      	pop	{r3, pc}
   d5cae:	0000      	.short	0x0000
   d5cb0:	00030278 	.word	0x00030278

000d5cb4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5cb4:	b508      	push	{r3, lr}
   d5cb6:	4b03      	ldr	r3, [pc, #12]	; (d5cc4 <hal_ble_gatt_client_write_without_response+0x10>)
   d5cb8:	681b      	ldr	r3, [r3, #0]
   d5cba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d5cbe:	9301      	str	r3, [sp, #4]
   d5cc0:	bd08      	pop	{r3, pc}
   d5cc2:	0000      	.short	0x0000
   d5cc4:	00030278 	.word	0x00030278

000d5cc8 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5cc8:	b508      	push	{r3, lr}
   d5cca:	4b03      	ldr	r3, [pc, #12]	; (d5cd8 <hal_ble_gatt_server_add_characteristic+0x10>)
   d5ccc:	681b      	ldr	r3, [r3, #0]
   d5cce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d5cd2:	9301      	str	r3, [sp, #4]
   d5cd4:	bd08      	pop	{r3, pc}
   d5cd6:	0000      	.short	0x0000
   d5cd8:	00030278 	.word	0x00030278

000d5cdc <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5cdc:	b508      	push	{r3, lr}
   d5cde:	4b03      	ldr	r3, [pc, #12]	; (d5cec <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5ce0:	681b      	ldr	r3, [r3, #0]
   d5ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d5ce6:	9301      	str	r3, [sp, #4]
   d5ce8:	bd08      	pop	{r3, pc}
   d5cea:	0000      	.short	0x0000
   d5cec:	00030278 	.word	0x00030278

000d5cf0 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b03      	ldr	r3, [pc, #12]	; (d5d00 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d5cfa:	9301      	str	r3, [sp, #4]
   d5cfc:	bd08      	pop	{r3, pc}
   d5cfe:	0000      	.short	0x0000
   d5d00:	00030278 	.word	0x00030278

000d5d04 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5d04:	b508      	push	{r3, lr}
   d5d06:	4b03      	ldr	r3, [pc, #12]	; (d5d14 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d5d08:	681b      	ldr	r3, [r3, #0]
   d5d0a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d5d0e:	9301      	str	r3, [sp, #4]
   d5d10:	bd08      	pop	{r3, pc}
   d5d12:	0000      	.short	0x0000
   d5d14:	00030278 	.word	0x00030278

000d5d18 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5d18:	b508      	push	{r3, lr}
   d5d1a:	4b02      	ldr	r3, [pc, #8]	; (d5d24 <os_mutex_recursive_create+0xc>)
   d5d1c:	681b      	ldr	r3, [r3, #0]
   d5d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d20:	9301      	str	r3, [sp, #4]
   d5d22:	bd08      	pop	{r3, pc}
   d5d24:	00030248 	.word	0x00030248

000d5d28 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5d28:	b508      	push	{r3, lr}
   d5d2a:	4b02      	ldr	r3, [pc, #8]	; (d5d34 <os_mutex_recursive_destroy+0xc>)
   d5d2c:	681b      	ldr	r3, [r3, #0]
   d5d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5d30:	9301      	str	r3, [sp, #4]
   d5d32:	bd08      	pop	{r3, pc}
   d5d34:	00030248 	.word	0x00030248

000d5d38 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5d38:	b508      	push	{r3, lr}
   d5d3a:	4b02      	ldr	r3, [pc, #8]	; (d5d44 <os_mutex_recursive_lock+0xc>)
   d5d3c:	681b      	ldr	r3, [r3, #0]
   d5d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5d40:	9301      	str	r3, [sp, #4]
   d5d42:	bd08      	pop	{r3, pc}
   d5d44:	00030248 	.word	0x00030248

000d5d48 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5d48:	b508      	push	{r3, lr}
   d5d4a:	4b02      	ldr	r3, [pc, #8]	; (d5d54 <os_mutex_recursive_unlock+0xc>)
   d5d4c:	681b      	ldr	r3, [r3, #0]
   d5d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5d50:	9301      	str	r3, [sp, #4]
   d5d52:	bd08      	pop	{r3, pc}
   d5d54:	00030248 	.word	0x00030248

000d5d58 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5d58:	b508      	push	{r3, lr}
   d5d5a:	4b02      	ldr	r3, [pc, #8]	; (d5d64 <HAL_RNG_GetRandomNumber+0xc>)
   d5d5c:	681b      	ldr	r3, [r3, #0]
   d5d5e:	685b      	ldr	r3, [r3, #4]
   d5d60:	9301      	str	r3, [sp, #4]
   d5d62:	bd08      	pop	{r3, pc}
   d5d64:	00030218 	.word	0x00030218

000d5d68 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5d68:	b508      	push	{r3, lr}
   d5d6a:	4b02      	ldr	r3, [pc, #8]	; (d5d74 <HAL_Delay_Microseconds+0xc>)
   d5d6c:	681b      	ldr	r3, [r3, #0]
   d5d6e:	68db      	ldr	r3, [r3, #12]
   d5d70:	9301      	str	r3, [sp, #4]
   d5d72:	bd08      	pop	{r3, pc}
   d5d74:	00030218 	.word	0x00030218

000d5d78 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5d78:	b508      	push	{r3, lr}
   d5d7a:	4b02      	ldr	r3, [pc, #8]	; (d5d84 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5d7c:	681b      	ldr	r3, [r3, #0]
   d5d7e:	691b      	ldr	r3, [r3, #16]
   d5d80:	9301      	str	r3, [sp, #4]
   d5d82:	bd08      	pop	{r3, pc}
   d5d84:	00030218 	.word	0x00030218

000d5d88 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5d88:	b508      	push	{r3, lr}
   d5d8a:	4b02      	ldr	r3, [pc, #8]	; (d5d94 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5d8c:	681b      	ldr	r3, [r3, #0]
   d5d8e:	695b      	ldr	r3, [r3, #20]
   d5d90:	9301      	str	r3, [sp, #4]
   d5d92:	bd08      	pop	{r3, pc}
   d5d94:	00030218 	.word	0x00030218

000d5d98 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5d98:	b508      	push	{r3, lr}
   d5d9a:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <HAL_Validate_Pin_Function+0xc>)
   d5d9c:	681b      	ldr	r3, [r3, #0]
   d5d9e:	685b      	ldr	r3, [r3, #4]
   d5da0:	9301      	str	r3, [sp, #4]
   d5da2:	bd08      	pop	{r3, pc}
   d5da4:	0003022c 	.word	0x0003022c

000d5da8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5da8:	b508      	push	{r3, lr}
   d5daa:	4b02      	ldr	r3, [pc, #8]	; (d5db4 <HAL_Pin_Mode+0xc>)
   d5dac:	681b      	ldr	r3, [r3, #0]
   d5dae:	689b      	ldr	r3, [r3, #8]
   d5db0:	9301      	str	r3, [sp, #4]
   d5db2:	bd08      	pop	{r3, pc}
   d5db4:	0003022c 	.word	0x0003022c

000d5db8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5db8:	b508      	push	{r3, lr}
   d5dba:	4b02      	ldr	r3, [pc, #8]	; (d5dc4 <HAL_Get_Pin_Mode+0xc>)
   d5dbc:	681b      	ldr	r3, [r3, #0]
   d5dbe:	68db      	ldr	r3, [r3, #12]
   d5dc0:	9301      	str	r3, [sp, #4]
   d5dc2:	bd08      	pop	{r3, pc}
   d5dc4:	0003022c 	.word	0x0003022c

000d5dc8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5dc8:	b508      	push	{r3, lr}
   d5dca:	4b02      	ldr	r3, [pc, #8]	; (d5dd4 <HAL_GPIO_Write+0xc>)
   d5dcc:	681b      	ldr	r3, [r3, #0]
   d5dce:	691b      	ldr	r3, [r3, #16]
   d5dd0:	9301      	str	r3, [sp, #4]
   d5dd2:	bd08      	pop	{r3, pc}
   d5dd4:	0003022c 	.word	0x0003022c

000d5dd8 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d5dd8:	b508      	push	{r3, lr}
   d5dda:	4b02      	ldr	r3, [pc, #8]	; (d5de4 <HAL_Interrupts_Attach+0xc>)
   d5ddc:	681b      	ldr	r3, [r3, #0]
   d5dde:	699b      	ldr	r3, [r3, #24]
   d5de0:	9301      	str	r3, [sp, #4]
   d5de2:	bd08      	pop	{r3, pc}
   d5de4:	0003022c 	.word	0x0003022c

000d5de8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d5de8:	b508      	push	{r3, lr}
   d5dea:	4b02      	ldr	r3, [pc, #8]	; (d5df4 <HAL_Interrupts_Detach+0xc>)
   d5dec:	681b      	ldr	r3, [r3, #0]
   d5dee:	69db      	ldr	r3, [r3, #28]
   d5df0:	9301      	str	r3, [sp, #4]
   d5df2:	bd08      	pop	{r3, pc}
   d5df4:	0003022c 	.word	0x0003022c

000d5df8 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5df8:	b508      	push	{r3, lr}
   d5dfa:	4b02      	ldr	r3, [pc, #8]	; (d5e04 <hal_adc_read+0xc>)
   d5dfc:	681b      	ldr	r3, [r3, #0]
   d5dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e00:	9301      	str	r3, [sp, #4]
   d5e02:	bd08      	pop	{r3, pc}
   d5e04:	0003022c 	.word	0x0003022c

000d5e08 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5e08:	b508      	push	{r3, lr}
   d5e0a:	4b02      	ldr	r3, [pc, #8]	; (d5e14 <hal_i2c_begin+0xc>)
   d5e0c:	681b      	ldr	r3, [r3, #0]
   d5e0e:	68db      	ldr	r3, [r3, #12]
   d5e10:	9301      	str	r3, [sp, #4]
   d5e12:	bd08      	pop	{r3, pc}
   d5e14:	00030228 	.word	0x00030228

000d5e18 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5e18:	b508      	push	{r3, lr}
   d5e1a:	4b02      	ldr	r3, [pc, #8]	; (d5e24 <hal_i2c_begin_transmission+0xc>)
   d5e1c:	681b      	ldr	r3, [r3, #0]
   d5e1e:	699b      	ldr	r3, [r3, #24]
   d5e20:	9301      	str	r3, [sp, #4]
   d5e22:	bd08      	pop	{r3, pc}
   d5e24:	00030228 	.word	0x00030228

000d5e28 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5e28:	b508      	push	{r3, lr}
   d5e2a:	4b02      	ldr	r3, [pc, #8]	; (d5e34 <hal_i2c_end_transmission+0xc>)
   d5e2c:	681b      	ldr	r3, [r3, #0]
   d5e2e:	69db      	ldr	r3, [r3, #28]
   d5e30:	9301      	str	r3, [sp, #4]
   d5e32:	bd08      	pop	{r3, pc}
   d5e34:	00030228 	.word	0x00030228

000d5e38 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5e38:	b508      	push	{r3, lr}
   d5e3a:	4b02      	ldr	r3, [pc, #8]	; (d5e44 <hal_i2c_write+0xc>)
   d5e3c:	681b      	ldr	r3, [r3, #0]
   d5e3e:	6a1b      	ldr	r3, [r3, #32]
   d5e40:	9301      	str	r3, [sp, #4]
   d5e42:	bd08      	pop	{r3, pc}
   d5e44:	00030228 	.word	0x00030228

000d5e48 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5e48:	b508      	push	{r3, lr}
   d5e4a:	4b02      	ldr	r3, [pc, #8]	; (d5e54 <hal_i2c_available+0xc>)
   d5e4c:	681b      	ldr	r3, [r3, #0]
   d5e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e50:	9301      	str	r3, [sp, #4]
   d5e52:	bd08      	pop	{r3, pc}
   d5e54:	00030228 	.word	0x00030228

000d5e58 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5e58:	b508      	push	{r3, lr}
   d5e5a:	4b02      	ldr	r3, [pc, #8]	; (d5e64 <hal_i2c_read+0xc>)
   d5e5c:	681b      	ldr	r3, [r3, #0]
   d5e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e60:	9301      	str	r3, [sp, #4]
   d5e62:	bd08      	pop	{r3, pc}
   d5e64:	00030228 	.word	0x00030228

000d5e68 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5e68:	b508      	push	{r3, lr}
   d5e6a:	4b02      	ldr	r3, [pc, #8]	; (d5e74 <hal_i2c_peek+0xc>)
   d5e6c:	681b      	ldr	r3, [r3, #0]
   d5e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e70:	9301      	str	r3, [sp, #4]
   d5e72:	bd08      	pop	{r3, pc}
   d5e74:	00030228 	.word	0x00030228

000d5e78 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5e78:	b508      	push	{r3, lr}
   d5e7a:	4b02      	ldr	r3, [pc, #8]	; (d5e84 <hal_i2c_flush+0xc>)
   d5e7c:	681b      	ldr	r3, [r3, #0]
   d5e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e80:	9301      	str	r3, [sp, #4]
   d5e82:	bd08      	pop	{r3, pc}
   d5e84:	00030228 	.word	0x00030228

000d5e88 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5e88:	b508      	push	{r3, lr}
   d5e8a:	4b02      	ldr	r3, [pc, #8]	; (d5e94 <hal_i2c_is_enabled+0xc>)
   d5e8c:	681b      	ldr	r3, [r3, #0]
   d5e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e90:	9301      	str	r3, [sp, #4]
   d5e92:	bd08      	pop	{r3, pc}
   d5e94:	00030228 	.word	0x00030228

000d5e98 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5e98:	b508      	push	{r3, lr}
   d5e9a:	4b02      	ldr	r3, [pc, #8]	; (d5ea4 <hal_i2c_init+0xc>)
   d5e9c:	681b      	ldr	r3, [r3, #0]
   d5e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ea0:	9301      	str	r3, [sp, #4]
   d5ea2:	bd08      	pop	{r3, pc}
   d5ea4:	00030228 	.word	0x00030228

000d5ea8 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5ea8:	b508      	push	{r3, lr}
   d5eaa:	4b02      	ldr	r3, [pc, #8]	; (d5eb4 <hal_i2c_request_ex+0xc>)
   d5eac:	681b      	ldr	r3, [r3, #0]
   d5eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5eb0:	9301      	str	r3, [sp, #4]
   d5eb2:	bd08      	pop	{r3, pc}
   d5eb4:	00030228 	.word	0x00030228

000d5eb8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5eb8:	b508      	push	{r3, lr}
   d5eba:	4b02      	ldr	r3, [pc, #8]	; (d5ec4 <inet_inet_ntop+0xc>)
   d5ebc:	681b      	ldr	r3, [r3, #0]
   d5ebe:	695b      	ldr	r3, [r3, #20]
   d5ec0:	9301      	str	r3, [sp, #4]
   d5ec2:	bd08      	pop	{r3, pc}
   d5ec4:	00030264 	.word	0x00030264

000d5ec8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5ec8:	b508      	push	{r3, lr}
   d5eca:	4b02      	ldr	r3, [pc, #8]	; (d5ed4 <netdb_freeaddrinfo+0xc>)
   d5ecc:	681b      	ldr	r3, [r3, #0]
   d5ece:	689b      	ldr	r3, [r3, #8]
   d5ed0:	9301      	str	r3, [sp, #4]
   d5ed2:	bd08      	pop	{r3, pc}
   d5ed4:	00030268 	.word	0x00030268

000d5ed8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5ed8:	b508      	push	{r3, lr}
   d5eda:	4b02      	ldr	r3, [pc, #8]	; (d5ee4 <netdb_getaddrinfo+0xc>)
   d5edc:	681b      	ldr	r3, [r3, #0]
   d5ede:	68db      	ldr	r3, [r3, #12]
   d5ee0:	9301      	str	r3, [sp, #4]
   d5ee2:	bd08      	pop	{r3, pc}
   d5ee4:	00030268 	.word	0x00030268

000d5ee8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5ee8:	b508      	push	{r3, lr}
   d5eea:	4b02      	ldr	r3, [pc, #8]	; (d5ef4 <hal_spi_begin+0xc>)
   d5eec:	681b      	ldr	r3, [r3, #0]
   d5eee:	681b      	ldr	r3, [r3, #0]
   d5ef0:	9301      	str	r3, [sp, #4]
   d5ef2:	bd08      	pop	{r3, pc}
   d5ef4:	00030230 	.word	0x00030230

000d5ef8 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d5ef8:	b508      	push	{r3, lr}
   d5efa:	4b02      	ldr	r3, [pc, #8]	; (d5f04 <hal_spi_set_bit_order+0xc>)
   d5efc:	681b      	ldr	r3, [r3, #0]
   d5efe:	689b      	ldr	r3, [r3, #8]
   d5f00:	9301      	str	r3, [sp, #4]
   d5f02:	bd08      	pop	{r3, pc}
   d5f04:	00030230 	.word	0x00030230

000d5f08 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d5f08:	b508      	push	{r3, lr}
   d5f0a:	4b02      	ldr	r3, [pc, #8]	; (d5f14 <hal_spi_set_data_mode+0xc>)
   d5f0c:	681b      	ldr	r3, [r3, #0]
   d5f0e:	68db      	ldr	r3, [r3, #12]
   d5f10:	9301      	str	r3, [sp, #4]
   d5f12:	bd08      	pop	{r3, pc}
   d5f14:	00030230 	.word	0x00030230

000d5f18 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d5f18:	b508      	push	{r3, lr}
   d5f1a:	4b02      	ldr	r3, [pc, #8]	; (d5f24 <hal_spi_set_clock_divider+0xc>)
   d5f1c:	681b      	ldr	r3, [r3, #0]
   d5f1e:	691b      	ldr	r3, [r3, #16]
   d5f20:	9301      	str	r3, [sp, #4]
   d5f22:	bd08      	pop	{r3, pc}
   d5f24:	00030230 	.word	0x00030230

000d5f28 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5f28:	b508      	push	{r3, lr}
   d5f2a:	4b02      	ldr	r3, [pc, #8]	; (d5f34 <hal_spi_transfer+0xc>)
   d5f2c:	681b      	ldr	r3, [r3, #0]
   d5f2e:	695b      	ldr	r3, [r3, #20]
   d5f30:	9301      	str	r3, [sp, #4]
   d5f32:	bd08      	pop	{r3, pc}
   d5f34:	00030230 	.word	0x00030230

000d5f38 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5f38:	b508      	push	{r3, lr}
   d5f3a:	4b02      	ldr	r3, [pc, #8]	; (d5f44 <hal_spi_init+0xc>)
   d5f3c:	681b      	ldr	r3, [r3, #0]
   d5f3e:	69db      	ldr	r3, [r3, #28]
   d5f40:	9301      	str	r3, [sp, #4]
   d5f42:	bd08      	pop	{r3, pc}
   d5f44:	00030230 	.word	0x00030230

000d5f48 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5f48:	b508      	push	{r3, lr}
   d5f4a:	4b02      	ldr	r3, [pc, #8]	; (d5f54 <hal_spi_is_enabled+0xc>)
   d5f4c:	681b      	ldr	r3, [r3, #0]
   d5f4e:	6a1b      	ldr	r3, [r3, #32]
   d5f50:	9301      	str	r3, [sp, #4]
   d5f52:	bd08      	pop	{r3, pc}
   d5f54:	00030230 	.word	0x00030230

000d5f58 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5f58:	b508      	push	{r3, lr}
   d5f5a:	4b02      	ldr	r3, [pc, #8]	; (d5f64 <hal_spi_info+0xc>)
   d5f5c:	681b      	ldr	r3, [r3, #0]
   d5f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5f60:	9301      	str	r3, [sp, #4]
   d5f62:	bd08      	pop	{r3, pc}
   d5f64:	00030230 	.word	0x00030230

000d5f68 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5f68:	b508      	push	{r3, lr}
   d5f6a:	4b02      	ldr	r3, [pc, #8]	; (d5f74 <hal_spi_acquire+0xc>)
   d5f6c:	681b      	ldr	r3, [r3, #0]
   d5f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5f70:	9301      	str	r3, [sp, #4]
   d5f72:	bd08      	pop	{r3, pc}
   d5f74:	00030230 	.word	0x00030230

000d5f78 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5f78:	b508      	push	{r3, lr}
   d5f7a:	4b02      	ldr	r3, [pc, #8]	; (d5f84 <hal_spi_release+0xc>)
   d5f7c:	681b      	ldr	r3, [r3, #0]
   d5f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5f80:	9301      	str	r3, [sp, #4]
   d5f82:	bd08      	pop	{r3, pc}
   d5f84:	00030230 	.word	0x00030230

000d5f88 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5f88:	b508      	push	{r3, lr}
   d5f8a:	4b02      	ldr	r3, [pc, #8]	; (d5f94 <hal_usart_init+0xc>)
   d5f8c:	681b      	ldr	r3, [r3, #0]
   d5f8e:	681b      	ldr	r3, [r3, #0]
   d5f90:	9301      	str	r3, [sp, #4]
   d5f92:	bd08      	pop	{r3, pc}
   d5f94:	0003023c 	.word	0x0003023c

000d5f98 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5f98:	b508      	push	{r3, lr}
   d5f9a:	4b02      	ldr	r3, [pc, #8]	; (d5fa4 <hal_usart_write+0xc>)
   d5f9c:	681b      	ldr	r3, [r3, #0]
   d5f9e:	68db      	ldr	r3, [r3, #12]
   d5fa0:	9301      	str	r3, [sp, #4]
   d5fa2:	bd08      	pop	{r3, pc}
   d5fa4:	0003023c 	.word	0x0003023c

000d5fa8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5fa8:	b508      	push	{r3, lr}
   d5faa:	4b02      	ldr	r3, [pc, #8]	; (d5fb4 <hal_usart_available+0xc>)
   d5fac:	681b      	ldr	r3, [r3, #0]
   d5fae:	691b      	ldr	r3, [r3, #16]
   d5fb0:	9301      	str	r3, [sp, #4]
   d5fb2:	bd08      	pop	{r3, pc}
   d5fb4:	0003023c 	.word	0x0003023c

000d5fb8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5fb8:	b508      	push	{r3, lr}
   d5fba:	4b02      	ldr	r3, [pc, #8]	; (d5fc4 <hal_usart_read+0xc>)
   d5fbc:	681b      	ldr	r3, [r3, #0]
   d5fbe:	695b      	ldr	r3, [r3, #20]
   d5fc0:	9301      	str	r3, [sp, #4]
   d5fc2:	bd08      	pop	{r3, pc}
   d5fc4:	0003023c 	.word	0x0003023c

000d5fc8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5fc8:	b508      	push	{r3, lr}
   d5fca:	4b02      	ldr	r3, [pc, #8]	; (d5fd4 <hal_usart_peek+0xc>)
   d5fcc:	681b      	ldr	r3, [r3, #0]
   d5fce:	699b      	ldr	r3, [r3, #24]
   d5fd0:	9301      	str	r3, [sp, #4]
   d5fd2:	bd08      	pop	{r3, pc}
   d5fd4:	0003023c 	.word	0x0003023c

000d5fd8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5fd8:	b508      	push	{r3, lr}
   d5fda:	4b02      	ldr	r3, [pc, #8]	; (d5fe4 <hal_usart_flush+0xc>)
   d5fdc:	681b      	ldr	r3, [r3, #0]
   d5fde:	69db      	ldr	r3, [r3, #28]
   d5fe0:	9301      	str	r3, [sp, #4]
   d5fe2:	bd08      	pop	{r3, pc}
   d5fe4:	0003023c 	.word	0x0003023c

000d5fe8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5fe8:	b508      	push	{r3, lr}
   d5fea:	4b02      	ldr	r3, [pc, #8]	; (d5ff4 <hal_usart_is_enabled+0xc>)
   d5fec:	681b      	ldr	r3, [r3, #0]
   d5fee:	6a1b      	ldr	r3, [r3, #32]
   d5ff0:	9301      	str	r3, [sp, #4]
   d5ff2:	bd08      	pop	{r3, pc}
   d5ff4:	0003023c 	.word	0x0003023c

000d5ff8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5ff8:	b508      	push	{r3, lr}
   d5ffa:	4b02      	ldr	r3, [pc, #8]	; (d6004 <hal_usart_available_data_for_write+0xc>)
   d5ffc:	681b      	ldr	r3, [r3, #0]
   d5ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6000:	9301      	str	r3, [sp, #4]
   d6002:	bd08      	pop	{r3, pc}
   d6004:	0003023c 	.word	0x0003023c

000d6008 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d6008:	b508      	push	{r3, lr}
   d600a:	4b02      	ldr	r3, [pc, #8]	; (d6014 <hal_usart_begin_config+0xc>)
   d600c:	681b      	ldr	r3, [r3, #0]
   d600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6010:	9301      	str	r3, [sp, #4]
   d6012:	bd08      	pop	{r3, pc}
   d6014:	0003023c 	.word	0x0003023c

000d6018 <hal_usart_write_nine_bits>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
   d6018:	b508      	push	{r3, lr}
   d601a:	4b02      	ldr	r3, [pc, #8]	; (d6024 <hal_usart_write_nine_bits+0xc>)
   d601c:	681b      	ldr	r3, [r3, #0]
   d601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6020:	9301      	str	r3, [sp, #4]
   d6022:	bd08      	pop	{r3, pc}
   d6024:	0003023c 	.word	0x0003023c

000d6028 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6028:	b508      	push	{r3, lr}
   d602a:	4b02      	ldr	r3, [pc, #8]	; (d6034 <HAL_USB_USART_Init+0xc>)
   d602c:	681b      	ldr	r3, [r3, #0]
   d602e:	681b      	ldr	r3, [r3, #0]
   d6030:	9301      	str	r3, [sp, #4]
   d6032:	bd08      	pop	{r3, pc}
   d6034:	0003024c 	.word	0x0003024c

000d6038 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6038:	b508      	push	{r3, lr}
   d603a:	4b02      	ldr	r3, [pc, #8]	; (d6044 <HAL_USB_USART_Begin+0xc>)
   d603c:	681b      	ldr	r3, [r3, #0]
   d603e:	685b      	ldr	r3, [r3, #4]
   d6040:	9301      	str	r3, [sp, #4]
   d6042:	bd08      	pop	{r3, pc}
   d6044:	0003024c 	.word	0x0003024c

000d6048 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6048:	b508      	push	{r3, lr}
   d604a:	4b02      	ldr	r3, [pc, #8]	; (d6054 <HAL_USB_USART_Available_Data+0xc>)
   d604c:	681b      	ldr	r3, [r3, #0]
   d604e:	691b      	ldr	r3, [r3, #16]
   d6050:	9301      	str	r3, [sp, #4]
   d6052:	bd08      	pop	{r3, pc}
   d6054:	0003024c 	.word	0x0003024c

000d6058 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6058:	b508      	push	{r3, lr}
   d605a:	4b02      	ldr	r3, [pc, #8]	; (d6064 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d605c:	681b      	ldr	r3, [r3, #0]
   d605e:	695b      	ldr	r3, [r3, #20]
   d6060:	9301      	str	r3, [sp, #4]
   d6062:	bd08      	pop	{r3, pc}
   d6064:	0003024c 	.word	0x0003024c

000d6068 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6068:	b508      	push	{r3, lr}
   d606a:	4b02      	ldr	r3, [pc, #8]	; (d6074 <HAL_USB_USART_Receive_Data+0xc>)
   d606c:	681b      	ldr	r3, [r3, #0]
   d606e:	699b      	ldr	r3, [r3, #24]
   d6070:	9301      	str	r3, [sp, #4]
   d6072:	bd08      	pop	{r3, pc}
   d6074:	0003024c 	.word	0x0003024c

000d6078 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6078:	b508      	push	{r3, lr}
   d607a:	4b02      	ldr	r3, [pc, #8]	; (d6084 <HAL_USB_USART_Send_Data+0xc>)
   d607c:	681b      	ldr	r3, [r3, #0]
   d607e:	69db      	ldr	r3, [r3, #28]
   d6080:	9301      	str	r3, [sp, #4]
   d6082:	bd08      	pop	{r3, pc}
   d6084:	0003024c 	.word	0x0003024c

000d6088 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6088:	b508      	push	{r3, lr}
   d608a:	4b02      	ldr	r3, [pc, #8]	; (d6094 <HAL_USB_USART_Flush_Data+0xc>)
   d608c:	681b      	ldr	r3, [r3, #0]
   d608e:	6a1b      	ldr	r3, [r3, #32]
   d6090:	9301      	str	r3, [sp, #4]
   d6092:	bd08      	pop	{r3, pc}
   d6094:	0003024c 	.word	0x0003024c

000d6098 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6098:	b508      	push	{r3, lr}
   d609a:	4b02      	ldr	r3, [pc, #8]	; (d60a4 <panic_+0xc>)
   d609c:	681b      	ldr	r3, [r3, #0]
   d609e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d60a0:	9301      	str	r3, [sp, #4]
   d60a2:	bd08      	pop	{r3, pc}
   d60a4:	00030260 	.word	0x00030260

000d60a8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d60a8:	b508      	push	{r3, lr}
   d60aa:	4b02      	ldr	r3, [pc, #8]	; (d60b4 <log_message+0xc>)
   d60ac:	681b      	ldr	r3, [r3, #0]
   d60ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d60b0:	9301      	str	r3, [sp, #4]
   d60b2:	bd08      	pop	{r3, pc}
   d60b4:	00030260 	.word	0x00030260

000d60b8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d60b8:	b508      	push	{r3, lr}
   d60ba:	4b02      	ldr	r3, [pc, #8]	; (d60c4 <set_system_mode+0xc>)
   d60bc:	681b      	ldr	r3, [r3, #0]
   d60be:	685b      	ldr	r3, [r3, #4]
   d60c0:	9301      	str	r3, [sp, #4]
   d60c2:	bd08      	pop	{r3, pc}
   d60c4:	00030220 	.word	0x00030220

000d60c8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d60c8:	b508      	push	{r3, lr}
   d60ca:	4b02      	ldr	r3, [pc, #8]	; (d60d4 <system_delay_ms+0xc>)
   d60cc:	681b      	ldr	r3, [r3, #0]
   d60ce:	695b      	ldr	r3, [r3, #20]
   d60d0:	9301      	str	r3, [sp, #4]
   d60d2:	bd08      	pop	{r3, pc}
   d60d4:	00030220 	.word	0x00030220

000d60d8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d60d8:	b508      	push	{r3, lr}
   d60da:	4b02      	ldr	r3, [pc, #8]	; (d60e4 <system_thread_set_state+0xc>)
   d60dc:	681b      	ldr	r3, [r3, #0]
   d60de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d60e0:	9301      	str	r3, [sp, #4]
   d60e2:	bd08      	pop	{r3, pc}
   d60e4:	00030220 	.word	0x00030220

000d60e8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d60e8:	b508      	push	{r3, lr}
   d60ea:	4b03      	ldr	r3, [pc, #12]	; (d60f8 <system_ctrl_set_app_request_handler+0x10>)
   d60ec:	681b      	ldr	r3, [r3, #0]
   d60ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d60f2:	9301      	str	r3, [sp, #4]
   d60f4:	bd08      	pop	{r3, pc}
   d60f6:	0000      	.short	0x0000
   d60f8:	00030220 	.word	0x00030220

000d60fc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d60fc:	b508      	push	{r3, lr}
   d60fe:	4b03      	ldr	r3, [pc, #12]	; (d610c <system_ctrl_set_result+0x10>)
   d6100:	681b      	ldr	r3, [r3, #0]
   d6102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6106:	9301      	str	r3, [sp, #4]
   d6108:	bd08      	pop	{r3, pc}
   d610a:	0000      	.short	0x0000
   d610c:	00030220 	.word	0x00030220

000d6110 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6110:	b508      	push	{r3, lr}
   d6112:	4b02      	ldr	r3, [pc, #8]	; (d611c <spark_process+0xc>)
   d6114:	681b      	ldr	r3, [r3, #0]
   d6116:	689b      	ldr	r3, [r3, #8]
   d6118:	9301      	str	r3, [sp, #4]
   d611a:	bd08      	pop	{r3, pc}
   d611c:	00030244 	.word	0x00030244

000d6120 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6120:	b508      	push	{r3, lr}
   d6122:	4b02      	ldr	r3, [pc, #8]	; (d612c <spark_cloud_flag_connected+0xc>)
   d6124:	681b      	ldr	r3, [r3, #0]
   d6126:	695b      	ldr	r3, [r3, #20]
   d6128:	9301      	str	r3, [sp, #4]
   d612a:	bd08      	pop	{r3, pc}
   d612c:	00030244 	.word	0x00030244

000d6130 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6130:	b508      	push	{r3, lr}
   d6132:	4b02      	ldr	r3, [pc, #8]	; (d613c <spark_set_random_seed_from_cloud_handler+0xc>)
   d6134:	681b      	ldr	r3, [r3, #0]
   d6136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6138:	9301      	str	r3, [sp, #4]
   d613a:	bd08      	pop	{r3, pc}
   d613c:	00030244 	.word	0x00030244

000d6140 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6140:	b508      	push	{r3, lr}
   d6142:	4b02      	ldr	r3, [pc, #8]	; (d614c <network_connect+0xc>)
   d6144:	681b      	ldr	r3, [r3, #0]
   d6146:	685b      	ldr	r3, [r3, #4]
   d6148:	9301      	str	r3, [sp, #4]
   d614a:	bd08      	pop	{r3, pc}
   d614c:	00030240 	.word	0x00030240

000d6150 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6150:	b508      	push	{r3, lr}
   d6152:	4b02      	ldr	r3, [pc, #8]	; (d615c <network_connecting+0xc>)
   d6154:	681b      	ldr	r3, [r3, #0]
   d6156:	689b      	ldr	r3, [r3, #8]
   d6158:	9301      	str	r3, [sp, #4]
   d615a:	bd08      	pop	{r3, pc}
   d615c:	00030240 	.word	0x00030240

000d6160 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6160:	b508      	push	{r3, lr}
   d6162:	4b02      	ldr	r3, [pc, #8]	; (d616c <network_disconnect+0xc>)
   d6164:	681b      	ldr	r3, [r3, #0]
   d6166:	68db      	ldr	r3, [r3, #12]
   d6168:	9301      	str	r3, [sp, #4]
   d616a:	bd08      	pop	{r3, pc}
   d616c:	00030240 	.word	0x00030240

000d6170 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6170:	b508      	push	{r3, lr}
   d6172:	4b02      	ldr	r3, [pc, #8]	; (d617c <network_ready+0xc>)
   d6174:	681b      	ldr	r3, [r3, #0]
   d6176:	691b      	ldr	r3, [r3, #16]
   d6178:	9301      	str	r3, [sp, #4]
   d617a:	bd08      	pop	{r3, pc}
   d617c:	00030240 	.word	0x00030240

000d6180 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6180:	b508      	push	{r3, lr}
   d6182:	4b02      	ldr	r3, [pc, #8]	; (d618c <network_on+0xc>)
   d6184:	681b      	ldr	r3, [r3, #0]
   d6186:	695b      	ldr	r3, [r3, #20]
   d6188:	9301      	str	r3, [sp, #4]
   d618a:	bd08      	pop	{r3, pc}
   d618c:	00030240 	.word	0x00030240

000d6190 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6190:	b508      	push	{r3, lr}
   d6192:	4b02      	ldr	r3, [pc, #8]	; (d619c <network_off+0xc>)
   d6194:	681b      	ldr	r3, [r3, #0]
   d6196:	699b      	ldr	r3, [r3, #24]
   d6198:	9301      	str	r3, [sp, #4]
   d619a:	bd08      	pop	{r3, pc}
   d619c:	00030240 	.word	0x00030240

000d61a0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d61a0:	b508      	push	{r3, lr}
   d61a2:	4b02      	ldr	r3, [pc, #8]	; (d61ac <network_listen+0xc>)
   d61a4:	681b      	ldr	r3, [r3, #0]
   d61a6:	69db      	ldr	r3, [r3, #28]
   d61a8:	9301      	str	r3, [sp, #4]
   d61aa:	bd08      	pop	{r3, pc}
   d61ac:	00030240 	.word	0x00030240

000d61b0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d61b0:	b508      	push	{r3, lr}
   d61b2:	4b02      	ldr	r3, [pc, #8]	; (d61bc <network_listening+0xc>)
   d61b4:	681b      	ldr	r3, [r3, #0]
   d61b6:	6a1b      	ldr	r3, [r3, #32]
   d61b8:	9301      	str	r3, [sp, #4]
   d61ba:	bd08      	pop	{r3, pc}
   d61bc:	00030240 	.word	0x00030240

000d61c0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d61c0:	b508      	push	{r3, lr}
   d61c2:	4b02      	ldr	r3, [pc, #8]	; (d61cc <network_set_listen_timeout+0xc>)
   d61c4:	681b      	ldr	r3, [r3, #0]
   d61c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61c8:	9301      	str	r3, [sp, #4]
   d61ca:	bd08      	pop	{r3, pc}
   d61cc:	00030240 	.word	0x00030240

000d61d0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d61d0:	b508      	push	{r3, lr}
   d61d2:	4b02      	ldr	r3, [pc, #8]	; (d61dc <network_get_listen_timeout+0xc>)
   d61d4:	681b      	ldr	r3, [r3, #0]
   d61d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d61d8:	9301      	str	r3, [sp, #4]
   d61da:	bd08      	pop	{r3, pc}
   d61dc:	00030240 	.word	0x00030240

000d61e0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d61e0:	b508      	push	{r3, lr}
   d61e2:	4b02      	ldr	r3, [pc, #8]	; (d61ec <malloc+0xc>)
   d61e4:	681b      	ldr	r3, [r3, #0]
   d61e6:	681b      	ldr	r3, [r3, #0]
   d61e8:	9301      	str	r3, [sp, #4]
   d61ea:	bd08      	pop	{r3, pc}
   d61ec:	0003021c 	.word	0x0003021c

000d61f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d61f0:	b508      	push	{r3, lr}
   d61f2:	4b02      	ldr	r3, [pc, #8]	; (d61fc <free+0xc>)
   d61f4:	681b      	ldr	r3, [r3, #0]
   d61f6:	685b      	ldr	r3, [r3, #4]
   d61f8:	9301      	str	r3, [sp, #4]
   d61fa:	bd08      	pop	{r3, pc}
   d61fc:	0003021c 	.word	0x0003021c

000d6200 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6200:	b508      	push	{r3, lr}
   d6202:	4b02      	ldr	r3, [pc, #8]	; (d620c <realloc+0xc>)
   d6204:	681b      	ldr	r3, [r3, #0]
   d6206:	689b      	ldr	r3, [r3, #8]
   d6208:	9301      	str	r3, [sp, #4]
   d620a:	bd08      	pop	{r3, pc}
   d620c:	0003021c 	.word	0x0003021c

000d6210 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6210:	b508      	push	{r3, lr}
   d6212:	4b02      	ldr	r3, [pc, #8]	; (d621c <sprintf+0xc>)
   d6214:	681b      	ldr	r3, [r3, #0]
   d6216:	68db      	ldr	r3, [r3, #12]
   d6218:	9301      	str	r3, [sp, #4]
   d621a:	bd08      	pop	{r3, pc}
   d621c:	0003021c 	.word	0x0003021c

000d6220 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6220:	b508      	push	{r3, lr}
   d6222:	4b02      	ldr	r3, [pc, #8]	; (d622c <newlib_impure_ptr_callback+0xc>)
   d6224:	681b      	ldr	r3, [r3, #0]
   d6226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6228:	9301      	str	r3, [sp, #4]
   d622a:	bd08      	pop	{r3, pc}
   d622c:	0003021c 	.word	0x0003021c

000d6230 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6230:	2100      	movs	r1, #0
   d6232:	f7ff bf49 	b.w	d60c8 <system_delay_ms>

000d6236 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6236:	4770      	bx	lr

000d6238 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d6238:	4770      	bx	lr

000d623a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d623a:	4770      	bx	lr

000d623c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d623c:	4770      	bx	lr
	...

000d6240 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6240:	4b06      	ldr	r3, [pc, #24]	; (d625c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6242:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6244:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d6246:	f100 040c 	add.w	r4, r0, #12
	    ||
   d624a:	d005      	beq.n	d6258 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d624c:	4608      	mov	r0, r1
   d624e:	f001 ff37 	bl	d80c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6252:	2800      	cmp	r0, #0
	return nullptr;
   d6254:	bf08      	it	eq
   d6256:	2400      	moveq	r4, #0
      }
   d6258:	4620      	mov	r0, r4
   d625a:	bd10      	pop	{r4, pc}
   d625c:	000d9d2c 	.word	0x000d9d2c

000d6260 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6260:	4b06      	ldr	r3, [pc, #24]	; (d627c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6262:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6264:	b510      	push	{r4, lr}
   d6266:	f100 040c 	add.w	r4, r0, #12
	    ||
   d626a:	d005      	beq.n	d6278 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d626c:	4608      	mov	r0, r1
   d626e:	f001 ff27 	bl	d80c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6272:	2800      	cmp	r0, #0
	return nullptr;
   d6274:	bf08      	it	eq
   d6276:	2400      	moveq	r4, #0
      }
   d6278:	4620      	mov	r0, r4
   d627a:	bd10      	pop	{r4, pc}
   d627c:	000d9d2c 	.word	0x000d9d2c

000d6280 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6280:	4b06      	ldr	r3, [pc, #24]	; (d629c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6282:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6284:	b510      	push	{r4, lr}
   d6286:	f100 040c 	add.w	r4, r0, #12
	    ||
   d628a:	d005      	beq.n	d6298 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d628c:	4608      	mov	r0, r1
   d628e:	f001 ff17 	bl	d80c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6292:	2800      	cmp	r0, #0
	return nullptr;
   d6294:	bf08      	it	eq
   d6296:	2400      	moveq	r4, #0
      }
   d6298:	4620      	mov	r0, r4
   d629a:	bd10      	pop	{r4, pc}
   d629c:	000d9d2c 	.word	0x000d9d2c

000d62a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d62a0:	3048      	adds	r0, #72	; 0x48
   d62a2:	f001 bbaf 	b.w	d7a04 <_ZN6StringD1Ev>

000d62a6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d62a6:	b510      	push	{r4, lr}
   d62a8:	2160      	movs	r1, #96	; 0x60
   d62aa:	4604      	mov	r4, r0
   d62ac:	f001 ff03 	bl	d80b6 <_ZdlPvj>
   d62b0:	4620      	mov	r0, r4
   d62b2:	bd10      	pop	{r4, pc}

000d62b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d62b4:	b510      	push	{r4, lr}
   d62b6:	2124      	movs	r1, #36	; 0x24
   d62b8:	4604      	mov	r4, r0
   d62ba:	f001 fefc 	bl	d80b6 <_ZdlPvj>
   d62be:	4620      	mov	r0, r4
   d62c0:	bd10      	pop	{r4, pc}

000d62c2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d62c2:	b510      	push	{r4, lr}
   d62c4:	2130      	movs	r1, #48	; 0x30
   d62c6:	4604      	mov	r4, r0
   d62c8:	f001 fef5 	bl	d80b6 <_ZdlPvj>
   d62cc:	4620      	mov	r0, r4
   d62ce:	bd10      	pop	{r4, pc}

000d62d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d62d0:	f7fd bee5 	b.w	d409e <_ZdlPv>

000d62d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d62d4:	f7fd bee3 	b.w	d409e <_ZdlPv>

000d62d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d62d8:	f7fd bee1 	b.w	d409e <_ZdlPv>

000d62dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d62dc:	b510      	push	{r4, lr}
          _M_dispose();
   d62de:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d62e0:	4604      	mov	r4, r0
          _M_dispose();
   d62e2:	689b      	ldr	r3, [r3, #8]
   d62e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d62e6:	68a3      	ldr	r3, [r4, #8]
   d62e8:	3b01      	subs	r3, #1
   d62ea:	60a3      	str	r3, [r4, #8]
   d62ec:	b92b      	cbnz	r3, d62fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d62ee:	6823      	ldr	r3, [r4, #0]
   d62f0:	4620      	mov	r0, r4
   d62f2:	68db      	ldr	r3, [r3, #12]
    }
   d62f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d62f8:	4718      	bx	r3
    }
   d62fa:	bd10      	pop	{r4, pc}

000d62fc <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d62fc:	b510      	push	{r4, lr}
   d62fe:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6300:	6800      	ldr	r0, [r0, #0]
   d6302:	b108      	cbz	r0, d6308 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6304:	f7ff fd10 	bl	d5d28 <os_mutex_recursive_destroy>
    }
   d6308:	4620      	mov	r0, r4
   d630a:	bd10      	pop	{r4, pc}

000d630c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d630c:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d630e:	2500      	movs	r5, #0
   d6310:	1cec      	adds	r4, r5, #3
   d6312:	428c      	cmp	r4, r1
   d6314:	d80d      	bhi.n	d6332 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        if (buf[i + 1] == adsType) {
   d6316:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d6318:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d631a:	5d87      	ldrb	r7, [r0, r6]
   d631c:	4297      	cmp	r7, r2
   d631e:	d105      	bne.n	d632c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            if ((i + adsLen + 1) <= len) {
   d6320:	4426      	add	r6, r4
   d6322:	42b1      	cmp	r1, r6
   d6324:	d305      	bcc.n	d6332 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d6326:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d6328:	1c60      	adds	r0, r4, #1
}
   d632a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d632c:	3401      	adds	r4, #1
   d632e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6330:	e7ee      	b.n	d6310 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d6332:	2000      	movs	r0, #0
   d6334:	e7f9      	b.n	d632a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000d6338 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d6338:	4a02      	ldr	r2, [pc, #8]	; (d6344 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d633a:	2100      	movs	r1, #0
   d633c:	200a      	movs	r0, #10
   d633e:	f7ff beab 	b.w	d6098 <panic_>
   d6342:	bf00      	nop
   d6344:	000d5d69 	.word	0x000d5d69

000d6348 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d6348:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d634c:	b2da      	uxtb	r2, r3
   d634e:	2a09      	cmp	r2, #9
   d6350:	d801      	bhi.n	d6356 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d6352:	4618      	mov	r0, r3
   d6354:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d6356:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d635a:	2b05      	cmp	r3, #5
   d635c:	d801      	bhi.n	d6362 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d635e:	3857      	subs	r0, #87	; 0x57
   d6360:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d6362:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d6366:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d6368:	bf94      	ite	ls
   d636a:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d636c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d6370:	4770      	bx	lr
	...

000d6374 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d6374:	b510      	push	{r4, lr}
            locked_(false) {
   d6376:	2300      	movs	r3, #0
   d6378:	7003      	strb	r3, [r0, #0]
        mutex_.lock();
   d637a:	4b04      	ldr	r3, [pc, #16]	; (d638c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   d637c:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d637e:	6818      	ldr	r0, [r3, #0]
   d6380:	f7ff fcda 	bl	d5d38 <os_mutex_recursive_lock>
        locked_ = true;
   d6384:	2301      	movs	r3, #1
   d6386:	7023      	strb	r3, [r4, #0]
    }
   d6388:	4620      	mov	r0, r4
   d638a:	bd10      	pop	{r4, pc}
   d638c:	2003e74c 	.word	0x2003e74c

000d6390 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d6390:	b510      	push	{r4, lr}
        if (locked_) {
   d6392:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d6394:	4604      	mov	r4, r0
        if (locked_) {
   d6396:	b11b      	cbz	r3, d63a0 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
        mutex_.unlock();
   d6398:	4b02      	ldr	r3, [pc, #8]	; (d63a4 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d639a:	6818      	ldr	r0, [r3, #0]
   d639c:	f7ff fcd4 	bl	d5d48 <os_mutex_recursive_unlock>
    }
   d63a0:	4620      	mov	r0, r4
   d63a2:	bd10      	pop	{r4, pc}
   d63a4:	2003e74c 	.word	0x2003e74c

000d63a8 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d63a8:	2200      	movs	r2, #0
   d63aa:	6042      	str	r2, [r0, #4]
   d63ac:	6002      	str	r2, [r0, #0]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d63ae:	7182      	strb	r2, [r0, #6]
}
   d63b0:	4770      	bx	lr

000d63b2 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d63b2:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d63b4:	7982      	ldrb	r2, [r0, #6]
   d63b6:	798b      	ldrb	r3, [r1, #6]
   d63b8:	429a      	cmp	r2, r3
   d63ba:	d106      	bne.n	d63ca <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d63bc:	2206      	movs	r2, #6
   d63be:	f003 f8e9 	bl	d9594 <memcmp>
   d63c2:	fab0 f080 	clz	r0, r0
   d63c6:	0940      	lsrs	r0, r0, #5
}
   d63c8:	bd08      	pop	{r3, pc}
    return false;
   d63ca:	2000      	movs	r0, #0
   d63cc:	e7fc      	b.n	d63c8 <_ZNK8particle10BleAddresseqERKS0_+0x16>
	...

000d63d0 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d63d0:	2201      	movs	r2, #1
   d63d2:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d63d4:	4a06      	ldr	r2, [pc, #24]	; (d63f0 <_ZN8particle7BleUuidC1Ev+0x20>)
   d63d6:	6811      	ldr	r1, [r2, #0]
   d63d8:	6001      	str	r1, [r0, #0]
   d63da:	6851      	ldr	r1, [r2, #4]
   d63dc:	6041      	str	r1, [r0, #4]
   d63de:	8911      	ldrh	r1, [r2, #8]
   d63e0:	7a92      	ldrb	r2, [r2, #10]
   d63e2:	7282      	strb	r2, [r0, #10]
   d63e4:	2200      	movs	r2, #0
   d63e6:	8101      	strh	r1, [r0, #8]
   d63e8:	f8c0 200b 	str.w	r2, [r0, #11]
   d63ec:	73c2      	strb	r2, [r0, #15]
}
   d63ee:	4770      	bx	lr
   d63f0:	000d9d34 	.word	0x000d9d34

000d63f4 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d63f4:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d63f6:	690b      	ldr	r3, [r1, #16]
   d63f8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d63fa:	f101 0210 	add.w	r2, r1, #16
   d63fe:	4603      	mov	r3, r0
   d6400:	f851 4b04 	ldr.w	r4, [r1], #4
   d6404:	f843 4b04 	str.w	r4, [r3], #4
   d6408:	4291      	cmp	r1, r2
   d640a:	d1f9      	bne.n	d6400 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d640c:	bd10      	pop	{r4, pc}

000d640e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d640e:	b510      	push	{r4, lr}
    if (uuid128) {
   d6410:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6412:	4604      	mov	r4, r0
    if (uuid128) {
   d6414:	b1b1      	cbz	r1, d6444 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d6416:	2a01      	cmp	r2, #1
   d6418:	f101 0210 	add.w	r2, r1, #16
   d641c:	d10a      	bne.n	d6434 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d641e:	4601      	mov	r1, r0
   d6420:	f853 0b04 	ldr.w	r0, [r3], #4
   d6424:	f841 0b04 	str.w	r0, [r1], #4
   d6428:	4293      	cmp	r3, r2
   d642a:	d1f9      	bne.n	d6420 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d642c:	2301      	movs	r3, #1
   d642e:	6123      	str	r3, [r4, #16]
}
   d6430:	4620      	mov	r0, r4
   d6432:	bd10      	pop	{r4, pc}
   d6434:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d6436:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d643a:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d643e:	429a      	cmp	r2, r3
   d6440:	d1f9      	bne.n	d6436 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d6442:	e7f3      	b.n	d642c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d6444:	2210      	movs	r2, #16
   d6446:	f003 f8db 	bl	d9600 <memset>
   d644a:	e7f1      	b.n	d6430 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d644c <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d644c:	b538      	push	{r3, r4, r5, lr}
   d644e:	4604      	mov	r4, r0
   d6450:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d6452:	461a      	mov	r2, r3
   d6454:	f7ff ffdb 	bl	d640e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d6458:	81a5      	strh	r5, [r4, #12]
}
   d645a:	4620      	mov	r0, r4
   d645c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6460 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d6460:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d6462:	6902      	ldr	r2, [r0, #16]
   d6464:	b922      	cbnz	r2, d6470 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d6466:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6468:	3800      	subs	r0, #0
   d646a:	bf18      	it	ne
   d646c:	2001      	movne	r0, #1
}
   d646e:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6470:	4902      	ldr	r1, [pc, #8]	; (d647c <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d6472:	2210      	movs	r2, #16
   d6474:	f003 f88e 	bl	d9594 <memcmp>
   d6478:	e7f6      	b.n	d6468 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d647a:	bf00      	nop
   d647c:	000d9d54 	.word	0x000d9d54

000d6480 <_ZNK8particle7BleUuid4typeEv>:
}
   d6480:	6900      	ldr	r0, [r0, #16]
   d6482:	4770      	bx	lr

000d6484 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d6484:	b538      	push	{r3, r4, r5, lr}
   d6486:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d6488:	2214      	movs	r2, #20
   d648a:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d648c:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d648e:	f003 f8b7 	bl	d9600 <memset>
    if (type_ == BleUuidType::SHORT) {
   d6492:	6923      	ldr	r3, [r4, #16]
   d6494:	b93b      	cbnz	r3, d64a6 <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d6496:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d6498:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d649a:	7b23      	ldrb	r3, [r4, #12]
   d649c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d64a0:	802b      	strh	r3, [r5, #0]
}
   d64a2:	4628      	mov	r0, r5
   d64a4:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d64a6:	2301      	movs	r3, #1
   d64a8:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d64aa:	f104 0210 	add.w	r2, r4, #16
   d64ae:	462b      	mov	r3, r5
   d64b0:	f854 1b04 	ldr.w	r1, [r4], #4
   d64b4:	f843 1b04 	str.w	r1, [r3], #4
   d64b8:	4294      	cmp	r4, r2
   d64ba:	d1f9      	bne.n	d64b0 <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d64bc:	e7f1      	b.n	d64a2 <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d64be <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d64be:	7b42      	ldrb	r2, [r0, #13]
   d64c0:	7b00      	ldrb	r0, [r0, #12]
}
   d64c2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d64c6:	4770      	bx	lr

000d64c8 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d64c8:	4770      	bx	lr

000d64ca <_ZN8particle7BleUuidaSERKS0_>:
BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d64ca:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d64cc:	690b      	ldr	r3, [r1, #16]
   d64ce:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d64d0:	f101 0210 	add.w	r2, r1, #16
   d64d4:	4603      	mov	r3, r0
   d64d6:	f851 4b04 	ldr.w	r4, [r1], #4
   d64da:	f843 4b04 	str.w	r4, [r3], #4
   d64de:	4291      	cmp	r1, r2
   d64e0:	d1f9      	bne.n	d64d6 <_ZN8particle7BleUuidaSERKS0_+0xc>
}
   d64e2:	bd10      	pop	{r4, pc}

000d64e4 <_ZN8particle7BleUuidaSEPKh>:
BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d64e4:	b510      	push	{r4, lr}
   d64e6:	b086      	sub	sp, #24
   d64e8:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d64ea:	2201      	movs	r2, #1
   d64ec:	a801      	add	r0, sp, #4
   d64ee:	f7ff ff8e 	bl	d640e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d64f2:	a901      	add	r1, sp, #4
   d64f4:	4620      	mov	r0, r4
   d64f6:	f7ff ffe8 	bl	d64ca <_ZN8particle7BleUuidaSERKS0_>
}
   d64fa:	b006      	add	sp, #24
   d64fc:	bd10      	pop	{r4, pc}

000d64fe <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d64fe:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6500:	6902      	ldr	r2, [r0, #16]
   d6502:	690b      	ldr	r3, [r1, #16]
   d6504:	429a      	cmp	r2, r3
   d6506:	d106      	bne.n	d6516 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d6508:	2210      	movs	r2, #16
   d650a:	f003 f843 	bl	d9594 <memcmp>
   d650e:	fab0 f080 	clz	r0, r0
   d6512:	0940      	lsrs	r0, r0, #5
}
   d6514:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6516:	2000      	movs	r0, #0
   d6518:	e7fc      	b.n	d6514 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d651c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d651c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d651e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d6522:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6524:	4b32      	ldr	r3, [pc, #200]	; (d65f0 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d6526:	681a      	ldr	r2, [r3, #0]
   d6528:	6002      	str	r2, [r0, #0]
   d652a:	685a      	ldr	r2, [r3, #4]
   d652c:	6042      	str	r2, [r0, #4]
   d652e:	2500      	movs	r5, #0
   d6530:	891a      	ldrh	r2, [r3, #8]
   d6532:	7a9b      	ldrb	r3, [r3, #10]
   d6534:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d6536:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6538:	7283      	strb	r3, [r0, #10]
   d653a:	f8c0 500b 	str.w	r5, [r0, #11]
   d653e:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d6540:	460e      	mov	r6, r1
   d6542:	b321      	cbz	r1, d658e <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d6544:	2124      	movs	r1, #36	; 0x24
   d6546:	4630      	mov	r0, r6
   d6548:	f003 f8a0 	bl	d968c <strnlen>
   d654c:	2804      	cmp	r0, #4
   d654e:	d121      	bne.n	d6594 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d6550:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6554:	af01      	add	r7, sp, #4
   d6556:	1cb5      	adds	r5, r6, #2
   d6558:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d655a:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d655e:	f7ff fef3 	bl	d6348 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d6562:	f1b0 0800 	subs.w	r8, r0, #0
   d6566:	db10      	blt.n	d658a <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d6568:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d656c:	f7ff feec 	bl	d6348 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d6570:	2800      	cmp	r0, #0
   d6572:	db0a      	blt.n	d658a <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6574:	3502      	adds	r5, #2
   d6576:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d657a:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d657c:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d6580:	d1eb      	bne.n	d655a <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d6582:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d6586:	ba5b      	rev16	r3, r3
   d6588:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d658a:	2300      	movs	r3, #0
   d658c:	6123      	str	r3, [r4, #16]
}
   d658e:	b002      	add	sp, #8
   d6590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d6594:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6596:	2124      	movs	r1, #36	; 0x24
   d6598:	4630      	mov	r0, r6
   d659a:	f003 f877 	bl	d968c <strnlen>
   d659e:	42a8      	cmp	r0, r5
   d65a0:	d806      	bhi.n	d65b0 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d65a2:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d65a4:	2300      	movs	r3, #0
    while (len > 0) {
   d65a6:	42bc      	cmp	r4, r7
   d65a8:	d0f1      	beq.n	d658e <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d65aa:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d65ae:	e7fa      	b.n	d65a6 <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d65b0:	2f00      	cmp	r7, #0
   d65b2:	d0ec      	beq.n	d658e <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d65b4:	5d70      	ldrb	r0, [r6, r5]
   d65b6:	f7ff fec7 	bl	d6348 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d65ba:	0603      	lsls	r3, r0, #24
   d65bc:	d415      	bmi.n	d65ea <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d65be:	0100      	lsls	r0, r0, #4
   d65c0:	3f01      	subs	r7, #1
   d65c2:	fa5f f880 	uxtb.w	r8, r0
   d65c6:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d65ca:	2124      	movs	r1, #36	; 0x24
   d65cc:	4630      	mov	r0, r6
   d65ce:	f003 f85d 	bl	d968c <strnlen>
   d65d2:	3501      	adds	r5, #1
   d65d4:	42a8      	cmp	r0, r5
   d65d6:	d908      	bls.n	d65ea <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d65d8:	5d70      	ldrb	r0, [r6, r5]
   d65da:	f7ff feb5 	bl	d6348 <_ZN8particle11hexToNibbleEc>
   d65de:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d65e0:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d65e2:	bfa4      	itt	ge
   d65e4:	ea40 0008 	orrge.w	r0, r0, r8
   d65e8:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d65ea:	3501      	adds	r5, #1
   d65ec:	e7d3      	b.n	d6596 <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d65ee:	bf00      	nop
   d65f0:	000d9d34 	.word	0x000d9d34

000d65f4 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d65f4:	b513      	push	{r0, r1, r4, lr}
   d65f6:	4604      	mov	r4, r0
   d65f8:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d65fa:	f7ff fee9 	bl	d63d0 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d65fe:	4620      	mov	r0, r4
   d6600:	9901      	ldr	r1, [sp, #4]
   d6602:	f7ff ff8b 	bl	d651c <_ZN8particle7BleUuid9constructEPKc>
}
   d6606:	4620      	mov	r0, r4
   d6608:	b002      	add	sp, #8
   d660a:	bd10      	pop	{r4, pc}

000d660c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d660c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6610:	4689      	mov	r9, r1
   d6612:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d6616:	6a01      	ldr	r1, [r0, #32]
   d6618:	4604      	mov	r4, r0
   d661a:	461e      	mov	r6, r3
    if (buf == nullptr) {
   d661c:	4690      	mov	r8, r2
   d661e:	b332      	cbz	r2, d666e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x62>
    if (offset == nullptr) {
   d6620:	ab01      	add	r3, sp, #4
   d6622:	464a      	mov	r2, r9
   d6624:	f7ff fe72 	bl	d630c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d6628:	6a25      	ldr	r5, [r4, #32]
   d662a:	1cb3      	adds	r3, r6, #2
   d662c:	bb1f      	cbnz	r7, d6676 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x6a>
   d662e:	b310      	cbz	r0, d6676 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x6a>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6630:	18ef      	adds	r7, r5, r3
   d6632:	1a3f      	subs	r7, r7, r0
   d6634:	2f1f      	cmp	r7, #31
   d6636:	d819      	bhi.n	d666c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x60>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6638:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d663c:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6640:	eba5 0209 	sub.w	r2, r5, r9
   d6644:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6646:	eb00 0109 	add.w	r1, r0, r9
   d664a:	eb06 000a 	add.w	r0, r6, sl
   d664e:	b292      	uxth	r2, r2
   d6650:	4421      	add	r1, r4
   d6652:	4420      	add	r0, r4
   d6654:	f002 ffba 	bl	d95cc <memmove>
            selfData_[offset] = len + 1;
   d6658:	1c73      	adds	r3, r6, #1
   d665a:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d665e:	4632      	mov	r2, r6
   d6660:	4641      	mov	r1, r8
   d6662:	eb04 000a 	add.w	r0, r4, sl
   d6666:	f002 ffa3 	bl	d95b0 <memcpy>
            selfLen_ = staLen + len + 2;
   d666a:	6227      	str	r7, [r4, #32]
    return selfLen_;
   d666c:	6a21      	ldr	r1, [r4, #32]
}
   d666e:	4608      	mov	r0, r1
   d6670:	b002      	add	sp, #8
   d6672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6676:	442b      	add	r3, r5
   d6678:	2b1f      	cmp	r3, #31
   d667a:	d8f7      	bhi.n	d666c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x60>
        selfData_[selfLen_++] = len + 1;
   d667c:	1c73      	adds	r3, r6, #1
   d667e:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6680:	1ca8      	adds	r0, r5, #2
   d6682:	4425      	add	r5, r4
   d6684:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d6686:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6688:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d668c:	4641      	mov	r1, r8
   d668e:	4420      	add	r0, r4
   d6690:	f002 ff8e 	bl	d95b0 <memcpy>
        selfLen_ += len;
   d6694:	6a23      	ldr	r3, [r4, #32]
   d6696:	4433      	add	r3, r6
   d6698:	6223      	str	r3, [r4, #32]
   d669a:	e7e7      	b.n	d666c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x60>

000d669c <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d669c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d669e:	4604      	mov	r4, r0
          selfLen_(0) {
   d66a0:	4602      	mov	r2, r0
   d66a2:	f100 011f 	add.w	r1, r0, #31
   d66a6:	2300      	movs	r3, #0
   d66a8:	f802 3b01 	strb.w	r3, [r2], #1
   d66ac:	4291      	cmp	r1, r2
   d66ae:	d1fb      	bne.n	d66a8 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d66b0:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d66b2:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d66b4:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d66b6:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d66b8:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d66bc:	4619      	mov	r1, r3
   d66be:	f10d 020f 	add.w	r2, sp, #15
   d66c2:	4620      	mov	r0, r4
   d66c4:	f7ff ffa2 	bl	d660c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d66c8:	4620      	mov	r0, r4
   d66ca:	b004      	add	sp, #16
   d66cc:	bd10      	pop	{r4, pc}

000d66ce <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   d66ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d66d0:	460a      	mov	r2, r1
   d66d2:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   d66d4:	2114      	movs	r1, #20
   d66d6:	4610      	mov	r0, r2
   d66d8:	9203      	str	r2, [sp, #12]
   d66da:	f002 ffd7 	bl	d968c <strnlen>
   d66de:	2100      	movs	r1, #0
   d66e0:	4603      	mov	r3, r0
   d66e2:	9100      	str	r1, [sp, #0]
   d66e4:	9a03      	ldr	r2, [sp, #12]
   d66e6:	2109      	movs	r1, #9
   d66e8:	4620      	mov	r0, r4
   d66ea:	f7ff ff8f 	bl	d660c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d66ee:	b004      	add	sp, #16
   d66f0:	bd10      	pop	{r4, pc}

000d66f2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d66f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d66f4:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d66f6:	460e      	mov	r6, r1
   d66f8:	ab01      	add	r3, sp, #4
   d66fa:	6a01      	ldr	r1, [r0, #32]
   d66fc:	4604      	mov	r4, r0
   d66fe:	f7ff fe05 	bl	d630c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d6702:	4605      	mov	r5, r0
   d6704:	b178      	cbz	r0, d6726 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d6706:	9801      	ldr	r0, [sp, #4]
   d6708:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d670a:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d670c:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d670e:	4421      	add	r1, r4
   d6710:	1b52      	subs	r2, r2, r5
   d6712:	4420      	add	r0, r4
   d6714:	f002 ff4c 	bl	d95b0 <memcpy>
        selfLen_ -= len;
   d6718:	6a20      	ldr	r0, [r4, #32]
   d671a:	1b40      	subs	r0, r0, r5
   d671c:	6220      	str	r0, [r4, #32]
        remove(type);
   d671e:	4631      	mov	r1, r6
   d6720:	4620      	mov	r0, r4
   d6722:	f7ff ffe6 	bl	d66f2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d6726:	b002      	add	sp, #8
   d6728:	bd70      	pop	{r4, r5, r6, pc}

000d672a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d672a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d672c:	4615      	mov	r5, r2
   d672e:	461f      	mov	r7, r3
   d6730:	460a      	mov	r2, r1
   d6732:	ab01      	add	r3, sp, #4
   d6734:	6a01      	ldr	r1, [r0, #32]
   d6736:	4606      	mov	r6, r0
   d6738:	f7ff fde8 	bl	d630c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   d673c:	f030 0402 	bics.w	r4, r0, #2
   d6740:	d00b      	beq.n	d675a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x30>
            adsLen -= 2;
   d6742:	1e84      	subs	r4, r0, #2
   d6744:	42bc      	cmp	r4, r7
   d6746:	bf28      	it	cs
   d6748:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   d674a:	b135      	cbz	r5, d675a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x30>
                memcpy(buf, &selfData_[offset + 2], len);
   d674c:	9901      	ldr	r1, [sp, #4]
   d674e:	3102      	adds	r1, #2
   d6750:	4622      	mov	r2, r4
   d6752:	4431      	add	r1, r6
   d6754:	4628      	mov	r0, r5
   d6756:	f002 ff2b 	bl	d95b0 <memcpy>
}
   d675a:	4620      	mov	r0, r4
   d675c:	b003      	add	sp, #12
   d675e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6760 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   d6760:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6762:	4613      	mov	r3, r2
   d6764:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d6766:	9201      	str	r2, [sp, #4]
   d6768:	460a      	mov	r2, r1
   d676a:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   d676c:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d676e:	f7ff ffdc 	bl	d672a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   d6772:	b940      	cbnz	r0, d6786 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d6774:	9b01      	ldr	r3, [sp, #4]
   d6776:	4622      	mov	r2, r4
   d6778:	2109      	movs	r1, #9
   d677a:	4628      	mov	r0, r5
}
   d677c:	b003      	add	sp, #12
   d677e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d6782:	f7ff bfd2 	b.w	d672a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   d6786:	b003      	add	sp, #12
   d6788:	bd30      	pop	{r4, r5, pc}
	...

000d678c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d678c:	b538      	push	{r3, r4, r5, lr}
              context_(nullptr) {
   d678e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6792:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d6794:	4604      	mov	r4, r0
              context_(nullptr) {
   d6796:	8043      	strh	r3, [r0, #2]
   d6798:	220e      	movs	r2, #14
   d679a:	4629      	mov	r1, r5
   d679c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d679e:	7105      	strb	r5, [r0, #4]
   d67a0:	3006      	adds	r0, #6
   d67a2:	f002 ff2d 	bl	d9600 <memset>
   d67a6:	f104 0014 	add.w	r0, r4, #20
   d67aa:	f7ff fe11 	bl	d63d0 <_ZN8particle7BleUuidC1Ev>
   d67ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d67b2:	f7ff fe0d 	bl	d63d0 <_ZN8particle7BleUuidC1Ev>
   d67b6:	4904      	ldr	r1, [pc, #16]	; (d67c8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d67b8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d67bc:	f001 f96d 	bl	d7a9a <_ZN6StringC1EPKc>
   d67c0:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
    }
   d67c4:	4620      	mov	r0, r4
   d67c6:	bd38      	pop	{r3, r4, r5, pc}
   d67c8:	000d9c21 	.word	0x000d9c21

000d67cc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d67cc:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d67ce:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d67d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d67d6:	4293      	cmp	r3, r2
   d67d8:	4618      	mov	r0, r3
   d67da:	d006      	beq.n	d67ea <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d67dc:	6804      	ldr	r4, [r0, #0]
   d67de:	8824      	ldrh	r4, [r4, #0]
   d67e0:	428c      	cmp	r4, r1
   d67e2:	f103 0308 	add.w	r3, r3, #8
   d67e6:	d1f6      	bne.n	d67d6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d67e8:	bd10      	pop	{r4, pc}
        return nullptr;
   d67ea:	2000      	movs	r0, #0
   d67ec:	e7fc      	b.n	d67e8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d67f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d67f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d67f2:	4606      	mov	r6, r0
   d67f4:	b085      	sub	sp, #20
   d67f6:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d67f8:	460d      	mov	r5, r1
   d67fa:	2900      	cmp	r1, #0
   d67fc:	d050      	beq.n	d68a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d67fe:	2a00      	cmp	r2, #0
   d6800:	d04e      	beq.n	d68a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    int subscribe(bool enable) const;

    void onDataReceived(BleOnDataReceivedCallback callback, void* context);

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d6802:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d6804:	7823      	ldrb	r3, [r4, #0]
   d6806:	2af4      	cmp	r2, #244	; 0xf4
   d6808:	bf28      	it	cs
   d680a:	22f4      	movcs	r2, #244	; 0xf4
   d680c:	b343      	cbz	r3, d6860 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d680e:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d6810:	0798      	lsls	r0, r3, #30
   d6812:	d509      	bpl.n	d6828 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d6814:	89a0      	ldrh	r0, [r4, #12]
   d6816:	9203      	str	r2, [sp, #12]
   d6818:	2300      	movs	r3, #0
   d681a:	f7ff fa37 	bl	d5c8c <hal_ble_gatt_server_set_characteristic_value>
   d681e:	2800      	cmp	r0, #0
   d6820:	9a03      	ldr	r2, [sp, #12]
   d6822:	da03      	bge.n	d682c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d6824:	b005      	add	sp, #20
   d6826:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d6828:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d682c:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d682e:	7923      	ldrb	r3, [r4, #4]
   d6830:	06d9      	lsls	r1, r3, #27
   d6832:	d509      	bpl.n	d6848 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d6834:	2f01      	cmp	r7, #1
   d6836:	d007      	beq.n	d6848 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6838:	89a0      	ldrh	r0, [r4, #12]
   d683a:	2300      	movs	r3, #0
   d683c:	4629      	mov	r1, r5
}
   d683e:	b005      	add	sp, #20
   d6840:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6844:	f7ff ba54 	b.w	d5cf0 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d6848:	069b      	lsls	r3, r3, #26
   d684a:	d5eb      	bpl.n	d6824 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d684c:	2f02      	cmp	r7, #2
   d684e:	d0e9      	beq.n	d6824 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d6850:	89a0      	ldrh	r0, [r4, #12]
   d6852:	2300      	movs	r3, #0
   d6854:	4629      	mov	r1, r5
}
   d6856:	b005      	add	sp, #20
   d6858:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d685c:	f7ff ba52 	b.w	d5d04 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d6860:	8860      	ldrh	r0, [r4, #2]
   d6862:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6866:	4288      	cmp	r0, r1
   d6868:	d01c      	beq.n	d68a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d686a:	7921      	ldrb	r1, [r4, #4]
   d686c:	074e      	lsls	r6, r1, #29
   d686e:	d501      	bpl.n	d6874 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d6870:	2f01      	cmp	r7, #1
   d6872:	d104      	bne.n	d687e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d6874:	070b      	lsls	r3, r1, #28
   d6876:	d409      	bmi.n	d688c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d6878:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d687c:	e7d2      	b.n	d6824 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d687e:	89a1      	ldrh	r1, [r4, #12]
   d6880:	9300      	str	r3, [sp, #0]
   d6882:	4613      	mov	r3, r2
   d6884:	462a      	mov	r2, r5
   d6886:	f7ff fa15 	bl	d5cb4 <hal_ble_gatt_client_write_without_response>
   d688a:	e7cb      	b.n	d6824 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d688c:	2f02      	cmp	r7, #2
   d688e:	d0f3      	beq.n	d6878 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d6890:	2300      	movs	r3, #0
   d6892:	89a1      	ldrh	r1, [r4, #12]
   d6894:	9300      	str	r3, [sp, #0]
   d6896:	4613      	mov	r3, r2
   d6898:	462a      	mov	r2, r5
   d689a:	f7ff fa01 	bl	d5ca0 <hal_ble_gatt_client_write_with_response>
   d689e:	e7c1      	b.n	d6824 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d68a0:	4802      	ldr	r0, [pc, #8]	; (d68ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d68a2:	e7bf      	b.n	d6824 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d68a4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d68a8:	e7bc      	b.n	d6824 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d68aa:	bf00      	nop
   d68ac:	fffffef2 	.word	0xfffffef2

000d68b0 <_ZN8particle17BleCharacteristic8setValueERK6StringNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
   d68b0:	4613      	mov	r3, r2
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
   d68b2:	688a      	ldr	r2, [r1, #8]
   d68b4:	6809      	ldr	r1, [r1, #0]
   d68b6:	f7ff bf9b 	b.w	d67f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000d68ba <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d68ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d68bc:	460c      	mov	r4, r1
   d68be:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d68c0:	21f4      	movs	r1, #244	; 0xf4
   d68c2:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d68c4:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d68c6:	f002 fee1 	bl	d968c <strnlen>
   d68ca:	9b01      	ldr	r3, [sp, #4]
   d68cc:	4602      	mov	r2, r0
   d68ce:	4621      	mov	r1, r4
   d68d0:	4628      	mov	r0, r5
}
   d68d2:	b003      	add	sp, #12
   d68d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d68d8:	f7ff bf8a 	b.w	d67f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000d68dc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d68dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d68e0:	f04f 0800 	mov.w	r8, #0
   d68e4:	f8c0 8000 	str.w	r8, [r0]
   d68e8:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d68ea:	2024      	movs	r0, #36	; 0x24
   d68ec:	460f      	mov	r7, r1
   d68ee:	f7fd fbd2 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d68f2:	1e04      	subs	r4, r0, #0
   d68f4:	f104 060c 	add.w	r6, r4, #12
   d68f8:	d00d      	beq.n	d6916 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d68fa:	2301      	movs	r3, #1
   d68fc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   d6900:	4b07      	ldr	r3, [pc, #28]	; (d6920 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d6902:	6023      	str	r3, [r4, #0]
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d6904:	4630      	mov	r0, r6
   d6906:	f7ff fd63 	bl	d63d0 <_ZN8particle7BleUuidC1Ev>
   d690a:	f8c4 8020 	str.w	r8, [r4, #32]
        uuid_ = svcUuid;
   d690e:	4639      	mov	r1, r7
   d6910:	4630      	mov	r0, r6
   d6912:	f7ff fdda 	bl	d64ca <_ZN8particle7BleUuidaSERKS0_>
	  __p = __pi->_M_ptr();
   d6916:	e9c5 6400 	strd	r6, r4, [r5]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d691a:	4628      	mov	r0, r5
   d691c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6920:	000d9cfc 	.word	0x000d9cfc

000d6924 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6924:	b538      	push	{r3, r4, r5, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6926:	2400      	movs	r4, #0
   d6928:	6004      	str	r4, [r0, #0]
   d692a:	4605      	mov	r5, r0
   d692c:	2030      	movs	r0, #48	; 0x30
   d692e:	f7fd fbb2 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d6932:	4603      	mov	r3, r0
   d6934:	b188      	cbz	r0, d695a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d6936:	2201      	movs	r2, #1
   d6938:	e9c0 2201 	strd	r2, r2, [r0, #4]
	: _M_impl(__a)
   d693c:	4a09      	ldr	r2, [pc, #36]	; (d6964 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d693e:	6002      	str	r2, [r0, #0]
              characteristicsDiscovered_(false) {
   d6940:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6944:	8182      	strh	r2, [r0, #12]
   d6946:	300e      	adds	r0, #14
   d6948:	f7ff fd2e 	bl	d63a8 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d694c:	e9c3 4406 	strd	r4, r4, [r3, #24]
   d6950:	e9c3 4408 	strd	r4, r4, [r3, #32]
   d6954:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
   d6958:	82dc      	strh	r4, [r3, #22]
	  _M_pi = __pi;
   d695a:	606b      	str	r3, [r5, #4]
   d695c:	330c      	adds	r3, #12
	  __p = __pi->_M_ptr();
   d695e:	602b      	str	r3, [r5, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d6960:	4628      	mov	r0, r5
   d6962:	bd38      	pop	{r3, r4, r5, pc}
   d6964:	000d9d18 	.word	0x000d9d18

000d6968 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
    return impl()->address();
   d6968:	6809      	ldr	r1, [r1, #0]
   d696a:	f851 2f02 	ldr.w	r2, [r1, #2]!
   d696e:	6002      	str	r2, [r0, #0]
   d6970:	684a      	ldr	r2, [r1, #4]
   d6972:	6042      	str	r2, [r0, #4]
}
   d6974:	4770      	bx	lr

000d6976 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d6976:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6978:	460b      	mov	r3, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d697a:	6801      	ldr	r1, [r0, #0]
   d697c:	681a      	ldr	r2, [r3, #0]
   d697e:	8809      	ldrh	r1, [r1, #0]
   d6980:	8812      	ldrh	r2, [r2, #0]
   d6982:	4291      	cmp	r1, r2
   d6984:	d10c      	bne.n	d69a0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d6986:	4601      	mov	r1, r0
   d6988:	4668      	mov	r0, sp
   d698a:	f7ff ffed 	bl	d6968 <_ZNK8particle13BlePeerDevice7addressEv>
   d698e:	a802      	add	r0, sp, #8
   d6990:	4619      	mov	r1, r3
   d6992:	f7ff ffe9 	bl	d6968 <_ZNK8particle13BlePeerDevice7addressEv>
   d6996:	a902      	add	r1, sp, #8
   d6998:	4668      	mov	r0, sp
   d699a:	f7ff fd0a 	bl	d63b2 <_ZNK8particle10BleAddresseqERKS0_>
   d699e:	b900      	cbnz	r0, d69a2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d69a0:	2000      	movs	r0, #0
}
   d69a2:	b005      	add	sp, #20
   d69a4:	f85d fb04 	ldr.w	pc, [sp], #4

000d69a8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d69a8:	b510      	push	{r4, lr}
   d69aa:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d69ac:	2034      	movs	r0, #52	; 0x34
   d69ae:	f7fd fb72 	bl	d4096 <_Znwj>
   d69b2:	4601      	mov	r1, r0
   d69b4:	b168      	cbz	r0, d69d2 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
   d69b6:	2300      	movs	r3, #0
   d69b8:	e9c0 3300 	strd	r3, r3, [r0]
   d69bc:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d69c0:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d69c4:	e9c0 3306 	strd	r3, r3, [r0, #24]
              disconnectedContext_(nullptr) {
   d69c8:	e9c0 3308 	strd	r3, r3, [r0, #32]
   d69cc:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
   d69d0:	6303      	str	r3, [r0, #48]	; 0x30
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d69d2:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d69d4:	b919      	cbnz	r1, d69de <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d69d6:	4a0a      	ldr	r2, [pc, #40]	; (d6a00 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d69d8:	200a      	movs	r0, #10
   d69da:	f7ff fb5d 	bl	d6098 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d69de:	2000      	movs	r0, #0
   d69e0:	f7ff f900 	bl	d5be4 <hal_ble_stack_init>
   d69e4:	b120      	cbz	r0, d69f0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d69e6:	4a06      	ldr	r2, [pc, #24]	; (d6a00 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d69e8:	2100      	movs	r1, #0
   d69ea:	200a      	movs	r0, #10
   d69ec:	f7ff fb54 	bl	d6098 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d69f0:	6821      	ldr	r1, [r4, #0]
   d69f2:	4804      	ldr	r0, [pc, #16]	; (d6a04 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d69f4:	2200      	movs	r2, #0
   d69f6:	f7ff f971 	bl	d5cdc <hal_ble_set_callback_on_periph_link_events>
}
   d69fa:	4620      	mov	r0, r4
   d69fc:	bd10      	pop	{r4, pc}
   d69fe:	bf00      	nop
   d6a00:	000d5d69 	.word	0x000d5d69
   d6a04:	000d6e85 	.word	0x000d6e85

000d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d6a08:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d6a0a:	4c0b      	ldr	r4, [pc, #44]	; (d6a38 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6a0c:	7823      	ldrb	r3, [r4, #0]
   d6a0e:	f3bf 8f5b 	dmb	ish
   d6a12:	07db      	lsls	r3, r3, #31
   d6a14:	d40e      	bmi.n	d6a34 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6a16:	4620      	mov	r0, r4
   d6a18:	f7fd fb43 	bl	d40a2 <__cxa_guard_acquire>
   d6a1c:	b150      	cbz	r0, d6a34 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6a1e:	4807      	ldr	r0, [pc, #28]	; (d6a3c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6a20:	f7ff ffc2 	bl	d69a8 <_ZN8particle14BleLocalDeviceC1Ev>
   d6a24:	4620      	mov	r0, r4
   d6a26:	f7fd fb41 	bl	d40ac <__cxa_guard_release>
   d6a2a:	4a05      	ldr	r2, [pc, #20]	; (d6a40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d6a2c:	4905      	ldr	r1, [pc, #20]	; (d6a44 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d6a2e:	4803      	ldr	r0, [pc, #12]	; (d6a3c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6a30:	f001 fb3c 	bl	d80ac <__aeabi_atexit>
    return instance;
}
   d6a34:	4801      	ldr	r0, [pc, #4]	; (d6a3c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6a36:	bd10      	pop	{r4, pc}
   d6a38:	2003e744 	.word	0x2003e744
   d6a3c:	2003e750 	.word	0x2003e750
   d6a40:	2003e40c 	.word	0x2003e40c
   d6a44:	000d6c77 	.word	0x000d6c77

000d6a48 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6a48:	b570      	push	{r4, r5, r6, lr}
    switch (event->type) {
   d6a4a:	6803      	ldr	r3, [r0, #0]
   d6a4c:	3b09      	subs	r3, #9
   d6a4e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6a50:	b08a      	sub	sp, #40	; 0x28
   d6a52:	4604      	mov	r4, r0
   d6a54:	460d      	mov	r5, r1
    switch (event->type) {
   d6a56:	d812      	bhi.n	d6a7e <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x36>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d6a58:	f7ff ffd6 	bl	d6a08 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d6a5c:	88a1      	ldrh	r1, [r4, #4]
   d6a5e:	6800      	ldr	r0, [r0, #0]
   d6a60:	f7ff feb4 	bl	d67cc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d6a64:	4602      	mov	r2, r0
   d6a66:	b960      	cbnz	r0, d6a82 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x3a>
                LOG(ERROR, "Peer device is missing!");
   d6a68:	2320      	movs	r3, #32
   d6a6a:	e9cd 3002 	strd	r3, r0, [sp, #8]
   d6a6e:	4b09      	ldr	r3, [pc, #36]	; (d6a94 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d6a70:	9300      	str	r3, [sp, #0]
   d6a72:	4909      	ldr	r1, [pc, #36]	; (d6a98 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x50>)
   d6a74:	4603      	mov	r3, r0
   d6a76:	aa02      	add	r2, sp, #8
   d6a78:	2032      	movs	r0, #50	; 0x32
   d6a7a:	f7ff fb15 	bl	d60a8 <log_message>
}
   d6a7e:	b00a      	add	sp, #40	; 0x28
   d6a80:	bd70      	pop	{r4, r5, r6, pc}
            if (impl->callback_) {
   d6a82:	6cee      	ldr	r6, [r5, #76]	; 0x4c
   d6a84:	2e00      	cmp	r6, #0
   d6a86:	d0fa      	beq.n	d6a7e <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x36>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d6a88:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
   d6a8c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   d6a8e:	47b0      	blx	r6
}
   d6a90:	e7f5      	b.n	d6a7e <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x36>
   d6a92:	bf00      	nop
   d6a94:	000d9c0a 	.word	0x000d9c0a
   d6a98:	000d9be3 	.word	0x000d9be3

000d6a9c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d6a9c:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d6a9e:	a801      	add	r0, sp, #4
   d6aa0:	f7ff fc68 	bl	d6374 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d6aa4:	2000      	movs	r0, #0
   d6aa6:	f7ff f89d 	bl	d5be4 <hal_ble_stack_init>
   d6aaa:	4604      	mov	r4, r0
    WiringBleLock lk;
   d6aac:	a801      	add	r0, sp, #4
   d6aae:	f7ff fc6f 	bl	d6390 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
}
   d6ab2:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d6ab6:	b002      	add	sp, #8
   d6ab8:	bd10      	pop	{r4, pc}

000d6aba <_ZNK8particle14BleLocalDevice13setDeviceNameEPKc>:

int BleLocalDevice::setDeviceName(const char* name, size_t len) const {
    return hal_ble_gap_set_device_name(name, len, nullptr);
}

int BleLocalDevice::setDeviceName(const char* name) const {
   d6aba:	b510      	push	{r4, lr}
   d6abc:	460c      	mov	r4, r1
    return setDeviceName(name, strnlen(name, BLE_MAX_DEV_NAME_LEN));
   d6abe:	4620      	mov	r0, r4
   d6ac0:	2114      	movs	r1, #20
   d6ac2:	f002 fde3 	bl	d968c <strnlen>
    return hal_ble_gap_set_device_name(name, len, nullptr);
   d6ac6:	2200      	movs	r2, #0
    return setDeviceName(name, strnlen(name, BLE_MAX_DEV_NAME_LEN));
   d6ac8:	4601      	mov	r1, r0
    return hal_ble_gap_set_device_name(name, len, nullptr);
   d6aca:	4620      	mov	r0, r4
}
   d6acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_ble_gap_set_device_name(name, len, nullptr);
   d6ad0:	f7ff b898 	b.w	d5c04 <hal_ble_gap_set_device_name>

000d6ad4 <_ZNK8particle14BleLocalDevice13setDeviceNameERK6String>:

int BleLocalDevice::setDeviceName(const String& name) const {
    return setDeviceName(name.c_str());
   d6ad4:	6809      	ldr	r1, [r1, #0]
   d6ad6:	f7ff bff0 	b.w	d6aba <_ZNK8particle14BleLocalDevice13setDeviceNameEPKc>

000d6ada <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
int BleLocalDevice::txPower(int8_t* txPower) const {
    WiringBleLock lk;
    return hal_ble_gap_get_tx_power(txPower, nullptr);
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   d6ada:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   d6adc:	2100      	movs	r1, #0
   d6ade:	f7ff b889 	b.w	d5bf4 <hal_ble_select_antenna>

000d6ae2 <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE>:
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
   d6ae2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d6ae4:	2500      	movs	r5, #0
    WiringBleLock lk;
   d6ae6:	4668      	mov	r0, sp
int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
   d6ae8:	460e      	mov	r6, r1
    WiringBleLock lk;
   d6aea:	f7ff fc43 	bl	d6374 <_ZN8particle3ble13WiringBleLockC1Ev>
    advParams.size = sizeof(hal_ble_adv_params_t);
   d6aee:	230c      	movs	r3, #12
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d6af0:	4629      	mov	r1, r5
   d6af2:	a801      	add	r0, sp, #4
    hal_ble_adv_params_t advParams = {};
   d6af4:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d6af8:	9503      	str	r5, [sp, #12]
    advParams.size = sizeof(hal_ble_adv_params_t);
   d6afa:	f8ad 3006 	strh.w	r3, [sp, #6]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d6afe:	f7ff f891 	bl	d5c24 <hal_ble_gap_get_advertising_parameters>
   d6b02:	1e04      	subs	r4, r0, #0
   d6b04:	db06      	blt.n	d6b14 <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE+0x32>
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d6b06:	4629      	mov	r1, r5
   d6b08:	a801      	add	r0, sp, #4
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
   d6b0a:	f88d 600c 	strb.w	r6, [sp, #12]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d6b0e:	f7ff f881 	bl	d5c14 <hal_ble_gap_set_advertising_parameters>
   d6b12:	4604      	mov	r4, r0
    WiringBleLock lk;
   d6b14:	4668      	mov	r0, sp
   d6b16:	f7ff fc3b 	bl	d6390 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d6b1a:	4620      	mov	r0, r4
   d6b1c:	b004      	add	sp, #16
   d6b1e:	bd70      	pop	{r4, r5, r6, pc}

000d6b20 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d6b20:	4608      	mov	r0, r1
   d6b22:	b911      	cbnz	r1, d6b2a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d6b24:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d6b26:	f7ff b885 	b.w	d5c34 <hal_ble_gap_set_advertising_data>
   d6b2a:	6a09      	ldr	r1, [r1, #32]
   d6b2c:	2200      	movs	r2, #0
   d6b2e:	e7fa      	b.n	d6b26 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d6b30 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d6b30:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d6b32:	4608      	mov	r0, r1
   d6b34:	b929      	cbnz	r1, d6b42 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d6b36:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d6b38:	b003      	add	sp, #12
   d6b3a:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6b3e:	f7ff b881 	b.w	d5c44 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d6b42:	2101      	movs	r1, #1
   d6b44:	9001      	str	r0, [sp, #4]
   d6b46:	f7ff fdd4 	bl	d66f2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6b4a:	9801      	ldr	r0, [sp, #4]
   d6b4c:	2200      	movs	r2, #0
   d6b4e:	6a01      	ldr	r1, [r0, #32]
   d6b50:	e7f2      	b.n	d6b38 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d6b52 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d6b52:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d6b54:	a801      	add	r0, sp, #4
   d6b56:	f7ff fc0d 	bl	d6374 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d6b5a:	2000      	movs	r0, #0
   d6b5c:	f7ff f87a 	bl	d5c54 <hal_ble_gap_start_advertising>
   d6b60:	4604      	mov	r4, r0
    WiringBleLock lk;
   d6b62:	a801      	add	r0, sp, #4
   d6b64:	f7ff fc14 	bl	d6390 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d6b68:	4620      	mov	r0, r4
   d6b6a:	b002      	add	sp, #8
   d6b6c:	bd10      	pop	{r4, pc}

000d6b6e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d6b6e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6b70:	4605      	mov	r5, r0
    WiringBleLock lk;
   d6b72:	a803      	add	r0, sp, #12
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d6b74:	9101      	str	r1, [sp, #4]
   d6b76:	4616      	mov	r6, r2
    WiringBleLock lk;
   d6b78:	f7ff fbfc 	bl	d6374 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d6b7c:	9901      	ldr	r1, [sp, #4]
   d6b7e:	4628      	mov	r0, r5
   d6b80:	f7ff ffce 	bl	d6b20 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d6b84:	1e04      	subs	r4, r0, #0
   d6b86:	db09      	blt.n	d6b9c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2e>
    CHECK(setScanResponseData(scanResponse));
   d6b88:	4631      	mov	r1, r6
   d6b8a:	4628      	mov	r0, r5
   d6b8c:	f7ff ffd0 	bl	d6b30 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d6b90:	1e04      	subs	r4, r0, #0
   d6b92:	db03      	blt.n	d6b9c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2e>
    return advertise();
   d6b94:	4628      	mov	r0, r5
   d6b96:	f7ff ffdc 	bl	d6b52 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d6b9a:	4604      	mov	r4, r0
    WiringBleLock lk;
   d6b9c:	a803      	add	r0, sp, #12
   d6b9e:	f7ff fbf7 	bl	d6390 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d6ba2:	4620      	mov	r0, r4
   d6ba4:	b004      	add	sp, #16
   d6ba6:	bd70      	pop	{r4, r5, r6, pc}

000d6ba8 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   d6ba8:	6803      	ldr	r3, [r0, #0]
   d6baa:	69d8      	ldr	r0, [r3, #28]
}
   d6bac:	2800      	cmp	r0, #0
   d6bae:	bfd4      	ite	le
   d6bb0:	2000      	movle	r0, #0
   d6bb2:	2001      	movgt	r0, #1
   d6bb4:	4770      	bx	lr

000d6bb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d6bb6:	680b      	ldr	r3, [r1, #0]
   d6bb8:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6bba:	b113      	cbz	r3, d6bc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6bbc:	685a      	ldr	r2, [r3, #4]
   d6bbe:	3201      	adds	r2, #1
   d6bc0:	605a      	str	r2, [r3, #4]
      }
   d6bc2:	4770      	bx	lr

000d6bc4 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d6bc4:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6bc6:	f851 3b04 	ldr.w	r3, [r1], #4
   d6bca:	4604      	mov	r4, r0
   d6bcc:	f840 3b04 	str.w	r3, [r0], #4
   d6bd0:	f7ff fff1 	bl	d6bb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d6bd4:	6823      	ldr	r3, [r4, #0]
   d6bd6:	b90b      	cbnz	r3, d6bdc <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d6bd8:	f7ff fbae 	bl	d6338 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d6bdc:	4620      	mov	r0, r4
   d6bde:	bd10      	pop	{r4, pc}

000d6be0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d6be0:	b510      	push	{r4, lr}
   d6be2:	f851 3b04 	ldr.w	r3, [r1], #4
   d6be6:	4604      	mov	r4, r0
   d6be8:	f840 3b04 	str.w	r3, [r0], #4
   d6bec:	f7ff ffe3 	bl	d6bb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6bf0:	4620      	mov	r0, r4
   d6bf2:	bd10      	pop	{r4, pc}

000d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d6bf4:	b510      	push	{r4, lr}
   d6bf6:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d6bf8:	6800      	ldr	r0, [r0, #0]
   d6bfa:	b128      	cbz	r0, d6c08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d6bfc:	6843      	ldr	r3, [r0, #4]
   d6bfe:	3b01      	subs	r3, #1
   d6c00:	6043      	str	r3, [r0, #4]
   d6c02:	b90b      	cbnz	r3, d6c08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6c04:	f7ff fb6a 	bl	d62dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d6c08:	4620      	mov	r0, r4
   d6c0a:	bd10      	pop	{r4, pc}

000d6c0c <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d6c0c:	b510      	push	{r4, lr}
   d6c0e:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d6c10:	3004      	adds	r0, #4
   d6c12:	f7ff ffef 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6c16:	4620      	mov	r0, r4
   d6c18:	bd10      	pop	{r4, pc}

000d6c1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c1a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6c1c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c20:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6c22:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6c26:	42ae      	cmp	r6, r5
   d6c28:	d004      	beq.n	d6c34 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d6c2a:	1d28      	adds	r0, r5, #4
   d6c2c:	f7ff ffe2 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c30:	3508      	adds	r5, #8
   d6c32:	e7f8      	b.n	d6c26 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d6c34:	6820      	ldr	r0, [r4, #0]
   d6c36:	f7ff fadb 	bl	d61f0 <free>
}
   d6c3a:	4620      	mov	r0, r4
   d6c3c:	bd70      	pop	{r4, r5, r6, pc}

000d6c3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c3e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6c40:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c44:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6c46:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6c4a:	42ae      	cmp	r6, r5
   d6c4c:	d004      	beq.n	d6c58 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d6c4e:	1d28      	adds	r0, r5, #4
   d6c50:	f7ff ffd0 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c54:	3508      	adds	r5, #8
   d6c56:	e7f8      	b.n	d6c4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d6c58:	6820      	ldr	r0, [r4, #0]
   d6c5a:	f7ff fac9 	bl	d61f0 <free>
}
   d6c5e:	4620      	mov	r0, r4
   d6c60:	bd70      	pop	{r4, r5, r6, pc}

000d6c62 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6c62:	b510      	push	{r4, lr}
   d6c64:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d6c66:	3024      	adds	r0, #36	; 0x24
   d6c68:	f7ff ffe9 	bl	d6c3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6c6c:	f104 0018 	add.w	r0, r4, #24
   d6c70:	f7ff ffd3 	bl	d6c1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d6c74:	bd10      	pop	{r4, pc}

000d6c76 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d6c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d6c78:	6804      	ldr	r4, [r0, #0]
   d6c7a:	4606      	mov	r6, r0
   d6c7c:	b1c4      	cbz	r4, d6cb0 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    destruct(data_, data_ + size_);
   d6c7e:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d6c82:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6c86:	42af      	cmp	r7, r5
   d6c88:	d004      	beq.n	d6c94 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
      ~__shared_ptr() = default;
   d6c8a:	1d28      	adds	r0, r5, #4
   d6c8c:	f7ff ffb2 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c90:	3508      	adds	r5, #8
   d6c92:	e7f8      	b.n	d6c86 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
    ::free(ptr);
   d6c94:	69a0      	ldr	r0, [r4, #24]
   d6c96:	f7ff faab 	bl	d61f0 <free>
    ~BleLocalDeviceImpl() = default;
   d6c9a:	f104 000c 	add.w	r0, r4, #12
   d6c9e:	f7ff ffce 	bl	d6c3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6ca2:	4620      	mov	r0, r4
   d6ca4:	f7ff ffb9 	bl	d6c1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d6ca8:	2134      	movs	r1, #52	; 0x34
   d6caa:	4620      	mov	r0, r4
   d6cac:	f001 fa03 	bl	d80b6 <_ZdlPvj>
   d6cb0:	4630      	mov	r0, r6
   d6cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6cb4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d6cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6cb8:	b085      	sub	sp, #20
   d6cba:	4680      	mov	r8, r0
   d6cbc:	4699      	mov	r9, r3
   d6cbe:	2060      	movs	r0, #96	; 0x60
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6cc0:	2300      	movs	r3, #0
   d6cc2:	460d      	mov	r5, r1
   d6cc4:	4616      	mov	r6, r2
   d6cc6:	9300      	str	r3, [sp, #0]
   d6cc8:	f7fd f9e5 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d6ccc:	1e04      	subs	r4, r0, #0
   d6cce:	f104 070c 	add.w	r7, r4, #12
   d6cd2:	d01c      	beq.n	d6d0e <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5a>
	: _M_impl(__a)
   d6cd4:	4b1c      	ldr	r3, [pc, #112]	; (d6d48 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   d6cd6:	6023      	str	r3, [r4, #0]
      : _M_use_count(1), _M_weak_count(1) { }
   d6cd8:	2201      	movs	r2, #1
   d6cda:	e9c4 2201 	strd	r2, r2, [r4, #4]
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d6cde:	7836      	ldrb	r6, [r6, #0]
            : BleCharacteristicImpl() {
   d6ce0:	4638      	mov	r0, r7
   d6ce2:	f7ff fd53 	bl	d678c <_ZN8particle21BleCharacteristicImplC1Ev>
        description_ = desc;
   d6ce6:	4629      	mov	r1, r5
        properties_ = properties;
   d6ce8:	7426      	strb	r6, [r4, #16]
        description_ = desc;
   d6cea:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d6cee:	f000 fee8 	bl	d7ac2 <_ZN6StringaSEPKc>
        callback_ = callback;
   d6cf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d6cf4:	65a3      	str	r3, [r4, #88]	; 0x58
        context_ = context;
   d6cf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d6cf8:	65e3      	str	r3, [r4, #92]	; 0x5c
        charUuid_ = charUuid;
   d6cfa:	4649      	mov	r1, r9
   d6cfc:	f104 0020 	add.w	r0, r4, #32
   d6d00:	f7ff fbe3 	bl	d64ca <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d6d04:	990c      	ldr	r1, [sp, #48]	; 0x30
   d6d06:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6d0a:	f7ff fbde 	bl	d64ca <_ZN8particle7BleUuidaSERKS0_>
	__r._M_pi = _M_pi;
   d6d0e:	2300      	movs	r3, #0
	__r._M_ptr = 0;
   d6d10:	e9cd 3300 	strd	r3, r3, [sp]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6d14:	f8d8 3000 	ldr.w	r3, [r8]
   d6d18:	9302      	str	r3, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d1a:	f8c8 7000 	str.w	r7, [r8]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6d1e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	__r._M_pi = _M_pi;
   d6d22:	f8c8 4004 	str.w	r4, [r8, #4]
      ~__shared_ptr() = default;
   d6d26:	a803      	add	r0, sp, #12
	_M_pi = __tmp;
   d6d28:	9303      	str	r3, [sp, #12]
      ~__shared_ptr() = default;
   d6d2a:	f7ff ff63 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6d2e:	a801      	add	r0, sp, #4
   d6d30:	f7ff ff60 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d6d34:	f8d8 1000 	ldr.w	r1, [r8]
   d6d38:	b919      	cbnz	r1, d6d42 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8e>
        SPARK_ASSERT(false);
   d6d3a:	4a04      	ldr	r2, [pc, #16]	; (d6d4c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x98>)
   d6d3c:	200a      	movs	r0, #10
   d6d3e:	f7ff f9ab 	bl	d6098 <panic_>
}
   d6d42:	b005      	add	sp, #20
   d6d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6d48:	000d9ce0 	.word	0x000d9ce0
   d6d4c:	000d5d69 	.word	0x000d5d69

000d6d50 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6d50:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d54:	4606      	mov	r6, r0
   d6d56:	460c      	mov	r4, r1
   d6d58:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6d5a:	d918      	bls.n	d6d8e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d6d5c:	4290      	cmp	r0, r2
   d6d5e:	d217      	bcs.n	d6d90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            --end;
   d6d60:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6d64:	f1a1 0708 	sub.w	r7, r1, #8
   d6d68:	1a69      	subs	r1, r5, r1
   d6d6a:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d6d6c:	42af      	cmp	r7, r5
   d6d6e:	d020      	beq.n	d6db2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
   d6d70:	1d2e      	adds	r6, r5, #4
                new(dest) T(std::move(*end));
   d6d72:	b134      	cbz	r4, d6d82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6d74:	4620      	mov	r0, r4
   d6d76:	682b      	ldr	r3, [r5, #0]
   d6d78:	f840 3b04 	str.w	r3, [r0], #4
   d6d7c:	4631      	mov	r1, r6
   d6d7e:	f7ff ff1a 	bl	d6bb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      ~__shared_ptr() = default;
   d6d82:	4630      	mov	r0, r6
   d6d84:	f7ff ff36 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6d88:	3d08      	subs	r5, #8
   d6d8a:	3c08      	subs	r4, #8
   d6d8c:	e7ee      	b.n	d6d6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6d8e:	d010      	beq.n	d6db2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
            for (; p != end; ++p, ++dest) {
   d6d90:	42ac      	cmp	r4, r5
   d6d92:	d00e      	beq.n	d6db2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
   d6d94:	1d27      	adds	r7, r4, #4
                new(dest) T(std::move(*p));
   d6d96:	b136      	cbz	r6, d6da6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6d98:	4630      	mov	r0, r6
   d6d9a:	6823      	ldr	r3, [r4, #0]
   d6d9c:	f840 3b04 	str.w	r3, [r0], #4
   d6da0:	4639      	mov	r1, r7
   d6da2:	f7ff ff08 	bl	d6bb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      ~__shared_ptr() = default;
   d6da6:	4638      	mov	r0, r7
   d6da8:	f7ff ff24 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6dac:	3408      	adds	r4, #8
   d6dae:	3608      	adds	r6, #8
   d6db0:	e7ee      	b.n	d6d90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
    }
   d6db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6db4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6db8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6dbc:	4605      	mov	r5, r0
   d6dbe:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d6dc0:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d6dc4:	42a7      	cmp	r7, r4
   d6dc6:	d01a      	beq.n	d6dfe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
            if (*p == value) {
   d6dc8:	4641      	mov	r1, r8
   d6dca:	4620      	mov	r0, r4
   d6dcc:	f7ff fdd3 	bl	d6976 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6dd0:	4606      	mov	r6, r0
   d6dd2:	b908      	cbnz	r0, d6dd8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
        for (; p != end; ++p) {
   d6dd4:	3408      	adds	r4, #8
   d6dd6:	e7f5      	b.n	d6dc4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d6dd8:	b19c      	cbz	r4, d6e02 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4e>
   d6dda:	1d20      	adds	r0, r4, #4
   d6ddc:	f7ff ff0a 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d6de0:	e9d5 3200 	ldrd	r3, r2, [r5]
   d6de4:	f104 0108 	add.w	r1, r4, #8
   d6de8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6dec:	4620      	mov	r0, r4
   d6dee:	f7ff ffaf 	bl	d6d50 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6df2:	686b      	ldr	r3, [r5, #4]
   d6df4:	3b01      	subs	r3, #1
   d6df6:	606b      	str	r3, [r5, #4]
}
   d6df8:	4630      	mov	r0, r6
   d6dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
   d6dfe:	2600      	movs	r6, #0
   d6e00:	e7fa      	b.n	d6df8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x44>
   d6e02:	4626      	mov	r6, r4
   d6e04:	e7f8      	b.n	d6df8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x44>

000d6e06 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6e06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6e08:	4604      	mov	r4, r0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6e0a:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d6e0e:	6847      	ldr	r7, [r0, #4]
   d6e10:	9300      	str	r3, [sp, #0]
   d6e12:	a801      	add	r0, sp, #4
   d6e14:	f7ff fecf 	bl	d6bb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6e18:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
   d6e1c:	429e      	cmp	r6, r3
   d6e1e:	db12      	blt.n	d6e46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d6e20:	3601      	adds	r6, #1
        if (n > 0) {
   d6e22:	2e00      	cmp	r6, #0
   d6e24:	dd2c      	ble.n	d6e80 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x7a>
    return ::malloc(size);
   d6e26:	00f0      	lsls	r0, r6, #3
   d6e28:	f7ff f9da 	bl	d61e0 <malloc>
            if (!d) {
   d6e2c:	4605      	mov	r5, r0
   d6e2e:	b308      	cbz	r0, d6e74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
            move(d, data_, data_ + size_);
   d6e30:	e9d4 1200 	ldrd	r1, r2, [r4]
   d6e34:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6e38:	f7ff ff8a 	bl	d6d50 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6e3c:	6820      	ldr	r0, [r4, #0]
   d6e3e:	f7ff f9d7 	bl	d61f0 <free>
        data_ = d;
   d6e42:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6e44:	60a6      	str	r6, [r4, #8]
    T* const p = data_ + i;
   d6e46:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6e48:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6e4a:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d6e4e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d6e52:	4629      	mov	r1, r5
   d6e54:	f105 0008 	add.w	r0, r5, #8
   d6e58:	f7ff ff7a 	bl	d6d50 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6e5c:	b135      	cbz	r5, d6e6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x66>
   d6e5e:	9b00      	ldr	r3, [sp, #0]
   d6e60:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d6e64:	a901      	add	r1, sp, #4
   d6e66:	1d28      	adds	r0, r5, #4
   d6e68:	f7ff fea5 	bl	d6bb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d6e6c:	6863      	ldr	r3, [r4, #4]
   d6e6e:	3301      	adds	r3, #1
   d6e70:	6063      	str	r3, [r4, #4]
    return true;
   d6e72:	2501      	movs	r5, #1
      ~__shared_ptr() = default;
   d6e74:	a801      	add	r0, sp, #4
   d6e76:	f7ff febd 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6e7a:	4628      	mov	r0, r5
   d6e7c:	b003      	add	sp, #12
   d6e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d6e80:	2500      	movs	r5, #0
   d6e82:	e7db      	b.n	d6e3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x36>

000d6e84 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6e88:	4604      	mov	r4, r0
   d6e8a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d6e8c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6e8e:	460d      	mov	r5, r1
        WiringBleLock lk;
   d6e90:	f7ff fa70 	bl	d6374 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6e94:	6823      	ldr	r3, [r4, #0]
   d6e96:	2b03      	cmp	r3, #3
   d6e98:	d007      	beq.n	d6eaa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x26>
   d6e9a:	2b04      	cmp	r3, #4
   d6e9c:	d048      	beq.n	d6f30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
        WiringBleLock lk;
   d6e9e:	a803      	add	r0, sp, #12
   d6ea0:	f7ff fa76 	bl	d6390 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d6ea4:	b00e      	add	sp, #56	; 0x38
   d6ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                BlePeerDevice peer;
   d6eaa:	a804      	add	r0, sp, #16
   d6eac:	f7ff fd3a 	bl	d6924 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d6eb0:	9b04      	ldr	r3, [sp, #16]
   d6eb2:	8922      	ldrh	r2, [r4, #8]
   d6eb4:	801a      	strh	r2, [r3, #0]
    address_ = addr;
   d6eb6:	6862      	ldr	r2, [r4, #4]
        return impl_.get();
   d6eb8:	9904      	ldr	r1, [sp, #16]
   d6eba:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d6ebe:	f8c1 3002 	str.w	r3, [r1, #2]
   d6ec2:	6853      	ldr	r3, [r2, #4]
   d6ec4:	f8c1 3006 	str.w	r3, [r1, #6]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6ec8:	a807      	add	r0, sp, #28
   d6eca:	9b04      	ldr	r3, [sp, #16]
   d6ecc:	9306      	str	r3, [sp, #24]
   d6ece:	a905      	add	r1, sp, #20
   d6ed0:	f7ff fe71 	bl	d6bb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
                if (!impl->peers_.append(peer)) {
   d6ed4:	a906      	add	r1, sp, #24
   d6ed6:	f105 0018 	add.w	r0, r5, #24
   d6eda:	f7ff ff94 	bl	d6e06 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6ede:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d6ee0:	a807      	add	r0, sp, #28
   d6ee2:	f7ff fe87 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6ee6:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d6ee8:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d6eea:	b98c      	cbnz	r4, d6f10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d6eec:	4b33      	ldr	r3, [pc, #204]	; (d6fbc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d6eee:	4934      	ldr	r1, [pc, #208]	; (d6fc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6ef0:	9300      	str	r3, [sp, #0]
   d6ef2:	2032      	movs	r0, #50	; 0x32
   d6ef4:	4623      	mov	r3, r4
   d6ef6:	aa06      	add	r2, sp, #24
   d6ef8:	9407      	str	r4, [sp, #28]
   d6efa:	f7ff f8d5 	bl	d60a8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d6efe:	9b04      	ldr	r3, [sp, #16]
   d6f00:	4621      	mov	r1, r4
   d6f02:	8818      	ldrh	r0, [r3, #0]
   d6f04:	f7fe feae 	bl	d5c64 <hal_ble_gap_disconnect>
   d6f08:	a805      	add	r0, sp, #20
   d6f0a:	f7ff fe73 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f0e:	e7c6      	b.n	d6e9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
                LOG(TRACE, "Connected by Central device.");
   d6f10:	4a2c      	ldr	r2, [pc, #176]	; (d6fc4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d6f12:	9200      	str	r2, [sp, #0]
   d6f14:	2300      	movs	r3, #0
   d6f16:	492a      	ldr	r1, [pc, #168]	; (d6fc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6f18:	9307      	str	r3, [sp, #28]
   d6f1a:	aa06      	add	r2, sp, #24
   d6f1c:	2001      	movs	r0, #1
   d6f1e:	f7ff f8c3 	bl	d60a8 <log_message>
                if (impl->connectedCb_) {
   d6f22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d6f24:	2b00      	cmp	r3, #0
   d6f26:	d0ef      	beq.n	d6f08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x84>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d6f28:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d6f2a:	a804      	add	r0, sp, #16
   d6f2c:	4798      	blx	r3
   d6f2e:	e7eb      	b.n	d6f08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x84>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6f30:	8921      	ldrh	r1, [r4, #8]
   d6f32:	4628      	mov	r0, r5
   d6f34:	f7ff fc4a 	bl	d67cc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6f38:	4606      	mov	r6, r0
   d6f3a:	2800      	cmp	r0, #0
   d6f3c:	d0af      	beq.n	d6e9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
   d6f3e:	6804      	ldr	r4, [r0, #0]
    return data_ + size_;
   d6f40:	e9d4 3106 	ldrd	r3, r1, [r4, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d6f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6f48:	8022      	strh	r2, [r4, #0]
   d6f4a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d6f4e:	4299      	cmp	r1, r3
   d6f50:	d003      	beq.n	d6f5a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
        return impl_.get();
   d6f52:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6f56:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics_) {
   d6f58:	e7f9      	b.n	d6f4e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
    destruct(data_, data_ + size_);
   d6f5a:	e9d4 7303 	ldrd	r7, r3, [r4, #12]
   d6f5e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6f62:	45b8      	cmp	r8, r7
   d6f64:	d004      	beq.n	d6f70 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   d6f66:	1d38      	adds	r0, r7, #4
   d6f68:	f7ff fe44 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f6c:	3708      	adds	r7, #8
   d6f6e:	e7f8      	b.n	d6f62 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xde>
    size_ = 0;
   d6f70:	2300      	movs	r3, #0
   d6f72:	6123      	str	r3, [r4, #16]
    destruct(data_, data_ + size_);
   d6f74:	e9d4 7306 	ldrd	r7, r3, [r4, #24]
   d6f78:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6f7c:	45b8      	cmp	r8, r7
   d6f7e:	d004      	beq.n	d6f8a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x106>
   d6f80:	1d38      	adds	r0, r7, #4
   d6f82:	f7ff fe37 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f86:	3708      	adds	r7, #8
   d6f88:	e7f8      	b.n	d6f7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf8>
    size_ = 0;
   d6f8a:	2300      	movs	r3, #0
   d6f8c:	61e3      	str	r3, [r4, #28]
        servicesDiscovered_ = false;
   d6f8e:	8163      	strh	r3, [r4, #10]
                    if (impl->disconnectedCb_) {
   d6f90:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d6f92:	b113      	cbz	r3, d6f9a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d6f94:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d6f96:	4630      	mov	r0, r6
   d6f98:	4798      	blx	r3
                    LOG(TRACE, "Disconnected by remote device.");
   d6f9a:	2300      	movs	r3, #0
   d6f9c:	2220      	movs	r2, #32
   d6f9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d6fa2:	4a09      	ldr	r2, [pc, #36]	; (d6fc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d6fa4:	9200      	str	r2, [sp, #0]
   d6fa6:	4906      	ldr	r1, [pc, #24]	; (d6fc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6fa8:	aa06      	add	r2, sp, #24
   d6faa:	2001      	movs	r0, #1
   d6fac:	f7ff f87c 	bl	d60a8 <log_message>
                    impl->peers_.removeOne(*peer);
   d6fb0:	4631      	mov	r1, r6
   d6fb2:	f105 0018 	add.w	r0, r5, #24
   d6fb6:	f7ff fefd 	bl	d6db4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6fba:	e770      	b.n	d6e9e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
   d6fbc:	000d9c22 	.word	0x000d9c22
   d6fc0:	000d9be3 	.word	0x000d9be3
   d6fc4:	000d9c48 	.word	0x000d9c48
   d6fc8:	000d9c65 	.word	0x000d9c65

000d6fcc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6fcc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6fd0:	4604      	mov	r4, r0
   d6fd2:	460d      	mov	r5, r1
   d6fd4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6fd6:	d914      	bls.n	d7002 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6fd8:	4290      	cmp	r0, r2
   d6fda:	d213      	bcs.n	d7004 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6fdc:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6fe0:	1a75      	subs	r5, r6, r1
   d6fe2:	f1a1 0708 	sub.w	r7, r1, #8
   d6fe6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6fe8:	42b7      	cmp	r7, r6
   d6fea:	d018      	beq.n	d701e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6fec:	b11c      	cbz	r4, d6ff6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6fee:	4631      	mov	r1, r6
   d6ff0:	4620      	mov	r0, r4
   d6ff2:	f7ff fdf5 	bl	d6be0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6ff6:	1d30      	adds	r0, r6, #4
   d6ff8:	f7ff fdfc 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6ffc:	3e08      	subs	r6, #8
   d6ffe:	3c08      	subs	r4, #8
   d7000:	e7f2      	b.n	d6fe8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d7002:	d00c      	beq.n	d701e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7004:	42b5      	cmp	r5, r6
   d7006:	d00a      	beq.n	d701e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7008:	b11c      	cbz	r4, d7012 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d700a:	4629      	mov	r1, r5
   d700c:	4620      	mov	r0, r4
   d700e:	f7ff fde7 	bl	d6be0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7012:	1d28      	adds	r0, r5, #4
   d7014:	f7ff fdee 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d7018:	3508      	adds	r5, #8
   d701a:	3408      	adds	r4, #8
   d701c:	e7f2      	b.n	d7004 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d701e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7020 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d7020:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d7022:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d7024:	4605      	mov	r5, r0
        if (n > 0) {
   d7026:	dd11      	ble.n	d704c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7028:	00f0      	lsls	r0, r6, #3
   d702a:	f7ff f8d9 	bl	d61e0 <malloc>
            if (!d) {
   d702e:	4604      	mov	r4, r0
   d7030:	b158      	cbz	r0, d704a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7032:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7036:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d703a:	f7ff ffc7 	bl	d6fcc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d703e:	6828      	ldr	r0, [r5, #0]
   d7040:	f7ff f8d6 	bl	d61f0 <free>
        data_ = d;
   d7044:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7046:	60ae      	str	r6, [r5, #8]
        return true;
   d7048:	2001      	movs	r0, #1
    }
   d704a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d704c:	2400      	movs	r4, #0
   d704e:	e7f6      	b.n	d703e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d7050 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7050:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7052:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7054:	6845      	ldr	r5, [r0, #4]
   d7056:	4668      	mov	r0, sp
   d7058:	f7ff fdc2 	bl	d6be0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d705c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d7060:	4299      	cmp	r1, r3
   d7062:	da10      	bge.n	d7086 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d7064:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7066:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d7068:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d706c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7070:	4629      	mov	r1, r5
   d7072:	f105 0008 	add.w	r0, r5, #8
   d7076:	f7ff ffa9 	bl	d6fcc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d707a:	b98d      	cbnz	r5, d70a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d707c:	6863      	ldr	r3, [r4, #4]
   d707e:	3301      	adds	r3, #1
   d7080:	6063      	str	r3, [r4, #4]
    return true;
   d7082:	2601      	movs	r6, #1
   d7084:	e006      	b.n	d7094 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7086:	3101      	adds	r1, #1
   d7088:	4620      	mov	r0, r4
   d708a:	f7ff ffc9 	bl	d7020 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d708e:	4606      	mov	r6, r0
   d7090:	2800      	cmp	r0, #0
   d7092:	d1e7      	bne.n	d7064 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d7094:	a801      	add	r0, sp, #4
   d7096:	f7ff fdad 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d709a:	4630      	mov	r0, r6
   d709c:	b002      	add	sp, #8
   d709e:	bd70      	pop	{r4, r5, r6, pc}
   d70a0:	4669      	mov	r1, sp
   d70a2:	4628      	mov	r0, r5
   d70a4:	f7ff fd9c 	bl	d6be0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d70a8:	e7e8      	b.n	d707c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d70aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d70aa:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d70ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d70ae:	4604      	mov	r4, r0
   d70b0:	460d      	mov	r5, r1
   d70b2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d70b4:	d914      	bls.n	d70e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d70b6:	4290      	cmp	r0, r2
   d70b8:	d213      	bcs.n	d70e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d70ba:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d70be:	1a75      	subs	r5, r6, r1
   d70c0:	f1a1 0708 	sub.w	r7, r1, #8
   d70c4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d70c6:	42b7      	cmp	r7, r6
   d70c8:	d018      	beq.n	d70fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d70ca:	b11c      	cbz	r4, d70d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d70cc:	4631      	mov	r1, r6
   d70ce:	4620      	mov	r0, r4
   d70d0:	f7ff fd78 	bl	d6bc4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d70d4:	1d30      	adds	r0, r6, #4
   d70d6:	f7ff fd8d 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d70da:	3e08      	subs	r6, #8
   d70dc:	3c08      	subs	r4, #8
   d70de:	e7f2      	b.n	d70c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d70e0:	d00c      	beq.n	d70fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d70e2:	42b5      	cmp	r5, r6
   d70e4:	d00a      	beq.n	d70fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d70e6:	b11c      	cbz	r4, d70f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d70e8:	4629      	mov	r1, r5
   d70ea:	4620      	mov	r0, r4
   d70ec:	f7ff fd6a 	bl	d6bc4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d70f0:	1d28      	adds	r0, r5, #4
   d70f2:	f7ff fd7f 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d70f6:	3508      	adds	r5, #8
   d70f8:	3408      	adds	r4, #8
   d70fa:	e7f2      	b.n	d70e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d70fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d70fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d70fe:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d7100:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d7102:	4605      	mov	r5, r0
        if (n > 0) {
   d7104:	dd11      	ble.n	d712a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7106:	00f0      	lsls	r0, r6, #3
   d7108:	f7ff f86a 	bl	d61e0 <malloc>
            if (!d) {
   d710c:	4604      	mov	r4, r0
   d710e:	b158      	cbz	r0, d7128 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7110:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7114:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7118:	f7ff ffc7 	bl	d70aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d711c:	6828      	ldr	r0, [r5, #0]
   d711e:	f7ff f867 	bl	d61f0 <free>
        data_ = d;
   d7122:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7124:	60ae      	str	r6, [r5, #8]
        return true;
   d7126:	2001      	movs	r0, #1
    }
   d7128:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d712a:	2400      	movs	r4, #0
   d712c:	e7f6      	b.n	d711c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d712e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d712e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7130:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7132:	6845      	ldr	r5, [r0, #4]
   d7134:	4668      	mov	r0, sp
   d7136:	f7ff fd45 	bl	d6bc4 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d713a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d713e:	4299      	cmp	r1, r3
   d7140:	da10      	bge.n	d7164 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d7142:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7144:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d7146:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d714a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d714e:	4629      	mov	r1, r5
   d7150:	f105 0008 	add.w	r0, r5, #8
   d7154:	f7ff ffa9 	bl	d70aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7158:	b98d      	cbnz	r5, d717e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d715a:	6863      	ldr	r3, [r4, #4]
   d715c:	3301      	adds	r3, #1
   d715e:	6063      	str	r3, [r4, #4]
    return true;
   d7160:	2601      	movs	r6, #1
   d7162:	e006      	b.n	d7172 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7164:	3101      	adds	r1, #1
   d7166:	4620      	mov	r0, r4
   d7168:	f7ff ffc9 	bl	d70fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d716c:	4606      	mov	r6, r0
   d716e:	2800      	cmp	r0, #0
   d7170:	d1e7      	bne.n	d7142 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d7172:	a801      	add	r0, sp, #4
   d7174:	f7ff fd3e 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7178:	4630      	mov	r0, r6
   d717a:	b002      	add	sp, #8
   d717c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d717e:	4669      	mov	r1, sp
   d7180:	4628      	mov	r0, r5
   d7182:	f7ff fd1f 	bl	d6bc4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7186:	e7e8      	b.n	d715a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d7188 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d7188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d718c:	4616      	mov	r6, r2
   d718e:	b0a1      	sub	sp, #132	; 0x84
   d7190:	4680      	mov	r8, r0
    WiringBleLock lk;
   d7192:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d7194:	460d      	mov	r5, r1
    WiringBleLock lk;
   d7196:	f7ff f8ed 	bl	d6374 <_ZN8particle3ble13WiringBleLockC1Ev>
   d719a:	6834      	ldr	r4, [r6, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d719c:	7923      	ldrb	r3, [r4, #4]
   d719e:	b953      	cbnz	r3, d71b6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d71a0:	4631      	mov	r1, r6
   d71a2:	4640      	mov	r0, r8
   d71a4:	f7ff fd0e 	bl	d6bc4 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d71a8:	a80a      	add	r0, sp, #40	; 0x28
   d71aa:	f7ff f8f1 	bl	d6390 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d71ae:	4640      	mov	r0, r8
   d71b0:	b021      	add	sp, #132	; 0x84
   d71b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d71b6:	682b      	ldr	r3, [r5, #0]
    return data_ + size_;
   d71b8:	e9d3 7303 	ldrd	r7, r3, [r3, #12]
   d71bc:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   d71c0:	9303      	str	r3, [sp, #12]
   d71c2:	f104 0928 	add.w	r9, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d71c6:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d71ca:	9b03      	ldr	r3, [sp, #12]
   d71cc:	429f      	cmp	r7, r3
   d71ce:	d021      	beq.n	d7214 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d71d0:	f8d7 a000 	ldr.w	sl, [r7]
        if (charUuid_ == impl.charUuid_ &&
   d71d4:	4658      	mov	r0, fp
   d71d6:	f10a 0114 	add.w	r1, sl, #20
   d71da:	f7ff f990 	bl	d64fe <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d71de:	b1b8      	cbz	r0, d7210 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d71e0:	f10a 0128 	add.w	r1, sl, #40	; 0x28
   d71e4:	4648      	mov	r0, r9
   d71e6:	f7ff f98a 	bl	d64fe <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d71ea:	b188      	cbz	r0, d7210 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d71ec:	6823      	ldr	r3, [r4, #0]
   d71ee:	f8da 2000 	ldr.w	r2, [sl]
   d71f2:	4053      	eors	r3, r2
   d71f4:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d71f8:	d10a      	bne.n	d7210 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d71fa:	2220      	movs	r2, #32
   d71fc:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d7200:	4a58      	ldr	r2, [pc, #352]	; (d7364 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1dc>)
   d7202:	9200      	str	r2, [sp, #0]
   d7204:	aa15      	add	r2, sp, #84	; 0x54
   d7206:	4958      	ldr	r1, [pc, #352]	; (d7368 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e0>)
   d7208:	2032      	movs	r0, #50	; 0x32
   d720a:	f7fe ff4d 	bl	d60a8 <log_message>
   d720e:	e7c7      	b.n	d71a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d7210:	3708      	adds	r7, #8
   d7212:	e7da      	b.n	d71ca <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d7214:	4648      	mov	r0, r9
   d7216:	f7ff f923 	bl	d6460 <_ZNK8particle7BleUuid7isValidEv>
   d721a:	b918      	cbnz	r0, d7224 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d721c:	4953      	ldr	r1, [pc, #332]	; (d736c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e4>)
   d721e:	4648      	mov	r0, r9
   d7220:	f7ff f960 	bl	d64e4 <_ZN8particle7BleUuidaSEPKh>
   d7224:	682b      	ldr	r3, [r5, #0]
   d7226:	e9d3 7300 	ldrd	r7, r3, [r3]
   d722a:	eb07 0bc3 	add.w	fp, r7, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d722e:	455f      	cmp	r7, fp
   d7230:	46ba      	mov	sl, r7
        BleService svc(charImpl->svcUUID());
   d7232:	4649      	mov	r1, r9
    for (auto& svc : impl()->services()) {
   d7234:	d06a      	beq.n	d730c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x184>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d7236:	f857 0b08 	ldr.w	r0, [r7], #8
   d723a:	f7ff f960 	bl	d64fe <_ZNK8particle7BleUuideqERKS0_>
   d723e:	2800      	cmp	r0, #0
   d7240:	d0f5      	beq.n	d722e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xa6>
        if (!charUuid_.isValid()) {
   d7242:	f104 0714 	add.w	r7, r4, #20
   d7246:	4638      	mov	r0, r7
   d7248:	f7ff f90a 	bl	d6460 <_ZNK8particle7BleUuid7isValidEv>
   d724c:	b968      	cbnz	r0, d726a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xe2>
            defaultUuidCharCount_++;
   d724e:	4b48      	ldr	r3, [pc, #288]	; (d7370 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e8>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7250:	4946      	ldr	r1, [pc, #280]	; (d736c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e4>)
            defaultUuidCharCount_++;
   d7252:	881a      	ldrh	r2, [r3, #0]
   d7254:	3201      	adds	r2, #1
   d7256:	b292      	uxth	r2, r2
   d7258:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d725a:	a815      	add	r0, sp, #84	; 0x54
   d725c:	2301      	movs	r3, #1
   d725e:	f7ff f8f5 	bl	d644c <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d7262:	a915      	add	r1, sp, #84	; 0x54
   d7264:	4638      	mov	r0, r7
   d7266:	f7ff f930 	bl	d64ca <_ZN8particle7BleUuidaSERKS0_>
    hal_ble_char_init_t charInit = {};
   d726a:	2228      	movs	r2, #40	; 0x28
   d726c:	2100      	movs	r1, #0
   d726e:	a816      	add	r0, sp, #88	; 0x58
   d7270:	f002 f9c6 	bl	d9600 <memset>
    charInit.version = BLE_API_VERSION;
   d7274:	4b3f      	ldr	r3, [pc, #252]	; (d7374 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ec>)
   d7276:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d7278:	4639      	mov	r1, r7
   d727a:	a804      	add	r0, sp, #16
   d727c:	f7ff f902 	bl	d6484 <_ZN8particle7BleUuid7halUUIDEv>
   d7280:	ab04      	add	r3, sp, #16
   d7282:	aa18      	add	r2, sp, #96	; 0x60
   d7284:	f10d 0c20 	add.w	ip, sp, #32
   d7288:	6818      	ldr	r0, [r3, #0]
   d728a:	6859      	ldr	r1, [r3, #4]
   d728c:	4617      	mov	r7, r2
   d728e:	c703      	stmia	r7!, {r0, r1}
   d7290:	3308      	adds	r3, #8
   d7292:	4563      	cmp	r3, ip
   d7294:	463a      	mov	r2, r7
   d7296:	d1f7      	bne.n	d7288 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x100>
   d7298:	6818      	ldr	r0, [r3, #0]
   d729a:	6038      	str	r0, [r7, #0]
    charInit.properties = charImpl->properties().value();
   d729c:	7923      	ldrb	r3, [r4, #4]
   d729e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d72a2:	f8da 3000 	ldr.w	r3, [sl]
   d72a6:	8a9b      	ldrh	r3, [r3, #20]
   d72a8:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d72ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d72ae:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d72b0:	4b31      	ldr	r3, [pc, #196]	; (d7378 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f0>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d72b2:	2200      	movs	r2, #0
   d72b4:	1da1      	adds	r1, r4, #6
   d72b6:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d72b8:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d72bc:	f7fe fd04 	bl	d5cc8 <hal_ble_gatt_server_add_characteristic>
   d72c0:	2800      	cmp	r0, #0
   d72c2:	f47f af6d 	bne.w	d71a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    charImpl->local() = true;
   d72c6:	2301      	movs	r3, #1
   d72c8:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d72ca:	682c      	ldr	r4, [r5, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d72cc:	4631      	mov	r1, r6
        return characteristics_;
   d72ce:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d72d0:	a80d      	add	r0, sp, #52	; 0x34
   d72d2:	f7ff fc77 	bl	d6bc4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d72d6:	4620      	mov	r0, r4
   d72d8:	a90d      	add	r1, sp, #52	; 0x34
   d72da:	f7ff ff28 	bl	d712e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d72de:	4604      	mov	r4, r0
   d72e0:	a80e      	add	r0, sp, #56	; 0x38
   d72e2:	f7ff fc87 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d72e6:	2c00      	cmp	r4, #0
   d72e8:	f47f af5a 	bne.w	d71a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d72ec:	2320      	movs	r3, #32
   d72ee:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d72f2:	4b22      	ldr	r3, [pc, #136]	; (d737c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d72f4:	9300      	str	r3, [sp, #0]
   d72f6:	aa0d      	add	r2, sp, #52	; 0x34
   d72f8:	4623      	mov	r3, r4
   d72fa:	e784      	b.n	d7206 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d72fc:	4631      	mov	r1, r6
   d72fe:	4640      	mov	r0, r8
   d7300:	f7ff fc60 	bl	d6bc4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7304:	a80c      	add	r0, sp, #48	; 0x30
   d7306:	f7ff fc75 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d730a:	e74d      	b.n	d71a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d730c:	a80b      	add	r0, sp, #44	; 0x2c
   d730e:	f7ff fae5 	bl	d68dc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d7312:	4649      	mov	r1, r9
   d7314:	a815      	add	r0, sp, #84	; 0x54
   d7316:	f7ff f8b5 	bl	d6484 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d731a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d731c:	2300      	movs	r3, #0
   d731e:	3214      	adds	r2, #20
   d7320:	a915      	add	r1, sp, #84	; 0x54
   d7322:	2001      	movs	r0, #1
   d7324:	f7fe fca8 	bl	d5c78 <hal_ble_gatt_server_add_service>
   d7328:	2800      	cmp	r0, #0
   d732a:	d1e7      	bne.n	d72fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x174>
        return services_;
   d732c:	682f      	ldr	r7, [r5, #0]
   d732e:	a90b      	add	r1, sp, #44	; 0x2c
   d7330:	a80d      	add	r0, sp, #52	; 0x34
   d7332:	f7ff fc55 	bl	d6be0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d7336:	4638      	mov	r0, r7
   d7338:	a90d      	add	r1, sp, #52	; 0x34
   d733a:	f7ff fe89 	bl	d7050 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d733e:	4607      	mov	r7, r0
   d7340:	a80e      	add	r0, sp, #56	; 0x38
   d7342:	f7ff fc57 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7346:	2f00      	cmp	r7, #0
   d7348:	d0d8      	beq.n	d72fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x174>
   d734a:	682a      	ldr	r2, [r5, #0]
    return data_[size_ - 1];
   d734c:	6853      	ldr	r3, [r2, #4]
   d734e:	6812      	ldr	r2, [r2, #0]
   d7350:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d7354:	3b01      	subs	r3, #1
   d7356:	a80c      	add	r0, sp, #48	; 0x30
   d7358:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
   d735c:	f7ff fc4a 	bl	d6bf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7360:	e76f      	b.n	d7242 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xba>
   d7362:	bf00      	nop
   d7364:	000d9c84 	.word	0x000d9c84
   d7368:	000d9be3 	.word	0x000d9be3
   d736c:	000d9d44 	.word	0x000d9d44
   d7370:	2003e748 	.word	0x2003e748
   d7374:	002c0001 	.word	0x002c0001
   d7378:	000d6a49 	.word	0x000d6a49
   d737c:	000d9caf 	.word	0x000d9caf

000d7380 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7380:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7382:	4c06      	ldr	r4, [pc, #24]	; (d739c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7384:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7386:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7388:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d738a:	f7fe fcc5 	bl	d5d18 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d738e:	4620      	mov	r0, r4
   d7390:	4a03      	ldr	r2, [pc, #12]	; (d73a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7392:	4904      	ldr	r1, [pc, #16]	; (d73a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7398:	f000 be88 	b.w	d80ac <__aeabi_atexit>
   d739c:	2003e74c 	.word	0x2003e74c
   d73a0:	2003e40c 	.word	0x2003e40c
   d73a4:	000d62fd 	.word	0x000d62fd

000d73a8 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d73a8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d73aa:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d73ac:	4604      	mov	r4, r0
      if (_M_manager)
   d73ae:	b113      	cbz	r3, d73b6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d73b0:	2203      	movs	r2, #3
   d73b2:	4601      	mov	r1, r0
   d73b4:	4798      	blx	r3
    }
   d73b6:	4620      	mov	r0, r4
   d73b8:	bd10      	pop	{r4, pc}

000d73ba <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d73ba:	2200      	movs	r2, #0
   d73bc:	6840      	ldr	r0, [r0, #4]
   d73be:	4611      	mov	r1, r2
   d73c0:	f7fe bef6 	b.w	d61b0 <network_listening>

000d73c4 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d73c4:	2200      	movs	r2, #0
   d73c6:	6840      	ldr	r0, [r0, #4]
   d73c8:	4611      	mov	r1, r2
   d73ca:	f7fe bf01 	b.w	d61d0 <network_get_listen_timeout>

000d73ce <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d73ce:	6840      	ldr	r0, [r0, #4]
   d73d0:	2200      	movs	r2, #0
   d73d2:	f7fe bef5 	b.w	d61c0 <network_set_listen_timeout>

000d73d6 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d73d6:	6840      	ldr	r0, [r0, #4]
   d73d8:	2200      	movs	r2, #0
   d73da:	f081 0101 	eor.w	r1, r1, #1
   d73de:	f7fe bedf 	b.w	d61a0 <network_listen>

000d73e2 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d73e2:	2300      	movs	r3, #0
   d73e4:	6840      	ldr	r0, [r0, #4]
   d73e6:	461a      	mov	r2, r3
   d73e8:	4619      	mov	r1, r3
   d73ea:	f7fe bed1 	b.w	d6190 <network_off>

000d73ee <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d73ee:	2300      	movs	r3, #0
   d73f0:	6840      	ldr	r0, [r0, #4]
   d73f2:	461a      	mov	r2, r3
   d73f4:	4619      	mov	r1, r3
   d73f6:	f7fe bec3 	b.w	d6180 <network_on>

000d73fa <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d73fa:	2200      	movs	r2, #0
   d73fc:	6840      	ldr	r0, [r0, #4]
   d73fe:	4611      	mov	r1, r2
   d7400:	f7fe beb6 	b.w	d6170 <network_ready>

000d7404 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7404:	2200      	movs	r2, #0
   d7406:	6840      	ldr	r0, [r0, #4]
   d7408:	4611      	mov	r1, r2
   d740a:	f7fe bea1 	b.w	d6150 <network_connecting>

000d740e <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d740e:	6840      	ldr	r0, [r0, #4]
   d7410:	2200      	movs	r2, #0
   d7412:	2102      	movs	r1, #2
   d7414:	f7fe bea4 	b.w	d6160 <network_disconnect>

000d7418 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7418:	2300      	movs	r3, #0
   d741a:	6840      	ldr	r0, [r0, #4]
   d741c:	461a      	mov	r2, r3
   d741e:	f7fe be8f 	b.w	d6140 <network_connect>
	...

000d7424 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7424:	4b02      	ldr	r3, [pc, #8]	; (d7430 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7426:	2203      	movs	r2, #3
   d7428:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d742a:	4a02      	ldr	r2, [pc, #8]	; (d7434 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d742c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d742e:	4770      	bx	lr
   d7430:	2003e754 	.word	0x2003e754
   d7434:	000d9d6c 	.word	0x000d9d6c

000d7438 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7438:	4770      	bx	lr

000d743a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d743a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d743c:	4606      	mov	r6, r0
   d743e:	4615      	mov	r5, r2
   d7440:	460c      	mov	r4, r1
   d7442:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7444:	42bc      	cmp	r4, r7
   d7446:	d006      	beq.n	d7456 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7448:	6833      	ldr	r3, [r6, #0]
   d744a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d744e:	689b      	ldr	r3, [r3, #8]
   d7450:	4630      	mov	r0, r6
   d7452:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7454:	e7f6      	b.n	d7444 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7456:	4628      	mov	r0, r5
   d7458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d745a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d745a:	7c00      	ldrb	r0, [r0, #16]
   d745c:	2200      	movs	r2, #0
   d745e:	f7fe bceb 	b.w	d5e38 <hal_i2c_write>

000d7462 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7462:	7c00      	ldrb	r0, [r0, #16]
   d7464:	2100      	movs	r1, #0
   d7466:	f7fe bcef 	b.w	d5e48 <hal_i2c_available>

000d746a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d746a:	7c00      	ldrb	r0, [r0, #16]
   d746c:	2100      	movs	r1, #0
   d746e:	f7fe bcf3 	b.w	d5e58 <hal_i2c_read>

000d7472 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7472:	7c00      	ldrb	r0, [r0, #16]
   d7474:	2100      	movs	r1, #0
   d7476:	f7fe bcf7 	b.w	d5e68 <hal_i2c_peek>

000d747a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d747a:	7c00      	ldrb	r0, [r0, #16]
   d747c:	2100      	movs	r1, #0
   d747e:	f7fe bcfb 	b.w	d5e78 <hal_i2c_flush>

000d7482 <_ZN7TwoWireD0Ev>:
   d7482:	b510      	push	{r4, lr}
   d7484:	2114      	movs	r1, #20
   d7486:	4604      	mov	r4, r0
   d7488:	f000 fe15 	bl	d80b6 <_ZdlPvj>
   d748c:	4620      	mov	r0, r4
   d748e:	bd10      	pop	{r4, pc}

000d7490 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7490:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7496:	4604      	mov	r4, r0
   d7498:	4608      	mov	r0, r1
   d749a:	2100      	movs	r1, #0
   d749c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d74a0:	4b03      	ldr	r3, [pc, #12]	; (d74b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d74a2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d74a4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d74a6:	4611      	mov	r1, r2
   d74a8:	f7fe fcf6 	bl	d5e98 <hal_i2c_init>
}
   d74ac:	4620      	mov	r0, r4
   d74ae:	bd10      	pop	{r4, pc}
   d74b0:	000d9da0 	.word	0x000d9da0

000d74b4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d74b4:	2300      	movs	r3, #0
   d74b6:	7c00      	ldrb	r0, [r0, #16]
   d74b8:	461a      	mov	r2, r3
   d74ba:	4619      	mov	r1, r3
   d74bc:	f7fe bca4 	b.w	d5e08 <hal_i2c_begin>

000d74c0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d74c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d74c2:	2200      	movs	r2, #0
   d74c4:	2314      	movs	r3, #20
   d74c6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d74ca:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d74ce:	780b      	ldrb	r3, [r1, #0]
   d74d0:	f88d 3008 	strb.w	r3, [sp, #8]
   d74d4:	684b      	ldr	r3, [r1, #4]
   d74d6:	9303      	str	r3, [sp, #12]
   d74d8:	68cb      	ldr	r3, [r1, #12]
   d74da:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d74dc:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d74de:	7a0b      	ldrb	r3, [r1, #8]
   d74e0:	9305      	str	r3, [sp, #20]
   d74e2:	a901      	add	r1, sp, #4
   d74e4:	f7fe fce0 	bl	d5ea8 <hal_i2c_request_ex>
}
   d74e8:	b007      	add	sp, #28
   d74ea:	f85d fb04 	ldr.w	pc, [sp], #4

000d74ee <_ZN7TwoWire11requestFromEhjh>:
{
   d74ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d74f0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d74f2:	f88d 1000 	strb.w	r1, [sp]
   d74f6:	f04f 0164 	mov.w	r1, #100	; 0x64
   d74fa:	9103      	str	r1, [sp, #12]
   d74fc:	bf18      	it	ne
   d74fe:	2301      	movne	r3, #1
   d7500:	4669      	mov	r1, sp
    size_ = size;
   d7502:	9201      	str	r2, [sp, #4]
   d7504:	f88d 3008 	strb.w	r3, [sp, #8]
   d7508:	f7ff ffda 	bl	d74c0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d750c:	b005      	add	sp, #20
   d750e:	f85d fb04 	ldr.w	pc, [sp], #4

000d7512 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d7512:	2301      	movs	r3, #1
   d7514:	f7ff bfeb 	b.w	d74ee <_ZN7TwoWire11requestFromEhjh>

000d7518 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7518:	7c00      	ldrb	r0, [r0, #16]
   d751a:	2200      	movs	r2, #0
   d751c:	f7fe bc7c 	b.w	d5e18 <hal_i2c_begin_transmission>

000d7520 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7520:	7c00      	ldrb	r0, [r0, #16]
   d7522:	2200      	movs	r2, #0
   d7524:	f7fe bc80 	b.w	d5e28 <hal_i2c_end_transmission>

000d7528 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7528:	2101      	movs	r1, #1
   d752a:	f7ff bff9 	b.w	d7520 <_ZN7TwoWire15endTransmissionEh>

000d752e <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d752e:	4700      	bx	r0

000d7530 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7530:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d7534:	2400      	movs	r4, #0
{
   d7536:	461d      	mov	r5, r3
   d7538:	460f      	mov	r7, r1
   d753a:	4690      	mov	r8, r2
   d753c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d753e:	f7fe fc53 	bl	d5de8 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d7542:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7544:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d7548:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d754c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d7550:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d7554:	bfa2      	ittt	ge
   d7556:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d755a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d755e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7560:	4907      	ldr	r1, [pc, #28]	; (d7580 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d7562:	9400      	str	r4, [sp, #0]
   d7564:	4643      	mov	r3, r8
   d7566:	463a      	mov	r2, r7
   d7568:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d756a:	bfa8      	it	ge
   d756c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7570:	f7fe fc32 	bl	d5dd8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d7574:	fab0 f080 	clz	r0, r0
   d7578:	0940      	lsrs	r0, r0, #5
   d757a:	b004      	add	sp, #16
   d757c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7580:	000d752f 	.word	0x000d752f

000d7584 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7584:	4770      	bx	lr

000d7586 <_ZN9IPAddressD0Ev>:
   d7586:	b510      	push	{r4, lr}
   d7588:	2118      	movs	r1, #24
   d758a:	4604      	mov	r4, r0
   d758c:	f000 fd93 	bl	d80b6 <_ZdlPvj>
   d7590:	4620      	mov	r0, r4
   d7592:	bd10      	pop	{r4, pc}

000d7594 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7594:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7596:	7d03      	ldrb	r3, [r0, #20]
   d7598:	2b06      	cmp	r3, #6
{
   d759a:	b08d      	sub	sp, #52	; 0x34
   d759c:	460e      	mov	r6, r1
   d759e:	f100 0704 	add.w	r7, r0, #4
   d75a2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d75a6:	d012      	beq.n	d75ce <_ZNK9IPAddress7printToER5Print+0x3a>
   d75a8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d75ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d75b0:	220a      	movs	r2, #10
   d75b2:	4630      	mov	r0, r6
   d75b4:	f000 f937 	bl	d7826 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d75b8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d75ba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d75bc:	d019      	beq.n	d75f2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d75be:	2c00      	cmp	r4, #0
   d75c0:	d0f4      	beq.n	d75ac <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d75c2:	212e      	movs	r1, #46	; 0x2e
   d75c4:	4630      	mov	r0, r6
   d75c6:	f000 f915 	bl	d77f4 <_ZN5Print5printEc>
   d75ca:	4404      	add	r4, r0
   d75cc:	e7ee      	b.n	d75ac <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d75ce:	232f      	movs	r3, #47	; 0x2f
   d75d0:	466a      	mov	r2, sp
   d75d2:	4639      	mov	r1, r7
   d75d4:	200a      	movs	r0, #10
		buf[0] = 0;
   d75d6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d75da:	f7fe fc6d 	bl	d5eb8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d75de:	4668      	mov	r0, sp
   d75e0:	f002 f84c 	bl	d967c <strlen>
   d75e4:	6833      	ldr	r3, [r6, #0]
   d75e6:	4602      	mov	r2, r0
   d75e8:	68db      	ldr	r3, [r3, #12]
   d75ea:	4669      	mov	r1, sp
   d75ec:	4630      	mov	r0, r6
   d75ee:	4798      	blx	r3
   d75f0:	4604      	mov	r4, r0
    }
    return n;
}
   d75f2:	4620      	mov	r0, r4
   d75f4:	b00d      	add	sp, #52	; 0x34
   d75f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d75f8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d75f8:	b510      	push	{r4, lr}
   d75fa:	4b05      	ldr	r3, [pc, #20]	; (d7610 <_ZN9IPAddressC1Ev+0x18>)
   d75fc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d75fe:	2211      	movs	r2, #17
   d7600:	f840 3b04 	str.w	r3, [r0], #4
   d7604:	2100      	movs	r1, #0
   d7606:	f001 fffb 	bl	d9600 <memset>
}
   d760a:	4620      	mov	r0, r4
   d760c:	bd10      	pop	{r4, pc}
   d760e:	bf00      	nop
   d7610:	000d9dc8 	.word	0x000d9dc8

000d7614 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7614:	4603      	mov	r3, r0
   d7616:	4a07      	ldr	r2, [pc, #28]	; (d7634 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7618:	b510      	push	{r4, lr}
   d761a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d761e:	f101 0210 	add.w	r2, r1, #16
   d7622:	f851 4b04 	ldr.w	r4, [r1], #4
   d7626:	f843 4b04 	str.w	r4, [r3], #4
   d762a:	4291      	cmp	r1, r2
   d762c:	d1f9      	bne.n	d7622 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d762e:	780a      	ldrb	r2, [r1, #0]
   d7630:	701a      	strb	r2, [r3, #0]
}
   d7632:	bd10      	pop	{r4, pc}
   d7634:	000d9dc8 	.word	0x000d9dc8

000d7638 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7638:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d763a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d763e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7642:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7646:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d764a:	2304      	movs	r3, #4
   d764c:	6041      	str	r1, [r0, #4]
   d764e:	7503      	strb	r3, [r0, #20]
}
   d7650:	bd10      	pop	{r4, pc}

000d7652 <_ZN9IPAddressaSEPKh>:
{
   d7652:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7654:	78cb      	ldrb	r3, [r1, #3]
   d7656:	9300      	str	r3, [sp, #0]
   d7658:	788b      	ldrb	r3, [r1, #2]
   d765a:	784a      	ldrb	r2, [r1, #1]
   d765c:	7809      	ldrb	r1, [r1, #0]
   d765e:	f7ff ffeb 	bl	d7638 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7662:	b002      	add	sp, #8
   d7664:	bd10      	pop	{r4, pc}
	...

000d7668 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7668:	4b01      	ldr	r3, [pc, #4]	; (d7670 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d766a:	4a02      	ldr	r2, [pc, #8]	; (d7674 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d766c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d766e:	4770      	bx	lr
   d7670:	2003e75c 	.word	0x2003e75c
   d7674:	000d9dd4 	.word	0x000d9dd4

000d7678 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7678:	2300      	movs	r3, #0
   d767a:	6840      	ldr	r0, [r0, #4]
   d767c:	461a      	mov	r2, r3
   d767e:	f7fe bd5f 	b.w	d6140 <network_connect>

000d7682 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7682:	6840      	ldr	r0, [r0, #4]
   d7684:	2200      	movs	r2, #0
   d7686:	2102      	movs	r1, #2
   d7688:	f7fe bd6a 	b.w	d6160 <network_disconnect>

000d768c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d768c:	2200      	movs	r2, #0
   d768e:	6840      	ldr	r0, [r0, #4]
   d7690:	4611      	mov	r1, r2
   d7692:	f7fe bd5d 	b.w	d6150 <network_connecting>

000d7696 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7696:	2200      	movs	r2, #0
   d7698:	6840      	ldr	r0, [r0, #4]
   d769a:	4611      	mov	r1, r2
   d769c:	f7fe bd68 	b.w	d6170 <network_ready>

000d76a0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d76a0:	2300      	movs	r3, #0
   d76a2:	6840      	ldr	r0, [r0, #4]
   d76a4:	461a      	mov	r2, r3
   d76a6:	4619      	mov	r1, r3
   d76a8:	f7fe bd6a 	b.w	d6180 <network_on>

000d76ac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d76ac:	2300      	movs	r3, #0
   d76ae:	6840      	ldr	r0, [r0, #4]
   d76b0:	461a      	mov	r2, r3
   d76b2:	4619      	mov	r1, r3
   d76b4:	f7fe bd6c 	b.w	d6190 <network_off>

000d76b8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d76b8:	6840      	ldr	r0, [r0, #4]
   d76ba:	2200      	movs	r2, #0
   d76bc:	f081 0101 	eor.w	r1, r1, #1
   d76c0:	f7fe bd6e 	b.w	d61a0 <network_listen>

000d76c4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d76c4:	6840      	ldr	r0, [r0, #4]
   d76c6:	2200      	movs	r2, #0
   d76c8:	f7fe bd7a 	b.w	d61c0 <network_set_listen_timeout>

000d76cc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d76cc:	2200      	movs	r2, #0
   d76ce:	6840      	ldr	r0, [r0, #4]
   d76d0:	4611      	mov	r1, r2
   d76d2:	f7fe bd7d 	b.w	d61d0 <network_get_listen_timeout>

000d76d6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d76d6:	2200      	movs	r2, #0
   d76d8:	6840      	ldr	r0, [r0, #4]
   d76da:	4611      	mov	r1, r2
   d76dc:	f7fe bd68 	b.w	d61b0 <network_listening>

000d76e0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d76e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d76e4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d76e6:	b095      	sub	sp, #84	; 0x54
   d76e8:	4616      	mov	r6, r2
   d76ea:	460d      	mov	r5, r1
   d76ec:	4607      	mov	r7, r0
    IPAddress addr;
   d76ee:	f7ff ff83 	bl	d75f8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d76f2:	4621      	mov	r1, r4
   d76f4:	2218      	movs	r2, #24
   d76f6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d76f8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d76fa:	f001 ff81 	bl	d9600 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d76fe:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7700:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7704:	4621      	mov	r1, r4
   d7706:	466b      	mov	r3, sp
   d7708:	aa0c      	add	r2, sp, #48	; 0x30
   d770a:	4630      	mov	r0, r6
   d770c:	f7fe fbe4 	bl	d5ed8 <netdb_getaddrinfo>
    if (!r) {
   d7710:	4604      	mov	r4, r0
   d7712:	2800      	cmp	r0, #0
   d7714:	d146      	bne.n	d77a4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7716:	4602      	mov	r2, r0
   d7718:	2101      	movs	r1, #1
   d771a:	6868      	ldr	r0, [r5, #4]
   d771c:	f7fe fd28 	bl	d6170 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7720:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7722:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7724:	4622      	mov	r2, r4
   d7726:	6868      	ldr	r0, [r5, #4]
   d7728:	f7fe fd22 	bl	d6170 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d772c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d772e:	4681      	mov	r9, r0
        bool ok = false;
   d7730:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7732:	2e00      	cmp	r6, #0
   d7734:	d036      	beq.n	d77a4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7736:	2900      	cmp	r1, #0
   d7738:	d134      	bne.n	d77a4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d773a:	6873      	ldr	r3, [r6, #4]
   d773c:	2b02      	cmp	r3, #2
   d773e:	d003      	beq.n	d7748 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7740:	2b0a      	cmp	r3, #10
   d7742:	d00b      	beq.n	d775c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7744:	69f6      	ldr	r6, [r6, #28]
   d7746:	e7f4      	b.n	d7732 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7748:	f1b8 0f00 	cmp.w	r8, #0
   d774c:	d004      	beq.n	d7758 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d774e:	6971      	ldr	r1, [r6, #20]
   d7750:	4638      	mov	r0, r7
   d7752:	3104      	adds	r1, #4
   d7754:	f7ff ff7d 	bl	d7652 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7758:	4641      	mov	r1, r8
   d775a:	e7f3      	b.n	d7744 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d775c:	f1b9 0f00 	cmp.w	r9, #0
   d7760:	d101      	bne.n	d7766 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7762:	4649      	mov	r1, r9
   d7764:	e7ee      	b.n	d7744 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7766:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7768:	2210      	movs	r2, #16
   d776a:	a801      	add	r0, sp, #4
   d776c:	f001 ff48 	bl	d9600 <memset>
                    a.v = 6;
   d7770:	2306      	movs	r3, #6
   d7772:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7776:	ad01      	add	r5, sp, #4
   d7778:	f104 0308 	add.w	r3, r4, #8
   d777c:	3418      	adds	r4, #24
   d777e:	6818      	ldr	r0, [r3, #0]
   d7780:	6859      	ldr	r1, [r3, #4]
   d7782:	462a      	mov	r2, r5
   d7784:	c203      	stmia	r2!, {r0, r1}
   d7786:	3308      	adds	r3, #8
   d7788:	42a3      	cmp	r3, r4
   d778a:	4615      	mov	r5, r2
   d778c:	d1f7      	bne.n	d777e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d778e:	a901      	add	r1, sp, #4
   d7790:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7792:	ad07      	add	r5, sp, #28
   d7794:	f7ff ff3e 	bl	d7614 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d779a:	1d3c      	adds	r4, r7, #4
   d779c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d779e:	682b      	ldr	r3, [r5, #0]
   d77a0:	7023      	strb	r3, [r4, #0]
   d77a2:	e7de      	b.n	d7762 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d77a4:	9800      	ldr	r0, [sp, #0]
   d77a6:	f7fe fb8f 	bl	d5ec8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d77aa:	4638      	mov	r0, r7
   d77ac:	b015      	add	sp, #84	; 0x54
   d77ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d77b4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d77b4:	4b02      	ldr	r3, [pc, #8]	; (d77c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d77b6:	4a03      	ldr	r2, [pc, #12]	; (d77c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d77b8:	601a      	str	r2, [r3, #0]
   d77ba:	2200      	movs	r2, #0
   d77bc:	605a      	str	r2, [r3, #4]

} // spark
   d77be:	4770      	bx	lr
   d77c0:	2003e760 	.word	0x2003e760
   d77c4:	000d9de0 	.word	0x000d9de0

000d77c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d77c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d77ca:	4606      	mov	r6, r0
   d77cc:	460d      	mov	r5, r1
  size_t n = 0;
   d77ce:	188f      	adds	r7, r1, r2
   d77d0:	2400      	movs	r4, #0
  while (size--) {
   d77d2:	42bd      	cmp	r5, r7
   d77d4:	d00c      	beq.n	d77f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d77d6:	6833      	ldr	r3, [r6, #0]
   d77d8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d77dc:	689b      	ldr	r3, [r3, #8]
   d77de:	4630      	mov	r0, r6
   d77e0:	4798      	blx	r3
     if (chunk>=0)
   d77e2:	1e03      	subs	r3, r0, #0
   d77e4:	db01      	blt.n	d77ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d77e6:	441c      	add	r4, r3
  while (size--) {
   d77e8:	e7f3      	b.n	d77d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d77ea:	2c00      	cmp	r4, #0
   d77ec:	bf08      	it	eq
   d77ee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d77f0:	4620      	mov	r0, r4
   d77f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d77f4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d77f4:	6803      	ldr	r3, [r0, #0]
   d77f6:	689b      	ldr	r3, [r3, #8]
   d77f8:	4718      	bx	r3

000d77fa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d77fa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d77fc:	210d      	movs	r1, #13
{
   d77fe:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7800:	f7ff fff8 	bl	d77f4 <_ZN5Print5printEc>
  n += print('\n');
   d7804:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7806:	4604      	mov	r4, r0
  n += print('\n');
   d7808:	4628      	mov	r0, r5
   d780a:	f7ff fff3 	bl	d77f4 <_ZN5Print5printEc>
  return n;
}
   d780e:	4420      	add	r0, r4
   d7810:	bd38      	pop	{r3, r4, r5, pc}

000d7812 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7812:	b538      	push	{r3, r4, r5, lr}
   d7814:	4605      	mov	r5, r0
  return write(str);
   d7816:	f7fc fc54 	bl	d40c2 <_ZN5Print5writeEPKc>
   d781a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d781c:	4628      	mov	r0, r5
   d781e:	f7ff ffec 	bl	d77fa <_ZN5Print7printlnEv>
  return n;
}
   d7822:	4420      	add	r0, r4
   d7824:	bd38      	pop	{r3, r4, r5, pc}

000d7826 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7826:	b530      	push	{r4, r5, lr}
   d7828:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d782a:	2300      	movs	r3, #0
   d782c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7830:	2a01      	cmp	r2, #1
   d7832:	bf98      	it	ls
   d7834:	220a      	movls	r2, #10
   d7836:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7838:	460d      	mov	r5, r1
   d783a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d783e:	fb01 5312 	mls	r3, r1, r2, r5
   d7842:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7846:	2b09      	cmp	r3, #9
   d7848:	bf94      	ite	ls
   d784a:	3330      	addls	r3, #48	; 0x30
   d784c:	3337      	addhi	r3, #55	; 0x37
   d784e:	b2db      	uxtb	r3, r3
  } while(n);
   d7850:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7852:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7856:	d9ef      	bls.n	d7838 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7858:	4621      	mov	r1, r4
   d785a:	f7fc fc32 	bl	d40c2 <_ZN5Print5writeEPKc>
}
   d785e:	b00b      	add	sp, #44	; 0x2c
   d7860:	bd30      	pop	{r4, r5, pc}

000d7862 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7862:	b510      	push	{r4, lr}
   d7864:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7866:	f7ff fd9f 	bl	d73a8 <_ZNSt14_Function_baseD1Ev>
   d786a:	4620      	mov	r0, r4
   d786c:	bd10      	pop	{r4, pc}
	...

000d7870 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7870:	4803      	ldr	r0, [pc, #12]	; (d7880 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7872:	4a04      	ldr	r2, [pc, #16]	; (d7884 <_GLOBAL__sub_I_RGB+0x14>)
   d7874:	4904      	ldr	r1, [pc, #16]	; (d7888 <_GLOBAL__sub_I_RGB+0x18>)
   d7876:	2300      	movs	r3, #0
   d7878:	6083      	str	r3, [r0, #8]
   d787a:	f000 bc17 	b.w	d80ac <__aeabi_atexit>
   d787e:	bf00      	nop
   d7880:	2003e768 	.word	0x2003e768
   d7884:	2003e40c 	.word	0x2003e40c
   d7888:	000d7863 	.word	0x000d7863

000d788c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d788c:	2100      	movs	r1, #0
   d788e:	f7fe bb6b 	b.w	d5f68 <hal_spi_acquire>

000d7892 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d7892:	2100      	movs	r1, #0
   d7894:	f7fe bb70 	b.w	d5f78 <hal_spi_release>

000d7898 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7898:	b510      	push	{r4, lr}
   d789a:	4604      	mov	r4, r0
   d789c:	4608      	mov	r0, r1
{
    _spi = spi;
   d789e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d78a0:	f7fe fb4a 	bl	d5f38 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d78a4:	2300      	movs	r3, #0
   d78a6:	6063      	str	r3, [r4, #4]
}
   d78a8:	4620      	mov	r0, r4
   d78aa:	bd10      	pop	{r4, pc}

000d78ac <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d78ac:	b510      	push	{r4, lr}
   d78ae:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d78b0:	7800      	ldrb	r0, [r0, #0]
   d78b2:	f7ff ffeb 	bl	d788c <_ZN8SPIClass4lockEv.isra.0>
   d78b6:	b948      	cbnz	r0, d78cc <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d78b8:	7820      	ldrb	r0, [r4, #0]
   d78ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d78be:	f7fe fb13 	bl	d5ee8 <hal_spi_begin>
        unlock();
   d78c2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d78c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d78c8:	f7ff bfe3 	b.w	d7892 <_ZN8SPIClass6unlockEv.isra.0>
}
   d78cc:	bd10      	pop	{r4, pc}

000d78ce <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d78ce:	b513      	push	{r0, r1, r4, lr}
   d78d0:	4604      	mov	r4, r0
    if (!lock())
   d78d2:	7800      	ldrb	r0, [r0, #0]
{
   d78d4:	9101      	str	r1, [sp, #4]
    if (!lock())
   d78d6:	f7ff ffd9 	bl	d788c <_ZN8SPIClass4lockEv.isra.0>
   d78da:	9901      	ldr	r1, [sp, #4]
   d78dc:	b940      	cbnz	r0, d78f0 <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d78de:	7820      	ldrb	r0, [r4, #0]
   d78e0:	f7fe fb0a 	bl	d5ef8 <hal_spi_set_bit_order>
        unlock();
   d78e4:	7820      	ldrb	r0, [r4, #0]
    }
}
   d78e6:	b002      	add	sp, #8
   d78e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d78ec:	f7ff bfd1 	b.w	d7892 <_ZN8SPIClass6unlockEv.isra.0>
}
   d78f0:	b002      	add	sp, #8
   d78f2:	bd10      	pop	{r4, pc}

000d78f4 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d78f4:	b513      	push	{r0, r1, r4, lr}
   d78f6:	4604      	mov	r4, r0
    if (!lock())
   d78f8:	7800      	ldrb	r0, [r0, #0]
{
   d78fa:	9101      	str	r1, [sp, #4]
    if (!lock())
   d78fc:	f7ff ffc6 	bl	d788c <_ZN8SPIClass4lockEv.isra.0>
   d7900:	9901      	ldr	r1, [sp, #4]
   d7902:	b940      	cbnz	r0, d7916 <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d7904:	7820      	ldrb	r0, [r4, #0]
   d7906:	f7fe faff 	bl	d5f08 <hal_spi_set_data_mode>
        unlock();
   d790a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d790c:	b002      	add	sp, #8
   d790e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d7912:	f7ff bfbe 	b.w	d7892 <_ZN8SPIClass6unlockEv.isra.0>
}
   d7916:	b002      	add	sp, #8
   d7918:	bd10      	pop	{r4, pc}
	...

000d791c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d791c:	0840      	lsrs	r0, r0, #1
{
   d791e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d7920:	6018      	str	r0, [r3, #0]
   d7922:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d7924:	6818      	ldr	r0, [r3, #0]
   d7926:	4288      	cmp	r0, r1
   d7928:	b2e5      	uxtb	r5, r4
   d792a:	d906      	bls.n	d793a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d792c:	3401      	adds	r4, #1
   d792e:	2c08      	cmp	r4, #8
   d7930:	d002      	beq.n	d7938 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d7932:	0840      	lsrs	r0, r0, #1
   d7934:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d7936:	e7f5      	b.n	d7924 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d7938:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d793a:	4b02      	ldr	r3, [pc, #8]	; (d7944 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d793c:	5d5b      	ldrb	r3, [r3, r5]
   d793e:	7013      	strb	r3, [r2, #0]
}
   d7940:	bd30      	pop	{r4, r5, pc}
   d7942:	bf00      	nop
   d7944:	000d9e0c 	.word	0x000d9e0c

000d7948 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d7948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d794c:	b088      	sub	sp, #32
    unsigned clock = 0;
   d794e:	2300      	movs	r3, #0
{
   d7950:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d7952:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d7954:	9302      	str	r3, [sp, #8]
{
   d7956:	460e      	mov	r6, r1
   d7958:	4617      	mov	r7, r2
    if (!lock())
   d795a:	f7ff ff97 	bl	d788c <_ZN8SPIClass4lockEv.isra.0>
   d795e:	4605      	mov	r5, r0
   d7960:	bb00      	cbnz	r0, d79a4 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d7962:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d7966:	4601      	mov	r1, r0
   d7968:	2214      	movs	r2, #20
   d796a:	a803      	add	r0, sp, #12
   d796c:	f001 fe48 	bl	d9600 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7970:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d7972:	462a      	mov	r2, r5
   d7974:	a903      	add	r1, sp, #12
   d7976:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d7978:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d797c:	f7fe faec 	bl	d5f58 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d7980:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d7982:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d7986:	ab02      	add	r3, sp, #8
   d7988:	f10d 0207 	add.w	r2, sp, #7
   d798c:	fb07 f106 	mul.w	r1, r7, r6
   d7990:	f7ff ffc4 	bl	d791c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d7994:	7820      	ldrb	r0, [r4, #0]
   d7996:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d799a:	f7fe fabd 	bl	d5f18 <hal_spi_set_clock_divider>
        unlock();
   d799e:	7820      	ldrb	r0, [r4, #0]
   d79a0:	f7ff ff77 	bl	d7892 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d79a4:	9802      	ldr	r0, [sp, #8]
   d79a6:	b008      	add	sp, #32
   d79a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d79ac <_ZN8SPIClass15setClockDividerEh>:
{
   d79ac:	b538      	push	{r3, r4, r5, lr}
   d79ae:	4604      	mov	r4, r0
    if (!lock())
   d79b0:	7800      	ldrb	r0, [r0, #0]
{
   d79b2:	460d      	mov	r5, r1
    if (!lock())
   d79b4:	f7ff ff6a 	bl	d788c <_ZN8SPIClass4lockEv.isra.0>
   d79b8:	4603      	mov	r3, r0
   d79ba:	b9d0      	cbnz	r0, d79f2 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   d79bc:	6861      	ldr	r1, [r4, #4]
   d79be:	b199      	cbz	r1, d79e8 <_ZN8SPIClass15setClockDividerEh+0x3c>
   d79c0:	4a0c      	ldr	r2, [pc, #48]	; (d79f4 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   d79c2:	f812 0b01 	ldrb.w	r0, [r2], #1
   d79c6:	4285      	cmp	r5, r0
   d79c8:	d002      	beq.n	d79d0 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   d79ca:	3301      	adds	r3, #1
   d79cc:	2b08      	cmp	r3, #8
   d79ce:	d1f8      	bne.n	d79c2 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   d79d0:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   d79d2:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   d79d4:	2201      	movs	r2, #1
   d79d6:	40d9      	lsrs	r1, r3
   d79d8:	4620      	mov	r0, r4
   d79da:	f7ff ffb5 	bl	d7948 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   d79de:	7820      	ldrb	r0, [r4, #0]
}
   d79e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   d79e4:	f7ff bf55 	b.w	d7892 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   d79e8:	7820      	ldrb	r0, [r4, #0]
   d79ea:	4629      	mov	r1, r5
   d79ec:	f7fe fa94 	bl	d5f18 <hal_spi_set_clock_divider>
   d79f0:	e7f5      	b.n	d79de <_ZN8SPIClass15setClockDividerEh+0x32>
}
   d79f2:	bd38      	pop	{r3, r4, r5, pc}
   d79f4:	000d9e0c 	.word	0x000d9e0c

000d79f8 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d79f8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d79fa:	7800      	ldrb	r0, [r0, #0]
   d79fc:	f7fe fa94 	bl	d5f28 <hal_spi_transfer>
}
   d7a00:	b2c0      	uxtb	r0, r0
   d7a02:	bd08      	pop	{r3, pc}

000d7a04 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7a04:	b510      	push	{r4, lr}
   d7a06:	4604      	mov	r4, r0
{
	free(buffer);
   d7a08:	6800      	ldr	r0, [r0, #0]
   d7a0a:	f7fe fbf1 	bl	d61f0 <free>
}
   d7a0e:	4620      	mov	r0, r4
   d7a10:	bd10      	pop	{r4, pc}

000d7a12 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7a12:	b510      	push	{r4, lr}
   d7a14:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7a16:	6800      	ldr	r0, [r0, #0]
   d7a18:	b108      	cbz	r0, d7a1e <_ZN6String10invalidateEv+0xc>
   d7a1a:	f7fe fbe9 	bl	d61f0 <free>
	buffer = NULL;
   d7a1e:	2300      	movs	r3, #0
	capacity = len = 0;
   d7a20:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d7a24:	6023      	str	r3, [r4, #0]
}
   d7a26:	bd10      	pop	{r4, pc}

000d7a28 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7a28:	b538      	push	{r3, r4, r5, lr}
   d7a2a:	4604      	mov	r4, r0
   d7a2c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7a2e:	6800      	ldr	r0, [r0, #0]
   d7a30:	3101      	adds	r1, #1
   d7a32:	f7fe fbe5 	bl	d6200 <realloc>
	if (newbuffer) {
   d7a36:	b110      	cbz	r0, d7a3e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7a38:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d7a3c:	2001      	movs	r0, #1
	}
	return 0;
}
   d7a3e:	bd38      	pop	{r3, r4, r5, pc}

000d7a40 <_ZN6String7reserveEj>:
{
   d7a40:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7a42:	6803      	ldr	r3, [r0, #0]
{
   d7a44:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7a46:	b123      	cbz	r3, d7a52 <_ZN6String7reserveEj+0x12>
   d7a48:	6843      	ldr	r3, [r0, #4]
   d7a4a:	428b      	cmp	r3, r1
   d7a4c:	d301      	bcc.n	d7a52 <_ZN6String7reserveEj+0x12>
   d7a4e:	2001      	movs	r0, #1
}
   d7a50:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d7a52:	4620      	mov	r0, r4
   d7a54:	f7ff ffe8 	bl	d7a28 <_ZN6String12changeBufferEj>
   d7a58:	2800      	cmp	r0, #0
   d7a5a:	d0f9      	beq.n	d7a50 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d7a5c:	68a3      	ldr	r3, [r4, #8]
   d7a5e:	2b00      	cmp	r3, #0
   d7a60:	d1f5      	bne.n	d7a4e <_ZN6String7reserveEj+0xe>
   d7a62:	6822      	ldr	r2, [r4, #0]
   d7a64:	7013      	strb	r3, [r2, #0]
   d7a66:	e7f2      	b.n	d7a4e <_ZN6String7reserveEj+0xe>

000d7a68 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7a6a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d7a6c:	4611      	mov	r1, r2
   d7a6e:	9201      	str	r2, [sp, #4]
{
   d7a70:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d7a72:	f7ff ffe5 	bl	d7a40 <_ZN6String7reserveEj>
   d7a76:	9a01      	ldr	r2, [sp, #4]
   d7a78:	b928      	cbnz	r0, d7a86 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d7a7a:	4620      	mov	r0, r4
   d7a7c:	f7ff ffc9 	bl	d7a12 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d7a80:	4620      	mov	r0, r4
   d7a82:	b003      	add	sp, #12
   d7a84:	bd30      	pop	{r4, r5, pc}
	len = length;
   d7a86:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d7a88:	4629      	mov	r1, r5
   d7a8a:	6820      	ldr	r0, [r4, #0]
   d7a8c:	f001 fd90 	bl	d95b0 <memcpy>
	buffer[len] = 0;
   d7a90:	6822      	ldr	r2, [r4, #0]
   d7a92:	68a3      	ldr	r3, [r4, #8]
   d7a94:	2100      	movs	r1, #0
   d7a96:	54d1      	strb	r1, [r2, r3]
	return *this;
   d7a98:	e7f2      	b.n	d7a80 <_ZN6String4copyEPKcj+0x18>

000d7a9a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d7a9a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d7a9c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d7a9e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d7aa2:	4604      	mov	r4, r0
	len = 0;
   d7aa4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7aa6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d7aa8:	b141      	cbz	r1, d7abc <_ZN6StringC1EPKc+0x22>
   d7aaa:	4608      	mov	r0, r1
   d7aac:	9101      	str	r1, [sp, #4]
   d7aae:	f001 fde5 	bl	d967c <strlen>
   d7ab2:	9901      	ldr	r1, [sp, #4]
   d7ab4:	4602      	mov	r2, r0
   d7ab6:	4620      	mov	r0, r4
   d7ab8:	f7ff ffd6 	bl	d7a68 <_ZN6String4copyEPKcj>
}
   d7abc:	4620      	mov	r0, r4
   d7abe:	b002      	add	sp, #8
   d7ac0:	bd10      	pop	{r4, pc}

000d7ac2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7ac2:	b513      	push	{r0, r1, r4, lr}
   d7ac4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7ac6:	b159      	cbz	r1, d7ae0 <_ZN6StringaSEPKc+0x1e>
   d7ac8:	4608      	mov	r0, r1
   d7aca:	9101      	str	r1, [sp, #4]
   d7acc:	f001 fdd6 	bl	d967c <strlen>
   d7ad0:	9901      	ldr	r1, [sp, #4]
   d7ad2:	4602      	mov	r2, r0
   d7ad4:	4620      	mov	r0, r4
   d7ad6:	f7ff ffc7 	bl	d7a68 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7ada:	4620      	mov	r0, r4
   d7adc:	b002      	add	sp, #8
   d7ade:	bd10      	pop	{r4, pc}
	else invalidate();
   d7ae0:	f7ff ff97 	bl	d7a12 <_ZN6String10invalidateEv>
   d7ae4:	e7f9      	b.n	d7ada <_ZN6StringaSEPKc+0x18>
	...

000d7ae8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7ae8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7aea:	4b09      	ldr	r3, [pc, #36]	; (d7b10 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7aec:	4c09      	ldr	r4, [pc, #36]	; (d7b14 <_GLOBAL__sub_I_System+0x2c>)
   d7aee:	2202      	movs	r2, #2
   d7af0:	2000      	movs	r0, #0
   d7af2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d7af4:	4b08      	ldr	r3, [pc, #32]	; (d7b18 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d7af6:	6020      	str	r0, [r4, #0]
   d7af8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d7afa:	71a0      	strb	r0, [r4, #6]
   d7afc:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7afe:	f7fe fadb 	bl	d60b8 <set_system_mode>
SystemClass System;
   d7b02:	4620      	mov	r0, r4
   d7b04:	4a05      	ldr	r2, [pc, #20]	; (d7b1c <_GLOBAL__sub_I_System+0x34>)
   d7b06:	4906      	ldr	r1, [pc, #24]	; (d7b20 <_GLOBAL__sub_I_System+0x38>)
   d7b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d7b0c:	f000 bace 	b.w	d80ac <__aeabi_atexit>
   d7b10:	2003e784 	.word	0x2003e784
   d7b14:	2003e778 	.word	0x2003e778
   d7b18:	ffff0000 	.word	0xffff0000
   d7b1c:	2003e40c 	.word	0x2003e40c
   d7b20:	000d40b3 	.word	0x000d40b3

000d7b24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7b24:	4b02      	ldr	r3, [pc, #8]	; (d7b30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7b26:	681a      	ldr	r2, [r3, #0]
   d7b28:	4b02      	ldr	r3, [pc, #8]	; (d7b34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7b2a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7b2c:	4770      	bx	lr
   d7b2e:	bf00      	nop
   d7b30:	2003e3a4 	.word	0x2003e3a4
   d7b34:	2003e788 	.word	0x2003e788

000d7b38 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7b38:	4770      	bx	lr

000d7b3a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7b3a:	7441      	strb	r1, [r0, #17]
}
   d7b3c:	4770      	bx	lr

000d7b3e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7b3e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7b40:	7c00      	ldrb	r0, [r0, #16]
   d7b42:	f7fe fa59 	bl	d5ff8 <hal_usart_available_data_for_write>
}
   d7b46:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b4a:	bd08      	pop	{r3, pc}

000d7b4c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7b4c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7b4e:	7c00      	ldrb	r0, [r0, #16]
   d7b50:	f7fe fa2a 	bl	d5fa8 <hal_usart_available>
}
   d7b54:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b58:	bd08      	pop	{r3, pc}

000d7b5a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7b5a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7b5c:	7c00      	ldrb	r0, [r0, #16]
   d7b5e:	f7fe fa33 	bl	d5fc8 <hal_usart_peek>
}
   d7b62:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7b66:	bd08      	pop	{r3, pc}

000d7b68 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7b68:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7b6a:	7c00      	ldrb	r0, [r0, #16]
   d7b6c:	f7fe fa24 	bl	d5fb8 <hal_usart_read>
}
   d7b70:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7b74:	bd08      	pop	{r3, pc}

000d7b76 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7b76:	7c00      	ldrb	r0, [r0, #16]
   d7b78:	f7fe ba2e 	b.w	d5fd8 <hal_usart_flush>

000d7b7c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7b7e:	7c45      	ldrb	r5, [r0, #17]
{
   d7b80:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7b82:	b12d      	cbz	r5, d7b90 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7b84:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7b86:	b003      	add	sp, #12
   d7b88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7b8c:	f7fe ba04 	b.w	d5f98 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7b90:	7c00      	ldrb	r0, [r0, #16]
   d7b92:	9101      	str	r1, [sp, #4]
   d7b94:	f7fe fa30 	bl	d5ff8 <hal_usart_available_data_for_write>
   d7b98:	2800      	cmp	r0, #0
   d7b9a:	9901      	ldr	r1, [sp, #4]
   d7b9c:	dcf2      	bgt.n	d7b84 <_ZN11USARTSerial5writeEh+0x8>
}
   d7b9e:	4628      	mov	r0, r5
   d7ba0:	b003      	add	sp, #12
   d7ba2:	bd30      	pop	{r4, r5, pc}

000d7ba4 <_ZN11USARTSerialD0Ev>:
   d7ba4:	b510      	push	{r4, lr}
   d7ba6:	2114      	movs	r1, #20
   d7ba8:	4604      	mov	r4, r0
   d7baa:	f000 fa84 	bl	d80b6 <_ZdlPvj>
   d7bae:	4620      	mov	r0, r4
   d7bb0:	bd10      	pop	{r4, pc}
	...

000d7bb4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7bb4:	b510      	push	{r4, lr}
   d7bb6:	f04f 0c00 	mov.w	ip, #0
   d7bba:	4604      	mov	r4, r0
   d7bbc:	4608      	mov	r0, r1
   d7bbe:	4611      	mov	r1, r2
   d7bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7bc4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7bc8:	4a04      	ldr	r2, [pc, #16]	; (d7bdc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7bca:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7bcc:	2201      	movs	r2, #1
  _serial = serial;
   d7bce:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7bd0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7bd2:	461a      	mov	r2, r3
   d7bd4:	f7fe f9d8 	bl	d5f88 <hal_usart_init>
}
   d7bd8:	4620      	mov	r0, r4
   d7bda:	bd10      	pop	{r4, pc}
   d7bdc:	000d9e38 	.word	0x000d9e38

000d7be0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d7be0:	7c00      	ldrb	r0, [r0, #16]
   d7be2:	2300      	movs	r3, #0
   d7be4:	f7fe ba10 	b.w	d6008 <hal_usart_begin_config>

000d7be8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d7be8:	2200      	movs	r2, #0
   d7bea:	f7ff bff9 	b.w	d7be0 <_ZN11USARTSerial5beginEmm>

000d7bee <_ZN11USARTSerial5writeEt>:

size_t USARTSerial::write(uint16_t c)
{
  return hal_usart_write_nine_bits(_serial, c);
   d7bee:	7c00      	ldrb	r0, [r0, #16]
   d7bf0:	f7fe ba12 	b.w	d6018 <hal_usart_write_nine_bits>

000d7bf4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d7bf6:	4c1b      	ldr	r4, [pc, #108]	; (d7c64 <_Z22__fetch_global_Serial1v+0x70>)
   d7bf8:	6826      	ldr	r6, [r4, #0]
   d7bfa:	b94e      	cbnz	r6, d7c10 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d7bfc:	2084      	movs	r0, #132	; 0x84
   d7bfe:	f7fc fa4a 	bl	d4096 <_Znwj>
   d7c02:	4605      	mov	r5, r0
   d7c04:	b118      	cbz	r0, d7c0e <_Z22__fetch_global_Serial1v+0x1a>
   d7c06:	2284      	movs	r2, #132	; 0x84
   d7c08:	4631      	mov	r1, r6
   d7c0a:	f001 fcf9 	bl	d9600 <memset>
   d7c0e:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d7c10:	4d15      	ldr	r5, [pc, #84]	; (d7c68 <_Z22__fetch_global_Serial1v+0x74>)
   d7c12:	682f      	ldr	r7, [r5, #0]
   d7c14:	b94f      	cbnz	r7, d7c2a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d7c16:	2084      	movs	r0, #132	; 0x84
   d7c18:	f7fc fa3d 	bl	d4096 <_Znwj>
   d7c1c:	4606      	mov	r6, r0
   d7c1e:	b118      	cbz	r0, d7c28 <_Z22__fetch_global_Serial1v+0x34>
   d7c20:	2284      	movs	r2, #132	; 0x84
   d7c22:	4639      	mov	r1, r7
   d7c24:	f001 fcec 	bl	d9600 <memset>
   d7c28:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d7c2a:	4e10      	ldr	r6, [pc, #64]	; (d7c6c <_Z22__fetch_global_Serial1v+0x78>)
   d7c2c:	7831      	ldrb	r1, [r6, #0]
   d7c2e:	f3bf 8f5b 	dmb	ish
   d7c32:	f011 0101 	ands.w	r1, r1, #1
   d7c36:	d112      	bne.n	d7c5e <_Z22__fetch_global_Serial1v+0x6a>
   d7c38:	4630      	mov	r0, r6
   d7c3a:	9101      	str	r1, [sp, #4]
   d7c3c:	f7fc fa31 	bl	d40a2 <__cxa_guard_acquire>
   d7c40:	9901      	ldr	r1, [sp, #4]
   d7c42:	b160      	cbz	r0, d7c5e <_Z22__fetch_global_Serial1v+0x6a>
   d7c44:	6822      	ldr	r2, [r4, #0]
   d7c46:	682b      	ldr	r3, [r5, #0]
   d7c48:	4809      	ldr	r0, [pc, #36]	; (d7c70 <_Z22__fetch_global_Serial1v+0x7c>)
   d7c4a:	f7ff ffb3 	bl	d7bb4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7c4e:	4630      	mov	r0, r6
   d7c50:	f7fc fa2c 	bl	d40ac <__cxa_guard_release>
   d7c54:	4a07      	ldr	r2, [pc, #28]	; (d7c74 <_Z22__fetch_global_Serial1v+0x80>)
   d7c56:	4908      	ldr	r1, [pc, #32]	; (d7c78 <_Z22__fetch_global_Serial1v+0x84>)
   d7c58:	4805      	ldr	r0, [pc, #20]	; (d7c70 <_Z22__fetch_global_Serial1v+0x7c>)
   d7c5a:	f000 fa27 	bl	d80ac <__aeabi_atexit>
#endif
	return serial1;
}
   d7c5e:	4804      	ldr	r0, [pc, #16]	; (d7c70 <_Z22__fetch_global_Serial1v+0x7c>)
   d7c60:	b003      	add	sp, #12
   d7c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7c64:	2003e790 	.word	0x2003e790
   d7c68:	2003e794 	.word	0x2003e794
   d7c6c:	2003e78c 	.word	0x2003e78c
   d7c70:	2003e798 	.word	0x2003e798
   d7c74:	2003e40c 	.word	0x2003e40c
   d7c78:	000d7b39 	.word	0x000d7b39

000d7c7c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7c7c:	7441      	strb	r1, [r0, #17]
}
   d7c7e:	4770      	bx	lr

000d7c80 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7c80:	4770      	bx	lr

000d7c82 <_ZN9USBSerial4readEv>:
{
   d7c82:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7c84:	2100      	movs	r1, #0
   d7c86:	7c00      	ldrb	r0, [r0, #16]
   d7c88:	f7fe f9ee 	bl	d6068 <HAL_USB_USART_Receive_Data>
}
   d7c8c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7c90:	bd08      	pop	{r3, pc}

000d7c92 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7c92:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7c94:	2101      	movs	r1, #1
   d7c96:	7c00      	ldrb	r0, [r0, #16]
   d7c98:	f7fe f9e6 	bl	d6068 <HAL_USB_USART_Receive_Data>
}
   d7c9c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7ca0:	bd08      	pop	{r3, pc}

000d7ca2 <_ZN9USBSerial17availableForWriteEv>:
{
   d7ca2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7ca4:	7c00      	ldrb	r0, [r0, #16]
   d7ca6:	f7fe f9d7 	bl	d6058 <HAL_USB_USART_Available_Data_For_Write>
}
   d7caa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7cae:	bd08      	pop	{r3, pc}

000d7cb0 <_ZN9USBSerial9availableEv>:
{
   d7cb0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7cb2:	7c00      	ldrb	r0, [r0, #16]
   d7cb4:	f7fe f9c8 	bl	d6048 <HAL_USB_USART_Available_Data>
}
   d7cb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7cbc:	bd08      	pop	{r3, pc}

000d7cbe <_ZN9USBSerial5writeEh>:
{
   d7cbe:	b513      	push	{r0, r1, r4, lr}
   d7cc0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7cc2:	7c00      	ldrb	r0, [r0, #16]
{
   d7cc4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7cc6:	f7fe f9c7 	bl	d6058 <HAL_USB_USART_Available_Data_For_Write>
   d7cca:	2800      	cmp	r0, #0
   d7ccc:	9901      	ldr	r1, [sp, #4]
   d7cce:	dc01      	bgt.n	d7cd4 <_ZN9USBSerial5writeEh+0x16>
   d7cd0:	7c60      	ldrb	r0, [r4, #17]
   d7cd2:	b120      	cbz	r0, d7cde <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7cd4:	7c20      	ldrb	r0, [r4, #16]
   d7cd6:	f7fe f9cf 	bl	d6078 <HAL_USB_USART_Send_Data>
   d7cda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7cde:	b002      	add	sp, #8
   d7ce0:	bd10      	pop	{r4, pc}

000d7ce2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7ce2:	7c00      	ldrb	r0, [r0, #16]
   d7ce4:	f7fe b9d0 	b.w	d6088 <HAL_USB_USART_Flush_Data>

000d7ce8 <_ZN9USBSerialD0Ev>:
   d7ce8:	b510      	push	{r4, lr}
   d7cea:	2114      	movs	r1, #20
   d7cec:	4604      	mov	r4, r0
   d7cee:	f000 f9e2 	bl	d80b6 <_ZdlPvj>
   d7cf2:	4620      	mov	r0, r4
   d7cf4:	bd10      	pop	{r4, pc}
	...

000d7cf8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7cf8:	b510      	push	{r4, lr}
   d7cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7cfe:	4604      	mov	r4, r0
   d7d00:	4608      	mov	r0, r1
   d7d02:	2100      	movs	r1, #0
   d7d04:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7d08:	4b04      	ldr	r3, [pc, #16]	; (d7d1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7d0a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7d0c:	2301      	movs	r3, #1
  _serial = serial;
   d7d0e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7d10:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7d12:	4611      	mov	r1, r2
   d7d14:	f7fe f988 	bl	d6028 <HAL_USB_USART_Init>
}
   d7d18:	4620      	mov	r0, r4
   d7d1a:	bd10      	pop	{r4, pc}
   d7d1c:	000d9e68 	.word	0x000d9e68

000d7d20 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7d20:	7c00      	ldrb	r0, [r0, #16]
   d7d22:	2200      	movs	r2, #0
   d7d24:	f7fe b988 	b.w	d6038 <HAL_USB_USART_Begin>

000d7d28 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7d28:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7d2a:	2214      	movs	r2, #20
{
   d7d2c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7d2e:	2100      	movs	r1, #0
   d7d30:	f001 fc66 	bl	d9600 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7d34:	4620      	mov	r0, r4
   d7d36:	bd10      	pop	{r4, pc}

000d7d38 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7d38:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7d3a:	4c10      	ldr	r4, [pc, #64]	; (d7d7c <_Z16_fetch_usbserialv+0x44>)
{
   d7d3c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7d3e:	a803      	add	r0, sp, #12
   d7d40:	f7ff fff2 	bl	d7d28 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7d44:	7821      	ldrb	r1, [r4, #0]
   d7d46:	f3bf 8f5b 	dmb	ish
   d7d4a:	f011 0101 	ands.w	r1, r1, #1
   d7d4e:	d111      	bne.n	d7d74 <_Z16_fetch_usbserialv+0x3c>
   d7d50:	4620      	mov	r0, r4
   d7d52:	9101      	str	r1, [sp, #4]
   d7d54:	f7fc f9a5 	bl	d40a2 <__cxa_guard_acquire>
   d7d58:	9901      	ldr	r1, [sp, #4]
   d7d5a:	b158      	cbz	r0, d7d74 <_Z16_fetch_usbserialv+0x3c>
   d7d5c:	aa03      	add	r2, sp, #12
   d7d5e:	4808      	ldr	r0, [pc, #32]	; (d7d80 <_Z16_fetch_usbserialv+0x48>)
   d7d60:	f7ff ffca 	bl	d7cf8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7d64:	4620      	mov	r0, r4
   d7d66:	f7fc f9a1 	bl	d40ac <__cxa_guard_release>
   d7d6a:	4a06      	ldr	r2, [pc, #24]	; (d7d84 <_Z16_fetch_usbserialv+0x4c>)
   d7d6c:	4906      	ldr	r1, [pc, #24]	; (d7d88 <_Z16_fetch_usbserialv+0x50>)
   d7d6e:	4804      	ldr	r0, [pc, #16]	; (d7d80 <_Z16_fetch_usbserialv+0x48>)
   d7d70:	f000 f99c 	bl	d80ac <__aeabi_atexit>
	return _usbserial;
}
   d7d74:	4802      	ldr	r0, [pc, #8]	; (d7d80 <_Z16_fetch_usbserialv+0x48>)
   d7d76:	b008      	add	sp, #32
   d7d78:	bd10      	pop	{r4, pc}
   d7d7a:	bf00      	nop
   d7d7c:	2003e7ac 	.word	0x2003e7ac
   d7d80:	2003e7b0 	.word	0x2003e7b0
   d7d84:	2003e40c 	.word	0x2003e40c
   d7d88:	000d7c81 	.word	0x000d7c81

000d7d8c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7d8c:	2200      	movs	r2, #0
   d7d8e:	6840      	ldr	r0, [r0, #4]
   d7d90:	4611      	mov	r1, r2
   d7d92:	f7fe b9ed 	b.w	d6170 <network_ready>

000d7d96 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7d96:	2200      	movs	r2, #0
   d7d98:	6840      	ldr	r0, [r0, #4]
   d7d9a:	4611      	mov	r1, r2
   d7d9c:	f7fe ba08 	b.w	d61b0 <network_listening>

000d7da0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7da0:	2200      	movs	r2, #0
   d7da2:	6840      	ldr	r0, [r0, #4]
   d7da4:	4611      	mov	r1, r2
   d7da6:	f7fe ba13 	b.w	d61d0 <network_get_listen_timeout>

000d7daa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7daa:	6840      	ldr	r0, [r0, #4]
   d7dac:	2200      	movs	r2, #0
   d7dae:	f7fe ba07 	b.w	d61c0 <network_set_listen_timeout>

000d7db2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7db2:	6840      	ldr	r0, [r0, #4]
   d7db4:	2200      	movs	r2, #0
   d7db6:	f081 0101 	eor.w	r1, r1, #1
   d7dba:	f7fe b9f1 	b.w	d61a0 <network_listen>

000d7dbe <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7dbe:	2300      	movs	r3, #0
   d7dc0:	6840      	ldr	r0, [r0, #4]
   d7dc2:	461a      	mov	r2, r3
   d7dc4:	4619      	mov	r1, r3
   d7dc6:	f7fe b9e3 	b.w	d6190 <network_off>

000d7dca <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7dca:	2300      	movs	r3, #0
   d7dcc:	6840      	ldr	r0, [r0, #4]
   d7dce:	461a      	mov	r2, r3
   d7dd0:	4619      	mov	r1, r3
   d7dd2:	f7fe b9d5 	b.w	d6180 <network_on>

000d7dd6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7dd6:	2200      	movs	r2, #0
   d7dd8:	6840      	ldr	r0, [r0, #4]
   d7dda:	4611      	mov	r1, r2
   d7ddc:	f7fe b9b8 	b.w	d6150 <network_connecting>

000d7de0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7de0:	6840      	ldr	r0, [r0, #4]
   d7de2:	2200      	movs	r2, #0
   d7de4:	2102      	movs	r1, #2
   d7de6:	f7fe b9bb 	b.w	d6160 <network_disconnect>

000d7dea <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7dea:	2300      	movs	r3, #0
   d7dec:	6840      	ldr	r0, [r0, #4]
   d7dee:	461a      	mov	r2, r3
   d7df0:	f7fe b9a6 	b.w	d6140 <network_connect>

000d7df4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7df4:	4b02      	ldr	r3, [pc, #8]	; (d7e00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7df6:	2204      	movs	r2, #4
   d7df8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7dfa:	4a02      	ldr	r2, [pc, #8]	; (d7e04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7dfc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7dfe:	4770      	bx	lr
   d7e00:	2003e7c4 	.word	0x2003e7c4
   d7e04:	000d9e98 	.word	0x000d9e98

000d7e08 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7e08:	4b01      	ldr	r3, [pc, #4]	; (d7e10 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7e0a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7e0c:	4770      	bx	lr
   d7e0e:	bf00      	nop
   d7e10:	2003e3a8 	.word	0x2003e3a8

000d7e14 <serialEventRun>:
{
   d7e14:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7e16:	4b0b      	ldr	r3, [pc, #44]	; (d7e44 <serialEventRun+0x30>)
   d7e18:	b143      	cbz	r3, d7e2c <serialEventRun+0x18>
   d7e1a:	f7ff ff8d 	bl	d7d38 <_Z16_fetch_usbserialv>
   d7e1e:	6803      	ldr	r3, [r0, #0]
   d7e20:	691b      	ldr	r3, [r3, #16]
   d7e22:	4798      	blx	r3
   d7e24:	2800      	cmp	r0, #0
   d7e26:	dd01      	ble.n	d7e2c <serialEventRun+0x18>
        serialEvent();
   d7e28:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7e2c:	4b06      	ldr	r3, [pc, #24]	; (d7e48 <serialEventRun+0x34>)
   d7e2e:	b143      	cbz	r3, d7e42 <serialEventRun+0x2e>
   d7e30:	f7ff fee0 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d7e34:	6803      	ldr	r3, [r0, #0]
   d7e36:	691b      	ldr	r3, [r3, #16]
   d7e38:	4798      	blx	r3
   d7e3a:	2800      	cmp	r0, #0
   d7e3c:	dd01      	ble.n	d7e42 <serialEventRun+0x2e>
        serialEvent1();
   d7e3e:	f3af 8000 	nop.w
}
   d7e42:	bd08      	pop	{r3, pc}
	...

000d7e4c <_post_loop>:
{
   d7e4c:	b508      	push	{r3, lr}
	serialEventRun();
   d7e4e:	f7ff ffe1 	bl	d7e14 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7e52:	f7fd ff99 	bl	d5d88 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7e56:	4b01      	ldr	r3, [pc, #4]	; (d7e5c <_post_loop+0x10>)
   d7e58:	6018      	str	r0, [r3, #0]
}
   d7e5a:	bd08      	pop	{r3, pc}
   d7e5c:	2003e7d4 	.word	0x2003e7d4

000d7e60 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7e60:	4802      	ldr	r0, [pc, #8]	; (d7e6c <_Z33system_initialize_user_backup_ramv+0xc>)
   d7e62:	4a03      	ldr	r2, [pc, #12]	; (d7e70 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7e64:	4903      	ldr	r1, [pc, #12]	; (d7e74 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7e66:	1a12      	subs	r2, r2, r0
   d7e68:	f001 bba2 	b.w	d95b0 <memcpy>
   d7e6c:	2003f400 	.word	0x2003f400
   d7e70:	2003f404 	.word	0x2003f404
   d7e74:	000da028 	.word	0x000da028

000d7e78 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7e78:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7e7a:	2300      	movs	r3, #0
   d7e7c:	9300      	str	r3, [sp, #0]
   d7e7e:	461a      	mov	r2, r3
   d7e80:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7e84:	f7fe f93a 	bl	d60fc <system_ctrl_set_result>
}
   d7e88:	b003      	add	sp, #12
   d7e8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7e90 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7e90:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7e92:	8843      	ldrh	r3, [r0, #2]
   d7e94:	2b0a      	cmp	r3, #10
   d7e96:	d008      	beq.n	d7eaa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7e98:	2b50      	cmp	r3, #80	; 0x50
   d7e9a:	d10b      	bne.n	d7eb4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7e9c:	4b09      	ldr	r3, [pc, #36]	; (d7ec4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7e9e:	681b      	ldr	r3, [r3, #0]
   d7ea0:	b14b      	cbz	r3, d7eb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7ea2:	b003      	add	sp, #12
   d7ea4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7ea8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7eaa:	f7ff ffe5 	bl	d7e78 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7eae:	b003      	add	sp, #12
   d7eb0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7eb4:	2300      	movs	r3, #0
   d7eb6:	9300      	str	r3, [sp, #0]
   d7eb8:	461a      	mov	r2, r3
   d7eba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7ebe:	f7fe f91d 	bl	d60fc <system_ctrl_set_result>
}
   d7ec2:	e7f4      	b.n	d7eae <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7ec4:	2003e7d0 	.word	0x2003e7d0

000d7ec8 <module_user_init_hook>:
{
   d7ec8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7eca:	4c12      	ldr	r4, [pc, #72]	; (d7f14 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7ecc:	4812      	ldr	r0, [pc, #72]	; (d7f18 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7ece:	4d13      	ldr	r5, [pc, #76]	; (d7f1c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7ed0:	2100      	movs	r1, #0
   d7ed2:	f7fe f9a5 	bl	d6220 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7ed6:	6823      	ldr	r3, [r4, #0]
   d7ed8:	42ab      	cmp	r3, r5
   d7eda:	4b11      	ldr	r3, [pc, #68]	; (d7f20 <module_user_init_hook+0x58>)
   d7edc:	bf0c      	ite	eq
   d7ede:	2201      	moveq	r2, #1
   d7ee0:	2200      	movne	r2, #0
   d7ee2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7ee4:	d002      	beq.n	d7eec <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7ee6:	f7ff ffbb 	bl	d7e60 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7eea:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7eec:	f7fd ff34 	bl	d5d58 <HAL_RNG_GetRandomNumber>
   d7ef0:	4604      	mov	r4, r0
    srand(seed);
   d7ef2:	f001 fb8d 	bl	d9610 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7ef6:	4b0b      	ldr	r3, [pc, #44]	; (d7f24 <module_user_init_hook+0x5c>)
   d7ef8:	b113      	cbz	r3, d7f00 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7efa:	4620      	mov	r0, r4
   d7efc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7f00:	2100      	movs	r1, #0
   d7f02:	4808      	ldr	r0, [pc, #32]	; (d7f24 <module_user_init_hook+0x5c>)
   d7f04:	f7fe f914 	bl	d6130 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7f0c:	4806      	ldr	r0, [pc, #24]	; (d7f28 <module_user_init_hook+0x60>)
   d7f0e:	2100      	movs	r1, #0
   d7f10:	f7fe b8ea 	b.w	d60e8 <system_ctrl_set_app_request_handler>
   d7f14:	2003f400 	.word	0x2003f400
   d7f18:	000d7e09 	.word	0x000d7e09
   d7f1c:	9a271c1e 	.word	0x9a271c1e
   d7f20:	2003e7cc 	.word	0x2003e7cc
   d7f24:	00000000 	.word	0x00000000
   d7f28:	000d7e91 	.word	0x000d7e91

000d7f2c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7f2c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7f2e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7f30:	d902      	bls.n	d7f38 <pinAvailable+0xc>
    return false;
   d7f32:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7f34:	b002      	add	sp, #8
   d7f36:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7f38:	f1a0 030b 	sub.w	r3, r0, #11
   d7f3c:	2b02      	cmp	r3, #2
   d7f3e:	d81a      	bhi.n	d7f76 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7f40:	4c17      	ldr	r4, [pc, #92]	; (d7fa0 <pinAvailable+0x74>)
   d7f42:	7821      	ldrb	r1, [r4, #0]
   d7f44:	f3bf 8f5b 	dmb	ish
   d7f48:	f011 0101 	ands.w	r1, r1, #1
   d7f4c:	d10b      	bne.n	d7f66 <pinAvailable+0x3a>
   d7f4e:	4620      	mov	r0, r4
   d7f50:	9101      	str	r1, [sp, #4]
   d7f52:	f7fc f8a6 	bl	d40a2 <__cxa_guard_acquire>
   d7f56:	9901      	ldr	r1, [sp, #4]
   d7f58:	b128      	cbz	r0, d7f66 <pinAvailable+0x3a>
   d7f5a:	4812      	ldr	r0, [pc, #72]	; (d7fa4 <pinAvailable+0x78>)
   d7f5c:	f7ff fc9c 	bl	d7898 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7f60:	4620      	mov	r0, r4
   d7f62:	f7fc f8a3 	bl	d40ac <__cxa_guard_release>
   d7f66:	4b0f      	ldr	r3, [pc, #60]	; (d7fa4 <pinAvailable+0x78>)
   d7f68:	7818      	ldrb	r0, [r3, #0]
   d7f6a:	f7fd ffed 	bl	d5f48 <hal_spi_is_enabled>
   d7f6e:	2800      	cmp	r0, #0
   d7f70:	d1df      	bne.n	d7f32 <pinAvailable+0x6>
  return true; // 'pin' is available
   d7f72:	2001      	movs	r0, #1
   d7f74:	e7de      	b.n	d7f34 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7f76:	2801      	cmp	r0, #1
   d7f78:	d809      	bhi.n	d7f8e <pinAvailable+0x62>
   d7f7a:	f000 f86f 	bl	d805c <_Z19__fetch_global_Wirev>
   d7f7e:	2100      	movs	r1, #0
   d7f80:	7c00      	ldrb	r0, [r0, #16]
   d7f82:	f7fd ff81 	bl	d5e88 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7f86:	f080 0001 	eor.w	r0, r0, #1
   d7f8a:	b2c0      	uxtb	r0, r0
   d7f8c:	e7d2      	b.n	d7f34 <pinAvailable+0x8>
   d7f8e:	3809      	subs	r0, #9
   d7f90:	2801      	cmp	r0, #1
   d7f92:	d8ee      	bhi.n	d7f72 <pinAvailable+0x46>
   d7f94:	f7ff fe2e 	bl	d7bf4 <_Z22__fetch_global_Serial1v>
   d7f98:	7c00      	ldrb	r0, [r0, #16]
   d7f9a:	f7fe f825 	bl	d5fe8 <hal_usart_is_enabled>
   d7f9e:	e7f2      	b.n	d7f86 <pinAvailable+0x5a>
   d7fa0:	2003e738 	.word	0x2003e738
   d7fa4:	2003e73c 	.word	0x2003e73c

000d7fa8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7fa8:	2823      	cmp	r0, #35	; 0x23
{
   d7faa:	b538      	push	{r3, r4, r5, lr}
   d7fac:	4604      	mov	r4, r0
   d7fae:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7fb0:	d80a      	bhi.n	d7fc8 <pinMode+0x20>
   d7fb2:	29ff      	cmp	r1, #255	; 0xff
   d7fb4:	d008      	beq.n	d7fc8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7fb6:	f7ff ffb9 	bl	d7f2c <pinAvailable>
   d7fba:	b128      	cbz	r0, d7fc8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7fbc:	4629      	mov	r1, r5
   d7fbe:	4620      	mov	r0, r4
}
   d7fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7fc4:	f7fd bef0 	b.w	d5da8 <HAL_Pin_Mode>
}
   d7fc8:	bd38      	pop	{r3, r4, r5, pc}

000d7fca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7fca:	b538      	push	{r3, r4, r5, lr}
   d7fcc:	4604      	mov	r4, r0
   d7fce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7fd0:	f7fd fef2 	bl	d5db8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7fd4:	28ff      	cmp	r0, #255	; 0xff
   d7fd6:	d010      	beq.n	d7ffa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7fd8:	2806      	cmp	r0, #6
   d7fda:	d804      	bhi.n	d7fe6 <digitalWrite+0x1c>
   d7fdc:	234d      	movs	r3, #77	; 0x4d
   d7fde:	fa23 f000 	lsr.w	r0, r3, r0
   d7fe2:	07c3      	lsls	r3, r0, #31
   d7fe4:	d409      	bmi.n	d7ffa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7fe6:	4620      	mov	r0, r4
   d7fe8:	f7ff ffa0 	bl	d7f2c <pinAvailable>
   d7fec:	b128      	cbz	r0, d7ffa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7fee:	4629      	mov	r1, r5
   d7ff0:	4620      	mov	r0, r4
}
   d7ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7ff6:	f7fd bee7 	b.w	d5dc8 <HAL_GPIO_Write>
}
   d7ffa:	bd38      	pop	{r3, r4, r5, pc}

000d7ffc <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7ffc:	280d      	cmp	r0, #13
{
   d7ffe:	b510      	push	{r4, lr}
   d8000:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8002:	bf9c      	itt	ls
   d8004:	340e      	addls	r4, #14
   d8006:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8008:	4620      	mov	r0, r4
   d800a:	f7ff ff8f 	bl	d7f2c <pinAvailable>
   d800e:	b150      	cbz	r0, d8026 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8010:	2103      	movs	r1, #3
   d8012:	4620      	mov	r0, r4
   d8014:	f7fd fec0 	bl	d5d98 <HAL_Validate_Pin_Function>
   d8018:	2803      	cmp	r0, #3
   d801a:	d104      	bne.n	d8026 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d801c:	4620      	mov	r0, r4
}
   d801e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d8022:	f7fd bee9 	b.w	d5df8 <hal_adc_read>
}
   d8026:	2000      	movs	r0, #0
   d8028:	bd10      	pop	{r4, pc}
	...

000d802c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d802c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d802e:	2300      	movs	r3, #0
   d8030:	2520      	movs	r5, #32
   d8032:	8043      	strh	r3, [r0, #2]
   d8034:	2314      	movs	r3, #20
{
   d8036:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8038:	8003      	strh	r3, [r0, #0]
   d803a:	6085      	str	r5, [r0, #8]
   d803c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d803e:	4906      	ldr	r1, [pc, #24]	; (d8058 <_Z17acquireWireBufferv+0x2c>)
   d8040:	4628      	mov	r0, r5
   d8042:	f000 f83a 	bl	d80ba <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8046:	4904      	ldr	r1, [pc, #16]	; (d8058 <_Z17acquireWireBufferv+0x2c>)
	};
   d8048:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d804a:	4628      	mov	r0, r5
   d804c:	f000 f835 	bl	d80ba <_ZnajRKSt9nothrow_t>
	};
   d8050:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d8052:	4620      	mov	r0, r4
   d8054:	bd38      	pop	{r3, r4, r5, pc}
   d8056:	bf00      	nop
   d8058:	000d9ec4 	.word	0x000d9ec4

000d805c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d805c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d805e:	4d0f      	ldr	r5, [pc, #60]	; (d809c <_Z19__fetch_global_Wirev+0x40>)
   d8060:	7829      	ldrb	r1, [r5, #0]
   d8062:	f3bf 8f5b 	dmb	ish
   d8066:	f011 0401 	ands.w	r4, r1, #1
{
   d806a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d806c:	d113      	bne.n	d8096 <_Z19__fetch_global_Wirev+0x3a>
   d806e:	4628      	mov	r0, r5
   d8070:	f7fc f817 	bl	d40a2 <__cxa_guard_acquire>
   d8074:	b178      	cbz	r0, d8096 <_Z19__fetch_global_Wirev+0x3a>
   d8076:	a801      	add	r0, sp, #4
   d8078:	f7ff ffd8 	bl	d802c <_Z17acquireWireBufferv>
   d807c:	aa01      	add	r2, sp, #4
   d807e:	4621      	mov	r1, r4
   d8080:	4807      	ldr	r0, [pc, #28]	; (d80a0 <_Z19__fetch_global_Wirev+0x44>)
   d8082:	f7ff fa05 	bl	d7490 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8086:	4628      	mov	r0, r5
   d8088:	f7fc f810 	bl	d40ac <__cxa_guard_release>
   d808c:	4a05      	ldr	r2, [pc, #20]	; (d80a4 <_Z19__fetch_global_Wirev+0x48>)
   d808e:	4906      	ldr	r1, [pc, #24]	; (d80a8 <_Z19__fetch_global_Wirev+0x4c>)
   d8090:	4803      	ldr	r0, [pc, #12]	; (d80a0 <_Z19__fetch_global_Wirev+0x44>)
   d8092:	f000 f80b 	bl	d80ac <__aeabi_atexit>
	return wire;
}
   d8096:	4802      	ldr	r0, [pc, #8]	; (d80a0 <_Z19__fetch_global_Wirev+0x44>)
   d8098:	b007      	add	sp, #28
   d809a:	bd30      	pop	{r4, r5, pc}
   d809c:	2003e7d8 	.word	0x2003e7d8
   d80a0:	2003e7dc 	.word	0x2003e7dc
   d80a4:	2003e40c 	.word	0x2003e40c
   d80a8:	000d7439 	.word	0x000d7439

000d80ac <__aeabi_atexit>:
   d80ac:	460b      	mov	r3, r1
   d80ae:	4601      	mov	r1, r0
   d80b0:	4618      	mov	r0, r3
   d80b2:	f001 ba61 	b.w	d9578 <__cxa_atexit>

000d80b6 <_ZdlPvj>:
   d80b6:	f7fb bff2 	b.w	d409e <_ZdlPv>

000d80ba <_ZnajRKSt9nothrow_t>:
   d80ba:	f7fb bfee 	b.w	d409a <_Znaj>
	...

000d80c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d80c0:	4901      	ldr	r1, [pc, #4]	; (d80c8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d80c2:	f000 b8f9 	b.w	d82b8 <_ZNKSt9type_infoeqERKS_>
   d80c6:	bf00      	nop
   d80c8:	000d9ee0 	.word	0x000d9ee0

000d80cc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d80cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d80ce:	2400      	movs	r4, #0
   d80d0:	2310      	movs	r3, #16
   d80d2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d80d6:	6803      	ldr	r3, [r0, #0]
   d80d8:	9400      	str	r4, [sp, #0]
   d80da:	699e      	ldr	r6, [r3, #24]
   d80dc:	f88d 4004 	strb.w	r4, [sp, #4]
   d80e0:	4615      	mov	r5, r2
   d80e2:	466b      	mov	r3, sp
   d80e4:	6812      	ldr	r2, [r2, #0]
   d80e6:	47b0      	blx	r6
   d80e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d80ec:	f003 0306 	and.w	r3, r3, #6
   d80f0:	2b06      	cmp	r3, #6
   d80f2:	bf03      	ittte	eq
   d80f4:	9b00      	ldreq	r3, [sp, #0]
   d80f6:	602b      	streq	r3, [r5, #0]
   d80f8:	2001      	moveq	r0, #1
   d80fa:	4620      	movne	r0, r4
   d80fc:	b004      	add	sp, #16
   d80fe:	bd70      	pop	{r4, r5, r6, pc}

000d8100 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d8100:	9800      	ldr	r0, [sp, #0]
   d8102:	4290      	cmp	r0, r2
   d8104:	bf14      	ite	ne
   d8106:	2001      	movne	r0, #1
   d8108:	2006      	moveq	r0, #6
   d810a:	4770      	bx	lr

000d810c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d810c:	b510      	push	{r4, lr}
   d810e:	4b03      	ldr	r3, [pc, #12]	; (d811c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d8110:	6003      	str	r3, [r0, #0]
   d8112:	4604      	mov	r4, r0
   d8114:	f000 f8cd 	bl	d82b2 <_ZNSt9type_infoD1Ev>
   d8118:	4620      	mov	r0, r4
   d811a:	bd10      	pop	{r4, pc}
   d811c:	000d9f20 	.word	0x000d9f20

000d8120 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d8120:	b510      	push	{r4, lr}
   d8122:	4604      	mov	r4, r0
   d8124:	f7ff fff2 	bl	d810c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8128:	4620      	mov	r0, r4
   d812a:	2108      	movs	r1, #8
   d812c:	f7ff ffc3 	bl	d80b6 <_ZdlPvj>
   d8130:	4620      	mov	r0, r4
   d8132:	bd10      	pop	{r4, pc}

000d8134 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d8134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8138:	461f      	mov	r7, r3
   d813a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d813e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d8142:	4598      	cmp	r8, r3
   d8144:	4606      	mov	r6, r0
   d8146:	4615      	mov	r5, r2
   d8148:	d107      	bne.n	d815a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d814a:	9907      	ldr	r1, [sp, #28]
   d814c:	f000 f8b4 	bl	d82b8 <_ZNKSt9type_infoeqERKS_>
   d8150:	b118      	cbz	r0, d815a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8152:	7165      	strb	r5, [r4, #5]
   d8154:	2000      	movs	r0, #0
   d8156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d815a:	4639      	mov	r1, r7
   d815c:	4630      	mov	r0, r6
   d815e:	f000 f8ab 	bl	d82b8 <_ZNKSt9type_infoeqERKS_>
   d8162:	2800      	cmp	r0, #0
   d8164:	d0f6      	beq.n	d8154 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d8166:	2301      	movs	r3, #1
   d8168:	f8c4 8000 	str.w	r8, [r4]
   d816c:	7125      	strb	r5, [r4, #4]
   d816e:	71a3      	strb	r3, [r4, #6]
   d8170:	e7f0      	b.n	d8154 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d8172 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d8172:	b538      	push	{r3, r4, r5, lr}
   d8174:	4615      	mov	r5, r2
   d8176:	461c      	mov	r4, r3
   d8178:	f000 f89e 	bl	d82b8 <_ZNKSt9type_infoeqERKS_>
   d817c:	b120      	cbz	r0, d8188 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d817e:	2308      	movs	r3, #8
   d8180:	60e3      	str	r3, [r4, #12]
   d8182:	2306      	movs	r3, #6
   d8184:	6025      	str	r5, [r4, #0]
   d8186:	7123      	strb	r3, [r4, #4]
   d8188:	bd38      	pop	{r3, r4, r5, pc}

000d818a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d818a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d818c:	4605      	mov	r5, r0
   d818e:	460c      	mov	r4, r1
   d8190:	9201      	str	r2, [sp, #4]
   d8192:	461e      	mov	r6, r3
   d8194:	f000 f890 	bl	d82b8 <_ZNKSt9type_infoeqERKS_>
   d8198:	b950      	cbnz	r0, d81b0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d819a:	2e03      	cmp	r6, #3
   d819c:	d808      	bhi.n	d81b0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d819e:	6823      	ldr	r3, [r4, #0]
   d81a0:	9a01      	ldr	r2, [sp, #4]
   d81a2:	695b      	ldr	r3, [r3, #20]
   d81a4:	4629      	mov	r1, r5
   d81a6:	4620      	mov	r0, r4
   d81a8:	b002      	add	sp, #8
   d81aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d81ae:	4718      	bx	r3
   d81b0:	b002      	add	sp, #8
   d81b2:	bd70      	pop	{r4, r5, r6, pc}

000d81b4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d81b4:	b510      	push	{r4, lr}
   d81b6:	4b03      	ldr	r3, [pc, #12]	; (d81c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d81b8:	6003      	str	r3, [r0, #0]
   d81ba:	4604      	mov	r4, r0
   d81bc:	f7ff ffa6 	bl	d810c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d81c0:	4620      	mov	r0, r4
   d81c2:	bd10      	pop	{r4, pc}
   d81c4:	000d9f80 	.word	0x000d9f80

000d81c8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d81c8:	b510      	push	{r4, lr}
   d81ca:	4604      	mov	r4, r0
   d81cc:	f7ff fff2 	bl	d81b4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d81d0:	4620      	mov	r0, r4
   d81d2:	210c      	movs	r1, #12
   d81d4:	f7ff ff6f 	bl	d80b6 <_ZdlPvj>
   d81d8:	4620      	mov	r0, r4
   d81da:	bd10      	pop	{r4, pc}

000d81dc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d81dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d81de:	9f08      	ldr	r7, [sp, #32]
   d81e0:	4297      	cmp	r7, r2
   d81e2:	4605      	mov	r5, r0
   d81e4:	460e      	mov	r6, r1
   d81e6:	4614      	mov	r4, r2
   d81e8:	d00a      	beq.n	d8200 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d81ea:	68a8      	ldr	r0, [r5, #8]
   d81ec:	6802      	ldr	r2, [r0, #0]
   d81ee:	9708      	str	r7, [sp, #32]
   d81f0:	6a15      	ldr	r5, [r2, #32]
   d81f2:	4631      	mov	r1, r6
   d81f4:	4622      	mov	r2, r4
   d81f6:	46ac      	mov	ip, r5
   d81f8:	b003      	add	sp, #12
   d81fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d81fe:	4760      	bx	ip
   d8200:	4619      	mov	r1, r3
   d8202:	9301      	str	r3, [sp, #4]
   d8204:	f000 f858 	bl	d82b8 <_ZNKSt9type_infoeqERKS_>
   d8208:	9b01      	ldr	r3, [sp, #4]
   d820a:	2800      	cmp	r0, #0
   d820c:	d0ed      	beq.n	d81ea <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d820e:	2006      	movs	r0, #6
   d8210:	b003      	add	sp, #12
   d8212:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8214 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d8214:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8218:	460d      	mov	r5, r1
   d821a:	4619      	mov	r1, r3
   d821c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d8220:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d8224:	4681      	mov	r9, r0
   d8226:	4617      	mov	r7, r2
   d8228:	4698      	mov	r8, r3
   d822a:	f000 f845 	bl	d82b8 <_ZNKSt9type_infoeqERKS_>
   d822e:	b190      	cbz	r0, d8256 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d8230:	2d00      	cmp	r5, #0
   d8232:	6034      	str	r4, [r6, #0]
   d8234:	7137      	strb	r7, [r6, #4]
   d8236:	db09      	blt.n	d824c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d8238:	1961      	adds	r1, r4, r5
   d823a:	458a      	cmp	sl, r1
   d823c:	bf0c      	ite	eq
   d823e:	2106      	moveq	r1, #6
   d8240:	2101      	movne	r1, #1
   d8242:	71b1      	strb	r1, [r6, #6]
   d8244:	2000      	movs	r0, #0
   d8246:	b001      	add	sp, #4
   d8248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d824c:	3502      	adds	r5, #2
   d824e:	d1f9      	bne.n	d8244 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8250:	2301      	movs	r3, #1
   d8252:	71b3      	strb	r3, [r6, #6]
   d8254:	e7f6      	b.n	d8244 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8256:	4554      	cmp	r4, sl
   d8258:	d106      	bne.n	d8268 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d825a:	4659      	mov	r1, fp
   d825c:	4648      	mov	r0, r9
   d825e:	f000 f82b 	bl	d82b8 <_ZNKSt9type_infoeqERKS_>
   d8262:	b108      	cbz	r0, d8268 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8264:	7177      	strb	r7, [r6, #5]
   d8266:	e7ed      	b.n	d8244 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8268:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d826c:	6803      	ldr	r3, [r0, #0]
   d826e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d8272:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d8276:	69dc      	ldr	r4, [r3, #28]
   d8278:	463a      	mov	r2, r7
   d827a:	4643      	mov	r3, r8
   d827c:	4629      	mov	r1, r5
   d827e:	46a4      	mov	ip, r4
   d8280:	b001      	add	sp, #4
   d8282:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8286:	4760      	bx	ip

000d8288 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d8288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d828c:	4607      	mov	r7, r0
   d828e:	460c      	mov	r4, r1
   d8290:	4615      	mov	r5, r2
   d8292:	461e      	mov	r6, r3
   d8294:	f7ff ff6d 	bl	d8172 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d8298:	b948      	cbnz	r0, d82ae <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d829a:	68b8      	ldr	r0, [r7, #8]
   d829c:	6803      	ldr	r3, [r0, #0]
   d829e:	699f      	ldr	r7, [r3, #24]
   d82a0:	462a      	mov	r2, r5
   d82a2:	4633      	mov	r3, r6
   d82a4:	4621      	mov	r1, r4
   d82a6:	46bc      	mov	ip, r7
   d82a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d82ac:	4760      	bx	ip
   d82ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d82b2 <_ZNSt9type_infoD1Ev>:
   d82b2:	4770      	bx	lr

000d82b4 <_ZNKSt9type_info14__is_pointer_pEv>:
   d82b4:	2000      	movs	r0, #0
   d82b6:	4770      	bx	lr

000d82b8 <_ZNKSt9type_infoeqERKS_>:
   d82b8:	4281      	cmp	r1, r0
   d82ba:	b508      	push	{r3, lr}
   d82bc:	d00e      	beq.n	d82dc <_ZNKSt9type_infoeqERKS_+0x24>
   d82be:	6840      	ldr	r0, [r0, #4]
   d82c0:	7803      	ldrb	r3, [r0, #0]
   d82c2:	2b2a      	cmp	r3, #42	; 0x2a
   d82c4:	d00c      	beq.n	d82e0 <_ZNKSt9type_infoeqERKS_+0x28>
   d82c6:	6849      	ldr	r1, [r1, #4]
   d82c8:	780b      	ldrb	r3, [r1, #0]
   d82ca:	2b2a      	cmp	r3, #42	; 0x2a
   d82cc:	bf08      	it	eq
   d82ce:	3101      	addeq	r1, #1
   d82d0:	f001 f9c2 	bl	d9658 <strcmp>
   d82d4:	fab0 f080 	clz	r0, r0
   d82d8:	0940      	lsrs	r0, r0, #5
   d82da:	bd08      	pop	{r3, pc}
   d82dc:	2001      	movs	r0, #1
   d82de:	e7fc      	b.n	d82da <_ZNKSt9type_infoeqERKS_+0x22>
   d82e0:	2000      	movs	r0, #0
   d82e2:	e7fa      	b.n	d82da <_ZNKSt9type_infoeqERKS_+0x22>

000d82e4 <fmaxf>:
   d82e4:	b508      	push	{r3, lr}
   d82e6:	ed2d 8b02 	vpush	{d8}
   d82ea:	eef0 8a40 	vmov.f32	s17, s0
   d82ee:	eeb0 8a60 	vmov.f32	s16, s1
   d82f2:	f000 f833 	bl	d835c <__fpclassifyf>
   d82f6:	b920      	cbnz	r0, d8302 <fmaxf+0x1e>
   d82f8:	eeb0 0a48 	vmov.f32	s0, s16
   d82fc:	ecbd 8b02 	vpop	{d8}
   d8300:	bd08      	pop	{r3, pc}
   d8302:	eeb0 0a48 	vmov.f32	s0, s16
   d8306:	f000 f829 	bl	d835c <__fpclassifyf>
   d830a:	b120      	cbz	r0, d8316 <fmaxf+0x32>
   d830c:	eef4 8ac8 	vcmpe.f32	s17, s16
   d8310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8314:	ddf0      	ble.n	d82f8 <fmaxf+0x14>
   d8316:	eeb0 0a68 	vmov.f32	s0, s17
   d831a:	ecbd 8b02 	vpop	{d8}
   d831e:	bd08      	pop	{r3, pc}

000d8320 <fminf>:
   d8320:	b508      	push	{r3, lr}
   d8322:	ed2d 8b02 	vpush	{d8}
   d8326:	eef0 8a40 	vmov.f32	s17, s0
   d832a:	eeb0 8a60 	vmov.f32	s16, s1
   d832e:	f000 f815 	bl	d835c <__fpclassifyf>
   d8332:	b920      	cbnz	r0, d833e <fminf+0x1e>
   d8334:	eeb0 0a48 	vmov.f32	s0, s16
   d8338:	ecbd 8b02 	vpop	{d8}
   d833c:	bd08      	pop	{r3, pc}
   d833e:	eeb0 0a48 	vmov.f32	s0, s16
   d8342:	f000 f80b 	bl	d835c <__fpclassifyf>
   d8346:	b120      	cbz	r0, d8352 <fminf+0x32>
   d8348:	eef4 8ac8 	vcmpe.f32	s17, s16
   d834c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8350:	d5f0      	bpl.n	d8334 <fminf+0x14>
   d8352:	eeb0 0a68 	vmov.f32	s0, s17
   d8356:	ecbd 8b02 	vpop	{d8}
   d835a:	bd08      	pop	{r3, pc}

000d835c <__fpclassifyf>:
   d835c:	ee10 3a10 	vmov	r3, s0
   d8360:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
   d8364:	d00e      	beq.n	d8384 <__fpclassifyf+0x28>
   d8366:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
   d836a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
   d836e:	d30d      	bcc.n	d838c <__fpclassifyf+0x30>
   d8370:	4b07      	ldr	r3, [pc, #28]	; (d8390 <__fpclassifyf+0x34>)
   d8372:	1e42      	subs	r2, r0, #1
   d8374:	429a      	cmp	r2, r3
   d8376:	d907      	bls.n	d8388 <__fpclassifyf+0x2c>
   d8378:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
   d837c:	fab0 f080 	clz	r0, r0
   d8380:	0940      	lsrs	r0, r0, #5
   d8382:	4770      	bx	lr
   d8384:	2002      	movs	r0, #2
   d8386:	4770      	bx	lr
   d8388:	2003      	movs	r0, #3
   d838a:	4770      	bx	lr
   d838c:	2004      	movs	r0, #4
   d838e:	4770      	bx	lr
   d8390:	007ffffe 	.word	0x007ffffe

000d8394 <atan2f>:
   d8394:	f000 b800 	b.w	d8398 <__ieee754_atan2f>

000d8398 <__ieee754_atan2f>:
   d8398:	b510      	push	{r4, lr}
   d839a:	b082      	sub	sp, #8
   d839c:	edcd 0a01 	vstr	s1, [sp, #4]
   d83a0:	9b01      	ldr	r3, [sp, #4]
   d83a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   d83a6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   d83aa:	eef0 7a40 	vmov.f32	s15, s0
   d83ae:	dc30      	bgt.n	d8412 <__ieee754_atan2f+0x7a>
   d83b0:	ee10 0a10 	vmov	r0, s0
   d83b4:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   d83b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   d83bc:	dc29      	bgt.n	d8412 <__ieee754_atan2f+0x7a>
   d83be:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   d83c2:	d042      	beq.n	d844a <__ieee754_atan2f+0xb2>
   d83c4:	179c      	asrs	r4, r3, #30
   d83c6:	f004 0402 	and.w	r4, r4, #2
   d83ca:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   d83ce:	b331      	cbz	r1, d841e <__ieee754_atan2f+0x86>
   d83d0:	b37a      	cbz	r2, d8432 <__ieee754_atan2f+0x9a>
   d83d2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   d83d6:	d040      	beq.n	d845a <__ieee754_atan2f+0xc2>
   d83d8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   d83dc:	d029      	beq.n	d8432 <__ieee754_atan2f+0x9a>
   d83de:	1a8a      	subs	r2, r1, r2
   d83e0:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
   d83e4:	ea4f 51e2 	mov.w	r1, r2, asr #23
   d83e8:	da34      	bge.n	d8454 <__ieee754_atan2f+0xbc>
   d83ea:	2b00      	cmp	r3, #0
   d83ec:	da42      	bge.n	d8474 <__ieee754_atan2f+0xdc>
   d83ee:	313c      	adds	r1, #60	; 0x3c
   d83f0:	da40      	bge.n	d8474 <__ieee754_atan2f+0xdc>
   d83f2:	ed9f 0a34 	vldr	s0, [pc, #208]	; d84c4 <__ieee754_atan2f+0x12c>
   d83f6:	2c01      	cmp	r4, #1
   d83f8:	d04e      	beq.n	d8498 <__ieee754_atan2f+0x100>
   d83fa:	2c02      	cmp	r4, #2
   d83fc:	d043      	beq.n	d8486 <__ieee754_atan2f+0xee>
   d83fe:	b164      	cbz	r4, d841a <__ieee754_atan2f+0x82>
   d8400:	ed9f 7a31 	vldr	s14, [pc, #196]	; d84c8 <__ieee754_atan2f+0x130>
   d8404:	eddf 7a31 	vldr	s15, [pc, #196]	; d84cc <__ieee754_atan2f+0x134>
   d8408:	ee30 0a07 	vadd.f32	s0, s0, s14
   d840c:	ee30 0a67 	vsub.f32	s0, s0, s15
   d8410:	e003      	b.n	d841a <__ieee754_atan2f+0x82>
   d8412:	ed9d 7a01 	vldr	s14, [sp, #4]
   d8416:	ee37 0a27 	vadd.f32	s0, s14, s15
   d841a:	b002      	add	sp, #8
   d841c:	bd10      	pop	{r4, pc}
   d841e:	2c02      	cmp	r4, #2
   d8420:	d010      	beq.n	d8444 <__ieee754_atan2f+0xac>
   d8422:	ed9f 0a2b 	vldr	s0, [pc, #172]	; d84d0 <__ieee754_atan2f+0x138>
   d8426:	2c03      	cmp	r4, #3
   d8428:	bf18      	it	ne
   d842a:	eeb0 0a67 	vmovne.f32	s0, s15
   d842e:	b002      	add	sp, #8
   d8430:	bd10      	pop	{r4, pc}
   d8432:	ed9f 0a28 	vldr	s0, [pc, #160]	; d84d4 <__ieee754_atan2f+0x13c>
   d8436:	eddf 7a28 	vldr	s15, [pc, #160]	; d84d8 <__ieee754_atan2f+0x140>
   d843a:	2800      	cmp	r0, #0
   d843c:	bfb8      	it	lt
   d843e:	eeb0 0a67 	vmovlt.f32	s0, s15
   d8442:	e7ea      	b.n	d841a <__ieee754_atan2f+0x82>
   d8444:	ed9f 0a21 	vldr	s0, [pc, #132]	; d84cc <__ieee754_atan2f+0x134>
   d8448:	e7e7      	b.n	d841a <__ieee754_atan2f+0x82>
   d844a:	b002      	add	sp, #8
   d844c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8450:	f000 b84a 	b.w	d84e8 <atanf>
   d8454:	ed9f 0a1f 	vldr	s0, [pc, #124]	; d84d4 <__ieee754_atan2f+0x13c>
   d8458:	e7cd      	b.n	d83f6 <__ieee754_atan2f+0x5e>
   d845a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   d845e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d8462:	d020      	beq.n	d84a6 <__ieee754_atan2f+0x10e>
   d8464:	2c02      	cmp	r4, #2
   d8466:	d826      	bhi.n	d84b6 <__ieee754_atan2f+0x11e>
   d8468:	4b1c      	ldr	r3, [pc, #112]	; (d84dc <__ieee754_atan2f+0x144>)
   d846a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d846e:	ed94 0a00 	vldr	s0, [r4]
   d8472:	e7d2      	b.n	d841a <__ieee754_atan2f+0x82>
   d8474:	ed9d 7a01 	vldr	s14, [sp, #4]
   d8478:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d847c:	f000 f90c 	bl	d8698 <fabsf>
   d8480:	f000 f832 	bl	d84e8 <atanf>
   d8484:	e7b7      	b.n	d83f6 <__ieee754_atan2f+0x5e>
   d8486:	ed9f 7a10 	vldr	s14, [pc, #64]	; d84c8 <__ieee754_atan2f+0x130>
   d848a:	eddf 7a10 	vldr	s15, [pc, #64]	; d84cc <__ieee754_atan2f+0x134>
   d848e:	ee30 0a07 	vadd.f32	s0, s0, s14
   d8492:	ee37 0ac0 	vsub.f32	s0, s15, s0
   d8496:	e7c0      	b.n	d841a <__ieee754_atan2f+0x82>
   d8498:	ee10 3a10 	vmov	r3, s0
   d849c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   d84a0:	ee00 3a10 	vmov	s0, r3
   d84a4:	e7b9      	b.n	d841a <__ieee754_atan2f+0x82>
   d84a6:	2c02      	cmp	r4, #2
   d84a8:	d808      	bhi.n	d84bc <__ieee754_atan2f+0x124>
   d84aa:	4b0d      	ldr	r3, [pc, #52]	; (d84e0 <__ieee754_atan2f+0x148>)
   d84ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d84b0:	ed94 0a00 	vldr	s0, [r4]
   d84b4:	e7b1      	b.n	d841a <__ieee754_atan2f+0x82>
   d84b6:	ed9f 0a03 	vldr	s0, [pc, #12]	; d84c4 <__ieee754_atan2f+0x12c>
   d84ba:	e7ae      	b.n	d841a <__ieee754_atan2f+0x82>
   d84bc:	ed9f 0a09 	vldr	s0, [pc, #36]	; d84e4 <__ieee754_atan2f+0x14c>
   d84c0:	e7ab      	b.n	d841a <__ieee754_atan2f+0x82>
   d84c2:	bf00      	nop
   d84c4:	00000000 	.word	0x00000000
   d84c8:	33bbbd2e 	.word	0x33bbbd2e
   d84cc:	40490fdb 	.word	0x40490fdb
   d84d0:	c0490fdb 	.word	0xc0490fdb
   d84d4:	3fc90fdb 	.word	0x3fc90fdb
   d84d8:	bfc90fdb 	.word	0xbfc90fdb
   d84dc:	000d9fc8 	.word	0x000d9fc8
   d84e0:	000d9fbc 	.word	0x000d9fbc
   d84e4:	3f490fdb 	.word	0x3f490fdb

000d84e8 <atanf>:
   d84e8:	b538      	push	{r3, r4, r5, lr}
   d84ea:	ee10 5a10 	vmov	r5, s0
   d84ee:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   d84f2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   d84f6:	eef0 7a40 	vmov.f32	s15, s0
   d84fa:	db0b      	blt.n	d8514 <atanf+0x2c>
   d84fc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   d8500:	dc59      	bgt.n	d85b6 <atanf+0xce>
   d8502:	eddf 7a52 	vldr	s15, [pc, #328]	; d864c <atanf+0x164>
   d8506:	ed9f 0a52 	vldr	s0, [pc, #328]	; d8650 <atanf+0x168>
   d850a:	2d00      	cmp	r5, #0
   d850c:	bfc8      	it	gt
   d850e:	eeb0 0a67 	vmovgt.f32	s0, s15
   d8512:	bd38      	pop	{r3, r4, r5, pc}
   d8514:	4b4f      	ldr	r3, [pc, #316]	; (d8654 <atanf+0x16c>)
   d8516:	429c      	cmp	r4, r3
   d8518:	dc5c      	bgt.n	d85d4 <atanf+0xec>
   d851a:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   d851e:	db4d      	blt.n	d85bc <atanf+0xd4>
   d8520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8524:	ee27 6aa7 	vmul.f32	s12, s15, s15
   d8528:	ed9f 1a4b 	vldr	s2, [pc, #300]	; d8658 <atanf+0x170>
   d852c:	ed9f 2a4b 	vldr	s4, [pc, #300]	; d865c <atanf+0x174>
   d8530:	ed9f 3a4b 	vldr	s6, [pc, #300]	; d8660 <atanf+0x178>
   d8534:	eddf 1a4b 	vldr	s3, [pc, #300]	; d8664 <atanf+0x17c>
   d8538:	eddf 2a4b 	vldr	s5, [pc, #300]	; d8668 <atanf+0x180>
   d853c:	ed9f 4a4b 	vldr	s8, [pc, #300]	; d866c <atanf+0x184>
   d8540:	eddf 3a4b 	vldr	s7, [pc, #300]	; d8670 <atanf+0x188>
   d8544:	ed9f 5a4b 	vldr	s10, [pc, #300]	; d8674 <atanf+0x18c>
   d8548:	eddf 4a4b 	vldr	s9, [pc, #300]	; d8678 <atanf+0x190>
   d854c:	eddf 6a4b 	vldr	s13, [pc, #300]	; d867c <atanf+0x194>
   d8550:	eddf 5a4b 	vldr	s11, [pc, #300]	; d8680 <atanf+0x198>
   d8554:	ee26 7a06 	vmul.f32	s14, s12, s12
   d8558:	1c5a      	adds	r2, r3, #1
   d855a:	eea7 2a01 	vfma.f32	s4, s14, s2
   d855e:	eee7 2a21 	vfma.f32	s5, s14, s3
   d8562:	eea2 3a07 	vfma.f32	s6, s4, s14
   d8566:	eee2 3a87 	vfma.f32	s7, s5, s14
   d856a:	eea3 4a07 	vfma.f32	s8, s6, s14
   d856e:	eee3 4a87 	vfma.f32	s9, s7, s14
   d8572:	eea4 5a07 	vfma.f32	s10, s8, s14
   d8576:	eee4 5a87 	vfma.f32	s11, s9, s14
   d857a:	eee5 6a07 	vfma.f32	s13, s10, s14
   d857e:	ee25 7a87 	vmul.f32	s14, s11, s14
   d8582:	ee66 6a86 	vmul.f32	s13, s13, s12
   d8586:	d03a      	beq.n	d85fe <atanf+0x116>
   d8588:	493e      	ldr	r1, [pc, #248]	; (d8684 <atanf+0x19c>)
   d858a:	4a3f      	ldr	r2, [pc, #252]	; (d8688 <atanf+0x1a0>)
   d858c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   d8590:	ee76 6a87 	vadd.f32	s13, s13, s14
   d8594:	ed91 0a00 	vldr	s0, [r1]
   d8598:	ee96 0aa7 	vfnms.f32	s0, s13, s15
   d859c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d85a0:	2d00      	cmp	r5, #0
   d85a2:	ed93 7a00 	vldr	s14, [r3]
   d85a6:	ee70 7a67 	vsub.f32	s15, s0, s15
   d85aa:	ee37 0a67 	vsub.f32	s0, s14, s15
   d85ae:	dab0      	bge.n	d8512 <atanf+0x2a>
   d85b0:	eeb1 0a40 	vneg.f32	s0, s0
   d85b4:	bd38      	pop	{r3, r4, r5, pc}
   d85b6:	ee30 0a00 	vadd.f32	s0, s0, s0
   d85ba:	bd38      	pop	{r3, r4, r5, pc}
   d85bc:	ed9f 7a33 	vldr	s14, [pc, #204]	; d868c <atanf+0x1a4>
   d85c0:	ee30 7a07 	vadd.f32	s14, s0, s14
   d85c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   d85c8:	eeb4 7ae6 	vcmpe.f32	s14, s13
   d85cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d85d0:	dda6      	ble.n	d8520 <atanf+0x38>
   d85d2:	bd38      	pop	{r3, r4, r5, pc}
   d85d4:	f000 f860 	bl	d8698 <fabsf>
   d85d8:	4b2d      	ldr	r3, [pc, #180]	; (d8690 <atanf+0x1a8>)
   d85da:	429c      	cmp	r4, r3
   d85dc:	dc16      	bgt.n	d860c <atanf+0x124>
   d85de:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   d85e2:	429c      	cmp	r4, r3
   d85e4:	dc27      	bgt.n	d8636 <atanf+0x14e>
   d85e6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d85ea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   d85ee:	eea0 7a27 	vfma.f32	s14, s0, s15
   d85f2:	2300      	movs	r3, #0
   d85f4:	ee30 0a27 	vadd.f32	s0, s0, s15
   d85f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d85fc:	e792      	b.n	d8524 <atanf+0x3c>
   d85fe:	ee76 6a87 	vadd.f32	s13, s13, s14
   d8602:	eee6 7ae7 	vfms.f32	s15, s13, s15
   d8606:	eeb0 0a67 	vmov.f32	s0, s15
   d860a:	bd38      	pop	{r3, r4, r5, pc}
   d860c:	4b21      	ldr	r3, [pc, #132]	; (d8694 <atanf+0x1ac>)
   d860e:	429c      	cmp	r4, r3
   d8610:	dc0b      	bgt.n	d862a <atanf+0x142>
   d8612:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   d8616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d861a:	eea0 7a27 	vfma.f32	s14, s0, s15
   d861e:	2302      	movs	r3, #2
   d8620:	ee30 0a67 	vsub.f32	s0, s0, s15
   d8624:	eec0 7a07 	vdiv.f32	s15, s0, s14
   d8628:	e77c      	b.n	d8524 <atanf+0x3c>
   d862a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   d862e:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d8632:	2303      	movs	r3, #3
   d8634:	e776      	b.n	d8524 <atanf+0x3c>
   d8636:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d863a:	ee30 7a67 	vsub.f32	s14, s0, s15
   d863e:	ee30 0a27 	vadd.f32	s0, s0, s15
   d8642:	2301      	movs	r3, #1
   d8644:	eec7 7a00 	vdiv.f32	s15, s14, s0
   d8648:	e76c      	b.n	d8524 <atanf+0x3c>
   d864a:	bf00      	nop
   d864c:	3fc90fdb 	.word	0x3fc90fdb
   d8650:	bfc90fdb 	.word	0xbfc90fdb
   d8654:	3edfffff 	.word	0x3edfffff
   d8658:	3c8569d7 	.word	0x3c8569d7
   d865c:	3d4bda59 	.word	0x3d4bda59
   d8660:	3d886b35 	.word	0x3d886b35
   d8664:	bd15a221 	.word	0xbd15a221
   d8668:	bd6ef16b 	.word	0xbd6ef16b
   d866c:	3dba2e6e 	.word	0x3dba2e6e
   d8670:	bd9d8795 	.word	0xbd9d8795
   d8674:	3e124925 	.word	0x3e124925
   d8678:	bde38e38 	.word	0xbde38e38
   d867c:	3eaaaaab 	.word	0x3eaaaaab
   d8680:	be4ccccd 	.word	0xbe4ccccd
   d8684:	000d9fe4 	.word	0x000d9fe4
   d8688:	000d9fd4 	.word	0x000d9fd4
   d868c:	7149f2ca 	.word	0x7149f2ca
   d8690:	3f97ffff 	.word	0x3f97ffff
   d8694:	401bffff 	.word	0x401bffff

000d8698 <fabsf>:
   d8698:	ee10 3a10 	vmov	r3, s0
   d869c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d86a0:	ee00 3a10 	vmov	s0, r3
   d86a4:	4770      	bx	lr
   d86a6:	bf00      	nop

000d86a8 <__aeabi_drsub>:
   d86a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d86ac:	e002      	b.n	d86b4 <__adddf3>
   d86ae:	bf00      	nop

000d86b0 <__aeabi_dsub>:
   d86b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d86b4 <__adddf3>:
   d86b4:	b530      	push	{r4, r5, lr}
   d86b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d86ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d86be:	ea94 0f05 	teq	r4, r5
   d86c2:	bf08      	it	eq
   d86c4:	ea90 0f02 	teqeq	r0, r2
   d86c8:	bf1f      	itttt	ne
   d86ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   d86ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   d86d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d86d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d86da:	f000 80e2 	beq.w	d88a2 <__adddf3+0x1ee>
   d86de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d86e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d86e6:	bfb8      	it	lt
   d86e8:	426d      	neglt	r5, r5
   d86ea:	dd0c      	ble.n	d8706 <__adddf3+0x52>
   d86ec:	442c      	add	r4, r5
   d86ee:	ea80 0202 	eor.w	r2, r0, r2
   d86f2:	ea81 0303 	eor.w	r3, r1, r3
   d86f6:	ea82 0000 	eor.w	r0, r2, r0
   d86fa:	ea83 0101 	eor.w	r1, r3, r1
   d86fe:	ea80 0202 	eor.w	r2, r0, r2
   d8702:	ea81 0303 	eor.w	r3, r1, r3
   d8706:	2d36      	cmp	r5, #54	; 0x36
   d8708:	bf88      	it	hi
   d870a:	bd30      	pophi	{r4, r5, pc}
   d870c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8710:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8714:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8718:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d871c:	d002      	beq.n	d8724 <__adddf3+0x70>
   d871e:	4240      	negs	r0, r0
   d8720:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8724:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8728:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d872c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8730:	d002      	beq.n	d8738 <__adddf3+0x84>
   d8732:	4252      	negs	r2, r2
   d8734:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8738:	ea94 0f05 	teq	r4, r5
   d873c:	f000 80a7 	beq.w	d888e <__adddf3+0x1da>
   d8740:	f1a4 0401 	sub.w	r4, r4, #1
   d8744:	f1d5 0e20 	rsbs	lr, r5, #32
   d8748:	db0d      	blt.n	d8766 <__adddf3+0xb2>
   d874a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d874e:	fa22 f205 	lsr.w	r2, r2, r5
   d8752:	1880      	adds	r0, r0, r2
   d8754:	f141 0100 	adc.w	r1, r1, #0
   d8758:	fa03 f20e 	lsl.w	r2, r3, lr
   d875c:	1880      	adds	r0, r0, r2
   d875e:	fa43 f305 	asr.w	r3, r3, r5
   d8762:	4159      	adcs	r1, r3
   d8764:	e00e      	b.n	d8784 <__adddf3+0xd0>
   d8766:	f1a5 0520 	sub.w	r5, r5, #32
   d876a:	f10e 0e20 	add.w	lr, lr, #32
   d876e:	2a01      	cmp	r2, #1
   d8770:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8774:	bf28      	it	cs
   d8776:	f04c 0c02 	orrcs.w	ip, ip, #2
   d877a:	fa43 f305 	asr.w	r3, r3, r5
   d877e:	18c0      	adds	r0, r0, r3
   d8780:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8788:	d507      	bpl.n	d879a <__adddf3+0xe6>
   d878a:	f04f 0e00 	mov.w	lr, #0
   d878e:	f1dc 0c00 	rsbs	ip, ip, #0
   d8792:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8796:	eb6e 0101 	sbc.w	r1, lr, r1
   d879a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d879e:	d31b      	bcc.n	d87d8 <__adddf3+0x124>
   d87a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d87a4:	d30c      	bcc.n	d87c0 <__adddf3+0x10c>
   d87a6:	0849      	lsrs	r1, r1, #1
   d87a8:	ea5f 0030 	movs.w	r0, r0, rrx
   d87ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d87b0:	f104 0401 	add.w	r4, r4, #1
   d87b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d87b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d87bc:	f080 809a 	bcs.w	d88f4 <__adddf3+0x240>
   d87c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d87c4:	bf08      	it	eq
   d87c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d87ca:	f150 0000 	adcs.w	r0, r0, #0
   d87ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d87d2:	ea41 0105 	orr.w	r1, r1, r5
   d87d6:	bd30      	pop	{r4, r5, pc}
   d87d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d87dc:	4140      	adcs	r0, r0
   d87de:	eb41 0101 	adc.w	r1, r1, r1
   d87e2:	3c01      	subs	r4, #1
   d87e4:	bf28      	it	cs
   d87e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d87ea:	d2e9      	bcs.n	d87c0 <__adddf3+0x10c>
   d87ec:	f091 0f00 	teq	r1, #0
   d87f0:	bf04      	itt	eq
   d87f2:	4601      	moveq	r1, r0
   d87f4:	2000      	moveq	r0, #0
   d87f6:	fab1 f381 	clz	r3, r1
   d87fa:	bf08      	it	eq
   d87fc:	3320      	addeq	r3, #32
   d87fe:	f1a3 030b 	sub.w	r3, r3, #11
   d8802:	f1b3 0220 	subs.w	r2, r3, #32
   d8806:	da0c      	bge.n	d8822 <__adddf3+0x16e>
   d8808:	320c      	adds	r2, #12
   d880a:	dd08      	ble.n	d881e <__adddf3+0x16a>
   d880c:	f102 0c14 	add.w	ip, r2, #20
   d8810:	f1c2 020c 	rsb	r2, r2, #12
   d8814:	fa01 f00c 	lsl.w	r0, r1, ip
   d8818:	fa21 f102 	lsr.w	r1, r1, r2
   d881c:	e00c      	b.n	d8838 <__adddf3+0x184>
   d881e:	f102 0214 	add.w	r2, r2, #20
   d8822:	bfd8      	it	le
   d8824:	f1c2 0c20 	rsble	ip, r2, #32
   d8828:	fa01 f102 	lsl.w	r1, r1, r2
   d882c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8830:	bfdc      	itt	le
   d8832:	ea41 010c 	orrle.w	r1, r1, ip
   d8836:	4090      	lslle	r0, r2
   d8838:	1ae4      	subs	r4, r4, r3
   d883a:	bfa2      	ittt	ge
   d883c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8840:	4329      	orrge	r1, r5
   d8842:	bd30      	popge	{r4, r5, pc}
   d8844:	ea6f 0404 	mvn.w	r4, r4
   d8848:	3c1f      	subs	r4, #31
   d884a:	da1c      	bge.n	d8886 <__adddf3+0x1d2>
   d884c:	340c      	adds	r4, #12
   d884e:	dc0e      	bgt.n	d886e <__adddf3+0x1ba>
   d8850:	f104 0414 	add.w	r4, r4, #20
   d8854:	f1c4 0220 	rsb	r2, r4, #32
   d8858:	fa20 f004 	lsr.w	r0, r0, r4
   d885c:	fa01 f302 	lsl.w	r3, r1, r2
   d8860:	ea40 0003 	orr.w	r0, r0, r3
   d8864:	fa21 f304 	lsr.w	r3, r1, r4
   d8868:	ea45 0103 	orr.w	r1, r5, r3
   d886c:	bd30      	pop	{r4, r5, pc}
   d886e:	f1c4 040c 	rsb	r4, r4, #12
   d8872:	f1c4 0220 	rsb	r2, r4, #32
   d8876:	fa20 f002 	lsr.w	r0, r0, r2
   d887a:	fa01 f304 	lsl.w	r3, r1, r4
   d887e:	ea40 0003 	orr.w	r0, r0, r3
   d8882:	4629      	mov	r1, r5
   d8884:	bd30      	pop	{r4, r5, pc}
   d8886:	fa21 f004 	lsr.w	r0, r1, r4
   d888a:	4629      	mov	r1, r5
   d888c:	bd30      	pop	{r4, r5, pc}
   d888e:	f094 0f00 	teq	r4, #0
   d8892:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8896:	bf06      	itte	eq
   d8898:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d889c:	3401      	addeq	r4, #1
   d889e:	3d01      	subne	r5, #1
   d88a0:	e74e      	b.n	d8740 <__adddf3+0x8c>
   d88a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d88a6:	bf18      	it	ne
   d88a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d88ac:	d029      	beq.n	d8902 <__adddf3+0x24e>
   d88ae:	ea94 0f05 	teq	r4, r5
   d88b2:	bf08      	it	eq
   d88b4:	ea90 0f02 	teqeq	r0, r2
   d88b8:	d005      	beq.n	d88c6 <__adddf3+0x212>
   d88ba:	ea54 0c00 	orrs.w	ip, r4, r0
   d88be:	bf04      	itt	eq
   d88c0:	4619      	moveq	r1, r3
   d88c2:	4610      	moveq	r0, r2
   d88c4:	bd30      	pop	{r4, r5, pc}
   d88c6:	ea91 0f03 	teq	r1, r3
   d88ca:	bf1e      	ittt	ne
   d88cc:	2100      	movne	r1, #0
   d88ce:	2000      	movne	r0, #0
   d88d0:	bd30      	popne	{r4, r5, pc}
   d88d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d88d6:	d105      	bne.n	d88e4 <__adddf3+0x230>
   d88d8:	0040      	lsls	r0, r0, #1
   d88da:	4149      	adcs	r1, r1
   d88dc:	bf28      	it	cs
   d88de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d88e2:	bd30      	pop	{r4, r5, pc}
   d88e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d88e8:	bf3c      	itt	cc
   d88ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d88ee:	bd30      	popcc	{r4, r5, pc}
   d88f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d88f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d88f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d88fc:	f04f 0000 	mov.w	r0, #0
   d8900:	bd30      	pop	{r4, r5, pc}
   d8902:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8906:	bf1a      	itte	ne
   d8908:	4619      	movne	r1, r3
   d890a:	4610      	movne	r0, r2
   d890c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8910:	bf1c      	itt	ne
   d8912:	460b      	movne	r3, r1
   d8914:	4602      	movne	r2, r0
   d8916:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d891a:	bf06      	itte	eq
   d891c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8920:	ea91 0f03 	teqeq	r1, r3
   d8924:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8928:	bd30      	pop	{r4, r5, pc}
   d892a:	bf00      	nop

000d892c <__aeabi_ui2d>:
   d892c:	f090 0f00 	teq	r0, #0
   d8930:	bf04      	itt	eq
   d8932:	2100      	moveq	r1, #0
   d8934:	4770      	bxeq	lr
   d8936:	b530      	push	{r4, r5, lr}
   d8938:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d893c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8940:	f04f 0500 	mov.w	r5, #0
   d8944:	f04f 0100 	mov.w	r1, #0
   d8948:	e750      	b.n	d87ec <__adddf3+0x138>
   d894a:	bf00      	nop

000d894c <__aeabi_i2d>:
   d894c:	f090 0f00 	teq	r0, #0
   d8950:	bf04      	itt	eq
   d8952:	2100      	moveq	r1, #0
   d8954:	4770      	bxeq	lr
   d8956:	b530      	push	{r4, r5, lr}
   d8958:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d895c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8960:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8964:	bf48      	it	mi
   d8966:	4240      	negmi	r0, r0
   d8968:	f04f 0100 	mov.w	r1, #0
   d896c:	e73e      	b.n	d87ec <__adddf3+0x138>
   d896e:	bf00      	nop

000d8970 <__aeabi_f2d>:
   d8970:	0042      	lsls	r2, r0, #1
   d8972:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8976:	ea4f 0131 	mov.w	r1, r1, rrx
   d897a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d897e:	bf1f      	itttt	ne
   d8980:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8984:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8988:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d898c:	4770      	bxne	lr
   d898e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8992:	bf08      	it	eq
   d8994:	4770      	bxeq	lr
   d8996:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d899a:	bf04      	itt	eq
   d899c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d89a0:	4770      	bxeq	lr
   d89a2:	b530      	push	{r4, r5, lr}
   d89a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d89a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d89ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d89b0:	e71c      	b.n	d87ec <__adddf3+0x138>
   d89b2:	bf00      	nop

000d89b4 <__aeabi_ul2d>:
   d89b4:	ea50 0201 	orrs.w	r2, r0, r1
   d89b8:	bf08      	it	eq
   d89ba:	4770      	bxeq	lr
   d89bc:	b530      	push	{r4, r5, lr}
   d89be:	f04f 0500 	mov.w	r5, #0
   d89c2:	e00a      	b.n	d89da <__aeabi_l2d+0x16>

000d89c4 <__aeabi_l2d>:
   d89c4:	ea50 0201 	orrs.w	r2, r0, r1
   d89c8:	bf08      	it	eq
   d89ca:	4770      	bxeq	lr
   d89cc:	b530      	push	{r4, r5, lr}
   d89ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d89d2:	d502      	bpl.n	d89da <__aeabi_l2d+0x16>
   d89d4:	4240      	negs	r0, r0
   d89d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d89da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d89de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d89e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d89e6:	f43f aed8 	beq.w	d879a <__adddf3+0xe6>
   d89ea:	f04f 0203 	mov.w	r2, #3
   d89ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d89f2:	bf18      	it	ne
   d89f4:	3203      	addne	r2, #3
   d89f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d89fa:	bf18      	it	ne
   d89fc:	3203      	addne	r2, #3
   d89fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8a02:	f1c2 0320 	rsb	r3, r2, #32
   d8a06:	fa00 fc03 	lsl.w	ip, r0, r3
   d8a0a:	fa20 f002 	lsr.w	r0, r0, r2
   d8a0e:	fa01 fe03 	lsl.w	lr, r1, r3
   d8a12:	ea40 000e 	orr.w	r0, r0, lr
   d8a16:	fa21 f102 	lsr.w	r1, r1, r2
   d8a1a:	4414      	add	r4, r2
   d8a1c:	e6bd      	b.n	d879a <__adddf3+0xe6>
   d8a1e:	bf00      	nop

000d8a20 <__aeabi_dmul>:
   d8a20:	b570      	push	{r4, r5, r6, lr}
   d8a22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8a26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8a2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8a2e:	bf1d      	ittte	ne
   d8a30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8a34:	ea94 0f0c 	teqne	r4, ip
   d8a38:	ea95 0f0c 	teqne	r5, ip
   d8a3c:	f000 f8de 	bleq	d8bfc <__aeabi_dmul+0x1dc>
   d8a40:	442c      	add	r4, r5
   d8a42:	ea81 0603 	eor.w	r6, r1, r3
   d8a46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8a4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8a4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8a52:	bf18      	it	ne
   d8a54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8a60:	d038      	beq.n	d8ad4 <__aeabi_dmul+0xb4>
   d8a62:	fba0 ce02 	umull	ip, lr, r0, r2
   d8a66:	f04f 0500 	mov.w	r5, #0
   d8a6a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8a6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8a72:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8a76:	f04f 0600 	mov.w	r6, #0
   d8a7a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8a7e:	f09c 0f00 	teq	ip, #0
   d8a82:	bf18      	it	ne
   d8a84:	f04e 0e01 	orrne.w	lr, lr, #1
   d8a88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8a8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8a90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8a94:	d204      	bcs.n	d8aa0 <__aeabi_dmul+0x80>
   d8a96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8a9a:	416d      	adcs	r5, r5
   d8a9c:	eb46 0606 	adc.w	r6, r6, r6
   d8aa0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8aa4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8aa8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8aac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8ab0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8ab4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8ab8:	bf88      	it	hi
   d8aba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8abe:	d81e      	bhi.n	d8afe <__aeabi_dmul+0xde>
   d8ac0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8ac4:	bf08      	it	eq
   d8ac6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8aca:	f150 0000 	adcs.w	r0, r0, #0
   d8ace:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8ad2:	bd70      	pop	{r4, r5, r6, pc}
   d8ad4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8ad8:	ea46 0101 	orr.w	r1, r6, r1
   d8adc:	ea40 0002 	orr.w	r0, r0, r2
   d8ae0:	ea81 0103 	eor.w	r1, r1, r3
   d8ae4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8ae8:	bfc2      	ittt	gt
   d8aea:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8aee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8af2:	bd70      	popgt	{r4, r5, r6, pc}
   d8af4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8af8:	f04f 0e00 	mov.w	lr, #0
   d8afc:	3c01      	subs	r4, #1
   d8afe:	f300 80ab 	bgt.w	d8c58 <__aeabi_dmul+0x238>
   d8b02:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8b06:	bfde      	ittt	le
   d8b08:	2000      	movle	r0, #0
   d8b0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8b0e:	bd70      	pople	{r4, r5, r6, pc}
   d8b10:	f1c4 0400 	rsb	r4, r4, #0
   d8b14:	3c20      	subs	r4, #32
   d8b16:	da35      	bge.n	d8b84 <__aeabi_dmul+0x164>
   d8b18:	340c      	adds	r4, #12
   d8b1a:	dc1b      	bgt.n	d8b54 <__aeabi_dmul+0x134>
   d8b1c:	f104 0414 	add.w	r4, r4, #20
   d8b20:	f1c4 0520 	rsb	r5, r4, #32
   d8b24:	fa00 f305 	lsl.w	r3, r0, r5
   d8b28:	fa20 f004 	lsr.w	r0, r0, r4
   d8b2c:	fa01 f205 	lsl.w	r2, r1, r5
   d8b30:	ea40 0002 	orr.w	r0, r0, r2
   d8b34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8b38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8b3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8b40:	fa21 f604 	lsr.w	r6, r1, r4
   d8b44:	eb42 0106 	adc.w	r1, r2, r6
   d8b48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b4c:	bf08      	it	eq
   d8b4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b52:	bd70      	pop	{r4, r5, r6, pc}
   d8b54:	f1c4 040c 	rsb	r4, r4, #12
   d8b58:	f1c4 0520 	rsb	r5, r4, #32
   d8b5c:	fa00 f304 	lsl.w	r3, r0, r4
   d8b60:	fa20 f005 	lsr.w	r0, r0, r5
   d8b64:	fa01 f204 	lsl.w	r2, r1, r4
   d8b68:	ea40 0002 	orr.w	r0, r0, r2
   d8b6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8b70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8b74:	f141 0100 	adc.w	r1, r1, #0
   d8b78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b7c:	bf08      	it	eq
   d8b7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b82:	bd70      	pop	{r4, r5, r6, pc}
   d8b84:	f1c4 0520 	rsb	r5, r4, #32
   d8b88:	fa00 f205 	lsl.w	r2, r0, r5
   d8b8c:	ea4e 0e02 	orr.w	lr, lr, r2
   d8b90:	fa20 f304 	lsr.w	r3, r0, r4
   d8b94:	fa01 f205 	lsl.w	r2, r1, r5
   d8b98:	ea43 0302 	orr.w	r3, r3, r2
   d8b9c:	fa21 f004 	lsr.w	r0, r1, r4
   d8ba0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8ba4:	fa21 f204 	lsr.w	r2, r1, r4
   d8ba8:	ea20 0002 	bic.w	r0, r0, r2
   d8bac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8bb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8bb4:	bf08      	it	eq
   d8bb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8bba:	bd70      	pop	{r4, r5, r6, pc}
   d8bbc:	f094 0f00 	teq	r4, #0
   d8bc0:	d10f      	bne.n	d8be2 <__aeabi_dmul+0x1c2>
   d8bc2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8bc6:	0040      	lsls	r0, r0, #1
   d8bc8:	eb41 0101 	adc.w	r1, r1, r1
   d8bcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8bd0:	bf08      	it	eq
   d8bd2:	3c01      	subeq	r4, #1
   d8bd4:	d0f7      	beq.n	d8bc6 <__aeabi_dmul+0x1a6>
   d8bd6:	ea41 0106 	orr.w	r1, r1, r6
   d8bda:	f095 0f00 	teq	r5, #0
   d8bde:	bf18      	it	ne
   d8be0:	4770      	bxne	lr
   d8be2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8be6:	0052      	lsls	r2, r2, #1
   d8be8:	eb43 0303 	adc.w	r3, r3, r3
   d8bec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8bf0:	bf08      	it	eq
   d8bf2:	3d01      	subeq	r5, #1
   d8bf4:	d0f7      	beq.n	d8be6 <__aeabi_dmul+0x1c6>
   d8bf6:	ea43 0306 	orr.w	r3, r3, r6
   d8bfa:	4770      	bx	lr
   d8bfc:	ea94 0f0c 	teq	r4, ip
   d8c00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8c04:	bf18      	it	ne
   d8c06:	ea95 0f0c 	teqne	r5, ip
   d8c0a:	d00c      	beq.n	d8c26 <__aeabi_dmul+0x206>
   d8c0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8c10:	bf18      	it	ne
   d8c12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8c16:	d1d1      	bne.n	d8bbc <__aeabi_dmul+0x19c>
   d8c18:	ea81 0103 	eor.w	r1, r1, r3
   d8c1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c20:	f04f 0000 	mov.w	r0, #0
   d8c24:	bd70      	pop	{r4, r5, r6, pc}
   d8c26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8c2a:	bf06      	itte	eq
   d8c2c:	4610      	moveq	r0, r2
   d8c2e:	4619      	moveq	r1, r3
   d8c30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8c34:	d019      	beq.n	d8c6a <__aeabi_dmul+0x24a>
   d8c36:	ea94 0f0c 	teq	r4, ip
   d8c3a:	d102      	bne.n	d8c42 <__aeabi_dmul+0x222>
   d8c3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8c40:	d113      	bne.n	d8c6a <__aeabi_dmul+0x24a>
   d8c42:	ea95 0f0c 	teq	r5, ip
   d8c46:	d105      	bne.n	d8c54 <__aeabi_dmul+0x234>
   d8c48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8c4c:	bf1c      	itt	ne
   d8c4e:	4610      	movne	r0, r2
   d8c50:	4619      	movne	r1, r3
   d8c52:	d10a      	bne.n	d8c6a <__aeabi_dmul+0x24a>
   d8c54:	ea81 0103 	eor.w	r1, r1, r3
   d8c58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8c60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8c64:	f04f 0000 	mov.w	r0, #0
   d8c68:	bd70      	pop	{r4, r5, r6, pc}
   d8c6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8c6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8c72:	bd70      	pop	{r4, r5, r6, pc}

000d8c74 <__aeabi_ddiv>:
   d8c74:	b570      	push	{r4, r5, r6, lr}
   d8c76:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8c7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8c7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8c82:	bf1d      	ittte	ne
   d8c84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8c88:	ea94 0f0c 	teqne	r4, ip
   d8c8c:	ea95 0f0c 	teqne	r5, ip
   d8c90:	f000 f8a7 	bleq	d8de2 <__aeabi_ddiv+0x16e>
   d8c94:	eba4 0405 	sub.w	r4, r4, r5
   d8c98:	ea81 0e03 	eor.w	lr, r1, r3
   d8c9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8ca0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8ca4:	f000 8088 	beq.w	d8db8 <__aeabi_ddiv+0x144>
   d8ca8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8cac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8cb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8cb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8cb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8cbc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8cc0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8cc4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8cc8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8ccc:	429d      	cmp	r5, r3
   d8cce:	bf08      	it	eq
   d8cd0:	4296      	cmpeq	r6, r2
   d8cd2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8cd6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8cda:	d202      	bcs.n	d8ce2 <__aeabi_ddiv+0x6e>
   d8cdc:	085b      	lsrs	r3, r3, #1
   d8cde:	ea4f 0232 	mov.w	r2, r2, rrx
   d8ce2:	1ab6      	subs	r6, r6, r2
   d8ce4:	eb65 0503 	sbc.w	r5, r5, r3
   d8ce8:	085b      	lsrs	r3, r3, #1
   d8cea:	ea4f 0232 	mov.w	r2, r2, rrx
   d8cee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8cf2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8cf6:	ebb6 0e02 	subs.w	lr, r6, r2
   d8cfa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8cfe:	bf22      	ittt	cs
   d8d00:	1ab6      	subcs	r6, r6, r2
   d8d02:	4675      	movcs	r5, lr
   d8d04:	ea40 000c 	orrcs.w	r0, r0, ip
   d8d08:	085b      	lsrs	r3, r3, #1
   d8d0a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d0e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d12:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d16:	bf22      	ittt	cs
   d8d18:	1ab6      	subcs	r6, r6, r2
   d8d1a:	4675      	movcs	r5, lr
   d8d1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8d20:	085b      	lsrs	r3, r3, #1
   d8d22:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d26:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d2e:	bf22      	ittt	cs
   d8d30:	1ab6      	subcs	r6, r6, r2
   d8d32:	4675      	movcs	r5, lr
   d8d34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8d38:	085b      	lsrs	r3, r3, #1
   d8d3a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d3e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d42:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d46:	bf22      	ittt	cs
   d8d48:	1ab6      	subcs	r6, r6, r2
   d8d4a:	4675      	movcs	r5, lr
   d8d4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8d50:	ea55 0e06 	orrs.w	lr, r5, r6
   d8d54:	d018      	beq.n	d8d88 <__aeabi_ddiv+0x114>
   d8d56:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8d5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8d5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8d62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8d66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8d6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8d6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8d72:	d1c0      	bne.n	d8cf6 <__aeabi_ddiv+0x82>
   d8d74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d78:	d10b      	bne.n	d8d92 <__aeabi_ddiv+0x11e>
   d8d7a:	ea41 0100 	orr.w	r1, r1, r0
   d8d7e:	f04f 0000 	mov.w	r0, #0
   d8d82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8d86:	e7b6      	b.n	d8cf6 <__aeabi_ddiv+0x82>
   d8d88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d8c:	bf04      	itt	eq
   d8d8e:	4301      	orreq	r1, r0
   d8d90:	2000      	moveq	r0, #0
   d8d92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8d96:	bf88      	it	hi
   d8d98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8d9c:	f63f aeaf 	bhi.w	d8afe <__aeabi_dmul+0xde>
   d8da0:	ebb5 0c03 	subs.w	ip, r5, r3
   d8da4:	bf04      	itt	eq
   d8da6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8daa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8dae:	f150 0000 	adcs.w	r0, r0, #0
   d8db2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8db6:	bd70      	pop	{r4, r5, r6, pc}
   d8db8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8dbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8dc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8dc4:	bfc2      	ittt	gt
   d8dc6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8dca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8dce:	bd70      	popgt	{r4, r5, r6, pc}
   d8dd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8dd4:	f04f 0e00 	mov.w	lr, #0
   d8dd8:	3c01      	subs	r4, #1
   d8dda:	e690      	b.n	d8afe <__aeabi_dmul+0xde>
   d8ddc:	ea45 0e06 	orr.w	lr, r5, r6
   d8de0:	e68d      	b.n	d8afe <__aeabi_dmul+0xde>
   d8de2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8de6:	ea94 0f0c 	teq	r4, ip
   d8dea:	bf08      	it	eq
   d8dec:	ea95 0f0c 	teqeq	r5, ip
   d8df0:	f43f af3b 	beq.w	d8c6a <__aeabi_dmul+0x24a>
   d8df4:	ea94 0f0c 	teq	r4, ip
   d8df8:	d10a      	bne.n	d8e10 <__aeabi_ddiv+0x19c>
   d8dfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8dfe:	f47f af34 	bne.w	d8c6a <__aeabi_dmul+0x24a>
   d8e02:	ea95 0f0c 	teq	r5, ip
   d8e06:	f47f af25 	bne.w	d8c54 <__aeabi_dmul+0x234>
   d8e0a:	4610      	mov	r0, r2
   d8e0c:	4619      	mov	r1, r3
   d8e0e:	e72c      	b.n	d8c6a <__aeabi_dmul+0x24a>
   d8e10:	ea95 0f0c 	teq	r5, ip
   d8e14:	d106      	bne.n	d8e24 <__aeabi_ddiv+0x1b0>
   d8e16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8e1a:	f43f aefd 	beq.w	d8c18 <__aeabi_dmul+0x1f8>
   d8e1e:	4610      	mov	r0, r2
   d8e20:	4619      	mov	r1, r3
   d8e22:	e722      	b.n	d8c6a <__aeabi_dmul+0x24a>
   d8e24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8e28:	bf18      	it	ne
   d8e2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8e2e:	f47f aec5 	bne.w	d8bbc <__aeabi_dmul+0x19c>
   d8e32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8e36:	f47f af0d 	bne.w	d8c54 <__aeabi_dmul+0x234>
   d8e3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8e3e:	f47f aeeb 	bne.w	d8c18 <__aeabi_dmul+0x1f8>
   d8e42:	e712      	b.n	d8c6a <__aeabi_dmul+0x24a>

000d8e44 <__gedf2>:
   d8e44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8e48:	e006      	b.n	d8e58 <__cmpdf2+0x4>
   d8e4a:	bf00      	nop

000d8e4c <__ledf2>:
   d8e4c:	f04f 0c01 	mov.w	ip, #1
   d8e50:	e002      	b.n	d8e58 <__cmpdf2+0x4>
   d8e52:	bf00      	nop

000d8e54 <__cmpdf2>:
   d8e54:	f04f 0c01 	mov.w	ip, #1
   d8e58:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8e5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8e60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8e68:	bf18      	it	ne
   d8e6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8e6e:	d01b      	beq.n	d8ea8 <__cmpdf2+0x54>
   d8e70:	b001      	add	sp, #4
   d8e72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8e76:	bf0c      	ite	eq
   d8e78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8e7c:	ea91 0f03 	teqne	r1, r3
   d8e80:	bf02      	ittt	eq
   d8e82:	ea90 0f02 	teqeq	r0, r2
   d8e86:	2000      	moveq	r0, #0
   d8e88:	4770      	bxeq	lr
   d8e8a:	f110 0f00 	cmn.w	r0, #0
   d8e8e:	ea91 0f03 	teq	r1, r3
   d8e92:	bf58      	it	pl
   d8e94:	4299      	cmppl	r1, r3
   d8e96:	bf08      	it	eq
   d8e98:	4290      	cmpeq	r0, r2
   d8e9a:	bf2c      	ite	cs
   d8e9c:	17d8      	asrcs	r0, r3, #31
   d8e9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8ea2:	f040 0001 	orr.w	r0, r0, #1
   d8ea6:	4770      	bx	lr
   d8ea8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8eac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8eb0:	d102      	bne.n	d8eb8 <__cmpdf2+0x64>
   d8eb2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8eb6:	d107      	bne.n	d8ec8 <__cmpdf2+0x74>
   d8eb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8ebc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8ec0:	d1d6      	bne.n	d8e70 <__cmpdf2+0x1c>
   d8ec2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8ec6:	d0d3      	beq.n	d8e70 <__cmpdf2+0x1c>
   d8ec8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8ecc:	4770      	bx	lr
   d8ece:	bf00      	nop

000d8ed0 <__aeabi_cdrcmple>:
   d8ed0:	4684      	mov	ip, r0
   d8ed2:	4610      	mov	r0, r2
   d8ed4:	4662      	mov	r2, ip
   d8ed6:	468c      	mov	ip, r1
   d8ed8:	4619      	mov	r1, r3
   d8eda:	4663      	mov	r3, ip
   d8edc:	e000      	b.n	d8ee0 <__aeabi_cdcmpeq>
   d8ede:	bf00      	nop

000d8ee0 <__aeabi_cdcmpeq>:
   d8ee0:	b501      	push	{r0, lr}
   d8ee2:	f7ff ffb7 	bl	d8e54 <__cmpdf2>
   d8ee6:	2800      	cmp	r0, #0
   d8ee8:	bf48      	it	mi
   d8eea:	f110 0f00 	cmnmi.w	r0, #0
   d8eee:	bd01      	pop	{r0, pc}

000d8ef0 <__aeabi_dcmpeq>:
   d8ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ef4:	f7ff fff4 	bl	d8ee0 <__aeabi_cdcmpeq>
   d8ef8:	bf0c      	ite	eq
   d8efa:	2001      	moveq	r0, #1
   d8efc:	2000      	movne	r0, #0
   d8efe:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f02:	bf00      	nop

000d8f04 <__aeabi_dcmplt>:
   d8f04:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f08:	f7ff ffea 	bl	d8ee0 <__aeabi_cdcmpeq>
   d8f0c:	bf34      	ite	cc
   d8f0e:	2001      	movcc	r0, #1
   d8f10:	2000      	movcs	r0, #0
   d8f12:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f16:	bf00      	nop

000d8f18 <__aeabi_dcmple>:
   d8f18:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f1c:	f7ff ffe0 	bl	d8ee0 <__aeabi_cdcmpeq>
   d8f20:	bf94      	ite	ls
   d8f22:	2001      	movls	r0, #1
   d8f24:	2000      	movhi	r0, #0
   d8f26:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f2a:	bf00      	nop

000d8f2c <__aeabi_dcmpge>:
   d8f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f30:	f7ff ffce 	bl	d8ed0 <__aeabi_cdrcmple>
   d8f34:	bf94      	ite	ls
   d8f36:	2001      	movls	r0, #1
   d8f38:	2000      	movhi	r0, #0
   d8f3a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f3e:	bf00      	nop

000d8f40 <__aeabi_dcmpgt>:
   d8f40:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f44:	f7ff ffc4 	bl	d8ed0 <__aeabi_cdrcmple>
   d8f48:	bf34      	ite	cc
   d8f4a:	2001      	movcc	r0, #1
   d8f4c:	2000      	movcs	r0, #0
   d8f4e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f52:	bf00      	nop

000d8f54 <__aeabi_d2f>:
   d8f54:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8f58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8f5c:	bf24      	itt	cs
   d8f5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8f62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8f66:	d90d      	bls.n	d8f84 <__aeabi_d2f+0x30>
   d8f68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8f6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8f70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8f74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8f78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8f7c:	bf08      	it	eq
   d8f7e:	f020 0001 	biceq.w	r0, r0, #1
   d8f82:	4770      	bx	lr
   d8f84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8f88:	d121      	bne.n	d8fce <__aeabi_d2f+0x7a>
   d8f8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8f8e:	bfbc      	itt	lt
   d8f90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8f94:	4770      	bxlt	lr
   d8f96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8f9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8f9e:	f1c2 0218 	rsb	r2, r2, #24
   d8fa2:	f1c2 0c20 	rsb	ip, r2, #32
   d8fa6:	fa10 f30c 	lsls.w	r3, r0, ip
   d8faa:	fa20 f002 	lsr.w	r0, r0, r2
   d8fae:	bf18      	it	ne
   d8fb0:	f040 0001 	orrne.w	r0, r0, #1
   d8fb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8fb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8fbc:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8fc0:	ea40 000c 	orr.w	r0, r0, ip
   d8fc4:	fa23 f302 	lsr.w	r3, r3, r2
   d8fc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8fcc:	e7cc      	b.n	d8f68 <__aeabi_d2f+0x14>
   d8fce:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8fd2:	d107      	bne.n	d8fe4 <__aeabi_d2f+0x90>
   d8fd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8fd8:	bf1e      	ittt	ne
   d8fda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8fde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8fe2:	4770      	bxne	lr
   d8fe4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8fe8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8fec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8ff0:	4770      	bx	lr
   d8ff2:	bf00      	nop

000d8ff4 <__aeabi_frsub>:
   d8ff4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d8ff8:	e002      	b.n	d9000 <__addsf3>
   d8ffa:	bf00      	nop

000d8ffc <__aeabi_fsub>:
   d8ffc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000d9000 <__addsf3>:
   d9000:	0042      	lsls	r2, r0, #1
   d9002:	bf1f      	itttt	ne
   d9004:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   d9008:	ea92 0f03 	teqne	r2, r3
   d900c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   d9010:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d9014:	d06a      	beq.n	d90ec <__addsf3+0xec>
   d9016:	ea4f 6212 	mov.w	r2, r2, lsr #24
   d901a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   d901e:	bfc1      	itttt	gt
   d9020:	18d2      	addgt	r2, r2, r3
   d9022:	4041      	eorgt	r1, r0
   d9024:	4048      	eorgt	r0, r1
   d9026:	4041      	eorgt	r1, r0
   d9028:	bfb8      	it	lt
   d902a:	425b      	neglt	r3, r3
   d902c:	2b19      	cmp	r3, #25
   d902e:	bf88      	it	hi
   d9030:	4770      	bxhi	lr
   d9032:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   d9036:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d903a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   d903e:	bf18      	it	ne
   d9040:	4240      	negne	r0, r0
   d9042:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9046:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   d904a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   d904e:	bf18      	it	ne
   d9050:	4249      	negne	r1, r1
   d9052:	ea92 0f03 	teq	r2, r3
   d9056:	d03f      	beq.n	d90d8 <__addsf3+0xd8>
   d9058:	f1a2 0201 	sub.w	r2, r2, #1
   d905c:	fa41 fc03 	asr.w	ip, r1, r3
   d9060:	eb10 000c 	adds.w	r0, r0, ip
   d9064:	f1c3 0320 	rsb	r3, r3, #32
   d9068:	fa01 f103 	lsl.w	r1, r1, r3
   d906c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d9070:	d502      	bpl.n	d9078 <__addsf3+0x78>
   d9072:	4249      	negs	r1, r1
   d9074:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   d9078:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d907c:	d313      	bcc.n	d90a6 <__addsf3+0xa6>
   d907e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   d9082:	d306      	bcc.n	d9092 <__addsf3+0x92>
   d9084:	0840      	lsrs	r0, r0, #1
   d9086:	ea4f 0131 	mov.w	r1, r1, rrx
   d908a:	f102 0201 	add.w	r2, r2, #1
   d908e:	2afe      	cmp	r2, #254	; 0xfe
   d9090:	d251      	bcs.n	d9136 <__addsf3+0x136>
   d9092:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   d9096:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   d909a:	bf08      	it	eq
   d909c:	f020 0001 	biceq.w	r0, r0, #1
   d90a0:	ea40 0003 	orr.w	r0, r0, r3
   d90a4:	4770      	bx	lr
   d90a6:	0049      	lsls	r1, r1, #1
   d90a8:	eb40 0000 	adc.w	r0, r0, r0
   d90ac:	3a01      	subs	r2, #1
   d90ae:	bf28      	it	cs
   d90b0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   d90b4:	d2ed      	bcs.n	d9092 <__addsf3+0x92>
   d90b6:	fab0 fc80 	clz	ip, r0
   d90ba:	f1ac 0c08 	sub.w	ip, ip, #8
   d90be:	ebb2 020c 	subs.w	r2, r2, ip
   d90c2:	fa00 f00c 	lsl.w	r0, r0, ip
   d90c6:	bfaa      	itet	ge
   d90c8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   d90cc:	4252      	neglt	r2, r2
   d90ce:	4318      	orrge	r0, r3
   d90d0:	bfbc      	itt	lt
   d90d2:	40d0      	lsrlt	r0, r2
   d90d4:	4318      	orrlt	r0, r3
   d90d6:	4770      	bx	lr
   d90d8:	f092 0f00 	teq	r2, #0
   d90dc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   d90e0:	bf06      	itte	eq
   d90e2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   d90e6:	3201      	addeq	r2, #1
   d90e8:	3b01      	subne	r3, #1
   d90ea:	e7b5      	b.n	d9058 <__addsf3+0x58>
   d90ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d90f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   d90f4:	bf18      	it	ne
   d90f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d90fa:	d021      	beq.n	d9140 <__addsf3+0x140>
   d90fc:	ea92 0f03 	teq	r2, r3
   d9100:	d004      	beq.n	d910c <__addsf3+0x10c>
   d9102:	f092 0f00 	teq	r2, #0
   d9106:	bf08      	it	eq
   d9108:	4608      	moveq	r0, r1
   d910a:	4770      	bx	lr
   d910c:	ea90 0f01 	teq	r0, r1
   d9110:	bf1c      	itt	ne
   d9112:	2000      	movne	r0, #0
   d9114:	4770      	bxne	lr
   d9116:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   d911a:	d104      	bne.n	d9126 <__addsf3+0x126>
   d911c:	0040      	lsls	r0, r0, #1
   d911e:	bf28      	it	cs
   d9120:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   d9124:	4770      	bx	lr
   d9126:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   d912a:	bf3c      	itt	cc
   d912c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   d9130:	4770      	bxcc	lr
   d9132:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d9136:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   d913a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d913e:	4770      	bx	lr
   d9140:	ea7f 6222 	mvns.w	r2, r2, asr #24
   d9144:	bf16      	itet	ne
   d9146:	4608      	movne	r0, r1
   d9148:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   d914c:	4601      	movne	r1, r0
   d914e:	0242      	lsls	r2, r0, #9
   d9150:	bf06      	itte	eq
   d9152:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   d9156:	ea90 0f01 	teqeq	r0, r1
   d915a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   d915e:	4770      	bx	lr

000d9160 <__aeabi_ui2f>:
   d9160:	f04f 0300 	mov.w	r3, #0
   d9164:	e004      	b.n	d9170 <__aeabi_i2f+0x8>
   d9166:	bf00      	nop

000d9168 <__aeabi_i2f>:
   d9168:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   d916c:	bf48      	it	mi
   d916e:	4240      	negmi	r0, r0
   d9170:	ea5f 0c00 	movs.w	ip, r0
   d9174:	bf08      	it	eq
   d9176:	4770      	bxeq	lr
   d9178:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   d917c:	4601      	mov	r1, r0
   d917e:	f04f 0000 	mov.w	r0, #0
   d9182:	e01c      	b.n	d91be <__aeabi_l2f+0x2a>

000d9184 <__aeabi_ul2f>:
   d9184:	ea50 0201 	orrs.w	r2, r0, r1
   d9188:	bf08      	it	eq
   d918a:	4770      	bxeq	lr
   d918c:	f04f 0300 	mov.w	r3, #0
   d9190:	e00a      	b.n	d91a8 <__aeabi_l2f+0x14>
   d9192:	bf00      	nop

000d9194 <__aeabi_l2f>:
   d9194:	ea50 0201 	orrs.w	r2, r0, r1
   d9198:	bf08      	it	eq
   d919a:	4770      	bxeq	lr
   d919c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   d91a0:	d502      	bpl.n	d91a8 <__aeabi_l2f+0x14>
   d91a2:	4240      	negs	r0, r0
   d91a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d91a8:	ea5f 0c01 	movs.w	ip, r1
   d91ac:	bf02      	ittt	eq
   d91ae:	4684      	moveq	ip, r0
   d91b0:	4601      	moveq	r1, r0
   d91b2:	2000      	moveq	r0, #0
   d91b4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   d91b8:	bf08      	it	eq
   d91ba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   d91be:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   d91c2:	fabc f28c 	clz	r2, ip
   d91c6:	3a08      	subs	r2, #8
   d91c8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   d91cc:	db10      	blt.n	d91f0 <__aeabi_l2f+0x5c>
   d91ce:	fa01 fc02 	lsl.w	ip, r1, r2
   d91d2:	4463      	add	r3, ip
   d91d4:	fa00 fc02 	lsl.w	ip, r0, r2
   d91d8:	f1c2 0220 	rsb	r2, r2, #32
   d91dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d91e0:	fa20 f202 	lsr.w	r2, r0, r2
   d91e4:	eb43 0002 	adc.w	r0, r3, r2
   d91e8:	bf08      	it	eq
   d91ea:	f020 0001 	biceq.w	r0, r0, #1
   d91ee:	4770      	bx	lr
   d91f0:	f102 0220 	add.w	r2, r2, #32
   d91f4:	fa01 fc02 	lsl.w	ip, r1, r2
   d91f8:	f1c2 0220 	rsb	r2, r2, #32
   d91fc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   d9200:	fa21 f202 	lsr.w	r2, r1, r2
   d9204:	eb43 0002 	adc.w	r0, r3, r2
   d9208:	bf08      	it	eq
   d920a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   d920e:	4770      	bx	lr

000d9210 <__aeabi_ldivmod>:
   d9210:	b97b      	cbnz	r3, d9232 <__aeabi_ldivmod+0x22>
   d9212:	b972      	cbnz	r2, d9232 <__aeabi_ldivmod+0x22>
   d9214:	2900      	cmp	r1, #0
   d9216:	bfbe      	ittt	lt
   d9218:	2000      	movlt	r0, #0
   d921a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d921e:	e006      	blt.n	d922e <__aeabi_ldivmod+0x1e>
   d9220:	bf08      	it	eq
   d9222:	2800      	cmpeq	r0, #0
   d9224:	bf1c      	itt	ne
   d9226:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d922a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d922e:	f000 b9a1 	b.w	d9574 <__aeabi_idiv0>
   d9232:	f1ad 0c08 	sub.w	ip, sp, #8
   d9236:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d923a:	2900      	cmp	r1, #0
   d923c:	db09      	blt.n	d9252 <__aeabi_ldivmod+0x42>
   d923e:	2b00      	cmp	r3, #0
   d9240:	db1a      	blt.n	d9278 <__aeabi_ldivmod+0x68>
   d9242:	f000 f835 	bl	d92b0 <__udivmoddi4>
   d9246:	f8dd e004 	ldr.w	lr, [sp, #4]
   d924a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d924e:	b004      	add	sp, #16
   d9250:	4770      	bx	lr
   d9252:	4240      	negs	r0, r0
   d9254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9258:	2b00      	cmp	r3, #0
   d925a:	db1b      	blt.n	d9294 <__aeabi_ldivmod+0x84>
   d925c:	f000 f828 	bl	d92b0 <__udivmoddi4>
   d9260:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9268:	b004      	add	sp, #16
   d926a:	4240      	negs	r0, r0
   d926c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9270:	4252      	negs	r2, r2
   d9272:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9276:	4770      	bx	lr
   d9278:	4252      	negs	r2, r2
   d927a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d927e:	f000 f817 	bl	d92b0 <__udivmoddi4>
   d9282:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9286:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d928a:	b004      	add	sp, #16
   d928c:	4240      	negs	r0, r0
   d928e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9292:	4770      	bx	lr
   d9294:	4252      	negs	r2, r2
   d9296:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d929a:	f000 f809 	bl	d92b0 <__udivmoddi4>
   d929e:	f8dd e004 	ldr.w	lr, [sp, #4]
   d92a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d92a6:	b004      	add	sp, #16
   d92a8:	4252      	negs	r2, r2
   d92aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d92ae:	4770      	bx	lr

000d92b0 <__udivmoddi4>:
   d92b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d92b4:	9d08      	ldr	r5, [sp, #32]
   d92b6:	4604      	mov	r4, r0
   d92b8:	468c      	mov	ip, r1
   d92ba:	2b00      	cmp	r3, #0
   d92bc:	f040 8083 	bne.w	d93c6 <__udivmoddi4+0x116>
   d92c0:	428a      	cmp	r2, r1
   d92c2:	4617      	mov	r7, r2
   d92c4:	d947      	bls.n	d9356 <__udivmoddi4+0xa6>
   d92c6:	fab2 f282 	clz	r2, r2
   d92ca:	b142      	cbz	r2, d92de <__udivmoddi4+0x2e>
   d92cc:	f1c2 0020 	rsb	r0, r2, #32
   d92d0:	fa24 f000 	lsr.w	r0, r4, r0
   d92d4:	4091      	lsls	r1, r2
   d92d6:	4097      	lsls	r7, r2
   d92d8:	ea40 0c01 	orr.w	ip, r0, r1
   d92dc:	4094      	lsls	r4, r2
   d92de:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d92e2:	0c23      	lsrs	r3, r4, #16
   d92e4:	fbbc f6f8 	udiv	r6, ip, r8
   d92e8:	fa1f fe87 	uxth.w	lr, r7
   d92ec:	fb08 c116 	mls	r1, r8, r6, ip
   d92f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d92f4:	fb06 f10e 	mul.w	r1, r6, lr
   d92f8:	4299      	cmp	r1, r3
   d92fa:	d909      	bls.n	d9310 <__udivmoddi4+0x60>
   d92fc:	18fb      	adds	r3, r7, r3
   d92fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   d9302:	f080 8119 	bcs.w	d9538 <__udivmoddi4+0x288>
   d9306:	4299      	cmp	r1, r3
   d9308:	f240 8116 	bls.w	d9538 <__udivmoddi4+0x288>
   d930c:	3e02      	subs	r6, #2
   d930e:	443b      	add	r3, r7
   d9310:	1a5b      	subs	r3, r3, r1
   d9312:	b2a4      	uxth	r4, r4
   d9314:	fbb3 f0f8 	udiv	r0, r3, r8
   d9318:	fb08 3310 	mls	r3, r8, r0, r3
   d931c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d9320:	fb00 fe0e 	mul.w	lr, r0, lr
   d9324:	45a6      	cmp	lr, r4
   d9326:	d909      	bls.n	d933c <__udivmoddi4+0x8c>
   d9328:	193c      	adds	r4, r7, r4
   d932a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d932e:	f080 8105 	bcs.w	d953c <__udivmoddi4+0x28c>
   d9332:	45a6      	cmp	lr, r4
   d9334:	f240 8102 	bls.w	d953c <__udivmoddi4+0x28c>
   d9338:	3802      	subs	r0, #2
   d933a:	443c      	add	r4, r7
   d933c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d9340:	eba4 040e 	sub.w	r4, r4, lr
   d9344:	2600      	movs	r6, #0
   d9346:	b11d      	cbz	r5, d9350 <__udivmoddi4+0xa0>
   d9348:	40d4      	lsrs	r4, r2
   d934a:	2300      	movs	r3, #0
   d934c:	e9c5 4300 	strd	r4, r3, [r5]
   d9350:	4631      	mov	r1, r6
   d9352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9356:	b902      	cbnz	r2, d935a <__udivmoddi4+0xaa>
   d9358:	deff      	udf	#255	; 0xff
   d935a:	fab2 f282 	clz	r2, r2
   d935e:	2a00      	cmp	r2, #0
   d9360:	d150      	bne.n	d9404 <__udivmoddi4+0x154>
   d9362:	1bcb      	subs	r3, r1, r7
   d9364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d9368:	fa1f f887 	uxth.w	r8, r7
   d936c:	2601      	movs	r6, #1
   d936e:	fbb3 fcfe 	udiv	ip, r3, lr
   d9372:	0c21      	lsrs	r1, r4, #16
   d9374:	fb0e 331c 	mls	r3, lr, ip, r3
   d9378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d937c:	fb08 f30c 	mul.w	r3, r8, ip
   d9380:	428b      	cmp	r3, r1
   d9382:	d907      	bls.n	d9394 <__udivmoddi4+0xe4>
   d9384:	1879      	adds	r1, r7, r1
   d9386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   d938a:	d202      	bcs.n	d9392 <__udivmoddi4+0xe2>
   d938c:	428b      	cmp	r3, r1
   d938e:	f200 80e9 	bhi.w	d9564 <__udivmoddi4+0x2b4>
   d9392:	4684      	mov	ip, r0
   d9394:	1ac9      	subs	r1, r1, r3
   d9396:	b2a3      	uxth	r3, r4
   d9398:	fbb1 f0fe 	udiv	r0, r1, lr
   d939c:	fb0e 1110 	mls	r1, lr, r0, r1
   d93a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d93a4:	fb08 f800 	mul.w	r8, r8, r0
   d93a8:	45a0      	cmp	r8, r4
   d93aa:	d907      	bls.n	d93bc <__udivmoddi4+0x10c>
   d93ac:	193c      	adds	r4, r7, r4
   d93ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d93b2:	d202      	bcs.n	d93ba <__udivmoddi4+0x10a>
   d93b4:	45a0      	cmp	r8, r4
   d93b6:	f200 80d9 	bhi.w	d956c <__udivmoddi4+0x2bc>
   d93ba:	4618      	mov	r0, r3
   d93bc:	eba4 0408 	sub.w	r4, r4, r8
   d93c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d93c4:	e7bf      	b.n	d9346 <__udivmoddi4+0x96>
   d93c6:	428b      	cmp	r3, r1
   d93c8:	d909      	bls.n	d93de <__udivmoddi4+0x12e>
   d93ca:	2d00      	cmp	r5, #0
   d93cc:	f000 80b1 	beq.w	d9532 <__udivmoddi4+0x282>
   d93d0:	2600      	movs	r6, #0
   d93d2:	e9c5 0100 	strd	r0, r1, [r5]
   d93d6:	4630      	mov	r0, r6
   d93d8:	4631      	mov	r1, r6
   d93da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d93de:	fab3 f683 	clz	r6, r3
   d93e2:	2e00      	cmp	r6, #0
   d93e4:	d14a      	bne.n	d947c <__udivmoddi4+0x1cc>
   d93e6:	428b      	cmp	r3, r1
   d93e8:	d302      	bcc.n	d93f0 <__udivmoddi4+0x140>
   d93ea:	4282      	cmp	r2, r0
   d93ec:	f200 80b8 	bhi.w	d9560 <__udivmoddi4+0x2b0>
   d93f0:	1a84      	subs	r4, r0, r2
   d93f2:	eb61 0103 	sbc.w	r1, r1, r3
   d93f6:	2001      	movs	r0, #1
   d93f8:	468c      	mov	ip, r1
   d93fa:	2d00      	cmp	r5, #0
   d93fc:	d0a8      	beq.n	d9350 <__udivmoddi4+0xa0>
   d93fe:	e9c5 4c00 	strd	r4, ip, [r5]
   d9402:	e7a5      	b.n	d9350 <__udivmoddi4+0xa0>
   d9404:	f1c2 0320 	rsb	r3, r2, #32
   d9408:	fa20 f603 	lsr.w	r6, r0, r3
   d940c:	4097      	lsls	r7, r2
   d940e:	fa01 f002 	lsl.w	r0, r1, r2
   d9412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d9416:	40d9      	lsrs	r1, r3
   d9418:	4330      	orrs	r0, r6
   d941a:	0c03      	lsrs	r3, r0, #16
   d941c:	fbb1 f6fe 	udiv	r6, r1, lr
   d9420:	fa1f f887 	uxth.w	r8, r7
   d9424:	fb0e 1116 	mls	r1, lr, r6, r1
   d9428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d942c:	fb06 f108 	mul.w	r1, r6, r8
   d9430:	4299      	cmp	r1, r3
   d9432:	fa04 f402 	lsl.w	r4, r4, r2
   d9436:	d909      	bls.n	d944c <__udivmoddi4+0x19c>
   d9438:	18fb      	adds	r3, r7, r3
   d943a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   d943e:	f080 808d 	bcs.w	d955c <__udivmoddi4+0x2ac>
   d9442:	4299      	cmp	r1, r3
   d9444:	f240 808a 	bls.w	d955c <__udivmoddi4+0x2ac>
   d9448:	3e02      	subs	r6, #2
   d944a:	443b      	add	r3, r7
   d944c:	1a5b      	subs	r3, r3, r1
   d944e:	b281      	uxth	r1, r0
   d9450:	fbb3 f0fe 	udiv	r0, r3, lr
   d9454:	fb0e 3310 	mls	r3, lr, r0, r3
   d9458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d945c:	fb00 f308 	mul.w	r3, r0, r8
   d9460:	428b      	cmp	r3, r1
   d9462:	d907      	bls.n	d9474 <__udivmoddi4+0x1c4>
   d9464:	1879      	adds	r1, r7, r1
   d9466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   d946a:	d273      	bcs.n	d9554 <__udivmoddi4+0x2a4>
   d946c:	428b      	cmp	r3, r1
   d946e:	d971      	bls.n	d9554 <__udivmoddi4+0x2a4>
   d9470:	3802      	subs	r0, #2
   d9472:	4439      	add	r1, r7
   d9474:	1acb      	subs	r3, r1, r3
   d9476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d947a:	e778      	b.n	d936e <__udivmoddi4+0xbe>
   d947c:	f1c6 0c20 	rsb	ip, r6, #32
   d9480:	fa03 f406 	lsl.w	r4, r3, r6
   d9484:	fa22 f30c 	lsr.w	r3, r2, ip
   d9488:	431c      	orrs	r4, r3
   d948a:	fa20 f70c 	lsr.w	r7, r0, ip
   d948e:	fa01 f306 	lsl.w	r3, r1, r6
   d9492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d9496:	fa21 f10c 	lsr.w	r1, r1, ip
   d949a:	431f      	orrs	r7, r3
   d949c:	0c3b      	lsrs	r3, r7, #16
   d949e:	fbb1 f9fe 	udiv	r9, r1, lr
   d94a2:	fa1f f884 	uxth.w	r8, r4
   d94a6:	fb0e 1119 	mls	r1, lr, r9, r1
   d94aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d94ae:	fb09 fa08 	mul.w	sl, r9, r8
   d94b2:	458a      	cmp	sl, r1
   d94b4:	fa02 f206 	lsl.w	r2, r2, r6
   d94b8:	fa00 f306 	lsl.w	r3, r0, r6
   d94bc:	d908      	bls.n	d94d0 <__udivmoddi4+0x220>
   d94be:	1861      	adds	r1, r4, r1
   d94c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d94c4:	d248      	bcs.n	d9558 <__udivmoddi4+0x2a8>
   d94c6:	458a      	cmp	sl, r1
   d94c8:	d946      	bls.n	d9558 <__udivmoddi4+0x2a8>
   d94ca:	f1a9 0902 	sub.w	r9, r9, #2
   d94ce:	4421      	add	r1, r4
   d94d0:	eba1 010a 	sub.w	r1, r1, sl
   d94d4:	b2bf      	uxth	r7, r7
   d94d6:	fbb1 f0fe 	udiv	r0, r1, lr
   d94da:	fb0e 1110 	mls	r1, lr, r0, r1
   d94de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d94e2:	fb00 f808 	mul.w	r8, r0, r8
   d94e6:	45b8      	cmp	r8, r7
   d94e8:	d907      	bls.n	d94fa <__udivmoddi4+0x24a>
   d94ea:	19e7      	adds	r7, r4, r7
   d94ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   d94f0:	d22e      	bcs.n	d9550 <__udivmoddi4+0x2a0>
   d94f2:	45b8      	cmp	r8, r7
   d94f4:	d92c      	bls.n	d9550 <__udivmoddi4+0x2a0>
   d94f6:	3802      	subs	r0, #2
   d94f8:	4427      	add	r7, r4
   d94fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d94fe:	eba7 0708 	sub.w	r7, r7, r8
   d9502:	fba0 8902 	umull	r8, r9, r0, r2
   d9506:	454f      	cmp	r7, r9
   d9508:	46c6      	mov	lr, r8
   d950a:	4649      	mov	r1, r9
   d950c:	d31a      	bcc.n	d9544 <__udivmoddi4+0x294>
   d950e:	d017      	beq.n	d9540 <__udivmoddi4+0x290>
   d9510:	b15d      	cbz	r5, d952a <__udivmoddi4+0x27a>
   d9512:	ebb3 020e 	subs.w	r2, r3, lr
   d9516:	eb67 0701 	sbc.w	r7, r7, r1
   d951a:	fa07 fc0c 	lsl.w	ip, r7, ip
   d951e:	40f2      	lsrs	r2, r6
   d9520:	ea4c 0202 	orr.w	r2, ip, r2
   d9524:	40f7      	lsrs	r7, r6
   d9526:	e9c5 2700 	strd	r2, r7, [r5]
   d952a:	2600      	movs	r6, #0
   d952c:	4631      	mov	r1, r6
   d952e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9532:	462e      	mov	r6, r5
   d9534:	4628      	mov	r0, r5
   d9536:	e70b      	b.n	d9350 <__udivmoddi4+0xa0>
   d9538:	4606      	mov	r6, r0
   d953a:	e6e9      	b.n	d9310 <__udivmoddi4+0x60>
   d953c:	4618      	mov	r0, r3
   d953e:	e6fd      	b.n	d933c <__udivmoddi4+0x8c>
   d9540:	4543      	cmp	r3, r8
   d9542:	d2e5      	bcs.n	d9510 <__udivmoddi4+0x260>
   d9544:	ebb8 0e02 	subs.w	lr, r8, r2
   d9548:	eb69 0104 	sbc.w	r1, r9, r4
   d954c:	3801      	subs	r0, #1
   d954e:	e7df      	b.n	d9510 <__udivmoddi4+0x260>
   d9550:	4608      	mov	r0, r1
   d9552:	e7d2      	b.n	d94fa <__udivmoddi4+0x24a>
   d9554:	4660      	mov	r0, ip
   d9556:	e78d      	b.n	d9474 <__udivmoddi4+0x1c4>
   d9558:	4681      	mov	r9, r0
   d955a:	e7b9      	b.n	d94d0 <__udivmoddi4+0x220>
   d955c:	4666      	mov	r6, ip
   d955e:	e775      	b.n	d944c <__udivmoddi4+0x19c>
   d9560:	4630      	mov	r0, r6
   d9562:	e74a      	b.n	d93fa <__udivmoddi4+0x14a>
   d9564:	f1ac 0c02 	sub.w	ip, ip, #2
   d9568:	4439      	add	r1, r7
   d956a:	e713      	b.n	d9394 <__udivmoddi4+0xe4>
   d956c:	3802      	subs	r0, #2
   d956e:	443c      	add	r4, r7
   d9570:	e724      	b.n	d93bc <__udivmoddi4+0x10c>
   d9572:	bf00      	nop

000d9574 <__aeabi_idiv0>:
   d9574:	4770      	bx	lr
   d9576:	bf00      	nop

000d9578 <__cxa_atexit>:
   d9578:	b510      	push	{r4, lr}
   d957a:	4c05      	ldr	r4, [pc, #20]	; (d9590 <__cxa_atexit+0x18>)
   d957c:	4613      	mov	r3, r2
   d957e:	b12c      	cbz	r4, d958c <__cxa_atexit+0x14>
   d9580:	460a      	mov	r2, r1
   d9582:	4601      	mov	r1, r0
   d9584:	2002      	movs	r0, #2
   d9586:	f3af 8000 	nop.w
   d958a:	bd10      	pop	{r4, pc}
   d958c:	4620      	mov	r0, r4
   d958e:	e7fc      	b.n	d958a <__cxa_atexit+0x12>
   d9590:	00000000 	.word	0x00000000

000d9594 <memcmp>:
   d9594:	b530      	push	{r4, r5, lr}
   d9596:	3901      	subs	r1, #1
   d9598:	2400      	movs	r4, #0
   d959a:	42a2      	cmp	r2, r4
   d959c:	d101      	bne.n	d95a2 <memcmp+0xe>
   d959e:	2000      	movs	r0, #0
   d95a0:	e005      	b.n	d95ae <memcmp+0x1a>
   d95a2:	5d03      	ldrb	r3, [r0, r4]
   d95a4:	3401      	adds	r4, #1
   d95a6:	5d0d      	ldrb	r5, [r1, r4]
   d95a8:	42ab      	cmp	r3, r5
   d95aa:	d0f6      	beq.n	d959a <memcmp+0x6>
   d95ac:	1b58      	subs	r0, r3, r5
   d95ae:	bd30      	pop	{r4, r5, pc}

000d95b0 <memcpy>:
   d95b0:	440a      	add	r2, r1
   d95b2:	4291      	cmp	r1, r2
   d95b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d95b8:	d100      	bne.n	d95bc <memcpy+0xc>
   d95ba:	4770      	bx	lr
   d95bc:	b510      	push	{r4, lr}
   d95be:	f811 4b01 	ldrb.w	r4, [r1], #1
   d95c2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d95c6:	4291      	cmp	r1, r2
   d95c8:	d1f9      	bne.n	d95be <memcpy+0xe>
   d95ca:	bd10      	pop	{r4, pc}

000d95cc <memmove>:
   d95cc:	4288      	cmp	r0, r1
   d95ce:	b510      	push	{r4, lr}
   d95d0:	eb01 0402 	add.w	r4, r1, r2
   d95d4:	d902      	bls.n	d95dc <memmove+0x10>
   d95d6:	4284      	cmp	r4, r0
   d95d8:	4623      	mov	r3, r4
   d95da:	d807      	bhi.n	d95ec <memmove+0x20>
   d95dc:	1e43      	subs	r3, r0, #1
   d95de:	42a1      	cmp	r1, r4
   d95e0:	d008      	beq.n	d95f4 <memmove+0x28>
   d95e2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d95e6:	f803 2f01 	strb.w	r2, [r3, #1]!
   d95ea:	e7f8      	b.n	d95de <memmove+0x12>
   d95ec:	4402      	add	r2, r0
   d95ee:	4601      	mov	r1, r0
   d95f0:	428a      	cmp	r2, r1
   d95f2:	d100      	bne.n	d95f6 <memmove+0x2a>
   d95f4:	bd10      	pop	{r4, pc}
   d95f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d95fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d95fe:	e7f7      	b.n	d95f0 <memmove+0x24>

000d9600 <memset>:
   d9600:	4402      	add	r2, r0
   d9602:	4603      	mov	r3, r0
   d9604:	4293      	cmp	r3, r2
   d9606:	d100      	bne.n	d960a <memset+0xa>
   d9608:	4770      	bx	lr
   d960a:	f803 1b01 	strb.w	r1, [r3], #1
   d960e:	e7f9      	b.n	d9604 <memset+0x4>

000d9610 <srand>:
   d9610:	b538      	push	{r3, r4, r5, lr}
   d9612:	4b0d      	ldr	r3, [pc, #52]	; (d9648 <srand+0x38>)
   d9614:	681d      	ldr	r5, [r3, #0]
   d9616:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9618:	4604      	mov	r4, r0
   d961a:	b97b      	cbnz	r3, d963c <srand+0x2c>
   d961c:	2018      	movs	r0, #24
   d961e:	f7fc fddf 	bl	d61e0 <malloc>
   d9622:	4a0a      	ldr	r2, [pc, #40]	; (d964c <srand+0x3c>)
   d9624:	4b0a      	ldr	r3, [pc, #40]	; (d9650 <srand+0x40>)
   d9626:	63a8      	str	r0, [r5, #56]	; 0x38
   d9628:	e9c0 2300 	strd	r2, r3, [r0]
   d962c:	4b09      	ldr	r3, [pc, #36]	; (d9654 <srand+0x44>)
   d962e:	6083      	str	r3, [r0, #8]
   d9630:	230b      	movs	r3, #11
   d9632:	8183      	strh	r3, [r0, #12]
   d9634:	2201      	movs	r2, #1
   d9636:	2300      	movs	r3, #0
   d9638:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d963c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d963e:	2200      	movs	r2, #0
   d9640:	611c      	str	r4, [r3, #16]
   d9642:	615a      	str	r2, [r3, #20]
   d9644:	bd38      	pop	{r3, r4, r5, pc}
   d9646:	bf00      	nop
   d9648:	2003e3a8 	.word	0x2003e3a8
   d964c:	abcd330e 	.word	0xabcd330e
   d9650:	e66d1234 	.word	0xe66d1234
   d9654:	0005deec 	.word	0x0005deec

000d9658 <strcmp>:
   d9658:	f810 2b01 	ldrb.w	r2, [r0], #1
   d965c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9660:	2a01      	cmp	r2, #1
   d9662:	bf28      	it	cs
   d9664:	429a      	cmpcs	r2, r3
   d9666:	d0f7      	beq.n	d9658 <strcmp>
   d9668:	1ad0      	subs	r0, r2, r3
   d966a:	4770      	bx	lr

000d966c <strcpy>:
   d966c:	4603      	mov	r3, r0
   d966e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9672:	f803 2b01 	strb.w	r2, [r3], #1
   d9676:	2a00      	cmp	r2, #0
   d9678:	d1f9      	bne.n	d966e <strcpy+0x2>
   d967a:	4770      	bx	lr

000d967c <strlen>:
   d967c:	4603      	mov	r3, r0
   d967e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9682:	2a00      	cmp	r2, #0
   d9684:	d1fb      	bne.n	d967e <strlen+0x2>
   d9686:	1a18      	subs	r0, r3, r0
   d9688:	3801      	subs	r0, #1
   d968a:	4770      	bx	lr

000d968c <strnlen>:
   d968c:	b510      	push	{r4, lr}
   d968e:	4602      	mov	r2, r0
   d9690:	4401      	add	r1, r0
   d9692:	428a      	cmp	r2, r1
   d9694:	4613      	mov	r3, r2
   d9696:	d101      	bne.n	d969c <strnlen+0x10>
   d9698:	1a18      	subs	r0, r3, r0
   d969a:	bd10      	pop	{r4, pc}
   d969c:	781c      	ldrb	r4, [r3, #0]
   d969e:	3201      	adds	r2, #1
   d96a0:	2c00      	cmp	r4, #0
   d96a2:	d1f6      	bne.n	d9692 <strnlen+0x6>
   d96a4:	e7f8      	b.n	d9698 <strnlen+0xc>

000d96a6 <link_code_end>:
	...

000d96a8 <dynalib_user>:
   d96a8:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d96b8:	0000 0000 6f4a 6e68 5a20 6865 7465 656e     ....John Zehetne
   d96c8:	2072 2020 2020 6146 656b 4b20 7365 7274     r     Fake Kestr
   d96d8:	6c65 4600 5249 2045 202d 3332 3433 3533     el.FIRE - 233435
   d96e8:	0039 654b 7473 6572 206c 7962 4e20 004b     9.Kestrel by NK.
   d96f8:	3535 3030 5746 004c 6552 2076 3131 0042     5500FWL.Rev 11B.
   d9708:	2e31 3132 4600 5249 0045 0a0a 6146 656b     1.21.FIRE...Fake
   d9718:	4b20 7365 7274 6c65 420a 6765 6e69 696e      Kestrel.Beginni
   d9728:	676e 7320 7465 7075 002e 7453 7461 7375     ng setup..Status
   d9738:	3d20 2520 5830 2500 2e34 6631 4d20 4850      = %0X.%4.1f MPH
   d9748:	2020 3325 302e 2566 2063 2520 2e34 6631       %3.0f%c  %4.1f
   d9758:	6325 2046 2520 2e32 6630 2525 2500 2e34     %cF  %2.0f%%.%4.
   d9768:	6631 4d20 4850 2020 3325 302e 2566 2063     1f MPH  %3.0f%c 
   d9778:	2520 2e35 6631 426d 2020 6142 2574 2e33      %5.1fmB  Bat%3.
   d9788:	6630 2525 5700 6f72 676e 7320 7263 6565     0f%%.Wrong scree
   d9798:	206e 756e 626d 7265 3000 3233 3039 3030     n number.0329000
   d97a8:	2d30 4145 3442 442d 4145 2d31 3242 4534     0-EAB4-DEA1-B24E
   d97b8:	342d 4534 3043 3332 3738 4434 0042 3030     -44EC023874DB.00
   d97c8:	3030 3831 6130 302d 3030 2d30 3031 3030     00180a-0000-1000
   d97d8:	382d 3030 2d30 3030 3038 6635 6239 3433     -8000-00805f9b34
   d97e8:	6266 3000 3030 3130 3038 2d66 3030 3030     fb.0000180f-0000
   d97f8:	312d 3030 2d30 3038 3030 302d 3830 3530     -1000-8000-00805
   d9808:	3966 3362 6634 0062 3030 3030 6132 3932     f9b34fb.00002a29
   d9818:	302d 3030 2d30 3031 3030 382d 3030 2d30     -0000-1000-8000-
   d9828:	3030 3038 6635 6239 3433 6266 3000 3030     00805f9b34fb.000
   d9838:	3230 3061 2d30 3030 3030 312d 3030 2d30     02a00-0000-1000-
   d9848:	3038 3030 302d 3830 3530 3966 3362 6634     8000-00805f9b34f
   d9858:	0062 3030 3030 6132 3130 302d 3030 2d30     b.00002a01-0000-
   d9868:	3031 3030 382d 3030 2d30 3030 3038 6635     1000-8000-00805f
   d9878:	6239 3433 6266 3000 3030 3230 3261 2d35     9b34fb.00002a25-
   d9888:	3030 3030 312d 3030 2d30 3038 3030 302d     0000-1000-8000-0
   d9898:	3830 3530 3966 3362 6634 0062 3030 3030     0805f9b34fb.0000
   d98a8:	6132 3732 302d 3030 2d30 3031 3030 382d     2a27-0000-1000-8
   d98b8:	3030 2d30 3030 3038 6635 6239 3433 6266     000-00805f9b34fb
   d98c8:	3000 3030 3230 3261 2d36 3030 3030 312d     .00002a26-0000-1
   d98d8:	3030 2d30 3038 3030 302d 3830 3530 3966     000-8000-00805f9
   d98e8:	3362 6634 0062 3030 3030 6132 3832 302d     b34fb.00002a28-0
   d98f8:	3030 2d30 3031 3030 382d 3030 2d30 3030     000-1000-8000-00
   d9908:	3038 6635 6239 3433 6266 3000 3030 3230     805f9b34fb.00002
   d9918:	3261 2d34 3030 3030 312d 3030 2d30 3038     a24-0000-1000-80
   d9928:	3030 302d 3830 3530 3966 3362 6634 0062     00-00805f9b34fb.
   d9938:	3330 3932 3330 3031 452d 4241 2d34 4544     03290310-EAB4-DE
   d9948:	3141 422d 3432 2d45 3434 4345 3230 3833     A1-B24E-44EC0238
   d9958:	3437 4244 3000 3233 3039 3233 2d30 4145     74DB.03290320-EA
   d9968:	3442 442d 4145 2d31 3242 4534 342d 4534     B4-DEA1-B24E-44E
   d9978:	3043 3332 3738 4434 0042 3330 3932 3130     C023874DB.032901
   d9988:	3130 452d 4241 2d34 4544 3141 422d 3432     01-EAB4-DEA1-B24
   d9998:	2d45 3434 4345 3230 3833 3437 4244 3000     E-44EC023874DB.0
   d99a8:	3233 3039 3031 2d32 4145 3442 442d 4145     3290102-EAB4-DEA
   d99b8:	2d31 3242 4534 342d 4534 3043 3332 3738     1-B24E-44EC02387
   d99c8:	4434 0042 3330 3932 3130 3330 452d 4241     4DB.03290103-EAB
   d99d8:	2d34 4544 3141 422d 3432 2d45 3434 4345     4-DEA1-B24E-44EC
   d99e8:	3230 3833 3437 4244 3000 3233 3039 3031     023874DB.0329010
   d99f8:	2d34 4145 3442 442d 4145 2d31 3242 4534     4-EAB4-DEA1-B24E
   d9a08:	342d 4534 3043 3332 3738 4434 0042 3330     -44EC023874DB.03
   d9a18:	3932 3130 3530 452d 4241 2d34 4544 3141     290105-EAB4-DEA1
   d9a28:	422d 3432 2d45 3434 4345 3230 3833 3437     -B24E-44EC023874
   d9a38:	4244 3000 3233 3039 3032 2d30 4145 3442     DB.03290200-EAB4
   d9a48:	442d 4145 2d31 3242 4534 342d 4534 3043     -DEA1-B24E-44EC0
   d9a58:	3332 3738 4434 0042 3330 3932 3330 3030     23874DB.03290300
   d9a68:	452d 4241 2d34 4544 3141 422d 3432 2d45     -EAB4-DEA1-B24E-
   d9a78:	3434 4345 3230 3833 3437 4244 3000 3233     44EC023874DB.032
   d9a88:	3039 3333 2d30 4145 3442 442d 4145 2d31     90330-EAB4-DEA1-
   d9a98:	3242 4534 342d 4534 3043 3332 3738 4434     B24E-44EC023874D
   d9aa8:	0042 3330 3932 3330 3034 452d 4241 2d34     B.03290340-EAB4-
   d9ab8:	4544 3141 422d 3432 2d45 3434 4345 3230     DEA1-B24E-44EC02
   d9ac8:	3833 3437 4244 3000 3030 3230 3161 2d39     3874DB.00002a19-
   d9ad8:	3030 3030 312d 3030 2d30 3038 3030 302d     0000-1000-8000-0
   d9ae8:	3830 3530 3966 3362 6634 0062 6544 6976     0805f9b34fb.Devi
   d9af8:	6563 4e20 6d61 0065 7041 6570 7261 6e61     ce Name.Appearan
   d9b08:	6563 4d00 6e61 6675 6361 7574 6572 2072     ce.Manufacturer 
   d9b18:	614e 656d 5320 7274 6e69 0067 6f4d 6564     Name String.Mode
   d9b28:	206c 754e 626d 7265 5320 7274 6e69 0067     l Number String.
   d9b38:	6553 6972 6c61 4e20 6d75 6562 2072 7453     Serial Number St
   d9b48:	6972 676e 4800 7261 7764 7261 2065 6552     ring.Hardware Re
   d9b58:	6976 6973 6e6f 5320 7274 6e69 0067 6946     vision String.Fi
   d9b68:	6d72 6177 6572 5220 7665 7369 6f69 206e     rmware Revision 
   d9b78:	7453 6972 676e 5300 666f 7774 7261 2065     String.Software 
   d9b88:	6552 6976 6973 6e6f 5320 7274 6e69 0067     Revision String.
   d9b98:	6843 7261 6361 6574 6972 7473 6369 3120     Characteristic 1
   d9ba8:	2d36 6962 0074 6843 7261 6361 6574 6972     6-bit.Characteri
   d9bb8:	7473 6369 3320 2d32 6962 0074 6142 7474     stic 32-bit.Batt
   d9bc8:	7265 2079 614c 6576 006c                    ery Lavel.

000d9bd2 <CSWTCH.17>:
   d9bd2:	0100 0102 0103 0101 0104 0101 0101 0101     ................
   d9be2:	7705 7269 6e69 2e67 6c62 0065 7453 7261     .wiring.ble.Star
   d9bf2:	2074 6964 6373 766f 7265 6e69 2067 6573     t discovering se
   d9c02:	7672 6369 7365 002e 6550 7265 6420 7665     rvices..Peer dev
   d9c12:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   d9c22:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   d9c32:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   d9c42:	6976 6563 002e 6f43 6e6e 6365 6574 2064     vice..Connected 
   d9c52:	7962 4320 6e65 7274 6c61 6420 7665 6369     by Central devic
   d9c62:	2e65 4400 7369 6f63 6e6e 6365 6574 2064     e..Disconnected 
   d9c72:	7962 7220 6d65 746f 2065 6564 6976 6563     by remote device
   d9c82:	002e 7544 6c70 6369 7461 6465 6320 6168     ..Duplicated cha
   d9c92:	6172 7463 7265 7369 6974 2063 6163 6e6e     racteristic cann
   d9ca2:	746f 6220 2065 6461 6564 2e64 4600 6961     ot be added..Fai
   d9cb2:	656c 2064 6f74 6120 7070 6e65 2064 6f6c     led to append lo
   d9cc2:	6163 206c 6863 7261 6361 6574 6972 7473     cal characterist
   d9cd2:	6369 002e 0000                              ic....

000d9cd8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9ce0:	623d 000d 62a7 000d 62a1 000d 62d1 000d     =b...b...b...b..
   d9cf0:	6241 000d                                   Ab..

000d9cf4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9cfc:	6239 000d 62b5 000d 623b 000d 62d5 000d     9b...b..;b...b..
   d9d0c:	6261 000d                                   ab..

000d9d10 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9d18:	6237 000d 62c3 000d 6c63 000d 62d9 000d     7b...b..cl...b..
   d9d28:	6281 000d                                   .b..

000d9d2c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d9d34:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000d9d44 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d9d44:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000d9d54 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d9d54:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000d9d64 <_ZTVN5spark13EthernetClassE>:
	...
   d9d6c:	7419 000d 740f 000d 7405 000d 73fb 000d     .t...t...t...s..
   d9d7c:	73ef 000d 73e3 000d 73d7 000d 73cf 000d     .s...s...s...s..
   d9d8c:	73c5 000d 73bb 000d 76e1 000d               .s...s...v..

000d9d98 <_ZTV7TwoWire>:
	...
   d9da0:	7439 000d 7483 000d 745b 000d 743b 000d     9t...t..[t..;t..
   d9db0:	7463 000d 746b 000d 7473 000d 747b 000d     ct..kt..st..{t..

000d9dc0 <_ZTV9IPAddress>:
	...
   d9dc8:	7595 000d 7585 000d 7587 000d 7061 0070     .u...u...u..app.

000d9dd8 <_ZTVN5spark12NetworkClassE>:
	...
   d9de0:	7679 000d 7683 000d 768d 000d 7697 000d     yv...v...v...v..
   d9df0:	76a1 000d 76ad 000d 76b9 000d 76c5 000d     .v...v...v...v..
   d9e00:	76cd 000d 76d7 000d 76e1 000d               .v...v...v..

000d9e0c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9e0c:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   d9e1c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d9e2c:	6d69 0065                                   ime.

000d9e30 <_ZTV11USARTSerial>:
	...
   d9e38:	7b39 000d 7ba5 000d 7b7d 000d 77c9 000d     9{...{..}{...w..
   d9e48:	7b4d 000d 7b69 000d 7b5b 000d 7b77 000d     M{..i{..[{..w{..
   d9e58:	7b3b 000d 7b3f 000d                         ;{..?{..

000d9e60 <_ZTV9USBSerial>:
	...
   d9e68:	7c81 000d 7ce9 000d 7cbf 000d 77c9 000d     .|...|...|...w..
   d9e78:	7cb1 000d 7c83 000d 7c93 000d 7ce3 000d     .|...|...|...|..
   d9e88:	7ca3 000d 7c7d 000d                         .|..}|..

000d9e90 <_ZTVN5spark9WiFiClassE>:
	...
   d9e98:	7deb 000d 7de1 000d 7dd7 000d 7d8d 000d     .}...}...}...}..
   d9ea8:	7dcb 000d 7dbf 000d 7db3 000d 7dab 000d     .}...}...}...}..
   d9eb8:	7da1 000d 7d97 000d 76e1 000d               .}...}...v..

000d9ec4 <_ZSt7nothrow>:
	...

000d9ec5 <_ZTSSt19_Sp_make_shared_tag>:
   d9ec5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d9ed5:	6572 5f64 6174 0067 0000                     red_tag....

000d9ee0 <_ZTISt19_Sp_make_shared_tag>:
   d9ee0:	9f20 000d 9ec5 000d                          .......

000d9ee8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d9ee8:	9f80 000d 9ef4 000d 9fa4 000d               ............

000d9ef4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d9ef4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d9f04:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d9f14:	0045 0000                                   E...

000d9f18 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d9f18:	0000 0000 9ee8 000d 810d 000d 8121 000d     ............!...
   d9f28:	82b5 000d 82b5 000d 818b 000d 80cd 000d     ................
   d9f38:	8173 000d 8135 000d 8101 000d               s...5.......

000d9f44 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d9f44:	9f80 000d 9f50 000d 9ee8 000d               ....P.......

000d9f50 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d9f50:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d9f60:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d9f70:	666e 456f 0000 0000                         nfoE....

000d9f78 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d9f78:	0000 0000 9f44 000d 81b5 000d 81c9 000d     ....D...........
   d9f88:	82b5 000d 82b5 000d 818b 000d 80cd 000d     ................
   d9f98:	8289 000d 8215 000d 81dd 000d               ............

000d9fa4 <_ZTISt9type_info>:
   d9fa4:	9f20 000d 9fac 000d                          .......

000d9fac <_ZTSSt9type_info>:
   d9fac:	7453 7439 7079 5f65 6e69 6f66 0000 0000     St9type_info....

000d9fbc <CSWTCH.8>:
   d9fbc:	0fdb bf49 cbe4 4016 cbe4 c016               ..I....@....

000d9fc8 <CSWTCH.9>:
   d9fc8:	0000 8000 0fdb 4049 0fdb c049               ......I@..I.

000d9fd4 <atanhi>:
   d9fd4:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?

000d9fe4 <atanlo>:
   d9fe4:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3

000d9ff4 <link_const_variable_data_end>:
   d9ff4:	000d4ea9 	.word	0x000d4ea9
   d9ff8:	000d7381 	.word	0x000d7381
   d9ffc:	000d7425 	.word	0x000d7425
   da000:	000d7669 	.word	0x000d7669
   da004:	000d77b5 	.word	0x000d77b5
   da008:	000d7871 	.word	0x000d7871
   da00c:	000d7ae9 	.word	0x000d7ae9
   da010:	000d7b25 	.word	0x000d7b25
   da014:	000d7df5 	.word	0x000d7df5

000da018 <link_constructors_end>:
	...
