
/Users/johnzet/projects/Home/HomeAutomation/IoT/AirQuality/target/1.5.2/photon/AirQuality.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003e10  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a3e30  080a3e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a3e38  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  080a3e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000654  20000068  20000068  00030068  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080a3ea4  080a3ea4  00023ea4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a3ecc  080a3ecc  00023ecc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000bf298  00000000  00000000  00023ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000114bb  00000000  00000000  000e3168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00015f61  00000000  00000000  000f4623  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000023c0  00000000  00000000  0010a584  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000039c8  00000000  00000000  0010c944  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000292d0  00000000  00000000  0011030c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002867b  00000000  00000000  001395dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b16ad  00000000  00000000  00161c57  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c3b4  00000000  00000000  00213304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 fcc7 	bl	80a39c4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 fccc 	bl	80a39da <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a3e3c 	.word	0x080a3e3c
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20000068 	.word	0x20000068
 80a0058:	200006bc 	.word	0x200006bc
 80a005c:	200006bc 	.word	0x200006bc

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 f975 	bl	80a2350 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a3df4 	.word	0x080a3df4
 80a0088:	080a3e30 	.word	0x080a3e30

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b852 	b.w	80a0134 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f8a5 	bl	80a01e0 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 b91b 	b.w	80a22d4 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f001 b895 	b.w	80a11cc <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 b89b 	b.w	80a11dc <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
 80a00b6:	b510      	push	{r4, lr}
 80a00b8:	4604      	mov	r4, r0
 80a00ba:	3004      	adds	r0, #4
 80a00bc:	f001 fbf5 	bl	80a18aa <_ZN6StringD1Ev>
 80a00c0:	4620      	mov	r0, r4
 80a00c2:	bd10      	pop	{r4, pc}

080a00c4 <_ZN14http_request_tD1Ev>:
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
 80a00c4:	b510      	push	{r4, lr}
 80a00c6:	4604      	mov	r4, r0
 80a00c8:	303c      	adds	r0, #60	; 0x3c
 80a00ca:	f001 fbee 	bl	80a18aa <_ZN6StringD1Ev>
 80a00ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a00d2:	f001 fbea 	bl	80a18aa <_ZN6StringD1Ev>
 80a00d6:	4620      	mov	r0, r4
 80a00d8:	f001 fbe7 	bl	80a18aa <_ZN6StringD1Ev>
 80a00dc:	4620      	mov	r0, r4
 80a00de:	bd10      	pop	{r4, pc}

080a00e0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a00e0:	b538      	push	{r3, r4, r5, lr}
 80a00e2:	4b0b      	ldr	r3, [pc, #44]	; (80a0110 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a00e4:	6984      	ldr	r4, [r0, #24]
 80a00e6:	4605      	mov	r5, r0
 80a00e8:	6003      	str	r3, [r0, #0]
 80a00ea:	b17c      	cbz	r4, 80a010c <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a00ec:	6863      	ldr	r3, [r4, #4]
 80a00ee:	3b01      	subs	r3, #1
 80a00f0:	6063      	str	r3, [r4, #4]
 80a00f2:	b95b      	cbnz	r3, 80a010c <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a00f4:	6823      	ldr	r3, [r4, #0]
 80a00f6:	4620      	mov	r0, r4
 80a00f8:	689b      	ldr	r3, [r3, #8]
 80a00fa:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00fc:	68a3      	ldr	r3, [r4, #8]
 80a00fe:	3b01      	subs	r3, #1
 80a0100:	60a3      	str	r3, [r4, #8]
 80a0102:	b91b      	cbnz	r3, 80a010c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a0104:	6823      	ldr	r3, [r4, #0]
 80a0106:	4620      	mov	r0, r4
 80a0108:	68db      	ldr	r3, [r3, #12]
 80a010a:	4798      	blx	r3
 80a010c:	4628      	mov	r0, r5
 80a010e:	bd38      	pop	{r3, r4, r5, pc}
 80a0110:	080a3c70 	.word	0x080a3c70

080a0114 <_ZN10HttpClientD1Ev>:
{
  int status;
  String body;
} http_response_t;

class HttpClient {
 80a0114:	b510      	push	{r4, lr}
 80a0116:	4604      	mov	r4, r0
 80a0118:	f7ff ffe2 	bl	80a00e0 <_ZN9TCPClientD1Ev>
 80a011c:	4620      	mov	r0, r4
 80a011e:	bd10      	pop	{r4, pc}

080a0120 <_ZN9TCPClientD0Ev>:
 80a0120:	b510      	push	{r4, lr}
 80a0122:	4604      	mov	r4, r0
 80a0124:	f7ff ffdc 	bl	80a00e0 <_ZN9TCPClientD1Ev>
 80a0128:	4620      	mov	r0, r4
 80a012a:	211c      	movs	r1, #28
 80a012c:	f002 fa01 	bl	80a2532 <_ZdlPvj>
 80a0130:	4620      	mov	r0, r4
 80a0132:	bd10      	pop	{r4, pc}

080a0134 <setup>:
int loopCounter = 0;

// SYSTEM_MODE(SEMI_AUTOMATIC)
SYSTEM_THREAD(ENABLED)
void setup()
{
 80a0134:	b570      	push	{r4, r5, r6, lr}
 80a0136:	b088      	sub	sp, #32
  Serial.begin(9600);
 80a0138:	f001 ffe6 	bl	80a2108 <_Z16_fetch_usbserialv>
 80a013c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0140:	f001 ffd6 	bl	80a20f0 <_ZN9USBSerial5beginEl>
  Serial1.begin(9600);
 80a0144:	f001 ff3e 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a0148:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a014c:	f001 ff30 	bl	80a1fb0 <_ZN11USARTSerial5beginEm>
    
  lcd.setBrightness(5);
 80a0150:	2105      	movs	r1, #5
 80a0152:	481d      	ldr	r0, [pc, #116]	; (80a01c8 <setup+0x94>)
 80a0154:	f000 f9b9 	bl	80a04ca <_ZN19Serial_LCD_SparkFun13setBrightnessEi>
  
  sensorByte = 0;
 80a0158:	4b1c      	ldr	r3, [pc, #112]	; (80a01cc <setup+0x98>)

  Wire.begin();
  bme280.settings.commInterface = I2C_MODE;
 80a015a:	4c1d      	ldr	r4, [pc, #116]	; (80a01d0 <setup+0x9c>)
  Serial.begin(9600);
  Serial1.begin(9600);
    
  lcd.setBrightness(5);
  
  sensorByte = 0;
 80a015c:	2500      	movs	r5, #0
 80a015e:	601d      	str	r5, [r3, #0]

  Wire.begin();
 80a0160:	f002 f9a4 	bl	80a24ac <_Z19__fetch_global_Wirev>
 80a0164:	f001 f894 	bl	80a1290 <_ZN7TwoWire5beginEv>
  bme280.settings.commInterface = I2C_MODE;
  bme280.settings.I2CAddress = 0x77;
 80a0168:	2377      	movs	r3, #119	; 0x77
  lcd.setBrightness(5);
  
  sensorByte = 0;

  Wire.begin();
  bme280.settings.commInterface = I2C_MODE;
 80a016a:	7025      	strb	r5, [r4, #0]
    //  3, 250ms
    //  4, 500ms
    //  5, 1000ms
    //  6, 10ms
    //  7, 20ms
    bme280.settings.tStandby = 0;
 80a016c:	7125      	strb	r5, [r4, #4]
    //  0, filter off
    //  1, coefficients = 2
    //  2, coefficients = 4
    //  3, coefficients = 8
    //  4, coefficients = 16
    bme280.settings.filter = 0;
 80a016e:	7165      	strb	r5, [r4, #5]

    //humidOverSample can be:
    //  0, skipped
    //  1 through 5, oversampling *1, *2, *4, *8, *16 respectively
    bme280.settings.humidOverSample = 1;
    delay(10);  //Make sure sensor had enough time to turn on. BME280 requires 2ms to start up.         Serial.begin(57600);
 80a0170:	200a      	movs	r0, #10
    bme280.settings.filter = 0;

    //tempOverSample can be:
    //  0, skipped
    //  1 through 5, oversampling *1, *2, *4, *8, *16 respectively
    bme280.settings.tempOverSample = 1;
 80a0172:	2501      	movs	r5, #1
  
  sensorByte = 0;

  Wire.begin();
  bme280.settings.commInterface = I2C_MODE;
  bme280.settings.I2CAddress = 0x77;
 80a0174:	7063      	strb	r3, [r4, #1]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0176:	4e17      	ldr	r6, [pc, #92]	; (80a01d4 <setup+0xa0>)
    bme280.settings.filter = 0;

    //tempOverSample can be:
    //  0, skipped
    //  1 through 5, oversampling *1, *2, *4, *8, *16 respectively
    bme280.settings.tempOverSample = 1;
 80a0178:	71a5      	strb	r5, [r4, #6]

    //pressOverSample can be:
    //  0, skipped
    //  1 through 5, oversampling *1, *2, *4, *8, *16 respectively
    bme280.settings.pressOverSample = 1;
 80a017a:	71e5      	strb	r5, [r4, #7]

    //humidOverSample can be:
    //  0, skipped
    //  1 through 5, oversampling *1, *2, *4, *8, *16 respectively
    bme280.settings.humidOverSample = 1;
 80a017c:	7225      	strb	r5, [r4, #8]
    delay(10);  //Make sure sensor had enough time to turn on. BME280 requires 2ms to start up.         Serial.begin(57600);
 80a017e:	f001 f83d 	bl	80a11fc <delay>

    bme280.begin();
 80a0182:	4620      	mov	r0, r4
 80a0184:	f000 fcb2 	bl	80a0aec <_ZN6BME2805beginEv>

  httpRequest.ip = IPAddress(192, 168, 1, 3);
 80a0188:	2303      	movs	r3, #3
 80a018a:	9300      	str	r3, [sp, #0]
 80a018c:	22a8      	movs	r2, #168	; 0xa8
 80a018e:	462b      	mov	r3, r5
 80a0190:	21c0      	movs	r1, #192	; 0xc0
 80a0192:	a802      	add	r0, sp, #8
 80a0194:	f106 0414 	add.w	r4, r6, #20
 80a0198:	ad03      	add	r5, sp, #12
 80a019a:	f001 f917 	bl	80a13cc <_ZN9IPAddressC1Ehhhh>
 80a019e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a01a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a01a2:	682b      	ldr	r3, [r5, #0]
  httpRequest.port = 8004;
  httpRequest.path = String("/api/v1/dNEFRG25CFJgMXKkvV82/telemetry");
 80a01a4:	490c      	ldr	r1, [pc, #48]	; (80a01d8 <setup+0xa4>)
 80a01a6:	7023      	strb	r3, [r4, #0]
    delay(10);  //Make sure sensor had enough time to turn on. BME280 requires 2ms to start up.         Serial.begin(57600);

    bme280.begin();

  httpRequest.ip = IPAddress(192, 168, 1, 3);
  httpRequest.port = 8004;
 80a01a8:	f641 7344 	movw	r3, #8004	; 0x1f44
  httpRequest.path = String("/api/v1/dNEFRG25CFJgMXKkvV82/telemetry");
 80a01ac:	a802      	add	r0, sp, #8
    delay(10);  //Make sure sensor had enough time to turn on. BME280 requires 2ms to start up.         Serial.begin(57600);

    bme280.begin();

  httpRequest.ip = IPAddress(192, 168, 1, 3);
  httpRequest.port = 8004;
 80a01ae:	63b3      	str	r3, [r6, #56]	; 0x38
  httpRequest.path = String("/api/v1/dNEFRG25CFJgMXKkvV82/telemetry");
 80a01b0:	f001 fbc2 	bl	80a1938 <_ZN6StringC1EPK19__FlashStringHelper>
 80a01b4:	a902      	add	r1, sp, #8
 80a01b6:	f106 0028 	add.w	r0, r6, #40	; 0x28
 80a01ba:	f001 fbed 	bl	80a1998 <_ZN6StringaSEOS_>
 80a01be:	a802      	add	r0, sp, #8
 80a01c0:	f001 fb73 	bl	80a18aa <_ZN6StringD1Ev>
}
 80a01c4:	b008      	add	sp, #32
 80a01c6:	bd70      	pop	{r4, r5, r6, pc}
 80a01c8:	20000542 	.word	0x20000542
 80a01cc:	20000070 	.word	0x20000070
 80a01d0:	200004f4 	.word	0x200004f4
 80a01d4:	2000008c 	.word	0x2000008c
 80a01d8:	080a3a70 	.word	0x080a3a70
 80a01dc:	00000000 	.word	0x00000000

080a01e0 <loop>:

void loop()
{
 80a01e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    int pm25=0, pm10=0;
    
    int sensorByte = Serial1.read();
 80a01e2:	f001 feef 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a01e6:	6803      	ldr	r3, [r0, #0]
 80a01e8:	695b      	ldr	r3, [r3, #20]
 80a01ea:	4798      	blx	r3
    if (sensorByte < 0 ) {
 80a01ec:	2800      	cmp	r0, #0
 80a01ee:	f2c0 808b 	blt.w	80a0308 <loop+0x128>
        return;
    }
    sensorData[sensorByteIndex++] = sensorByte & 0xFF;
 80a01f2:	4949      	ldr	r1, [pc, #292]	; (80a0318 <loop+0x138>)
 80a01f4:	4b49      	ldr	r3, [pc, #292]	; (80a031c <loop+0x13c>)
 80a01f6:	680c      	ldr	r4, [r1, #0]
 80a01f8:	1c62      	adds	r2, r4, #1

    if (sensorByteIndex >= 10) {
 80a01fa:	2a09      	cmp	r2, #9
    
    int sensorByte = Serial1.read();
    if (sensorByte < 0 ) {
        return;
    }
    sensorData[sensorByteIndex++] = sensorByte & 0xFF;
 80a01fc:	600a      	str	r2, [r1, #0]
 80a01fe:	5518      	strb	r0, [r3, r4]
 80a0200:	4a47      	ldr	r2, [pc, #284]	; (80a0320 <loop+0x140>)
 80a0202:	f04f 0400 	mov.w	r4, #0

    if (sensorByteIndex >= 10) {
 80a0206:	dd14      	ble.n	80a0232 <loop+0x52>
        sensorByteIndex = 0;
 80a0208:	600c      	str	r4, [r1, #0]

        if (sensorData[0] == 0xAA && sensorData[9] == 0xAB) {
 80a020a:	7819      	ldrb	r1, [r3, #0]
 80a020c:	29aa      	cmp	r1, #170	; 0xaa
 80a020e:	d10b      	bne.n	80a0228 <loop+0x48>
 80a0210:	7a59      	ldrb	r1, [r3, #9]
 80a0212:	29ab      	cmp	r1, #171	; 0xab
 80a0214:	d108      	bne.n	80a0228 <loop+0x48>
            pm25 = sensorData[2] + sensorData[3] * 256;
 80a0216:	78de      	ldrb	r6, [r3, #3]
 80a0218:	7899      	ldrb	r1, [r3, #2]
            pm10 = sensorData[4] + sensorData[5] * 256;
 80a021a:	795c      	ldrb	r4, [r3, #5]
 80a021c:	791b      	ldrb	r3, [r3, #4]

    if (sensorByteIndex >= 10) {
        sensorByteIndex = 0;

        if (sensorData[0] == 0xAA && sensorData[9] == 0xAB) {
            pm25 = sensorData[2] + sensorData[3] * 256;
 80a021e:	eb01 2606 	add.w	r6, r1, r6, lsl #8
            pm10 = sensorData[4] + sensorData[5] * 256;
 80a0222:	eb03 2404 	add.w	r4, r3, r4, lsl #8
 80a0226:	e000      	b.n	80a022a <loop+0x4a>

void loop()
{


    int pm25=0, pm10=0;
 80a0228:	4626      	mov	r6, r4
            pm10 = sensorData[4] + sensorData[5] * 256;
    
            
    
        }
        loopCounter++;
 80a022a:	6813      	ldr	r3, [r2, #0]
 80a022c:	3301      	adds	r3, #1
 80a022e:	6013      	str	r3, [r2, #0]
 80a0230:	e000      	b.n	80a0234 <loop+0x54>

void loop()
{


    int pm25=0, pm10=0;
 80a0232:	4626      	mov	r6, r4
            
    
        }
        loopCounter++;
    }
    if (loopCounter >= 5) {
 80a0234:	6813      	ldr	r3, [r2, #0]
 80a0236:	2b04      	cmp	r3, #4
 80a0238:	dd66      	ble.n	80a0308 <loop+0x128>
        loopCounter = 0;
 80a023a:	4b39      	ldr	r3, [pc, #228]	; (80a0320 <loop+0x140>)
 80a023c:	2700      	movs	r7, #0

    //runMode can be:
    //  0, Sleep mode
    //  1 or 2, Forced mode
    //  3, Normal mode
        bme280.settings.runMode = 3;
 80a023e:	4d39      	ldr	r5, [pc, #228]	; (80a0324 <loop+0x144>)
    
        }
        loopCounter++;
    }
    if (loopCounter >= 5) {
        loopCounter = 0;
 80a0240:	601f      	str	r7, [r3, #0]
    //runMode can be:
    //  0, Sleep mode
    //  1 or 2, Forced mode
    //  3, Normal mode
        bme280.settings.runMode = 3;
delay(1000);
 80a0242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8

    //runMode can be:
    //  0, Sleep mode
    //  1 or 2, Forced mode
    //  3, Normal mode
        bme280.settings.runMode = 3;
 80a0246:	2303      	movs	r3, #3
 80a0248:	70eb      	strb	r3, [r5, #3]
delay(1000);
 80a024a:	f000 ffd7 	bl	80a11fc <delay>

            lcd.clear();
 80a024e:	4836      	ldr	r0, [pc, #216]	; (80a0328 <loop+0x148>)
 80a0250:	f000 f8f0 	bl	80a0434 <_ZN19Serial_LCD_SparkFun5clearEv>
            lcd.home();
 80a0254:	4834      	ldr	r0, [pc, #208]	; (80a0328 <loop+0x148>)
 80a0256:	f000 f8f0 	bl	80a043a <_ZN19Serial_LCD_SparkFun4homeEv>

            lcd.selectLine(1);
 80a025a:	2101      	movs	r1, #1
 80a025c:	4832      	ldr	r0, [pc, #200]	; (80a0328 <loop+0x148>)
 80a025e:	f000 f919 	bl	80a0494 <_ZN19Serial_LCD_SparkFun10selectLineEi>
            // Serial1.print("P2.5,10um=");
            Serial1.print("AirQ ");
 80a0262:	f001 feaf 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a0266:	4931      	ldr	r1, [pc, #196]	; (80a032c <loop+0x14c>)
 80a0268:	f001 f960 	bl	80a152c <_ZN5Print5printEPKc>
            Serial1.print(pm25, DEC);
 80a026c:	f001 feaa 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a0270:	220a      	movs	r2, #10
 80a0272:	4631      	mov	r1, r6
 80a0274:	f001 f961 	bl	80a153a <_ZN5Print11printNumberEmh>
            Serial1.print(",");
 80a0278:	f001 fea4 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a027c:	492c      	ldr	r1, [pc, #176]	; (80a0330 <loop+0x150>)
 80a027e:	f001 f955 	bl	80a152c <_ZN5Print5printEPKc>
            Serial1.print(pm10, DEC);
 80a0282:	f001 fe9f 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a0286:	220a      	movs	r2, #10
 80a0288:	4621      	mov	r1, r4
 80a028a:	f001 f956 	bl	80a153a <_ZN5Print11printNumberEmh>

            lcd.selectLine(2);
 80a028e:	2102      	movs	r1, #2
 80a0290:	4825      	ldr	r0, [pc, #148]	; (80a0328 <loop+0x148>)
 80a0292:	f000 f8ff 	bl	80a0494 <_ZN19Serial_LCD_SparkFun10selectLineEi>
            //Serial1.print(bme280.readTempC(), 0);
            //Serial1.print("C ");
            Serial1.print(bme280.readTempC(), 0);
 80a0296:	f001 fe95 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a029a:	4604      	mov	r4, r0
 80a029c:	4628      	mov	r0, r5
 80a029e:	f000 facf 	bl	80a0840 <_ZN6BME2809readTempCEv>
 80a02a2:	463a      	mov	r2, r7
 80a02a4:	4601      	mov	r1, r0
 80a02a6:	4620      	mov	r0, r4
 80a02a8:	f001 fa20 	bl	80a16ec <_ZN5Print5printEfi>
            Serial1.print("C ");
 80a02ac:	f001 fe8a 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a02b0:	4920      	ldr	r1, [pc, #128]	; (80a0334 <loop+0x154>)
 80a02b2:	f001 f93b 	bl	80a152c <_ZN5Print5printEPKc>
            Serial1.print(bme280.readFloatHumidity(), 0);
 80a02b6:	f001 fe85 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a02ba:	4604      	mov	r4, r0
 80a02bc:	4628      	mov	r0, r5
 80a02be:	f000 fa77 	bl	80a07b0 <_ZN6BME28017readFloatHumidityEv>
 80a02c2:	463a      	mov	r2, r7
 80a02c4:	4601      	mov	r1, r0
 80a02c6:	4620      	mov	r0, r4
 80a02c8:	f001 fa10 	bl	80a16ec <_ZN5Print5printEfi>
            Serial1.print("% ");
 80a02cc:	f001 fe7a 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a02d0:	4919      	ldr	r1, [pc, #100]	; (80a0338 <loop+0x158>)
 80a02d2:	f001 f92b 	bl	80a152c <_ZN5Print5printEPKc>
            Serial1.print(bme280.readFloatPressure()/82.5, 0);
 80a02d6:	f001 fe75 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a02da:	4604      	mov	r4, r0
 80a02dc:	4628      	mov	r0, r5
 80a02de:	f000 f995 	bl	80a060c <_ZN6BME28017readFloatPressureEv>
 80a02e2:	f002 fbef 	bl	80a2ac4 <__aeabi_f2d>
 80a02e6:	a30a      	add	r3, pc, #40	; (adr r3, 80a0310 <loop+0x130>)
 80a02e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02ec:	f002 fd68 	bl	80a2dc0 <__aeabi_ddiv>
 80a02f0:	9700      	str	r7, [sp, #0]
 80a02f2:	4602      	mov	r2, r0
 80a02f4:	460b      	mov	r3, r1
 80a02f6:	4620      	mov	r0, r4
 80a02f8:	f001 fa07 	bl	80a170a <_ZN5Print5printEdi>
            Serial1.print("hPa");
 80a02fc:	f001 fe62 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a0300:	490e      	ldr	r1, [pc, #56]	; (80a033c <loop+0x15c>)
 80a0302:	f001 f913 	bl	80a152c <_ZN5Print5printEPKc>
            

    bme280.settings.runMode = 0;
 80a0306:	70ef      	strb	r7, [r5, #3]
    }
    
}
 80a0308:	b003      	add	sp, #12
 80a030a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a030c:	f3af 8000 	nop.w
 80a0310:	00000000 	.word	0x00000000
 80a0314:	4054a000 	.word	0x4054a000
 80a0318:	20000088 	.word	0x20000088
 80a031c:	20000538 	.word	0x20000538
 80a0320:	2000006c 	.word	0x2000006c
 80a0324:	200004f4 	.word	0x200004f4
 80a0328:	20000542 	.word	0x20000542
 80a032c:	080a3a97 	.word	0x080a3a97
 80a0330:	080a3a9d 	.word	0x080a3a9d
 80a0334:	080a3a9f 	.word	0x080a3a9f
 80a0338:	080a3aa2 	.word	0x080a3aa2
 80a033c:	080a3aa5 	.word	0x080a3aa5

080a0340 <_GLOBAL__sub_I_lcd>:
 80a0340:	b570      	push	{r4, r5, r6, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0342:	f000 fd23 	bl	80a0d8c <HAL_Pin_Map>
#include "SparkFunBME280.h"
#include "Wire.h"

Serial_LCD_SparkFun lcd;
BME280 bme280;
HttpClient httpClient;
 80a0346:	4c1c      	ldr	r4, [pc, #112]	; (80a03b8 <_GLOBAL__sub_I_lcd+0x78>)
#include "Serial_LCD_SparkFun.h"
#include "HttpClient.h"
#include "SparkFunBME280.h"
#include "Wire.h"

Serial_LCD_SparkFun lcd;
 80a0348:	481c      	ldr	r0, [pc, #112]	; (80a03bc <_GLOBAL__sub_I_lcd+0x7c>)
 80a034a:	f000 f851 	bl	80a03f0 <_ZN19Serial_LCD_SparkFunC1Ev>
BME280 bme280;
 80a034e:	481c      	ldr	r0, [pc, #112]	; (80a03c0 <_GLOBAL__sub_I_lcd+0x80>)
 80a0350:	f000 f8ce 	bl	80a04f0 <_ZN6BME280C1Ev>
HttpClient httpClient;
 80a0354:	4e1b      	ldr	r6, [pc, #108]	; (80a03c4 <_GLOBAL__sub_I_lcd+0x84>)
 80a0356:	4620      	mov	r0, r4
 80a0358:	f000 f842 	bl	80a03e0 <_ZN10HttpClientC1Ev>
 * path	 request path
 * port     request port
 * body	 request body
 */
typedef struct
{
 80a035c:	4d1a      	ldr	r5, [pc, #104]	; (80a03c8 <_GLOBAL__sub_I_lcd+0x88>)
 80a035e:	4620      	mov	r0, r4
 80a0360:	4c1a      	ldr	r4, [pc, #104]	; (80a03cc <_GLOBAL__sub_I_lcd+0x8c>)
 80a0362:	4632      	mov	r2, r6
 80a0364:	491a      	ldr	r1, [pc, #104]	; (80a03d0 <_GLOBAL__sub_I_lcd+0x90>)
 80a0366:	f002 f8df 	bl	80a2528 <__aeabi_atexit>
 80a036a:	4629      	mov	r1, r5
 80a036c:	4620      	mov	r0, r4
 80a036e:	f001 fae3 	bl	80a1938 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0372:	f104 0010 	add.w	r0, r4, #16
 80a0376:	f000 fff3 	bl	80a1360 <_ZN9IPAddressC1Ev>
 80a037a:	4629      	mov	r1, r5
 80a037c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a0380:	f001 fada 	bl	80a1938 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0384:	4629      	mov	r1, r5
 80a0386:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a038a:	f001 fad5 	bl	80a1938 <_ZN6StringC1EPK19__FlashStringHelper>
http_request_t httpRequest;
 80a038e:	4620      	mov	r0, r4
 * HTTP Response struct.
 * status  response status code.
 * body	response body
 */
typedef struct
{
 80a0390:	4c10      	ldr	r4, [pc, #64]	; (80a03d4 <_GLOBAL__sub_I_lcd+0x94>)
 80a0392:	4632      	mov	r2, r6
 80a0394:	4910      	ldr	r1, [pc, #64]	; (80a03d8 <_GLOBAL__sub_I_lcd+0x98>)
 80a0396:	f002 f8c7 	bl	80a2528 <__aeabi_atexit>
 80a039a:	4629      	mov	r1, r5
 80a039c:	1d20      	adds	r0, r4, #4
 80a039e:	f001 facb 	bl	80a1938 <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t httpResponse;
 80a03a2:	4632      	mov	r2, r6
 80a03a4:	490d      	ldr	r1, [pc, #52]	; (80a03dc <_GLOBAL__sub_I_lcd+0x9c>)
 80a03a6:	4620      	mov	r0, r4
 80a03a8:	f002 f8be 	bl	80a2528 <__aeabi_atexit>
            

    bme280.settings.runMode = 0;
    }
    
}
 80a03ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
int sensorByteIndex;
int sensorByte;
int loopCounter = 0;

// SYSTEM_MODE(SEMI_AUTOMATIC)
SYSTEM_THREAD(ENABLED)
 80a03b0:	2100      	movs	r1, #0
 80a03b2:	2001      	movs	r0, #1
 80a03b4:	f000 be96 	b.w	80a10e4 <system_thread_set_state>
 80a03b8:	200000d8 	.word	0x200000d8
 80a03bc:	20000542 	.word	0x20000542
 80a03c0:	200004f4 	.word	0x200004f4
 80a03c4:	20000068 	.word	0x20000068
 80a03c8:	080a3bc6 	.word	0x080a3bc6
 80a03cc:	2000008c 	.word	0x2000008c
 80a03d0:	080a0115 	.word	0x080a0115
 80a03d4:	20000074 	.word	0x20000074
 80a03d8:	080a00c5 	.word	0x080a00c5
 80a03dc:	080a00b7 	.word	0x080a00b7

080a03e0 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
 80a03e0:	b510      	push	{r4, lr}
 80a03e2:	4604      	mov	r4, r0
 80a03e4:	f001 fd26 	bl	80a1e34 <_ZN9TCPClientC1Ev>
{

}
 80a03e8:	4620      	mov	r0, r4
 80a03ea:	bd10      	pop	{r4, pc}

080a03ec <_GLOBAL__sub_I__ZN10HttpClientC2Ev>:
 80a03ec:	f000 bcce 	b.w	80a0d8c <HAL_Pin_Map>

080a03f0 <_ZN19Serial_LCD_SparkFunC1Ev>:

//	PUBLIC FUNCTIONS

// Contstructor
// defaults to 16x2 display
Serial_LCD_SparkFun::Serial_LCD_SparkFun() {
 80a03f0:	b510      	push	{r4, lr}
 80a03f2:	4604      	mov	r4, r0
	//pinMode(pin, OUTPUT);
	Serial1.begin(9600);
 80a03f4:	f001 fde6 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a03f8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a03fc:	f001 fdd8 	bl	80a1fb0 <_ZN11USARTSerial5beginEm>
	_numlines = LCD_2LINE;
 80a0400:	2302      	movs	r3, #2
 80a0402:	70e3      	strb	r3, [r4, #3]
	_numchars = LCD_16CHAR;
 80a0404:	2310      	movs	r3, #16
 80a0406:	7123      	strb	r3, [r4, #4]
	_rowoffset = 0;
 80a0408:	2300      	movs	r3, #0
 80a040a:	7163      	strb	r3, [r4, #5]
}
 80a040c:	4620      	mov	r0, r4
 80a040e:	bd10      	pop	{r4, pc}

080a0410 <_ZN19Serial_LCD_SparkFun7commandEh>:
}

// PRIVATE FUNCTIONS

// Functions for sending the special command values
void Serial_LCD_SparkFun::command(uint8_t value){
 80a0410:	b510      	push	{r4, lr}
 80a0412:	460c      	mov	r4, r1
	Serial1.write(0xFE);
 80a0414:	f001 fdd6 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
  bool breakRx(void);

  inline size_t write(unsigned long n) { return write((uint16_t)n); }
  inline size_t write(long n) { return write((uint16_t)n); }
  inline size_t write(unsigned int n) { return write((uint16_t)n); }
  inline size_t write(int n) { return write((uint16_t)n); }
 80a0418:	21fe      	movs	r1, #254	; 0xfe
 80a041a:	f001 fdcc 	bl	80a1fb6 <_ZN11USARTSerial5writeEt>
	Serial1.write(value);
 80a041e:	f001 fdd1 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a0422:	6803      	ldr	r3, [r0, #0]
 80a0424:	4621      	mov	r1, r4
 80a0426:	689b      	ldr	r3, [r3, #8]
 80a0428:	4798      	blx	r3
	delay(5);
}
 80a042a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

// Functions for sending the special command values
void Serial_LCD_SparkFun::command(uint8_t value){
	Serial1.write(0xFE);
	Serial1.write(value);
	delay(5);
 80a042e:	2005      	movs	r0, #5
 80a0430:	f000 bee4 	b.w	80a11fc <delay>

080a0434 <_ZN19Serial_LCD_SparkFun5clearEv>:
	}
}

// Clears screen and returns cursor to home position
void Serial_LCD_SparkFun::clear(){
	command(LCD_CLEARDISPLAY);
 80a0434:	2101      	movs	r1, #1
 80a0436:	f7ff bfeb 	b.w	80a0410 <_ZN19Serial_LCD_SparkFun7commandEh>

080a043a <_ZN19Serial_LCD_SparkFun4homeEv>:
	}
}

// returns cursor to home position
void Serial_LCD_SparkFun::home(){
	command(LCD_RETURNHOME);
 80a043a:	2102      	movs	r1, #2
 80a043c:	f7ff bfe8 	b.w	80a0410 <_ZN19Serial_LCD_SparkFun7commandEh>

080a0440 <_ZN19Serial_LCD_SparkFun9setCursorEii>:
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}

// Set cursor to specific row and col values start at 1 not 0
void Serial_LCD_SparkFun::setCursor(int row, int col){
 80a0440:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0442:	b089      	sub	sp, #36	; 0x24
	int row_offsets[2][4] = {
		{ 0x00, 0x40, 0x10, 0x50 },
		{ 0x00, 0x40, 0x14, 0x54 }
	};
 80a0444:	466c      	mov	r4, sp
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}

// Set cursor to specific row and col values start at 1 not 0
void Serial_LCD_SparkFun::setCursor(int row, int col){
 80a0446:	460f      	mov	r7, r1
	int row_offsets[2][4] = {
		{ 0x00, 0x40, 0x10, 0x50 },
		{ 0x00, 0x40, 0x14, 0x54 }
	};
 80a0448:	4d11      	ldr	r5, [pc, #68]	; (80a0490 <_ZN19Serial_LCD_SparkFun9setCursorEii+0x50>)
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}

// Set cursor to specific row and col values start at 1 not 0
void Serial_LCD_SparkFun::setCursor(int row, int col){
 80a044a:	4686      	mov	lr, r0
 80a044c:	4616      	mov	r6, r2
	int row_offsets[2][4] = {
		{ 0x00, 0x40, 0x10, 0x50 },
		{ 0x00, 0x40, 0x14, 0x54 }
	};
 80a044e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0452:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80a0456:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if((row > 0 && row < 3) && (col > 0 && col < 17)){
 80a045a:	1e79      	subs	r1, r7, #1
 80a045c:	2901      	cmp	r1, #1
 80a045e:	d815      	bhi.n	80a048c <_ZN19Serial_LCD_SparkFun9setCursorEii+0x4c>
 80a0460:	1e72      	subs	r2, r6, #1
 80a0462:	2a0f      	cmp	r2, #15
 80a0464:	d812      	bhi.n	80a048c <_ZN19Serial_LCD_SparkFun9setCursorEii+0x4c>
           command(LCD_SETDDRAMADDR | ((col - 1) + row_offsets[_rowoffset][(row - 1)]));
 80a0466:	4670      	mov	r0, lr
 80a0468:	f89e 3005 	ldrb.w	r3, [lr, #5]
 80a046c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80a0470:	ab08      	add	r3, sp, #32
 80a0472:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80a0476:	f851 1c20 	ldr.w	r1, [r1, #-32]
 80a047a:	4411      	add	r1, r2
 80a047c:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80a0480:	b2c9      	uxtb	r1, r1
	}
}
 80a0482:	b009      	add	sp, #36	; 0x24
 80a0484:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	int row_offsets[2][4] = {
		{ 0x00, 0x40, 0x10, 0x50 },
		{ 0x00, 0x40, 0x14, 0x54 }
	};
	if((row > 0 && row < 3) && (col > 0 && col < 17)){
           command(LCD_SETDDRAMADDR | ((col - 1) + row_offsets[_rowoffset][(row - 1)]));
 80a0488:	f7ff bfc2 	b.w	80a0410 <_ZN19Serial_LCD_SparkFun7commandEh>
	}
}
 80a048c:	b009      	add	sp, #36	; 0x24
 80a048e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0490:	080a3aac 	.word	0x080a3aac

080a0494 <_ZN19Serial_LCD_SparkFun10selectLineEi>:
	}
}

// Moves cursor to the beginning of selected line
void Serial_LCD_SparkFun::selectLine(int num){
	if(num > 0 && num <= _numlines){
 80a0494:	1e0a      	subs	r2, r1, #0
 80a0496:	dd05      	ble.n	80a04a4 <_ZN19Serial_LCD_SparkFun10selectLineEi+0x10>
 80a0498:	78c3      	ldrb	r3, [r0, #3]
 80a049a:	429a      	cmp	r2, r3
 80a049c:	dc02      	bgt.n	80a04a4 <_ZN19Serial_LCD_SparkFun10selectLineEi+0x10>
		setCursor(num, 1);
 80a049e:	2201      	movs	r2, #1
 80a04a0:	f7ff bfce 	b.w	80a0440 <_ZN19Serial_LCD_SparkFun9setCursorEii>
 80a04a4:	4770      	bx	lr

080a04a6 <_ZN19Serial_LCD_SparkFun14specialCommandEh>:
void Serial_LCD_SparkFun::command(uint8_t value){
	Serial1.write(0xFE);
	Serial1.write(value);
	delay(5);
}
void Serial_LCD_SparkFun::specialCommand(uint8_t value){
 80a04a6:	b510      	push	{r4, lr}
 80a04a8:	460c      	mov	r4, r1
	Serial1.write(0x7C);
 80a04aa:	f001 fd8b 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a04ae:	217c      	movs	r1, #124	; 0x7c
 80a04b0:	f001 fd81 	bl	80a1fb6 <_ZN11USARTSerial5writeEt>
	Serial1.write(value);
 80a04b4:	f001 fd86 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a04b8:	6803      	ldr	r3, [r0, #0]
 80a04ba:	4621      	mov	r1, r4
 80a04bc:	689b      	ldr	r3, [r3, #8]
 80a04be:	4798      	blx	r3
	delay(5);
}
 80a04c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay(5);
}
void Serial_LCD_SparkFun::specialCommand(uint8_t value){
	Serial1.write(0x7C);
	Serial1.write(value);
	delay(5);
 80a04c4:	2005      	movs	r0, #5
 80a04c6:	f000 be99 	b.w	80a11fc <delay>

080a04ca <_ZN19Serial_LCD_SparkFun13setBrightnessEi>:
}
*/

// Set brightness value range 1-30 1=OFF 30=FULL
void Serial_LCD_SparkFun::setBrightness(int val){
	if(val >= 1 && val <= 30){
 80a04ca:	3901      	subs	r1, #1
 80a04cc:	291d      	cmp	r1, #29
 80a04ce:	d804      	bhi.n	80a04da <_ZN19Serial_LCD_SparkFun13setBrightnessEi+0x10>
		specialCommand(LCD_BACKLIGHT | (val - 1));
 80a04d0:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80a04d4:	b2c9      	uxtb	r1, r1
 80a04d6:	f7ff bfe6 	b.w	80a04a6 <_ZN19Serial_LCD_SparkFun14specialCommandEh>
 80a04da:	4770      	bx	lr

080a04dc <_GLOBAL__sub_I__ZN19Serial_LCD_SparkFunC2Ev>:
 80a04dc:	f000 bc56 	b.w	80a0d8c <HAL_Pin_Map>

080a04e0 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a04e0:	b510      	push	{r4, lr}
 80a04e2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a04e4:	6880      	ldr	r0, [r0, #8]
 80a04e6:	b108      	cbz	r0, 80a04ec <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a04e8:	f000 fc28 	bl	80a0d3c <os_mutex_recursive_destroy>
 80a04ec:	4620      	mov	r0, r4
 80a04ee:	bd10      	pop	{r4, pc}

080a04f0 <_ZN6BME280C1Ev>:
//  Settings and configuration
//
//****************************************************************************//

//Constructor -- Specifies default configuration
BME280::BME280( void )
 80a04f0:	4b0d      	ldr	r3, [pc, #52]	; (80a0528 <_ZN6BME280C1Ev+0x38>)
 80a04f2:	b570      	push	{r4, r5, r6, lr}
 80a04f4:	4604      	mov	r4, r0
 80a04f6:	2501      	movs	r5, #1
 80a04f8:	2600      	movs	r6, #0
 80a04fa:	6403      	str	r3, [r0, #64]	; 0x40
{
	//Construct with these default settings

	settings.commInterface = I2C_MODE; //Default to I2C

	settings.I2CAddress = 0x77; //Default, jumper open is 0x77
 80a04fc:	2377      	movs	r3, #119	; 0x77
//  Settings and configuration
//
//****************************************************************************//

//Constructor -- Specifies default configuration
BME280::BME280( void )
 80a04fe:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 80a0502:	63c6      	str	r6, [r0, #60]	; 0x3c
{
	//Construct with these default settings

	settings.commInterface = I2C_MODE; //Default to I2C
 80a0504:	7006      	strb	r6, [r0, #0]

	settings.I2CAddress = 0x77; //Default, jumper open is 0x77
 80a0506:	7043      	strb	r3, [r0, #1]
	_hardPort = &Wire; //Default to Wire port
 80a0508:	f001 ffd0 	bl	80a24ac <_Z19__fetch_global_Wirev>

	settings.chipSelectPin = 10; //Select CS pin for SPI
 80a050c:	230a      	movs	r3, #10
 80a050e:	70a3      	strb	r3, [r4, #2]
	
	//These are deprecated settings
	settings.runMode = 3; //Normal/Run
 80a0510:	2303      	movs	r3, #3
 80a0512:	70e3      	strb	r3, [r4, #3]
	settings.tStandby = 0; //0.5ms
	settings.filter = 0; //Filter off
	settings.tempOverSample = 1;
	settings.pressOverSample = 1;
	settings.humidOverSample = 1;
    settings.tempCorrection = 0.0; // correction of temperature - added to the result
 80a0514:	2300      	movs	r3, #0
	//Construct with these default settings

	settings.commInterface = I2C_MODE; //Default to I2C

	settings.I2CAddress = 0x77; //Default, jumper open is 0x77
	_hardPort = &Wire; //Default to Wire port
 80a0516:	63e0      	str	r0, [r4, #60]	; 0x3c

	settings.chipSelectPin = 10; //Select CS pin for SPI
	
	//These are deprecated settings
	settings.runMode = 3; //Normal/Run
	settings.tStandby = 0; //0.5ms
 80a0518:	7126      	strb	r6, [r4, #4]
	settings.filter = 0; //Filter off
 80a051a:	7166      	strb	r6, [r4, #5]
	settings.tempOverSample = 1;
 80a051c:	71a5      	strb	r5, [r4, #6]
	settings.pressOverSample = 1;
 80a051e:	71e5      	strb	r5, [r4, #7]
	settings.humidOverSample = 1;
 80a0520:	7225      	strb	r5, [r4, #8]
    settings.tempCorrection = 0.0; // correction of temperature - added to the result
 80a0522:	60e3      	str	r3, [r4, #12]
}
 80a0524:	4620      	mov	r0, r4
 80a0526:	bd70      	pop	{r4, r5, r6, pc}
 80a0528:	47c5e680 	.word	0x47c5e680

080a052c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 80a052c:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a052e:	4d0b      	ldr	r5, [pc, #44]	; (80a055c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x30>)
 80a0530:	6829      	ldr	r1, [r5, #0]
 80a0532:	f011 0401 	ands.w	r4, r1, #1
 80a0536:	d10f      	bne.n	80a0558 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a0538:	4628      	mov	r0, r5
 80a053a:	f7ff fdb4 	bl	80a00a6 <__cxa_guard_acquire>
 80a053e:	b158      	cbz	r0, 80a0558 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a0540:	4621      	mov	r1, r4
 80a0542:	4807      	ldr	r0, [pc, #28]	; (80a0560 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a0544:	f001 f8fd 	bl	80a1742 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0548:	4628      	mov	r0, r5
 80a054a:	f7ff fdb1 	bl	80a00b0 <__cxa_guard_release>
 80a054e:	4a05      	ldr	r2, [pc, #20]	; (80a0564 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x38>)
 80a0550:	4905      	ldr	r1, [pc, #20]	; (80a0568 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x3c>)
 80a0552:	4803      	ldr	r0, [pc, #12]	; (80a0560 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a0554:	f001 ffe8 	bl	80a2528 <__aeabi_atexit>
        return instance;
    }
 80a0558:	4801      	ldr	r0, [pc, #4]	; (80a0560 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a055a:	bd38      	pop	{r3, r4, r5, pc}
 80a055c:	20000548 	.word	0x20000548
 80a0560:	2000054c 	.word	0x2000054c
 80a0564:	20000068 	.word	0x20000068
 80a0568:	080a04e1 	.word	0x080a04e1

080a056c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.5>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 80a056c:	b510      	push	{r4, lr}
 80a056e:	4604      	mov	r4, r0
        return instance().transfer(data);
 80a0570:	f7ff ffdc 	bl	80a052c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a0574:	4621      	mov	r1, r4
    }
 80a0576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80a057a:	f001 b98d 	b.w	80a1898 <_ZN8SPIClass8transferEh>

080a057e <_ZN6BME28018readRegisterRegionEPhhh>:
//
//  Utility
//
//****************************************************************************//
void BME280::readRegisterRegion(uint8_t *outputPointer , uint8_t offset, uint8_t length)
{
 80a057e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0580:	461e      	mov	r6, r3
	//define pointer that will point to the external space
	uint8_t i = 0;
	char c = 0;

	switch (settings.commInterface)
 80a0582:	7803      	ldrb	r3, [r0, #0]
//
//  Utility
//
//****************************************************************************//
void BME280::readRegisterRegion(uint8_t *outputPointer , uint8_t offset, uint8_t length)
{
 80a0584:	4604      	mov	r4, r0
 80a0586:	460d      	mov	r5, r1
 80a0588:	4617      	mov	r7, r2
	//define pointer that will point to the external space
	uint8_t i = 0;
	char c = 0;

	switch (settings.commInterface)
 80a058a:	b113      	cbz	r3, 80a0592 <_ZN6BME28018readRegisterRegionEPhhh+0x14>
 80a058c:	2b01      	cmp	r3, #1
 80a058e:	d01e      	beq.n	80a05ce <_ZN6BME28018readRegisterRegionEPhhh+0x50>
 80a0590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{

	case I2C_MODE:
		switch(_wireType)
 80a0592:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80a0596:	2b01      	cmp	r3, #1
 80a0598:	d137      	bne.n	80a060a <_ZN6BME28018readRegisterRegionEPhhh+0x8c>
		{
			case(HARD_WIRE):
				_hardPort->beginTransmission(settings.I2CAddress);
 80a059a:	7841      	ldrb	r1, [r0, #1]
 80a059c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a059e:	f000 feae 	bl	80a12fe <_ZN7TwoWire17beginTransmissionEh>
				_hardPort->write(offset);
 80a05a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a05a4:	4639      	mov	r1, r7
 80a05a6:	6803      	ldr	r3, [r0, #0]
 80a05a8:	689b      	ldr	r3, [r3, #8]
 80a05aa:	4798      	blx	r3
				_hardPort->endTransmission();
 80a05ac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a05ae:	f000 feae 	bl	80a130e <_ZN7TwoWire15endTransmissionEv>

				// request bytes from slave device
				_hardPort->requestFrom(settings.I2CAddress, length);
 80a05b2:	4632      	mov	r2, r6
 80a05b4:	7861      	ldrb	r1, [r4, #1]
 80a05b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a05b8:	f000 fe9e 	bl	80a12f8 <_ZN7TwoWire11requestFromEhj>
 80a05bc:	442e      	add	r6, r5
				while ( (_hardPort->available()) && (i < length))  // slave may send less than requested
 80a05be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a05c0:	6803      	ldr	r3, [r0, #0]
 80a05c2:	691b      	ldr	r3, [r3, #16]
 80a05c4:	4798      	blx	r3
 80a05c6:	b300      	cbz	r0, 80a060a <_ZN6BME28018readRegisterRegionEPhhh+0x8c>
 80a05c8:	42b5      	cmp	r5, r6
 80a05ca:	d117      	bne.n	80a05fc <_ZN6BME28018readRegisterRegionEPhhh+0x7e>
 80a05cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		break;

	case SPI_MODE:
		// take the chip select low to select the device:
		digitalWrite(settings.chipSelectPin, LOW);
 80a05ce:	2100      	movs	r1, #0
 80a05d0:	7880      	ldrb	r0, [r0, #2]
 80a05d2:	f001 ff38 	bl	80a2446 <digitalWrite>
		// send the device the register you want to read:
		SPI.transfer(offset | 0x80);  //Ored with "read request" bit
 80a05d6:	f047 0080 	orr.w	r0, r7, #128	; 0x80
 80a05da:	f7ff ffc7 	bl	80a056c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.5>
 80a05de:	442e      	add	r6, r5
		while ( i < length ) // slave may send less than requested
 80a05e0:	42b5      	cmp	r5, r6
 80a05e2:	d005      	beq.n	80a05f0 <_ZN6BME28018readRegisterRegionEPhhh+0x72>
		{
			c = SPI.transfer(0x00); // receive a byte as character
 80a05e4:	2000      	movs	r0, #0
 80a05e6:	f7ff ffc1 	bl	80a056c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.5>
			*outputPointer = c;
 80a05ea:	f805 0b01 	strb.w	r0, [r5], #1
	case SPI_MODE:
		// take the chip select low to select the device:
		digitalWrite(settings.chipSelectPin, LOW);
		// send the device the register you want to read:
		SPI.transfer(offset | 0x80);  //Ored with "read request" bit
		while ( i < length ) // slave may send less than requested
 80a05ee:	e7f7      	b.n	80a05e0 <_ZN6BME28018readRegisterRegionEPhhh+0x62>
			*outputPointer = c;
			outputPointer++;
			i++;
		}
		// take the chip select high to de-select:
		digitalWrite(settings.chipSelectPin, HIGH);
 80a05f0:	78a0      	ldrb	r0, [r4, #2]
 80a05f2:	2101      	movs	r1, #1

	default:
		break;
	}

}
 80a05f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			*outputPointer = c;
			outputPointer++;
			i++;
		}
		// take the chip select high to de-select:
		digitalWrite(settings.chipSelectPin, HIGH);
 80a05f8:	f001 bf25 	b.w	80a2446 <digitalWrite>

				// request bytes from slave device
				_hardPort->requestFrom(settings.I2CAddress, length);
				while ( (_hardPort->available()) && (i < length))  // slave may send less than requested
				{
					c = _hardPort->read(); // receive a byte as character
 80a05fc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a05fe:	6803      	ldr	r3, [r0, #0]
 80a0600:	695b      	ldr	r3, [r3, #20]
 80a0602:	4798      	blx	r3
					*outputPointer = c;
 80a0604:	f805 0b01 	strb.w	r0, [r5], #1
 80a0608:	e7d9      	b.n	80a05be <_ZN6BME28018readRegisterRegionEPhhh+0x40>
 80a060a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a060c <_ZN6BME28017readFloatPressureEv>:
//
//  Pressure Section
//
//****************************************************************************//
float BME280::readFloatPressure( void )
{
 80a060c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0610:	4604      	mov	r4, r0

	// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
	// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
    uint8_t buffer[3];
	readRegisterRegion(buffer, BME280_PRESSURE_MSB_REG, 3);
 80a0612:	2303      	movs	r3, #3
 80a0614:	22f7      	movs	r2, #247	; 0xf7
 80a0616:	a901      	add	r1, sp, #4
 80a0618:	f7ff ffb1 	bl	80a057e <_ZN6BME28018readRegisterRegionEPhhh>
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
	
	int64_t var1, var2, p_acc;
	var1 = ((int64_t)t_fine) - 128000;
 80a061c:	6b60      	ldr	r0, [r4, #52]	; 0x34
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
	var2 = var2 + (((int64_t)calibration.dig_P4)<<35);
	var1 = ((var1 * var1 * (int64_t)calibration.dig_P3)>>8) + ((var1 * (int64_t)calibration.dig_P2)<<12);
 80a061e:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    uint8_t buffer[3];
	readRegisterRegion(buffer, BME280_PRESSURE_MSB_REG, 3);
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
	
	int64_t var1, var2, p_acc;
	var1 = ((int64_t)t_fine) - 128000;
 80a0622:	17c1      	asrs	r1, r0, #31
 80a0624:	f5b0 30fa 	subs.w	r0, r0, #128000	; 0x1f400
 80a0628:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
 80a062c:	fba0 6700 	umull	r6, r7, r0, r0
 80a0630:	fb00 f301 	mul.w	r3, r0, r1
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
	var2 = var2 + (((int64_t)calibration.dig_P4)<<35);
	var1 = ((var1 * var1 * (int64_t)calibration.dig_P3)>>8) + ((var1 * (int64_t)calibration.dig_P2)<<12);
 80a0634:	fb02 f501 	mul.w	r5, r2, r1
	readRegisterRegion(buffer, BME280_PRESSURE_MSB_REG, 3);
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
	
	int64_t var1, var2, p_acc;
	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
 80a0638:	eb07 0743 	add.w	r7, r7, r3, lsl #1
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
	var2 = var2 + (((int64_t)calibration.dig_P4)<<35);
	var1 = ((var1 * var1 * (int64_t)calibration.dig_P3)>>8) + ((var1 * (int64_t)calibration.dig_P2)<<12);
 80a063c:	17d3      	asrs	r3, r2, #31
 80a063e:	fb00 5503 	mla	r5, r0, r3, r5
 80a0642:	fba2 2300 	umull	r2, r3, r2, r0
 80a0646:	442b      	add	r3, r5
 80a0648:	ea4f 3b03 	mov.w	fp, r3, lsl #12
 80a064c:	ea4b 5b12 	orr.w	fp, fp, r2, lsr #20
 80a0650:	ea4f 3a02 	mov.w	sl, r2, lsl #12
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)calibration.dig_P1)>>33;
 80a0654:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 80a0658:	fb02 f507 	mul.w	r5, r2, r7
 80a065c:	17d3      	asrs	r3, r2, #31
 80a065e:	fb06 5503 	mla	r5, r6, r3, r5
 80a0662:	fba2 2306 	umull	r2, r3, r2, r6
 80a0666:	442b      	add	r3, r5
 80a0668:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80a066c:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 80a0670:	ea4f 2923 	mov.w	r9, r3, asr #8
 80a0674:	eb1a 0a08 	adds.w	sl, sl, r8
 80a0678:	8ae2      	ldrh	r2, [r4, #22]
 80a067a:	eb4b 0b09 	adc.w	fp, fp, r9
 80a067e:	f11a 0a00 	adds.w	sl, sl, #0
 80a0682:	fbaa 8902 	umull	r8, r9, sl, r2
 80a0686:	f54b 4b00 	adc.w	fp, fp, #32768	; 0x8000
 80a068a:	fb02 990b 	mla	r9, r2, fp, r9
 80a068e:	ea4f 0269 	mov.w	r2, r9, asr #1
 80a0692:	ea4f 73e9 	mov.w	r3, r9, asr #31
	if (var1 == 0)
 80a0696:	ea52 0503 	orrs.w	r5, r2, r3
 80a069a:	f000 8085 	beq.w	80a07a8 <_ZN6BME28017readFloatPressureEv+0x19c>
	readRegisterRegion(buffer, BME280_PRESSURE_MSB_REG, 3);
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
	
	int64_t var1, var2, p_acc;
	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
 80a069e:	f9b4 a020 	ldrsh.w	sl, [r4, #32]
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
 80a06a2:	f9b4 801e 	ldrsh.w	r8, [r4, #30]
	readRegisterRegion(buffer, BME280_PRESSURE_MSB_REG, 3);
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
	
	int64_t var1, var2, p_acc;
	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
 80a06a6:	fb0a f507 	mul.w	r5, sl, r7
 80a06aa:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80a06ae:	fb06 550b 	mla	r5, r6, fp, r5
 80a06b2:	fbaa 6706 	umull	r6, r7, sl, r6
 80a06b6:	442f      	add	r7, r5
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
 80a06b8:	fb08 f501 	mul.w	r5, r8, r1
 80a06bc:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80a06c0:	fb00 5509 	mla	r5, r0, r9, r5
 80a06c4:	fba8 0100 	umull	r0, r1, r8, r0
 80a06c8:	4429      	add	r1, r5
	if (var1 == 0)
	{
		return 0; // avoid exception caused by division by zero
	}
	p_acc = 1048576 - adc_P;
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
 80a06ca:	f89d 5006 	ldrb.w	r5, [sp, #6]
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
	
	int64_t var1, var2, p_acc;
	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
 80a06ce:	ea4f 4b41 	mov.w	fp, r1, lsl #17
	if (var1 == 0)
	{
		return 0; // avoid exception caused by division by zero
	}
	p_acc = 1048576 - adc_P;
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
 80a06d2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80a06d6:	092d      	lsrs	r5, r5, #4
 80a06d8:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
 80a06dc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
	
	int64_t var1, var2, p_acc;
	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
 80a06e0:	ea4f 4a40 	mov.w	sl, r0, lsl #17
	if (var1 == 0)
	{
		return 0; // avoid exception caused by division by zero
	}
	p_acc = 1048576 - adc_P;
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
 80a06e4:	ea45 3501 	orr.w	r5, r5, r1, lsl #12
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
	
	int64_t var1, var2, p_acc;
	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
 80a06e8:	eb1a 0a06 	adds.w	sl, sl, r6
	if (var1 == 0)
	{
		return 0; // avoid exception caused by division by zero
	}
	p_acc = 1048576 - adc_P;
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
 80a06ec:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    int32_t adc_P = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
	
	int64_t var1, var2, p_acc;
	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)calibration.dig_P6;
	var2 = var2 + ((var1 * (int64_t)calibration.dig_P5)<<17);
 80a06f0:	ea4b 3bd0 	orr.w	fp, fp, r0, lsr #15
 80a06f4:	eb4b 0b07 	adc.w	fp, fp, r7
	if (var1 == 0)
	{
		return 0; // avoid exception caused by division by zero
	}
	p_acc = 1048576 - adc_P;
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
 80a06f8:	17ef      	asrs	r7, r5, #31
 80a06fa:	07f9      	lsls	r1, r7, #31
 80a06fc:	ea41 0155 	orr.w	r1, r1, r5, lsr #1
 80a0700:	07e8      	lsls	r0, r5, #31
 80a0702:	f640 4535 	movw	r5, #3125	; 0xc35
 80a0706:	f9b4 801c 	ldrsh.w	r8, [r4, #28]
 80a070a:	2600      	movs	r6, #0
 80a070c:	eb16 060a 	adds.w	r6, r6, sl
 80a0710:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80a0714:	eb47 070b 	adc.w	r7, r7, fp
 80a0718:	1b86      	subs	r6, r0, r6
 80a071a:	eb61 0707 	sbc.w	r7, r1, r7
 80a071e:	fba6 0105 	umull	r0, r1, r6, r5
 80a0722:	fb05 1107 	mla	r1, r5, r7, r1
 80a0726:	f002 ff77 	bl	80a3618 <__aeabi_ldivmod>
	var1 = (((int64_t)calibration.dig_P9) * (p_acc>>13) * (p_acc>>13)) >> 25;
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
 80a072a:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
	{
		return 0; // avoid exception caused by division by zero
	}
	p_acc = 1048576 - adc_P;
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
	var1 = (((int64_t)calibration.dig_P9) * (p_acc>>13) * (p_acc>>13)) >> 25;
 80a072e:	134d      	asrs	r5, r1, #13
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
 80a0730:	fb02 f705 	mul.w	r7, r2, r5
	{
		return 0; // avoid exception caused by division by zero
	}
	p_acc = 1048576 - adc_P;
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
	var1 = (((int64_t)calibration.dig_P9) * (p_acc>>13) * (p_acc>>13)) >> 25;
 80a0734:	0b46      	lsrs	r6, r0, #13
 80a0736:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
 80a073a:	17d3      	asrs	r3, r2, #31
 80a073c:	fb06 7703 	mla	r7, r6, r3, r7
 80a0740:	fba2 2306 	umull	r2, r3, r2, r6
 80a0744:	4355      	muls	r5, r2
 80a0746:	443b      	add	r3, r7
 80a0748:	fb06 5503 	mla	r5, r6, r3, r5
 80a074c:	fba2 2306 	umull	r2, r3, r2, r6
 80a0750:	442b      	add	r3, r5
 80a0752:	0e56      	lsrs	r6, r2, #25
 80a0754:	ea46 16c3 	orr.w	r6, r6, r3, lsl #7
 80a0758:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 80a075c:	1836      	adds	r6, r6, r0
 80a075e:	ea4f 6763 	mov.w	r7, r3, asr #25
 80a0762:	414f      	adcs	r7, r1
 80a0764:	4351      	muls	r1, r2
 80a0766:	17d3      	asrs	r3, r2, #31
 80a0768:	fb00 1303 	mla	r3, r0, r3, r1
 80a076c:	fba2 0100 	umull	r0, r1, r2, r0
 80a0770:	4419      	add	r1, r3
 80a0772:	0cc2      	lsrs	r2, r0, #19
	
	return (float)p_acc / 256.0;
 80a0774:	f9b4 4022 	ldrsh.w	r4, [r4, #34]	; 0x22
	}
	p_acc = 1048576 - adc_P;
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
	var1 = (((int64_t)calibration.dig_P9) * (p_acc>>13) * (p_acc>>13)) >> 25;
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
 80a0778:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80a077c:	1992      	adds	r2, r2, r6
 80a077e:	ea4f 43e1 	mov.w	r3, r1, asr #19
 80a0782:	417b      	adcs	r3, r7
 80a0784:	0a10      	lsrs	r0, r2, #8
	
	return (float)p_acc / 256.0;
 80a0786:	17e5      	asrs	r5, r4, #31
 80a0788:	0122      	lsls	r2, r4, #4
	}
	p_acc = 1048576 - adc_P;
	p_acc = (((p_acc<<31) - var2)*3125)/var1;
	var1 = (((int64_t)calibration.dig_P9) * (p_acc>>13) * (p_acc>>13)) >> 25;
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
 80a078a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80a078e:	1219      	asrs	r1, r3, #8
	
	return (float)p_acc / 256.0;
 80a0790:	012b      	lsls	r3, r5, #4
 80a0792:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80a0796:	1880      	adds	r0, r0, r2
 80a0798:	4159      	adcs	r1, r3
 80a079a:	f002 fdaf 	bl	80a32fc <__aeabi_l2f>
 80a079e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80a07a2:	f002 fde9 	bl	80a3378 <__aeabi_fmul>
 80a07a6:	e000      	b.n	80a07aa <_ZN6BME28017readFloatPressureEv+0x19e>
	var2 = var2 + (((int64_t)calibration.dig_P4)<<35);
	var1 = ((var1 * var1 * (int64_t)calibration.dig_P3)>>8) + ((var1 * (int64_t)calibration.dig_P2)<<12);
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)calibration.dig_P1)>>33;
	if (var1 == 0)
	{
		return 0; // avoid exception caused by division by zero
 80a07a8:	2000      	movs	r0, #0
	var2 = (((int64_t)calibration.dig_P8) * p_acc) >> 19;
	p_acc = ((p_acc + var1 + var2) >> 8) + (((int64_t)calibration.dig_P7)<<4);
	
	return (float)p_acc / 256.0;
	
}
 80a07aa:	b003      	add	sp, #12
 80a07ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a07b0 <_ZN6BME28017readFloatHumidityEv>:
//
//  Humidity Section
//
//****************************************************************************//
float BME280::readFloatHumidity( void )
{
 80a07b0:	b513      	push	{r0, r1, r4, lr}
 80a07b2:	4604      	mov	r4, r0
	
	// Returns humidity in %RH as unsigned 32 bit integer in Q22. 10 format (22 integer and 10 fractional bits).
	// Output value of “47445” represents 47445/1024 = 46. 333 %RH
    uint8_t buffer[2];
	readRegisterRegion(buffer, BME280_HUMIDITY_MSB_REG, 2);
 80a07b4:	a901      	add	r1, sp, #4
 80a07b6:	2302      	movs	r3, #2
 80a07b8:	22fd      	movs	r2, #253	; 0xfd
 80a07ba:	f7ff fee0 	bl	80a057e <_ZN6BME28018readRegisterRegionEPhhh>
    int32_t adc_H = ((uint32_t)buffer[0] << 8) | ((uint32_t)buffer[1]);
	
	int32_t var1;
	var1 = (t_fine - ((int32_t)76800));
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
	((int32_t)16384)) >> 15) * (((((((var1 * ((int32_t)calibration.dig_H6)) >> 10) * (((var1 * ((int32_t)calibration.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
 80a07be:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    uint8_t buffer[2];
	readRegisterRegion(buffer, BME280_HUMIDITY_MSB_REG, 2);
    int32_t adc_H = ((uint32_t)buffer[0] << 8) | ((uint32_t)buffer[1]);
	
	int32_t var1;
	var1 = (t_fine - ((int32_t)76800));
 80a07c2:	6b62      	ldr	r2, [r4, #52]	; 0x34
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
	((int32_t)16384)) >> 15) * (((((((var1 * ((int32_t)calibration.dig_H6)) >> 10) * (((var1 * ((int32_t)calibration.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
 80a07c4:	ba5b      	rev16	r3, r3
 80a07c6:	b298      	uxth	r0, r3
 80a07c8:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
 80a07cc:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 80a07d0:	051b      	lsls	r3, r3, #20
    uint8_t buffer[2];
	readRegisterRegion(buffer, BME280_HUMIDITY_MSB_REG, 2);
    int32_t adc_H = ((uint32_t)buffer[0] << 8) | ((uint32_t)buffer[1]);
	
	int32_t var1;
	var1 = (t_fine - ((int32_t)76800));
 80a07d2:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
	var1 = (((((adc_H << 14) - (((int32_t)calibration.dig_H4) << 20) - (((int32_t)calibration.dig_H5) * var1)) +
	((int32_t)16384)) >> 15) * (((((((var1 * ((int32_t)calibration.dig_H6)) >> 10) * (((var1 * ((int32_t)calibration.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
 80a07d6:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
 80a07da:	fb02 3311 	mls	r3, r2, r1, r3
 80a07de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80a07e2:	13d8      	asrs	r0, r3, #15
	((int32_t)calibration.dig_H2) + 8192) >> 14));
 80a07e4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a07e8:	f994 1032 	ldrsb.w	r1, [r4, #50]	; 0x32
 80a07ec:	4353      	muls	r3, r2
 80a07ee:	434a      	muls	r2, r1
 80a07f0:	12db      	asrs	r3, r3, #11
 80a07f2:	1292      	asrs	r2, r2, #10
 80a07f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80a07f8:	4353      	muls	r3, r2
 80a07fa:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80a07fe:	129b      	asrs	r3, r3, #10
 80a0800:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a0804:	4353      	muls	r3, r2
 80a0806:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80a080a:	139b      	asrs	r3, r3, #14
 80a080c:	4343      	muls	r3, r0
	var1 = (var1 - (((((var1 >> 15) * (var1 >> 15)) >> 7) * ((int32_t)calibration.dig_H1)) >> 4));
 80a080e:	13d8      	asrs	r0, r3, #15
 80a0810:	4340      	muls	r0, r0
 80a0812:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80a0816:	11c0      	asrs	r0, r0, #7
 80a0818:	4350      	muls	r0, r2
 80a081a:	eba3 1020 	sub.w	r0, r3, r0, asr #4
	var1 = (var1 < 0 ? 0 : var1);
 80a081e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	var1 = (var1 > 419430400 ? 419430400 : var1);

	return (float)(var1>>12) / 1024.0;
 80a0822:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 80a0826:	bfa8      	it	ge
 80a0828:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
 80a082c:	1300      	asrs	r0, r0, #12
 80a082e:	f002 fd4f 	bl	80a32d0 <__aeabi_i2f>
 80a0832:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80a0836:	f002 fd9f 	bl	80a3378 <__aeabi_fmul>
}
 80a083a:	b002      	add	sp, #8
 80a083c:	bd10      	pop	{r4, pc}
	...

080a0840 <_ZN6BME2809readTempCEv>:
//  Temperature Section
//
//****************************************************************************//

float BME280::readTempC( void )
{
 80a0840:	b513      	push	{r0, r1, r4, lr}
 80a0842:	4604      	mov	r4, r0
	// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
	// t_fine carries fine temperature as global value

	//get the reading (adc_T);
    uint8_t buffer[3];
	readRegisterRegion(buffer, BME280_TEMPERATURE_MSB_REG, 3);
 80a0844:	a901      	add	r1, sp, #4
 80a0846:	2303      	movs	r3, #3
 80a0848:	22fa      	movs	r2, #250	; 0xfa
 80a084a:	f7ff fe98 	bl	80a057e <_ZN6BME28018readRegisterRegionEPhhh>
    int32_t adc_T = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
 80a084e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0852:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a0856:	0112      	lsls	r2, r2, #4
 80a0858:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
 80a085c:	f89d 2006 	ldrb.w	r2, [sp, #6]

	//By datasheet, calibrate
	int64_t var1, var2;

	var1 = ((((adc_T>>3) - ((int32_t)calibration.dig_T1<<1))) * ((int32_t)calibration.dig_T2)) >> 11;
 80a0860:	8a20      	ldrh	r0, [r4, #16]
	// t_fine carries fine temperature as global value

	//get the reading (adc_T);
    uint8_t buffer[3];
	readRegisterRegion(buffer, BME280_TEMPERATURE_MSB_REG, 3);
    int32_t adc_T = ((uint32_t)buffer[0] << 12) | ((uint32_t)buffer[1] << 4) | ((buffer[2] >> 4) & 0x0F);
 80a0862:	ea43 1212 	orr.w	r2, r3, r2, lsr #4

	//By datasheet, calibrate
	int64_t var1, var2;

	var1 = ((((adc_T>>3) - ((int32_t)calibration.dig_T1<<1))) * ((int32_t)calibration.dig_T2)) >> 11;
	var2 = (((((adc_T>>4) - ((int32_t)calibration.dig_T1)) * ((adc_T>>4) - ((int32_t)calibration.dig_T1))) >> 12) *
 80a0866:	ebc0 1312 	rsb	r3, r0, r2, lsr #4
	((int32_t)calibration.dig_T3)) >> 14;
	t_fine = var1 + var2;
 80a086a:	435b      	muls	r3, r3
 80a086c:	0040      	lsls	r0, r0, #1
 80a086e:	ebc0 02d2 	rsb	r2, r0, r2, lsr #3
 80a0872:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
 80a0876:	131b      	asrs	r3, r3, #12
 80a0878:	4350      	muls	r0, r2
 80a087a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80a087e:	4353      	muls	r3, r2
 80a0880:	139b      	asrs	r3, r3, #14
 80a0882:	eb03 20e0 	add.w	r0, r3, r0, asr #11
 80a0886:	6360      	str	r0, [r4, #52]	; 0x34
	float output = (t_fine * 5 + 128) >> 8;

	output = output / 100 + settings.tempCorrection;
 80a0888:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80a088c:	3080      	adds	r0, #128	; 0x80
 80a088e:	1200      	asrs	r0, r0, #8
 80a0890:	f002 fd1e 	bl	80a32d0 <__aeabi_i2f>
 80a0894:	4903      	ldr	r1, [pc, #12]	; (80a08a4 <_ZN6BME2809readTempCEv+0x64>)
 80a0896:	f002 fe23 	bl	80a34e0 <__aeabi_fdiv>
 80a089a:	68e1      	ldr	r1, [r4, #12]
 80a089c:	f002 fc64 	bl	80a3168 <__addsf3>
	
	return output;
}
 80a08a0:	b002      	add	sp, #8
 80a08a2:	bd10      	pop	{r4, pc}
 80a08a4:	42c80000 	.word	0x42c80000

080a08a8 <_ZN6BME28012readRegisterEh>:
	}

}

uint8_t BME280::readRegister(uint8_t offset)
{
 80a08a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Return value
	uint8_t result = 0;
	uint8_t numBytes = 1;
	switch (settings.commInterface) {
 80a08aa:	7806      	ldrb	r6, [r0, #0]
	}

}

uint8_t BME280::readRegister(uint8_t offset)
{
 80a08ac:	4604      	mov	r4, r0
 80a08ae:	460d      	mov	r5, r1
	//Return value
	uint8_t result = 0;
	uint8_t numBytes = 1;
	switch (settings.commInterface) {
 80a08b0:	b196      	cbz	r6, 80a08d8 <_ZN6BME28012readRegisterEh+0x30>
 80a08b2:	2e01      	cmp	r6, #1
 80a08b4:	d131      	bne.n	80a091a <_ZN6BME28012readRegisterEh+0x72>
		
		break;

	case SPI_MODE:
		// take the chip select low to select the device:
		digitalWrite(settings.chipSelectPin, LOW);
 80a08b6:	2100      	movs	r1, #0
 80a08b8:	7880      	ldrb	r0, [r0, #2]
 80a08ba:	f001 fdc4 	bl	80a2446 <digitalWrite>
		// send the device the register you want to read:
		SPI.transfer(offset | 0x80);  //Ored with "read request" bit
 80a08be:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 80a08c2:	f7ff fe53 	bl	80a056c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.5>
		// send a value of 0 to read the first byte returned:
		result = SPI.transfer(0x00);
 80a08c6:	2000      	movs	r0, #0
 80a08c8:	f7ff fe50 	bl	80a056c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.5>
		// take the chip select high to de-select:
		digitalWrite(settings.chipSelectPin, HIGH);
 80a08cc:	4631      	mov	r1, r6
		// take the chip select low to select the device:
		digitalWrite(settings.chipSelectPin, LOW);
		// send the device the register you want to read:
		SPI.transfer(offset | 0x80);  //Ored with "read request" bit
		// send a value of 0 to read the first byte returned:
		result = SPI.transfer(0x00);
 80a08ce:	4605      	mov	r5, r0
		// take the chip select high to de-select:
		digitalWrite(settings.chipSelectPin, HIGH);
 80a08d0:	78a0      	ldrb	r0, [r4, #2]
 80a08d2:	f001 fdb8 	bl	80a2446 <digitalWrite>
		break;
 80a08d6:	e023      	b.n	80a0920 <_ZN6BME28012readRegisterEh+0x78>
	uint8_t result = 0;
	uint8_t numBytes = 1;
	switch (settings.commInterface) {

	case I2C_MODE:
		switch(_wireType)
 80a08d8:	f890 7038 	ldrb.w	r7, [r0, #56]	; 0x38
 80a08dc:	2f01      	cmp	r7, #1
 80a08de:	d11e      	bne.n	80a091e <_ZN6BME28012readRegisterEh+0x76>
		{
			case(HARD_WIRE):
				_hardPort->beginTransmission(settings.I2CAddress);
 80a08e0:	7841      	ldrb	r1, [r0, #1]
 80a08e2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a08e4:	f000 fd0b 	bl	80a12fe <_ZN7TwoWire17beginTransmissionEh>
				_hardPort->write(offset);
 80a08e8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a08ea:	4629      	mov	r1, r5
 80a08ec:	6803      	ldr	r3, [r0, #0]
}

uint8_t BME280::readRegister(uint8_t offset)
{
	//Return value
	uint8_t result = 0;
 80a08ee:	4635      	mov	r5, r6
	case I2C_MODE:
		switch(_wireType)
		{
			case(HARD_WIRE):
				_hardPort->beginTransmission(settings.I2CAddress);
				_hardPort->write(offset);
 80a08f0:	689b      	ldr	r3, [r3, #8]
 80a08f2:	4798      	blx	r3
				_hardPort->endTransmission();
 80a08f4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a08f6:	f000 fd0a 	bl	80a130e <_ZN7TwoWire15endTransmissionEv>

				_hardPort->requestFrom(settings.I2CAddress, numBytes);
 80a08fa:	463a      	mov	r2, r7
 80a08fc:	7861      	ldrb	r1, [r4, #1]
 80a08fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a0900:	f000 fcfa 	bl	80a12f8 <_ZN7TwoWire11requestFromEhj>
				while ( _hardPort->available() ) // slave may send less than requested
 80a0904:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a0906:	6803      	ldr	r3, [r0, #0]
 80a0908:	691b      	ldr	r3, [r3, #16]
 80a090a:	4798      	blx	r3
 80a090c:	b140      	cbz	r0, 80a0920 <_ZN6BME28012readRegisterEh+0x78>
				{
					result = _hardPort->read(); // receive a byte as a proper uint8_t
 80a090e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a0910:	6803      	ldr	r3, [r0, #0]
 80a0912:	695b      	ldr	r3, [r3, #20]
 80a0914:	4798      	blx	r3
 80a0916:	b2c5      	uxtb	r5, r0
 80a0918:	e7f4      	b.n	80a0904 <_ZN6BME28012readRegisterEh+0x5c>
}

uint8_t BME280::readRegister(uint8_t offset)
{
	//Return value
	uint8_t result = 0;
 80a091a:	2500      	movs	r5, #0
 80a091c:	e000      	b.n	80a0920 <_ZN6BME28012readRegisterEh+0x78>
 80a091e:	4635      	mov	r5, r6

	default:
		break;
	}
	return result;
}
 80a0920:	4628      	mov	r0, r5
 80a0922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0924 <_ZN6BME2807getModeEv>:
//Gets the current mode bits in the ctrl_meas register
//Mode 00 = Sleep
// 01 and 10 = Forced
// 11 = Normal mode
uint8_t BME280::getMode()
{
 80a0924:	b508      	push	{r3, lr}
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
 80a0926:	21f4      	movs	r1, #244	; 0xf4
 80a0928:	f7ff ffbe 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
	return(controlData & 0b00000011); //Clear bits 7 through 2
}
 80a092c:	f000 0003 	and.w	r0, r0, #3
 80a0930:	bd08      	pop	{r3, pc}

080a0932 <_ZN6BME28013writeRegisterEhh>:
	
	return output;
}

void BME280::writeRegister(uint8_t offset, uint8_t dataToWrite)
{
 80a0932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (settings.commInterface)
 80a0934:	7805      	ldrb	r5, [r0, #0]
	
	return output;
}

void BME280::writeRegister(uint8_t offset, uint8_t dataToWrite)
{
 80a0936:	4604      	mov	r4, r0
 80a0938:	460f      	mov	r7, r1
 80a093a:	4616      	mov	r6, r2
	switch (settings.commInterface)
 80a093c:	b115      	cbz	r5, 80a0944 <_ZN6BME28013writeRegisterEhh+0x12>
 80a093e:	2d01      	cmp	r5, #1
 80a0940:	d017      	beq.n	80a0972 <_ZN6BME28013writeRegisterEhh+0x40>
 80a0942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
	case I2C_MODE:
		//Write the byte

		switch(_wireType)
 80a0944:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80a0948:	2b01      	cmp	r3, #1
 80a094a:	d123      	bne.n	80a0994 <_ZN6BME28013writeRegisterEhh+0x62>
		{
			case(HARD_WIRE):
				_hardPort->beginTransmission(settings.I2CAddress);
 80a094c:	7841      	ldrb	r1, [r0, #1]
 80a094e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80a0950:	f000 fcd5 	bl	80a12fe <_ZN7TwoWire17beginTransmissionEh>
				_hardPort->write(offset);
 80a0954:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a0956:	4639      	mov	r1, r7
 80a0958:	6803      	ldr	r3, [r0, #0]
 80a095a:	689b      	ldr	r3, [r3, #8]
 80a095c:	4798      	blx	r3
				_hardPort->write(dataToWrite);
 80a095e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a0960:	4631      	mov	r1, r6
 80a0962:	6803      	ldr	r3, [r0, #0]
 80a0964:	689b      	ldr	r3, [r3, #8]
 80a0966:	4798      	blx	r3
				_hardPort->endTransmission();
 80a0968:	6be0      	ldr	r0, [r4, #60]	; 0x3c
		break;

	default:
		break;
	}
}
 80a096a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		{
			case(HARD_WIRE):
				_hardPort->beginTransmission(settings.I2CAddress);
				_hardPort->write(offset);
				_hardPort->write(dataToWrite);
				_hardPort->endTransmission();
 80a096e:	f000 bcce 	b.w	80a130e <_ZN7TwoWire15endTransmissionEv>
		}
		break;
		
	case SPI_MODE:
		// take the chip select low to select the device:
		digitalWrite(settings.chipSelectPin, LOW);
 80a0972:	2100      	movs	r1, #0
 80a0974:	7880      	ldrb	r0, [r0, #2]
 80a0976:	f001 fd66 	bl	80a2446 <digitalWrite>
		// send the device the register you want to read:
		SPI.transfer(offset & 0x7F);
 80a097a:	f007 007f 	and.w	r0, r7, #127	; 0x7f
 80a097e:	f7ff fdf5 	bl	80a056c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.5>
		// send a value of 0 to read the first byte returned:
		SPI.transfer(dataToWrite);
 80a0982:	4630      	mov	r0, r6
 80a0984:	f7ff fdf2 	bl	80a056c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.5>
		// decrement the number of bytes left to read:
		// take the chip select high to de-select:
		digitalWrite(settings.chipSelectPin, HIGH);
 80a0988:	4629      	mov	r1, r5
 80a098a:	78a0      	ldrb	r0, [r4, #2]
		break;

	default:
		break;
	}
}
 80a098c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		SPI.transfer(offset & 0x7F);
		// send a value of 0 to read the first byte returned:
		SPI.transfer(dataToWrite);
		// decrement the number of bytes left to read:
		// take the chip select high to de-select:
		digitalWrite(settings.chipSelectPin, HIGH);
 80a0990:	f001 bd59 	b.w	80a2446 <digitalWrite>
 80a0994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0996 <_ZN6BME2807setModeEh>:
//Set the mode bits in the ctrl_meas register
// Mode 00 = Sleep
// 01 and 10 = Forced
// 11 = Normal mode
void BME280::setMode(uint8_t mode)
{
 80a0996:	b538      	push	{r3, r4, r5, lr}
	if(mode > 0b11) mode = 0; //Error check. Default to sleep mode
 80a0998:	2903      	cmp	r1, #3
 80a099a:	bf94      	ite	ls
 80a099c:	460d      	movls	r5, r1
 80a099e:	2500      	movhi	r5, #0
	
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
 80a09a0:	21f4      	movs	r1, #244	; 0xf4
//Set the mode bits in the ctrl_meas register
// Mode 00 = Sleep
// 01 and 10 = Forced
// 11 = Normal mode
void BME280::setMode(uint8_t mode)
{
 80a09a2:	4604      	mov	r4, r0
	if(mode > 0b11) mode = 0; //Error check. Default to sleep mode
	
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
 80a09a4:	f7ff ff80 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<1) | (1<<0) ); //Clear the mode[1:0] bits
 80a09a8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
	controlData |= mode; //Set
	writeRegister(BME280_CTRL_MEAS_REG, controlData);
 80a09ac:	ea45 0200 	orr.w	r2, r5, r0
 80a09b0:	21f4      	movs	r1, #244	; 0xf4
 80a09b2:	4620      	mov	r0, r4
}
 80a09b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if(mode > 0b11) mode = 0; //Error check. Default to sleep mode
	
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
	controlData &= ~( (1<<1) | (1<<0) ); //Clear the mode[1:0] bits
	controlData |= mode; //Set
	writeRegister(BME280_CTRL_MEAS_REG, controlData);
 80a09b8:	f7ff bfbb 	b.w	80a0932 <_ZN6BME28013writeRegisterEhh>

080a09bc <_ZN6BME28014setStandbyTimeEh>:
//  4, 500ms
//  5, 1000ms
//  6, 10ms
//  7, 20ms
void BME280::setStandbyTime(uint8_t timeSetting)
{
 80a09bc:	b538      	push	{r3, r4, r5, lr}
	if(timeSetting > 0b111) timeSetting = 0; //Error check. Default to 0.5ms
 80a09be:	2907      	cmp	r1, #7
 80a09c0:	bf94      	ite	ls
 80a09c2:	460d      	movls	r5, r1
 80a09c4:	2500      	movhi	r5, #0
	
	uint8_t controlData = readRegister(BME280_CONFIG_REG);
 80a09c6:	21f5      	movs	r1, #245	; 0xf5
//  4, 500ms
//  5, 1000ms
//  6, 10ms
//  7, 20ms
void BME280::setStandbyTime(uint8_t timeSetting)
{
 80a09c8:	4604      	mov	r4, r0
	if(timeSetting > 0b111) timeSetting = 0; //Error check. Default to 0.5ms
	
	uint8_t controlData = readRegister(BME280_CONFIG_REG);
 80a09ca:	f7ff ff6d 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<7) | (1<<6) | (1<<5) ); //Clear the 7/6/5 bits
	controlData |= (timeSetting << 5); //Align with bits 7/6/5
 80a09ce:	f000 001f 	and.w	r0, r0, #31
 80a09d2:	ea40 1245 	orr.w	r2, r0, r5, lsl #5
	writeRegister(BME280_CONFIG_REG, controlData);
 80a09d6:	b2d2      	uxtb	r2, r2
 80a09d8:	4620      	mov	r0, r4
}
 80a09da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if(timeSetting > 0b111) timeSetting = 0; //Error check. Default to 0.5ms
	
	uint8_t controlData = readRegister(BME280_CONFIG_REG);
	controlData &= ~( (1<<7) | (1<<6) | (1<<5) ); //Clear the 7/6/5 bits
	controlData |= (timeSetting << 5); //Align with bits 7/6/5
	writeRegister(BME280_CONFIG_REG, controlData);
 80a09de:	21f5      	movs	r1, #245	; 0xf5
 80a09e0:	f7ff bfa7 	b.w	80a0932 <_ZN6BME28013writeRegisterEhh>

080a09e4 <_ZN6BME2809setFilterEh>:
//  1, coefficients = 2
//  2, coefficients = 4
//  3, coefficients = 8
//  4, coefficients = 16
void BME280::setFilter(uint8_t filterSetting)
{
 80a09e4:	b538      	push	{r3, r4, r5, lr}
	if(filterSetting > 0b111) filterSetting = 0; //Error check. Default to filter off
 80a09e6:	2907      	cmp	r1, #7
 80a09e8:	bf94      	ite	ls
 80a09ea:	460d      	movls	r5, r1
 80a09ec:	2500      	movhi	r5, #0
	
	uint8_t controlData = readRegister(BME280_CONFIG_REG);
 80a09ee:	21f5      	movs	r1, #245	; 0xf5
//  1, coefficients = 2
//  2, coefficients = 4
//  3, coefficients = 8
//  4, coefficients = 16
void BME280::setFilter(uint8_t filterSetting)
{
 80a09f0:	4604      	mov	r4, r0
	if(filterSetting > 0b111) filterSetting = 0; //Error check. Default to filter off
	
	uint8_t controlData = readRegister(BME280_CONFIG_REG);
 80a09f2:	f7ff ff59 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<4) | (1<<3) | (1<<2) ); //Clear the 4/3/2 bits
	controlData |= (filterSetting << 2); //Align with bits 4/3/2
 80a09f6:	f020 001c 	bic.w	r0, r0, #28
 80a09fa:	ea40 0285 	orr.w	r2, r0, r5, lsl #2
	writeRegister(BME280_CONFIG_REG, controlData);
 80a09fe:	b2d2      	uxtb	r2, r2
 80a0a00:	4620      	mov	r0, r4
}
 80a0a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if(filterSetting > 0b111) filterSetting = 0; //Error check. Default to filter off
	
	uint8_t controlData = readRegister(BME280_CONFIG_REG);
	controlData &= ~( (1<<4) | (1<<3) | (1<<2) ); //Clear the 4/3/2 bits
	controlData |= (filterSetting << 2); //Align with bits 4/3/2
	writeRegister(BME280_CONFIG_REG, controlData);
 80a0a06:	21f5      	movs	r1, #245	; 0xf5
 80a0a08:	f7ff bf93 	b.w	80a0932 <_ZN6BME28013writeRegisterEhh>

080a0a0c <_ZN6BME28017setTempOverSampleEh>:

//Set the temperature oversample value
//0 turns off temp sensing
//1 to 16 are valid over sampling values
void BME280::setTempOverSample(uint8_t overSampleAmount)
{
 80a0a0c:	2910      	cmp	r1, #16
 80a0a0e:	bf98      	it	ls
 80a0a10:	4b10      	ldrls	r3, [pc, #64]	; (80a0a54 <_ZN6BME28017setTempOverSampleEh+0x48>)
 80a0a12:	b570      	push	{r4, r5, r6, lr}
 80a0a14:	bf98      	it	ls
 80a0a16:	5c5d      	ldrbls	r5, [r3, r1]
 80a0a18:	4604      	mov	r4, r0
 80a0a1a:	bf88      	it	hi
 80a0a1c:	2501      	movhi	r5, #1
	overSampleAmount = checkSampleValue(overSampleAmount); //Error check
	
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
 80a0a1e:	f7ff ff81 	bl	80a0924 <_ZN6BME2807getModeEv>
	
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
 80a0a22:	2100      	movs	r1, #0
//1 to 16 are valid over sampling values
void BME280::setTempOverSample(uint8_t overSampleAmount)
{
	overSampleAmount = checkSampleValue(overSampleAmount); //Error check
	
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
 80a0a24:	4606      	mov	r6, r0
	
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
 80a0a26:	4620      	mov	r0, r4
 80a0a28:	f7ff ffb5 	bl	80a0996 <_ZN6BME2807setModeEh>

	//Set the osrs_t bits (7, 6, 5) to overSampleAmount
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
 80a0a2c:	21f4      	movs	r1, #244	; 0xf4
 80a0a2e:	4620      	mov	r0, r4
 80a0a30:	f7ff ff3a 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<7) | (1<<6) | (1<<5) ); //Clear bits 765
	controlData |= overSampleAmount << 5; //Align overSampleAmount to bits 7/6/5
 80a0a34:	f000 001f 	and.w	r0, r0, #31
 80a0a38:	ea40 1245 	orr.w	r2, r0, r5, lsl #5
	writeRegister(BME280_CTRL_MEAS_REG, controlData);
 80a0a3c:	21f4      	movs	r1, #244	; 0xf4
 80a0a3e:	4620      	mov	r0, r4
 80a0a40:	b2d2      	uxtb	r2, r2
 80a0a42:	f7ff ff76 	bl	80a0932 <_ZN6BME28013writeRegisterEhh>
	
	setMode(originalMode); //Return to the original user's choice
 80a0a46:	4631      	mov	r1, r6
 80a0a48:	4620      	mov	r0, r4
}
 80a0a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
	controlData &= ~( (1<<7) | (1<<6) | (1<<5) ); //Clear bits 765
	controlData |= overSampleAmount << 5; //Align overSampleAmount to bits 7/6/5
	writeRegister(BME280_CTRL_MEAS_REG, controlData);
	
	setMode(originalMode); //Return to the original user's choice
 80a0a4e:	f7ff bfa2 	b.w	80a0996 <_ZN6BME2807setModeEh>
 80a0a52:	bf00      	nop
 80a0a54:	080a3acc 	.word	0x080a3acc

080a0a58 <_ZN6BME28021setPressureOverSampleEh>:

//Set the pressure oversample value
//0 turns off pressure sensing
//1 to 16 are valid over sampling values
void BME280::setPressureOverSample(uint8_t overSampleAmount)
{
 80a0a58:	2910      	cmp	r1, #16
 80a0a5a:	bf98      	it	ls
 80a0a5c:	4b10      	ldrls	r3, [pc, #64]	; (80a0aa0 <_ZN6BME28021setPressureOverSampleEh+0x48>)
 80a0a5e:	b570      	push	{r4, r5, r6, lr}
 80a0a60:	bf98      	it	ls
 80a0a62:	5c5d      	ldrbls	r5, [r3, r1]
 80a0a64:	4604      	mov	r4, r0
 80a0a66:	bf88      	it	hi
 80a0a68:	2501      	movhi	r5, #1
	overSampleAmount = checkSampleValue(overSampleAmount); //Error check
	
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
 80a0a6a:	f7ff ff5b 	bl	80a0924 <_ZN6BME2807getModeEv>
	
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
 80a0a6e:	2100      	movs	r1, #0
//1 to 16 are valid over sampling values
void BME280::setPressureOverSample(uint8_t overSampleAmount)
{
	overSampleAmount = checkSampleValue(overSampleAmount); //Error check
	
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
 80a0a70:	4606      	mov	r6, r0
	
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
 80a0a72:	4620      	mov	r0, r4
 80a0a74:	f7ff ff8f 	bl	80a0996 <_ZN6BME2807setModeEh>

	//Set the osrs_p bits (4, 3, 2) to overSampleAmount
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
 80a0a78:	21f4      	movs	r1, #244	; 0xf4
 80a0a7a:	4620      	mov	r0, r4
 80a0a7c:	f7ff ff14 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<4) | (1<<3) | (1<<2) ); //Clear bits 432
	controlData |= overSampleAmount << 2; //Align overSampleAmount to bits 4/3/2
 80a0a80:	f020 001c 	bic.w	r0, r0, #28
 80a0a84:	ea40 0285 	orr.w	r2, r0, r5, lsl #2
	writeRegister(BME280_CTRL_MEAS_REG, controlData);
 80a0a88:	21f4      	movs	r1, #244	; 0xf4
 80a0a8a:	4620      	mov	r0, r4
 80a0a8c:	b2d2      	uxtb	r2, r2
 80a0a8e:	f7ff ff50 	bl	80a0932 <_ZN6BME28013writeRegisterEhh>
	
	setMode(originalMode); //Return to the original user's choice
 80a0a92:	4631      	mov	r1, r6
 80a0a94:	4620      	mov	r0, r4
}
 80a0a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uint8_t controlData = readRegister(BME280_CTRL_MEAS_REG);
	controlData &= ~( (1<<4) | (1<<3) | (1<<2) ); //Clear bits 432
	controlData |= overSampleAmount << 2; //Align overSampleAmount to bits 4/3/2
	writeRegister(BME280_CTRL_MEAS_REG, controlData);
	
	setMode(originalMode); //Return to the original user's choice
 80a0a9a:	f7ff bf7c 	b.w	80a0996 <_ZN6BME2807setModeEh>
 80a0a9e:	bf00      	nop
 80a0aa0:	080a3acc 	.word	0x080a3acc

080a0aa4 <_ZN6BME28021setHumidityOverSampleEh>:

//Set the humidity oversample value
//0 turns off humidity sensing
//1 to 16 are valid over sampling values
void BME280::setHumidityOverSample(uint8_t overSampleAmount)
{
 80a0aa4:	2910      	cmp	r1, #16
 80a0aa6:	bf98      	it	ls
 80a0aa8:	4b0f      	ldrls	r3, [pc, #60]	; (80a0ae8 <_ZN6BME28021setHumidityOverSampleEh+0x44>)
 80a0aaa:	b570      	push	{r4, r5, r6, lr}
 80a0aac:	bf98      	it	ls
 80a0aae:	5c5d      	ldrbls	r5, [r3, r1]
 80a0ab0:	4604      	mov	r4, r0
 80a0ab2:	bf88      	it	hi
 80a0ab4:	2501      	movhi	r5, #1
	overSampleAmount = checkSampleValue(overSampleAmount); //Error check
	
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
 80a0ab6:	f7ff ff35 	bl	80a0924 <_ZN6BME2807getModeEv>
	
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
 80a0aba:	2100      	movs	r1, #0
//1 to 16 are valid over sampling values
void BME280::setHumidityOverSample(uint8_t overSampleAmount)
{
	overSampleAmount = checkSampleValue(overSampleAmount); //Error check
	
	uint8_t originalMode = getMode(); //Get the current mode so we can go back to it at the end
 80a0abc:	4606      	mov	r6, r0
	
	setMode(MODE_SLEEP); //Config will only be writeable in sleep mode, so first go to sleep mode
 80a0abe:	4620      	mov	r0, r4
 80a0ac0:	f7ff ff69 	bl	80a0996 <_ZN6BME2807setModeEh>

	//Set the osrs_h bits (2, 1, 0) to overSampleAmount
	uint8_t controlData = readRegister(BME280_CTRL_HUMIDITY_REG);
 80a0ac4:	21f2      	movs	r1, #242	; 0xf2
 80a0ac6:	4620      	mov	r0, r4
 80a0ac8:	f7ff feee 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
	controlData &= ~( (1<<2) | (1<<1) | (1<<0) ); //Clear bits 2/1/0
 80a0acc:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
	controlData |= overSampleAmount << 0; //Align overSampleAmount to bits 2/1/0
	writeRegister(BME280_CTRL_HUMIDITY_REG, controlData);
 80a0ad0:	432a      	orrs	r2, r5
 80a0ad2:	4620      	mov	r0, r4
 80a0ad4:	21f2      	movs	r1, #242	; 0xf2
 80a0ad6:	f7ff ff2c 	bl	80a0932 <_ZN6BME28013writeRegisterEhh>

	setMode(originalMode); //Return to the original user's choice
 80a0ada:	4631      	mov	r1, r6
 80a0adc:	4620      	mov	r0, r4
}
 80a0ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	uint8_t controlData = readRegister(BME280_CTRL_HUMIDITY_REG);
	controlData &= ~( (1<<2) | (1<<1) | (1<<0) ); //Clear bits 2/1/0
	controlData |= overSampleAmount << 0; //Align overSampleAmount to bits 2/1/0
	writeRegister(BME280_CTRL_HUMIDITY_REG, controlData);

	setMode(originalMode); //Return to the original user's choice
 80a0ae2:	f7ff bf58 	b.w	80a0996 <_ZN6BME2807setModeEh>
 80a0ae6:	bf00      	nop
 80a0ae8:	080a3acc 	.word	0x080a3acc

080a0aec <_ZN6BME2805beginEv>:
//  Use statements such as "mySensor.settings.commInterface = SPI_MODE;" to 
//  configure before calling .begin();
//
//****************************************************************************//
uint8_t BME280::begin()
{
 80a0aec:	b538      	push	{r3, r4, r5, lr}
 80a0aee:	4604      	mov	r4, r0
	delay(2);  //Make sure sensor had enough time to turn on. BME280 requires 2ms to start up.
 80a0af0:	2002      	movs	r0, #2
 80a0af2:	f000 fb83 	bl	80a11fc <delay>

	//Check the settings structure values to determine how to setup the device
	switch (settings.commInterface)
 80a0af6:	7825      	ldrb	r5, [r4, #0]
 80a0af8:	b1ed      	cbz	r5, 80a0b36 <_ZN6BME2805beginEv+0x4a>
 80a0afa:	2d01      	cmp	r5, #1
 80a0afc:	d122      	bne.n	80a0b44 <_ZN6BME2805beginEv+0x58>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
 80a0afe:	f7ff fd15 	bl	80a052c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a0b02:	f000 fe2d 	bl	80a1760 <_ZN8SPIClass5beginEv>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
 80a0b06:	f7ff fd11 	bl	80a052c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a0b0a:	2120      	movs	r1, #32
 80a0b0c:	f000 fea0 	bl	80a1850 <_ZN8SPIClass15setClockDividerEh>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
 80a0b10:	f7ff fd0c 	bl	80a052c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a0b14:	4629      	mov	r1, r5
 80a0b16:	f000 fe33 	bl	80a1780 <_ZN8SPIClass11setBitOrderEh>
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
 80a0b1a:	f7ff fd07 	bl	80a052c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a0b1e:	2103      	movs	r1, #3
 80a0b20:	f000 fe3e 	bl	80a17a0 <_ZN8SPIClass11setDataModeEh>
		// This was SPI_MODE3 for RedBoard, but I had to change to
		// MODE0 for Teensy 3.1 operation
		SPI.setDataMode(SPI_MODE3);
		#endif
		// initialize the  data ready and chip select pins:
		pinMode(settings.chipSelectPin, OUTPUT);
 80a0b24:	4629      	mov	r1, r5
 80a0b26:	78a0      	ldrb	r0, [r4, #2]
 80a0b28:	f001 fc7c 	bl	80a2424 <pinMode>
		digitalWrite(settings.chipSelectPin, HIGH);
 80a0b2c:	4629      	mov	r1, r5
 80a0b2e:	78a0      	ldrb	r0, [r4, #2]
 80a0b30:	f001 fc89 	bl	80a2446 <digitalWrite>
		break;
 80a0b34:	e006      	b.n	80a0b44 <_ZN6BME2805beginEv+0x58>
	switch (settings.commInterface)
	{

	case I2C_MODE:
		
		switch(_wireType)
 80a0b36:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80a0b3a:	2b01      	cmp	r3, #1
 80a0b3c:	d102      	bne.n	80a0b44 <_ZN6BME2805beginEv+0x58>
		{
			case(HARD_WIRE):
				_hardPort->begin(); //The caller can begin their port and set the speed. We just confirm it here otherwise it can be hard to debug.
 80a0b3e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a0b40:	f000 fba6 	bl	80a1290 <_ZN7TwoWire5beginEv>
	default:
		break;
	}

	//Check communication with IC before anything else
	uint8_t chipID = readRegister(BME280_CHIP_ID_REG); //Should return 0x60 or 0x58
 80a0b44:	21d0      	movs	r1, #208	; 0xd0
 80a0b46:	4620      	mov	r0, r4
 80a0b48:	f7ff feae 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
	if(chipID != 0x58 && chipID != 0x60) // Is this BMP or BME?
 80a0b4c:	2858      	cmp	r0, #88	; 0x58
 80a0b4e:	d002      	beq.n	80a0b56 <_ZN6BME2805beginEv+0x6a>
 80a0b50:	2860      	cmp	r0, #96	; 0x60
 80a0b52:	f040 80e8 	bne.w	80a0d26 <_ZN6BME2805beginEv+0x23a>
	return(chipID); //This is not BMP nor BME!

	//Reading all compensation data, range 0x88:A1, 0xE1:E7
	calibration.dig_T1 = ((uint16_t)((readRegister(BME280_DIG_T1_MSB_REG) << 8) + readRegister(BME280_DIG_T1_LSB_REG)));
 80a0b56:	2189      	movs	r1, #137	; 0x89
 80a0b58:	4620      	mov	r0, r4
 80a0b5a:	f7ff fea5 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0b5e:	2188      	movs	r1, #136	; 0x88
 80a0b60:	4605      	mov	r5, r0
 80a0b62:	4620      	mov	r0, r4
 80a0b64:	f7ff fea0 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0b68:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80a0b6c:	8220      	strh	r0, [r4, #16]
	calibration.dig_T2 = ((int16_t)((readRegister(BME280_DIG_T2_MSB_REG) << 8) + readRegister(BME280_DIG_T2_LSB_REG)));
 80a0b6e:	218b      	movs	r1, #139	; 0x8b
 80a0b70:	4620      	mov	r0, r4
 80a0b72:	f7ff fe99 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0b76:	218a      	movs	r1, #138	; 0x8a
 80a0b78:	4605      	mov	r5, r0
 80a0b7a:	4620      	mov	r0, r4
 80a0b7c:	f7ff fe94 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0b80:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80a0b84:	8260      	strh	r0, [r4, #18]
	calibration.dig_T3 = ((int16_t)((readRegister(BME280_DIG_T3_MSB_REG) << 8) + readRegister(BME280_DIG_T3_LSB_REG)));
 80a0b86:	218d      	movs	r1, #141	; 0x8d
 80a0b88:	4620      	mov	r0, r4
 80a0b8a:	f7ff fe8d 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0b8e:	218c      	movs	r1, #140	; 0x8c
 80a0b90:	4605      	mov	r5, r0
 80a0b92:	4620      	mov	r0, r4
 80a0b94:	f7ff fe88 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0b98:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80a0b9c:	82a0      	strh	r0, [r4, #20]

	calibration.dig_P1 = ((uint16_t)((readRegister(BME280_DIG_P1_MSB_REG) << 8) + readRegister(BME280_DIG_P1_LSB_REG)));
 80a0b9e:	218f      	movs	r1, #143	; 0x8f
 80a0ba0:	4620      	mov	r0, r4
 80a0ba2:	f7ff fe81 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0ba6:	218e      	movs	r1, #142	; 0x8e
 80a0ba8:	4605      	mov	r5, r0
 80a0baa:	4620      	mov	r0, r4
 80a0bac:	f7ff fe7c 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0bb0:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80a0bb4:	82e0      	strh	r0, [r4, #22]
	calibration.dig_P2 = ((int16_t)((readRegister(BME280_DIG_P2_MSB_REG) << 8) + readRegister(BME280_DIG_P2_LSB_REG)));
 80a0bb6:	2191      	movs	r1, #145	; 0x91
 80a0bb8:	4620      	mov	r0, r4
 80a0bba:	f7ff fe75 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0bbe:	2190      	movs	r1, #144	; 0x90
 80a0bc0:	4605      	mov	r5, r0
 80a0bc2:	4620      	mov	r0, r4
 80a0bc4:	f7ff fe70 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0bc8:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80a0bcc:	8320      	strh	r0, [r4, #24]
	calibration.dig_P3 = ((int16_t)((readRegister(BME280_DIG_P3_MSB_REG) << 8) + readRegister(BME280_DIG_P3_LSB_REG)));
 80a0bce:	2193      	movs	r1, #147	; 0x93
 80a0bd0:	4620      	mov	r0, r4
 80a0bd2:	f7ff fe69 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0bd6:	2192      	movs	r1, #146	; 0x92
 80a0bd8:	4605      	mov	r5, r0
 80a0bda:	4620      	mov	r0, r4
 80a0bdc:	f7ff fe64 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0be0:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80a0be4:	8360      	strh	r0, [r4, #26]
	calibration.dig_P4 = ((int16_t)((readRegister(BME280_DIG_P4_MSB_REG) << 8) + readRegister(BME280_DIG_P4_LSB_REG)));
 80a0be6:	2195      	movs	r1, #149	; 0x95
 80a0be8:	4620      	mov	r0, r4
 80a0bea:	f7ff fe5d 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0bee:	2194      	movs	r1, #148	; 0x94
 80a0bf0:	4605      	mov	r5, r0
 80a0bf2:	4620      	mov	r0, r4
 80a0bf4:	f7ff fe58 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0bf8:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80a0bfc:	83a0      	strh	r0, [r4, #28]
	calibration.dig_P5 = ((int16_t)((readRegister(BME280_DIG_P5_MSB_REG) << 8) + readRegister(BME280_DIG_P5_LSB_REG)));
 80a0bfe:	2197      	movs	r1, #151	; 0x97
 80a0c00:	4620      	mov	r0, r4
 80a0c02:	f7ff fe51 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0c06:	2196      	movs	r1, #150	; 0x96
 80a0c08:	4605      	mov	r5, r0
 80a0c0a:	4620      	mov	r0, r4
 80a0c0c:	f7ff fe4c 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0c10:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80a0c14:	83e0      	strh	r0, [r4, #30]
	calibration.dig_P6 = ((int16_t)((readRegister(BME280_DIG_P6_MSB_REG) << 8) + readRegister(BME280_DIG_P6_LSB_REG)));
 80a0c16:	2199      	movs	r1, #153	; 0x99
 80a0c18:	4620      	mov	r0, r4
 80a0c1a:	f7ff fe45 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0c1e:	2198      	movs	r1, #152	; 0x98
 80a0c20:	4605      	mov	r5, r0
 80a0c22:	4620      	mov	r0, r4
 80a0c24:	f7ff fe40 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0c28:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80a0c2c:	8420      	strh	r0, [r4, #32]
	calibration.dig_P7 = ((int16_t)((readRegister(BME280_DIG_P7_MSB_REG) << 8) + readRegister(BME280_DIG_P7_LSB_REG)));
 80a0c2e:	219b      	movs	r1, #155	; 0x9b
 80a0c30:	4620      	mov	r0, r4
 80a0c32:	f7ff fe39 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0c36:	219a      	movs	r1, #154	; 0x9a
 80a0c38:	4605      	mov	r5, r0
 80a0c3a:	4620      	mov	r0, r4
 80a0c3c:	f7ff fe34 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0c40:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80a0c44:	8460      	strh	r0, [r4, #34]	; 0x22
	calibration.dig_P8 = ((int16_t)((readRegister(BME280_DIG_P8_MSB_REG) << 8) + readRegister(BME280_DIG_P8_LSB_REG)));
 80a0c46:	219d      	movs	r1, #157	; 0x9d
 80a0c48:	4620      	mov	r0, r4
 80a0c4a:	f7ff fe2d 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0c4e:	219c      	movs	r1, #156	; 0x9c
 80a0c50:	4605      	mov	r5, r0
 80a0c52:	4620      	mov	r0, r4
 80a0c54:	f7ff fe28 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0c58:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80a0c5c:	84a0      	strh	r0, [r4, #36]	; 0x24
	calibration.dig_P9 = ((int16_t)((readRegister(BME280_DIG_P9_MSB_REG) << 8) + readRegister(BME280_DIG_P9_LSB_REG)));
 80a0c5e:	219f      	movs	r1, #159	; 0x9f
 80a0c60:	4620      	mov	r0, r4
 80a0c62:	f7ff fe21 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0c66:	219e      	movs	r1, #158	; 0x9e
 80a0c68:	4605      	mov	r5, r0
 80a0c6a:	4620      	mov	r0, r4
 80a0c6c:	f7ff fe1c 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0c70:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80a0c74:	84e0      	strh	r0, [r4, #38]	; 0x26

	calibration.dig_H1 = ((uint8_t)(readRegister(BME280_DIG_H1_REG)));
 80a0c76:	21a1      	movs	r1, #161	; 0xa1
 80a0c78:	4620      	mov	r0, r4
 80a0c7a:	f7ff fe15 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
	calibration.dig_H2 = ((int16_t)((readRegister(BME280_DIG_H2_MSB_REG) << 8) + readRegister(BME280_DIG_H2_LSB_REG)));
 80a0c7e:	21e2      	movs	r1, #226	; 0xe2
	calibration.dig_P6 = ((int16_t)((readRegister(BME280_DIG_P6_MSB_REG) << 8) + readRegister(BME280_DIG_P6_LSB_REG)));
	calibration.dig_P7 = ((int16_t)((readRegister(BME280_DIG_P7_MSB_REG) << 8) + readRegister(BME280_DIG_P7_LSB_REG)));
	calibration.dig_P8 = ((int16_t)((readRegister(BME280_DIG_P8_MSB_REG) << 8) + readRegister(BME280_DIG_P8_LSB_REG)));
	calibration.dig_P9 = ((int16_t)((readRegister(BME280_DIG_P9_MSB_REG) << 8) + readRegister(BME280_DIG_P9_LSB_REG)));

	calibration.dig_H1 = ((uint8_t)(readRegister(BME280_DIG_H1_REG)));
 80a0c80:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	calibration.dig_H2 = ((int16_t)((readRegister(BME280_DIG_H2_MSB_REG) << 8) + readRegister(BME280_DIG_H2_LSB_REG)));
 80a0c84:	4620      	mov	r0, r4
 80a0c86:	f7ff fe0f 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0c8a:	21e1      	movs	r1, #225	; 0xe1
 80a0c8c:	4605      	mov	r5, r0
 80a0c8e:	4620      	mov	r0, r4
 80a0c90:	f7ff fe0a 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0c94:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80a0c98:	8560      	strh	r0, [r4, #42]	; 0x2a
	calibration.dig_H3 = ((uint8_t)(readRegister(BME280_DIG_H3_REG)));
 80a0c9a:	21e3      	movs	r1, #227	; 0xe3
 80a0c9c:	4620      	mov	r0, r4
 80a0c9e:	f7ff fe03 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
	calibration.dig_H4 = ((int16_t)((readRegister(BME280_DIG_H4_MSB_REG) << 4) + (readRegister(BME280_DIG_H4_LSB_REG) & 0x0F)));
 80a0ca2:	21e4      	movs	r1, #228	; 0xe4
	calibration.dig_P8 = ((int16_t)((readRegister(BME280_DIG_P8_MSB_REG) << 8) + readRegister(BME280_DIG_P8_LSB_REG)));
	calibration.dig_P9 = ((int16_t)((readRegister(BME280_DIG_P9_MSB_REG) << 8) + readRegister(BME280_DIG_P9_LSB_REG)));

	calibration.dig_H1 = ((uint8_t)(readRegister(BME280_DIG_H1_REG)));
	calibration.dig_H2 = ((int16_t)((readRegister(BME280_DIG_H2_MSB_REG) << 8) + readRegister(BME280_DIG_H2_LSB_REG)));
	calibration.dig_H3 = ((uint8_t)(readRegister(BME280_DIG_H3_REG)));
 80a0ca4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
	calibration.dig_H4 = ((int16_t)((readRegister(BME280_DIG_H4_MSB_REG) << 4) + (readRegister(BME280_DIG_H4_LSB_REG) & 0x0F)));
 80a0ca8:	4620      	mov	r0, r4
 80a0caa:	f7ff fdfd 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0cae:	21e5      	movs	r1, #229	; 0xe5
 80a0cb0:	4605      	mov	r5, r0
 80a0cb2:	4620      	mov	r0, r4
 80a0cb4:	f7ff fdf8 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0cb8:	f000 000f 	and.w	r0, r0, #15
 80a0cbc:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80a0cc0:	85e0      	strh	r0, [r4, #46]	; 0x2e
	calibration.dig_H5 = ((int16_t)((readRegister(BME280_DIG_H5_MSB_REG) << 4) + ((readRegister(BME280_DIG_H4_LSB_REG) >> 4) & 0x0F)));
 80a0cc2:	21e6      	movs	r1, #230	; 0xe6
 80a0cc4:	4620      	mov	r0, r4
 80a0cc6:	f7ff fdef 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0cca:	21e5      	movs	r1, #229	; 0xe5
 80a0ccc:	4605      	mov	r5, r0
 80a0cce:	4620      	mov	r0, r4
 80a0cd0:	f7ff fdea 	bl	80a08a8 <_ZN6BME28012readRegisterEh>
 80a0cd4:	f3c0 1007 	ubfx	r0, r0, #4, #8
 80a0cd8:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80a0cdc:	8620      	strh	r0, [r4, #48]	; 0x30
	calibration.dig_H6 = ((int8_t)readRegister(BME280_DIG_H6_REG));
 80a0cde:	21e7      	movs	r1, #231	; 0xe7
 80a0ce0:	4620      	mov	r0, r4
 80a0ce2:	f7ff fde1 	bl	80a08a8 <_ZN6BME28012readRegisterEh>

	//Most of the time the sensor will be init with default values
	//But in case user has old/deprecated code, use the settings.x values
	setStandbyTime(settings.tStandby);
 80a0ce6:	7921      	ldrb	r1, [r4, #4]
	calibration.dig_H1 = ((uint8_t)(readRegister(BME280_DIG_H1_REG)));
	calibration.dig_H2 = ((int16_t)((readRegister(BME280_DIG_H2_MSB_REG) << 8) + readRegister(BME280_DIG_H2_LSB_REG)));
	calibration.dig_H3 = ((uint8_t)(readRegister(BME280_DIG_H3_REG)));
	calibration.dig_H4 = ((int16_t)((readRegister(BME280_DIG_H4_MSB_REG) << 4) + (readRegister(BME280_DIG_H4_LSB_REG) & 0x0F)));
	calibration.dig_H5 = ((int16_t)((readRegister(BME280_DIG_H5_MSB_REG) << 4) + ((readRegister(BME280_DIG_H4_LSB_REG) >> 4) & 0x0F)));
	calibration.dig_H6 = ((int8_t)readRegister(BME280_DIG_H6_REG));
 80a0ce8:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32

	//Most of the time the sensor will be init with default values
	//But in case user has old/deprecated code, use the settings.x values
	setStandbyTime(settings.tStandby);
 80a0cec:	4620      	mov	r0, r4
 80a0cee:	f7ff fe65 	bl	80a09bc <_ZN6BME28014setStandbyTimeEh>
	setFilter(settings.filter);
 80a0cf2:	7961      	ldrb	r1, [r4, #5]
 80a0cf4:	4620      	mov	r0, r4
 80a0cf6:	f7ff fe75 	bl	80a09e4 <_ZN6BME2809setFilterEh>
	setPressureOverSample(settings.pressOverSample); //Default of 1x oversample
 80a0cfa:	79e1      	ldrb	r1, [r4, #7]
 80a0cfc:	4620      	mov	r0, r4
 80a0cfe:	f7ff feab 	bl	80a0a58 <_ZN6BME28021setPressureOverSampleEh>
	setHumidityOverSample(settings.humidOverSample); //Default of 1x oversample
 80a0d02:	7a21      	ldrb	r1, [r4, #8]
 80a0d04:	4620      	mov	r0, r4
 80a0d06:	f7ff fecd 	bl	80a0aa4 <_ZN6BME28021setHumidityOverSampleEh>
	setTempOverSample(settings.tempOverSample); //Default of 1x oversample
 80a0d0a:	79a1      	ldrb	r1, [r4, #6]
 80a0d0c:	4620      	mov	r0, r4
 80a0d0e:	f7ff fe7d 	bl	80a0a0c <_ZN6BME28017setTempOverSampleEh>
	
	setMode(MODE_NORMAL); //Go!
 80a0d12:	4620      	mov	r0, r4
 80a0d14:	2103      	movs	r1, #3
 80a0d16:	f7ff fe3e 	bl	80a0996 <_ZN6BME2807setModeEh>
	
	return(readRegister(BME280_CHIP_ID_REG)); //Should return 0x60
 80a0d1a:	4620      	mov	r0, r4
}
 80a0d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	setHumidityOverSample(settings.humidOverSample); //Default of 1x oversample
	setTempOverSample(settings.tempOverSample); //Default of 1x oversample
	
	setMode(MODE_NORMAL); //Go!
	
	return(readRegister(BME280_CHIP_ID_REG)); //Should return 0x60
 80a0d20:	21d0      	movs	r1, #208	; 0xd0
 80a0d22:	f7ff bdc1 	b.w	80a08a8 <_ZN6BME28012readRegisterEh>
}
 80a0d26:	bd38      	pop	{r3, r4, r5, pc}

080a0d28 <_GLOBAL__sub_I__ZN6BME280C2Ev>:
 80a0d28:	f000 b830 	b.w	80a0d8c <HAL_Pin_Map>

080a0d2c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0d2c:	b508      	push	{r3, lr}
 80a0d2e:	4b02      	ldr	r3, [pc, #8]	; (80a0d38 <os_mutex_recursive_create+0xc>)
 80a0d30:	681b      	ldr	r3, [r3, #0]
 80a0d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0d34:	9301      	str	r3, [sp, #4]
 80a0d36:	bd08      	pop	{r3, pc}
 80a0d38:	080601d0 	.word	0x080601d0

080a0d3c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0d3c:	b508      	push	{r3, lr}
 80a0d3e:	4b02      	ldr	r3, [pc, #8]	; (80a0d48 <os_mutex_recursive_destroy+0xc>)
 80a0d40:	681b      	ldr	r3, [r3, #0]
 80a0d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0d44:	9301      	str	r3, [sp, #4]
 80a0d46:	bd08      	pop	{r3, pc}
 80a0d48:	080601d0 	.word	0x080601d0

080a0d4c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a0d4c:	b508      	push	{r3, lr}
 80a0d4e:	4b02      	ldr	r3, [pc, #8]	; (80a0d58 <os_mutex_recursive_lock+0xc>)
 80a0d50:	681b      	ldr	r3, [r3, #0]
 80a0d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0d54:	9301      	str	r3, [sp, #4]
 80a0d56:	bd08      	pop	{r3, pc}
 80a0d58:	080601d0 	.word	0x080601d0

080a0d5c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a0d5c:	b508      	push	{r3, lr}
 80a0d5e:	4b02      	ldr	r3, [pc, #8]	; (80a0d68 <os_mutex_recursive_unlock+0xc>)
 80a0d60:	681b      	ldr	r3, [r3, #0]
 80a0d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0d64:	9301      	str	r3, [sp, #4]
 80a0d66:	bd08      	pop	{r3, pc}
 80a0d68:	080601d0 	.word	0x080601d0

080a0d6c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0d6c:	b508      	push	{r3, lr}
 80a0d6e:	4b02      	ldr	r3, [pc, #8]	; (80a0d78 <HAL_RNG_GetRandomNumber+0xc>)
 80a0d70:	681b      	ldr	r3, [r3, #0]
 80a0d72:	685b      	ldr	r3, [r3, #4]
 80a0d74:	9301      	str	r3, [sp, #4]
 80a0d76:	bd08      	pop	{r3, pc}
 80a0d78:	0806019c 	.word	0x0806019c

080a0d7c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0d7c:	b508      	push	{r3, lr}
 80a0d7e:	4b02      	ldr	r3, [pc, #8]	; (80a0d88 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0d80:	681b      	ldr	r3, [r3, #0]
 80a0d82:	695b      	ldr	r3, [r3, #20]
 80a0d84:	9301      	str	r3, [sp, #4]
 80a0d86:	bd08      	pop	{r3, pc}
 80a0d88:	0806019c 	.word	0x0806019c

080a0d8c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0d8c:	b508      	push	{r3, lr}
 80a0d8e:	4b02      	ldr	r3, [pc, #8]	; (80a0d98 <HAL_Pin_Map+0xc>)
 80a0d90:	681b      	ldr	r3, [r3, #0]
 80a0d92:	681b      	ldr	r3, [r3, #0]
 80a0d94:	9301      	str	r3, [sp, #4]
 80a0d96:	bd08      	pop	{r3, pc}
 80a0d98:	080601b0 	.word	0x080601b0

080a0d9c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0d9c:	b508      	push	{r3, lr}
 80a0d9e:	4b02      	ldr	r3, [pc, #8]	; (80a0da8 <HAL_Pin_Mode+0xc>)
 80a0da0:	681b      	ldr	r3, [r3, #0]
 80a0da2:	689b      	ldr	r3, [r3, #8]
 80a0da4:	9301      	str	r3, [sp, #4]
 80a0da6:	bd08      	pop	{r3, pc}
 80a0da8:	080601b0 	.word	0x080601b0

080a0dac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0dac:	b508      	push	{r3, lr}
 80a0dae:	4b02      	ldr	r3, [pc, #8]	; (80a0db8 <HAL_Get_Pin_Mode+0xc>)
 80a0db0:	681b      	ldr	r3, [r3, #0]
 80a0db2:	68db      	ldr	r3, [r3, #12]
 80a0db4:	9301      	str	r3, [sp, #4]
 80a0db6:	bd08      	pop	{r3, pc}
 80a0db8:	080601b0 	.word	0x080601b0

080a0dbc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0dbc:	b508      	push	{r3, lr}
 80a0dbe:	4b02      	ldr	r3, [pc, #8]	; (80a0dc8 <HAL_GPIO_Write+0xc>)
 80a0dc0:	681b      	ldr	r3, [r3, #0]
 80a0dc2:	691b      	ldr	r3, [r3, #16]
 80a0dc4:	9301      	str	r3, [sp, #4]
 80a0dc6:	bd08      	pop	{r3, pc}
 80a0dc8:	080601b0 	.word	0x080601b0

080a0dcc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0dcc:	b508      	push	{r3, lr}
 80a0dce:	4b02      	ldr	r3, [pc, #8]	; (80a0dd8 <HAL_I2C_Begin+0xc>)
 80a0dd0:	681b      	ldr	r3, [r3, #0]
 80a0dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0dd4:	9301      	str	r3, [sp, #4]
 80a0dd6:	bd08      	pop	{r3, pc}
 80a0dd8:	080601ac 	.word	0x080601ac

080a0ddc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 80a0ddc:	b508      	push	{r3, lr}
 80a0dde:	4b02      	ldr	r3, [pc, #8]	; (80a0de8 <HAL_I2C_Begin_Transmission+0xc>)
 80a0de0:	681b      	ldr	r3, [r3, #0]
 80a0de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0de4:	9301      	str	r3, [sp, #4]
 80a0de6:	bd08      	pop	{r3, pc}
 80a0de8:	080601ac 	.word	0x080601ac

080a0dec <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a0dec:	b508      	push	{r3, lr}
 80a0dee:	4b02      	ldr	r3, [pc, #8]	; (80a0df8 <HAL_I2C_End_Transmission+0xc>)
 80a0df0:	681b      	ldr	r3, [r3, #0]
 80a0df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0df4:	9301      	str	r3, [sp, #4]
 80a0df6:	bd08      	pop	{r3, pc}
 80a0df8:	080601ac 	.word	0x080601ac

080a0dfc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0dfc:	b508      	push	{r3, lr}
 80a0dfe:	4b02      	ldr	r3, [pc, #8]	; (80a0e08 <HAL_I2C_Write_Data+0xc>)
 80a0e00:	681b      	ldr	r3, [r3, #0]
 80a0e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0e04:	9301      	str	r3, [sp, #4]
 80a0e06:	bd08      	pop	{r3, pc}
 80a0e08:	080601ac 	.word	0x080601ac

080a0e0c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0e0c:	b508      	push	{r3, lr}
 80a0e0e:	4b02      	ldr	r3, [pc, #8]	; (80a0e18 <HAL_I2C_Available_Data+0xc>)
 80a0e10:	681b      	ldr	r3, [r3, #0]
 80a0e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0e14:	9301      	str	r3, [sp, #4]
 80a0e16:	bd08      	pop	{r3, pc}
 80a0e18:	080601ac 	.word	0x080601ac

080a0e1c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0e1c:	b508      	push	{r3, lr}
 80a0e1e:	4b02      	ldr	r3, [pc, #8]	; (80a0e28 <HAL_I2C_Read_Data+0xc>)
 80a0e20:	681b      	ldr	r3, [r3, #0]
 80a0e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0e24:	9301      	str	r3, [sp, #4]
 80a0e26:	bd08      	pop	{r3, pc}
 80a0e28:	080601ac 	.word	0x080601ac

080a0e2c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0e2c:	b508      	push	{r3, lr}
 80a0e2e:	4b02      	ldr	r3, [pc, #8]	; (80a0e38 <HAL_I2C_Peek_Data+0xc>)
 80a0e30:	681b      	ldr	r3, [r3, #0]
 80a0e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0e34:	9301      	str	r3, [sp, #4]
 80a0e36:	bd08      	pop	{r3, pc}
 80a0e38:	080601ac 	.word	0x080601ac

080a0e3c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0e3c:	b508      	push	{r3, lr}
 80a0e3e:	4b02      	ldr	r3, [pc, #8]	; (80a0e48 <HAL_I2C_Flush_Data+0xc>)
 80a0e40:	681b      	ldr	r3, [r3, #0]
 80a0e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0e44:	9301      	str	r3, [sp, #4]
 80a0e46:	bd08      	pop	{r3, pc}
 80a0e48:	080601ac 	.word	0x080601ac

080a0e4c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0e4c:	b508      	push	{r3, lr}
 80a0e4e:	4b02      	ldr	r3, [pc, #8]	; (80a0e58 <HAL_I2C_Is_Enabled+0xc>)
 80a0e50:	681b      	ldr	r3, [r3, #0]
 80a0e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0e54:	9301      	str	r3, [sp, #4]
 80a0e56:	bd08      	pop	{r3, pc}
 80a0e58:	080601ac 	.word	0x080601ac

080a0e5c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a0e5c:	b508      	push	{r3, lr}
 80a0e5e:	4b03      	ldr	r3, [pc, #12]	; (80a0e6c <HAL_I2C_Init+0x10>)
 80a0e60:	681b      	ldr	r3, [r3, #0]
 80a0e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0e66:	9301      	str	r3, [sp, #4]
 80a0e68:	bd08      	pop	{r3, pc}
 80a0e6a:	0000      	.short	0x0000
 80a0e6c:	080601ac 	.word	0x080601ac

080a0e70 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
 80a0e70:	b508      	push	{r3, lr}
 80a0e72:	4b03      	ldr	r3, [pc, #12]	; (80a0e80 <HAL_I2C_Request_Data_Ex+0x10>)
 80a0e74:	681b      	ldr	r3, [r3, #0]
 80a0e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0e7a:	9301      	str	r3, [sp, #4]
 80a0e7c:	bd08      	pop	{r3, pc}
 80a0e7e:	0000      	.short	0x0000
 80a0e80:	080601ac 	.word	0x080601ac

080a0e84 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a0e84:	b508      	push	{r3, lr}
 80a0e86:	4b02      	ldr	r3, [pc, #8]	; (80a0e90 <socket_active_status+0xc>)
 80a0e88:	681b      	ldr	r3, [r3, #0]
 80a0e8a:	681b      	ldr	r3, [r3, #0]
 80a0e8c:	9301      	str	r3, [sp, #4]
 80a0e8e:	bd08      	pop	{r3, pc}
 80a0e90:	080601bc 	.word	0x080601bc

080a0e94 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0e94:	b508      	push	{r3, lr}
 80a0e96:	4b02      	ldr	r3, [pc, #8]	; (80a0ea0 <socket_handle_valid+0xc>)
 80a0e98:	681b      	ldr	r3, [r3, #0]
 80a0e9a:	685b      	ldr	r3, [r3, #4]
 80a0e9c:	9301      	str	r3, [sp, #4]
 80a0e9e:	bd08      	pop	{r3, pc}
 80a0ea0:	080601bc 	.word	0x080601bc

080a0ea4 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0ea4:	b508      	push	{r3, lr}
 80a0ea6:	4b02      	ldr	r3, [pc, #8]	; (80a0eb0 <socket_create+0xc>)
 80a0ea8:	681b      	ldr	r3, [r3, #0]
 80a0eaa:	689b      	ldr	r3, [r3, #8]
 80a0eac:	9301      	str	r3, [sp, #4]
 80a0eae:	bd08      	pop	{r3, pc}
 80a0eb0:	080601bc 	.word	0x080601bc

080a0eb4 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a0eb4:	b508      	push	{r3, lr}
 80a0eb6:	4b02      	ldr	r3, [pc, #8]	; (80a0ec0 <socket_connect+0xc>)
 80a0eb8:	681b      	ldr	r3, [r3, #0]
 80a0eba:	68db      	ldr	r3, [r3, #12]
 80a0ebc:	9301      	str	r3, [sp, #4]
 80a0ebe:	bd08      	pop	{r3, pc}
 80a0ec0:	080601bc 	.word	0x080601bc

080a0ec4 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a0ec4:	b508      	push	{r3, lr}
 80a0ec6:	4b02      	ldr	r3, [pc, #8]	; (80a0ed0 <socket_receive+0xc>)
 80a0ec8:	681b      	ldr	r3, [r3, #0]
 80a0eca:	691b      	ldr	r3, [r3, #16]
 80a0ecc:	9301      	str	r3, [sp, #4]
 80a0ece:	bd08      	pop	{r3, pc}
 80a0ed0:	080601bc 	.word	0x080601bc

080a0ed4 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0ed4:	b508      	push	{r3, lr}
 80a0ed6:	4b02      	ldr	r3, [pc, #8]	; (80a0ee0 <socket_close+0xc>)
 80a0ed8:	681b      	ldr	r3, [r3, #0]
 80a0eda:	6a1b      	ldr	r3, [r3, #32]
 80a0edc:	9301      	str	r3, [sp, #4]
 80a0ede:	bd08      	pop	{r3, pc}
 80a0ee0:	080601bc 	.word	0x080601bc

080a0ee4 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0ee4:	b508      	push	{r3, lr}
 80a0ee6:	4b02      	ldr	r3, [pc, #8]	; (80a0ef0 <socket_handle_invalid+0xc>)
 80a0ee8:	681b      	ldr	r3, [r3, #0]
 80a0eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0eec:	9301      	str	r3, [sp, #4]
 80a0eee:	bd08      	pop	{r3, pc}
 80a0ef0:	080601bc 	.word	0x080601bc

080a0ef4 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a0ef4:	b508      	push	{r3, lr}
 80a0ef6:	4b02      	ldr	r3, [pc, #8]	; (80a0f00 <socket_send_ex+0xc>)
 80a0ef8:	681b      	ldr	r3, [r3, #0]
 80a0efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0efc:	9301      	str	r3, [sp, #4]
 80a0efe:	bd08      	pop	{r3, pc}
 80a0f00:	080601bc 	.word	0x080601bc

080a0f04 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a0f04:	b508      	push	{r3, lr}
 80a0f06:	4b02      	ldr	r3, [pc, #8]	; (80a0f10 <HAL_SPI_Begin+0xc>)
 80a0f08:	681b      	ldr	r3, [r3, #0]
 80a0f0a:	681b      	ldr	r3, [r3, #0]
 80a0f0c:	9301      	str	r3, [sp, #4]
 80a0f0e:	bd08      	pop	{r3, pc}
 80a0f10:	080601b4 	.word	0x080601b4

080a0f14 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a0f14:	b508      	push	{r3, lr}
 80a0f16:	4b02      	ldr	r3, [pc, #8]	; (80a0f20 <HAL_SPI_Set_Bit_Order+0xc>)
 80a0f18:	681b      	ldr	r3, [r3, #0]
 80a0f1a:	689b      	ldr	r3, [r3, #8]
 80a0f1c:	9301      	str	r3, [sp, #4]
 80a0f1e:	bd08      	pop	{r3, pc}
 80a0f20:	080601b4 	.word	0x080601b4

080a0f24 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a0f24:	b508      	push	{r3, lr}
 80a0f26:	4b02      	ldr	r3, [pc, #8]	; (80a0f30 <HAL_SPI_Set_Data_Mode+0xc>)
 80a0f28:	681b      	ldr	r3, [r3, #0]
 80a0f2a:	68db      	ldr	r3, [r3, #12]
 80a0f2c:	9301      	str	r3, [sp, #4]
 80a0f2e:	bd08      	pop	{r3, pc}
 80a0f30:	080601b4 	.word	0x080601b4

080a0f34 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a0f34:	b508      	push	{r3, lr}
 80a0f36:	4b02      	ldr	r3, [pc, #8]	; (80a0f40 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a0f38:	681b      	ldr	r3, [r3, #0]
 80a0f3a:	691b      	ldr	r3, [r3, #16]
 80a0f3c:	9301      	str	r3, [sp, #4]
 80a0f3e:	bd08      	pop	{r3, pc}
 80a0f40:	080601b4 	.word	0x080601b4

080a0f44 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a0f44:	b508      	push	{r3, lr}
 80a0f46:	4b02      	ldr	r3, [pc, #8]	; (80a0f50 <HAL_SPI_Send_Receive_Data+0xc>)
 80a0f48:	681b      	ldr	r3, [r3, #0]
 80a0f4a:	695b      	ldr	r3, [r3, #20]
 80a0f4c:	9301      	str	r3, [sp, #4]
 80a0f4e:	bd08      	pop	{r3, pc}
 80a0f50:	080601b4 	.word	0x080601b4

080a0f54 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0f54:	b508      	push	{r3, lr}
 80a0f56:	4b02      	ldr	r3, [pc, #8]	; (80a0f60 <HAL_SPI_Init+0xc>)
 80a0f58:	681b      	ldr	r3, [r3, #0]
 80a0f5a:	69db      	ldr	r3, [r3, #28]
 80a0f5c:	9301      	str	r3, [sp, #4]
 80a0f5e:	bd08      	pop	{r3, pc}
 80a0f60:	080601b4 	.word	0x080601b4

080a0f64 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0f64:	b508      	push	{r3, lr}
 80a0f66:	4b02      	ldr	r3, [pc, #8]	; (80a0f70 <HAL_SPI_Is_Enabled+0xc>)
 80a0f68:	681b      	ldr	r3, [r3, #0]
 80a0f6a:	6a1b      	ldr	r3, [r3, #32]
 80a0f6c:	9301      	str	r3, [sp, #4]
 80a0f6e:	bd08      	pop	{r3, pc}
 80a0f70:	080601b4 	.word	0x080601b4

080a0f74 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a0f74:	b508      	push	{r3, lr}
 80a0f76:	4b02      	ldr	r3, [pc, #8]	; (80a0f80 <HAL_SPI_Info+0xc>)
 80a0f78:	681b      	ldr	r3, [r3, #0]
 80a0f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0f7c:	9301      	str	r3, [sp, #4]
 80a0f7e:	bd08      	pop	{r3, pc}
 80a0f80:	080601b4 	.word	0x080601b4

080a0f84 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0f84:	b508      	push	{r3, lr}
 80a0f86:	4b02      	ldr	r3, [pc, #8]	; (80a0f90 <HAL_USART_Init+0xc>)
 80a0f88:	681b      	ldr	r3, [r3, #0]
 80a0f8a:	699b      	ldr	r3, [r3, #24]
 80a0f8c:	9301      	str	r3, [sp, #4]
 80a0f8e:	bd08      	pop	{r3, pc}
 80a0f90:	080601c4 	.word	0x080601c4

080a0f94 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0f94:	b508      	push	{r3, lr}
 80a0f96:	4b02      	ldr	r3, [pc, #8]	; (80a0fa0 <HAL_USART_Write_Data+0xc>)
 80a0f98:	681b      	ldr	r3, [r3, #0]
 80a0f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0f9c:	9301      	str	r3, [sp, #4]
 80a0f9e:	bd08      	pop	{r3, pc}
 80a0fa0:	080601c4 	.word	0x080601c4

080a0fa4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0fa4:	b508      	push	{r3, lr}
 80a0fa6:	4b02      	ldr	r3, [pc, #8]	; (80a0fb0 <HAL_USART_Available_Data+0xc>)
 80a0fa8:	681b      	ldr	r3, [r3, #0]
 80a0faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0fac:	9301      	str	r3, [sp, #4]
 80a0fae:	bd08      	pop	{r3, pc}
 80a0fb0:	080601c4 	.word	0x080601c4

080a0fb4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0fb4:	b508      	push	{r3, lr}
 80a0fb6:	4b02      	ldr	r3, [pc, #8]	; (80a0fc0 <HAL_USART_Read_Data+0xc>)
 80a0fb8:	681b      	ldr	r3, [r3, #0]
 80a0fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0fbc:	9301      	str	r3, [sp, #4]
 80a0fbe:	bd08      	pop	{r3, pc}
 80a0fc0:	080601c4 	.word	0x080601c4

080a0fc4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0fc4:	b508      	push	{r3, lr}
 80a0fc6:	4b02      	ldr	r3, [pc, #8]	; (80a0fd0 <HAL_USART_Peek_Data+0xc>)
 80a0fc8:	681b      	ldr	r3, [r3, #0]
 80a0fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0fcc:	9301      	str	r3, [sp, #4]
 80a0fce:	bd08      	pop	{r3, pc}
 80a0fd0:	080601c4 	.word	0x080601c4

080a0fd4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0fd4:	b508      	push	{r3, lr}
 80a0fd6:	4b02      	ldr	r3, [pc, #8]	; (80a0fe0 <HAL_USART_Flush_Data+0xc>)
 80a0fd8:	681b      	ldr	r3, [r3, #0]
 80a0fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0fdc:	9301      	str	r3, [sp, #4]
 80a0fde:	bd08      	pop	{r3, pc}
 80a0fe0:	080601c4 	.word	0x080601c4

080a0fe4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0fe4:	b508      	push	{r3, lr}
 80a0fe6:	4b02      	ldr	r3, [pc, #8]	; (80a0ff0 <HAL_USART_Is_Enabled+0xc>)
 80a0fe8:	681b      	ldr	r3, [r3, #0]
 80a0fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0fec:	9301      	str	r3, [sp, #4]
 80a0fee:	bd08      	pop	{r3, pc}
 80a0ff0:	080601c4 	.word	0x080601c4

080a0ff4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0ff4:	b508      	push	{r3, lr}
 80a0ff6:	4b02      	ldr	r3, [pc, #8]	; (80a1000 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0ff8:	681b      	ldr	r3, [r3, #0]
 80a0ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0ffc:	9301      	str	r3, [sp, #4]
 80a0ffe:	bd08      	pop	{r3, pc}
 80a1000:	080601c4 	.word	0x080601c4

080a1004 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a1004:	b508      	push	{r3, lr}
 80a1006:	4b02      	ldr	r3, [pc, #8]	; (80a1010 <HAL_USART_BeginConfig+0xc>)
 80a1008:	681b      	ldr	r3, [r3, #0]
 80a100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a100c:	9301      	str	r3, [sp, #4]
 80a100e:	bd08      	pop	{r3, pc}
 80a1010:	080601c4 	.word	0x080601c4

080a1014 <HAL_USART_Write_NineBitData>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, HAL_USART_Write_NineBitData, uint32_t(HAL_USART_Serial serial, uint16_t data))
 80a1014:	b508      	push	{r3, lr}
 80a1016:	4b02      	ldr	r3, [pc, #8]	; (80a1020 <HAL_USART_Write_NineBitData+0xc>)
 80a1018:	681b      	ldr	r3, [r3, #0]
 80a101a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a101c:	9301      	str	r3, [sp, #4]
 80a101e:	bd08      	pop	{r3, pc}
 80a1020:	080601c4 	.word	0x080601c4

080a1024 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1024:	b508      	push	{r3, lr}
 80a1026:	4b02      	ldr	r3, [pc, #8]	; (80a1030 <HAL_USB_USART_Init+0xc>)
 80a1028:	681b      	ldr	r3, [r3, #0]
 80a102a:	681b      	ldr	r3, [r3, #0]
 80a102c:	9301      	str	r3, [sp, #4]
 80a102e:	bd08      	pop	{r3, pc}
 80a1030:	080601d8 	.word	0x080601d8

080a1034 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1034:	b508      	push	{r3, lr}
 80a1036:	4b02      	ldr	r3, [pc, #8]	; (80a1040 <HAL_USB_USART_Begin+0xc>)
 80a1038:	681b      	ldr	r3, [r3, #0]
 80a103a:	685b      	ldr	r3, [r3, #4]
 80a103c:	9301      	str	r3, [sp, #4]
 80a103e:	bd08      	pop	{r3, pc}
 80a1040:	080601d8 	.word	0x080601d8

080a1044 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1044:	b508      	push	{r3, lr}
 80a1046:	4b02      	ldr	r3, [pc, #8]	; (80a1050 <HAL_USB_USART_Available_Data+0xc>)
 80a1048:	681b      	ldr	r3, [r3, #0]
 80a104a:	691b      	ldr	r3, [r3, #16]
 80a104c:	9301      	str	r3, [sp, #4]
 80a104e:	bd08      	pop	{r3, pc}
 80a1050:	080601d8 	.word	0x080601d8

080a1054 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1054:	b508      	push	{r3, lr}
 80a1056:	4b02      	ldr	r3, [pc, #8]	; (80a1060 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1058:	681b      	ldr	r3, [r3, #0]
 80a105a:	695b      	ldr	r3, [r3, #20]
 80a105c:	9301      	str	r3, [sp, #4]
 80a105e:	bd08      	pop	{r3, pc}
 80a1060:	080601d8 	.word	0x080601d8

080a1064 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1064:	b508      	push	{r3, lr}
 80a1066:	4b02      	ldr	r3, [pc, #8]	; (80a1070 <HAL_USB_USART_Receive_Data+0xc>)
 80a1068:	681b      	ldr	r3, [r3, #0]
 80a106a:	699b      	ldr	r3, [r3, #24]
 80a106c:	9301      	str	r3, [sp, #4]
 80a106e:	bd08      	pop	{r3, pc}
 80a1070:	080601d8 	.word	0x080601d8

080a1074 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1074:	b508      	push	{r3, lr}
 80a1076:	4b02      	ldr	r3, [pc, #8]	; (80a1080 <HAL_USB_USART_Send_Data+0xc>)
 80a1078:	681b      	ldr	r3, [r3, #0]
 80a107a:	69db      	ldr	r3, [r3, #28]
 80a107c:	9301      	str	r3, [sp, #4]
 80a107e:	bd08      	pop	{r3, pc}
 80a1080:	080601d8 	.word	0x080601d8

080a1084 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1084:	b508      	push	{r3, lr}
 80a1086:	4b02      	ldr	r3, [pc, #8]	; (80a1090 <HAL_USB_USART_Flush_Data+0xc>)
 80a1088:	681b      	ldr	r3, [r3, #0]
 80a108a:	6a1b      	ldr	r3, [r3, #32]
 80a108c:	9301      	str	r3, [sp, #4]
 80a108e:	bd08      	pop	{r3, pc}
 80a1090:	080601d8 	.word	0x080601d8

080a1094 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a1094:	b508      	push	{r3, lr}
 80a1096:	4b02      	ldr	r3, [pc, #8]	; (80a10a0 <HAL_NET_SetNetWatchDog+0xc>)
 80a1098:	681b      	ldr	r3, [r3, #0]
 80a109a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a109c:	9301      	str	r3, [sp, #4]
 80a109e:	bd08      	pop	{r3, pc}
 80a10a0:	080601c0 	.word	0x080601c0

080a10a4 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a10a4:	b508      	push	{r3, lr}
 80a10a6:	4b02      	ldr	r3, [pc, #8]	; (80a10b0 <inet_gethostbyname+0xc>)
 80a10a8:	681b      	ldr	r3, [r3, #0]
 80a10aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a10ac:	9301      	str	r3, [sp, #4]
 80a10ae:	bd08      	pop	{r3, pc}
 80a10b0:	080601c0 	.word	0x080601c0

080a10b4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a10b4:	b508      	push	{r3, lr}
 80a10b6:	4b02      	ldr	r3, [pc, #8]	; (80a10c0 <log_message+0xc>)
 80a10b8:	681b      	ldr	r3, [r3, #0]
 80a10ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a10bc:	9301      	str	r3, [sp, #4]
 80a10be:	bd08      	pop	{r3, pc}
 80a10c0:	080201a8 	.word	0x080201a8

080a10c4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a10c4:	b508      	push	{r3, lr}
 80a10c6:	4b02      	ldr	r3, [pc, #8]	; (80a10d0 <set_system_mode+0xc>)
 80a10c8:	681b      	ldr	r3, [r3, #0]
 80a10ca:	685b      	ldr	r3, [r3, #4]
 80a10cc:	9301      	str	r3, [sp, #4]
 80a10ce:	bd08      	pop	{r3, pc}
 80a10d0:	080601a4 	.word	0x080601a4

080a10d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a10d4:	b508      	push	{r3, lr}
 80a10d6:	4b02      	ldr	r3, [pc, #8]	; (80a10e0 <system_delay_ms+0xc>)
 80a10d8:	681b      	ldr	r3, [r3, #0]
 80a10da:	695b      	ldr	r3, [r3, #20]
 80a10dc:	9301      	str	r3, [sp, #4]
 80a10de:	bd08      	pop	{r3, pc}
 80a10e0:	080601a4 	.word	0x080601a4

080a10e4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a10e4:	b508      	push	{r3, lr}
 80a10e6:	4b02      	ldr	r3, [pc, #8]	; (80a10f0 <system_thread_set_state+0xc>)
 80a10e8:	681b      	ldr	r3, [r3, #0]
 80a10ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a10ec:	9301      	str	r3, [sp, #4]
 80a10ee:	bd08      	pop	{r3, pc}
 80a10f0:	080601a4 	.word	0x080601a4

080a10f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a10f4:	b508      	push	{r3, lr}
 80a10f6:	4b03      	ldr	r3, [pc, #12]	; (80a1104 <system_ctrl_set_app_request_handler+0x10>)
 80a10f8:	681b      	ldr	r3, [r3, #0]
 80a10fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a10fe:	9301      	str	r3, [sp, #4]
 80a1100:	bd08      	pop	{r3, pc}
 80a1102:	0000      	.short	0x0000
 80a1104:	080601a4 	.word	0x080601a4

080a1108 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1108:	b508      	push	{r3, lr}
 80a110a:	4b03      	ldr	r3, [pc, #12]	; (80a1118 <system_ctrl_set_result+0x10>)
 80a110c:	681b      	ldr	r3, [r3, #0]
 80a110e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1112:	9301      	str	r3, [sp, #4]
 80a1114:	bd08      	pop	{r3, pc}
 80a1116:	0000      	.short	0x0000
 80a1118:	080601a4 	.word	0x080601a4

080a111c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a111c:	b508      	push	{r3, lr}
 80a111e:	4b02      	ldr	r3, [pc, #8]	; (80a1128 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1120:	681b      	ldr	r3, [r3, #0]
 80a1122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1124:	9301      	str	r3, [sp, #4]
 80a1126:	bd08      	pop	{r3, pc}
 80a1128:	080601cc 	.word	0x080601cc

080a112c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a112c:	b508      	push	{r3, lr}
 80a112e:	4b02      	ldr	r3, [pc, #8]	; (80a1138 <network_connect+0xc>)
 80a1130:	681b      	ldr	r3, [r3, #0]
 80a1132:	685b      	ldr	r3, [r3, #4]
 80a1134:	9301      	str	r3, [sp, #4]
 80a1136:	bd08      	pop	{r3, pc}
 80a1138:	080601c8 	.word	0x080601c8

080a113c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a113c:	b508      	push	{r3, lr}
 80a113e:	4b02      	ldr	r3, [pc, #8]	; (80a1148 <network_connecting+0xc>)
 80a1140:	681b      	ldr	r3, [r3, #0]
 80a1142:	689b      	ldr	r3, [r3, #8]
 80a1144:	9301      	str	r3, [sp, #4]
 80a1146:	bd08      	pop	{r3, pc}
 80a1148:	080601c8 	.word	0x080601c8

080a114c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a114c:	b508      	push	{r3, lr}
 80a114e:	4b02      	ldr	r3, [pc, #8]	; (80a1158 <network_disconnect+0xc>)
 80a1150:	681b      	ldr	r3, [r3, #0]
 80a1152:	68db      	ldr	r3, [r3, #12]
 80a1154:	9301      	str	r3, [sp, #4]
 80a1156:	bd08      	pop	{r3, pc}
 80a1158:	080601c8 	.word	0x080601c8

080a115c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a115c:	b508      	push	{r3, lr}
 80a115e:	4b02      	ldr	r3, [pc, #8]	; (80a1168 <network_ready+0xc>)
 80a1160:	681b      	ldr	r3, [r3, #0]
 80a1162:	691b      	ldr	r3, [r3, #16]
 80a1164:	9301      	str	r3, [sp, #4]
 80a1166:	bd08      	pop	{r3, pc}
 80a1168:	080601c8 	.word	0x080601c8

080a116c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a116c:	b508      	push	{r3, lr}
 80a116e:	4b02      	ldr	r3, [pc, #8]	; (80a1178 <network_on+0xc>)
 80a1170:	681b      	ldr	r3, [r3, #0]
 80a1172:	695b      	ldr	r3, [r3, #20]
 80a1174:	9301      	str	r3, [sp, #4]
 80a1176:	bd08      	pop	{r3, pc}
 80a1178:	080601c8 	.word	0x080601c8

080a117c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a117c:	b508      	push	{r3, lr}
 80a117e:	4b02      	ldr	r3, [pc, #8]	; (80a1188 <network_off+0xc>)
 80a1180:	681b      	ldr	r3, [r3, #0]
 80a1182:	699b      	ldr	r3, [r3, #24]
 80a1184:	9301      	str	r3, [sp, #4]
 80a1186:	bd08      	pop	{r3, pc}
 80a1188:	080601c8 	.word	0x080601c8

080a118c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a118c:	b508      	push	{r3, lr}
 80a118e:	4b02      	ldr	r3, [pc, #8]	; (80a1198 <network_listen+0xc>)
 80a1190:	681b      	ldr	r3, [r3, #0]
 80a1192:	69db      	ldr	r3, [r3, #28]
 80a1194:	9301      	str	r3, [sp, #4]
 80a1196:	bd08      	pop	{r3, pc}
 80a1198:	080601c8 	.word	0x080601c8

080a119c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a119c:	b508      	push	{r3, lr}
 80a119e:	4b02      	ldr	r3, [pc, #8]	; (80a11a8 <network_listening+0xc>)
 80a11a0:	681b      	ldr	r3, [r3, #0]
 80a11a2:	6a1b      	ldr	r3, [r3, #32]
 80a11a4:	9301      	str	r3, [sp, #4]
 80a11a6:	bd08      	pop	{r3, pc}
 80a11a8:	080601c8 	.word	0x080601c8

080a11ac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a11ac:	b508      	push	{r3, lr}
 80a11ae:	4b02      	ldr	r3, [pc, #8]	; (80a11b8 <network_set_listen_timeout+0xc>)
 80a11b0:	681b      	ldr	r3, [r3, #0]
 80a11b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a11b4:	9301      	str	r3, [sp, #4]
 80a11b6:	bd08      	pop	{r3, pc}
 80a11b8:	080601c8 	.word	0x080601c8

080a11bc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a11bc:	b508      	push	{r3, lr}
 80a11be:	4b02      	ldr	r3, [pc, #8]	; (80a11c8 <network_get_listen_timeout+0xc>)
 80a11c0:	681b      	ldr	r3, [r3, #0]
 80a11c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a11c4:	9301      	str	r3, [sp, #4]
 80a11c6:	bd08      	pop	{r3, pc}
 80a11c8:	080601c8 	.word	0x080601c8

080a11cc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a11cc:	b508      	push	{r3, lr}
 80a11ce:	4b02      	ldr	r3, [pc, #8]	; (80a11d8 <malloc+0xc>)
 80a11d0:	681b      	ldr	r3, [r3, #0]
 80a11d2:	681b      	ldr	r3, [r3, #0]
 80a11d4:	9301      	str	r3, [sp, #4]
 80a11d6:	bd08      	pop	{r3, pc}
 80a11d8:	080601a0 	.word	0x080601a0

080a11dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a11dc:	b508      	push	{r3, lr}
 80a11de:	4b02      	ldr	r3, [pc, #8]	; (80a11e8 <free+0xc>)
 80a11e0:	681b      	ldr	r3, [r3, #0]
 80a11e2:	685b      	ldr	r3, [r3, #4]
 80a11e4:	9301      	str	r3, [sp, #4]
 80a11e6:	bd08      	pop	{r3, pc}
 80a11e8:	080601a0 	.word	0x080601a0

080a11ec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a11ec:	b508      	push	{r3, lr}
 80a11ee:	4b02      	ldr	r3, [pc, #8]	; (80a11f8 <realloc+0xc>)
 80a11f0:	681b      	ldr	r3, [r3, #0]
 80a11f2:	689b      	ldr	r3, [r3, #8]
 80a11f4:	9301      	str	r3, [sp, #4]
 80a11f6:	bd08      	pop	{r3, pc}
 80a11f8:	080601a0 	.word	0x080601a0

080a11fc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a11fc:	2100      	movs	r1, #0
 80a11fe:	f7ff bf69 	b.w	80a10d4 <system_delay_ms>

080a1202 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1202:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1204:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1206:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1208:	b113      	cbz	r3, 80a1210 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a120a:	2203      	movs	r2, #3
 80a120c:	4601      	mov	r1, r0
 80a120e:	4798      	blx	r3
    }
 80a1210:	4620      	mov	r0, r4
 80a1212:	bd10      	pop	{r4, pc}

080a1214 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a1214:	4770      	bx	lr

080a1216 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1218:	4606      	mov	r6, r0
 80a121a:	4615      	mov	r5, r2
 80a121c:	460c      	mov	r4, r1
 80a121e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1220:	42bc      	cmp	r4, r7
 80a1222:	d006      	beq.n	80a1232 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1224:	6833      	ldr	r3, [r6, #0]
 80a1226:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a122a:	689b      	ldr	r3, [r3, #8]
 80a122c:	4630      	mov	r0, r6
 80a122e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1230:	e7f6      	b.n	80a1220 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1232:	4628      	mov	r0, r5
 80a1234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1236 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1236:	2200      	movs	r2, #0
 80a1238:	7c00      	ldrb	r0, [r0, #16]
 80a123a:	f7ff bddf 	b.w	80a0dfc <HAL_I2C_Write_Data>

080a123e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a123e:	2100      	movs	r1, #0
 80a1240:	7c00      	ldrb	r0, [r0, #16]
 80a1242:	f7ff bde3 	b.w	80a0e0c <HAL_I2C_Available_Data>

080a1246 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1246:	2100      	movs	r1, #0
 80a1248:	7c00      	ldrb	r0, [r0, #16]
 80a124a:	f7ff bde7 	b.w	80a0e1c <HAL_I2C_Read_Data>

080a124e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a124e:	2100      	movs	r1, #0
 80a1250:	7c00      	ldrb	r0, [r0, #16]
 80a1252:	f7ff bdeb 	b.w	80a0e2c <HAL_I2C_Peek_Data>

080a1256 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1256:	2100      	movs	r1, #0
 80a1258:	7c00      	ldrb	r0, [r0, #16]
 80a125a:	f7ff bdef 	b.w	80a0e3c <HAL_I2C_Flush_Data>

080a125e <_ZN7TwoWireD0Ev>:
 80a125e:	b510      	push	{r4, lr}
 80a1260:	4604      	mov	r4, r0
 80a1262:	2114      	movs	r1, #20
 80a1264:	f001 f965 	bl	80a2532 <_ZdlPvj>
 80a1268:	4620      	mov	r0, r4
 80a126a:	bd10      	pop	{r4, pc}

080a126c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a126c:	b510      	push	{r4, lr}
 80a126e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1270:	2300      	movs	r3, #0
 80a1272:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1274:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1278:	60a3      	str	r3, [r4, #8]
 80a127a:	4b04      	ldr	r3, [pc, #16]	; (80a128c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a127c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a127e:	4608      	mov	r0, r1
 80a1280:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a1282:	4611      	mov	r1, r2
 80a1284:	f7ff fdea 	bl	80a0e5c <HAL_I2C_Init>
}
 80a1288:	4620      	mov	r0, r4
 80a128a:	bd10      	pop	{r4, pc}
 80a128c:	080a3ae8 	.word	0x080a3ae8

080a1290 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1290:	2300      	movs	r3, #0
 80a1292:	461a      	mov	r2, r3
 80a1294:	4619      	mov	r1, r3
 80a1296:	7c00      	ldrb	r0, [r0, #16]
 80a1298:	f7ff bd98 	b.w	80a0dcc <HAL_I2C_Begin>

080a129c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a129c:	b570      	push	{r4, r5, r6, lr}
 80a129e:	460c      	mov	r4, r1
 80a12a0:	4606      	mov	r6, r0
 80a12a2:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
 80a12a4:	2514      	movs	r5, #20
 80a12a6:	462a      	mov	r2, r5
 80a12a8:	2100      	movs	r1, #0
 80a12aa:	a801      	add	r0, sp, #4
 80a12ac:	f002 fb95 	bl	80a39da <memset>
 80a12b0:	7823      	ldrb	r3, [r4, #0]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
 80a12b2:	2200      	movs	r2, #0
 80a12b4:	f88d 3008 	strb.w	r3, [sp, #8]
 80a12b8:	6863      	ldr	r3, [r4, #4]
 80a12ba:	a901      	add	r1, sp, #4
 80a12bc:	9303      	str	r3, [sp, #12]
 80a12be:	68e3      	ldr	r3, [r4, #12]
 80a12c0:	7c30      	ldrb	r0, [r6, #16]
 80a12c2:	9304      	str	r3, [sp, #16]
 80a12c4:	7a23      	ldrb	r3, [r4, #8]
 80a12c6:	f8ad 5004 	strh.w	r5, [sp, #4]
 80a12ca:	9305      	str	r3, [sp, #20]
 80a12cc:	f7ff fdd0 	bl	80a0e70 <HAL_I2C_Request_Data_Ex>
}
 80a12d0:	b006      	add	sp, #24
 80a12d2:	bd70      	pop	{r4, r5, r6, pc}

080a12d4 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
 80a12d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a12d6:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a12d8:	f88d 1000 	strb.w	r1, [sp]
 80a12dc:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a12e0:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a12e2:	bf18      	it	ne
 80a12e4:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a12e6:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
 80a12e8:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a12ea:	f88d 3008 	strb.w	r3, [sp, #8]
 80a12ee:	f7ff ffd5 	bl	80a129c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a12f2:	b005      	add	sp, #20
 80a12f4:	f85d fb04 	ldr.w	pc, [sp], #4

080a12f8 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
 80a12f8:	2301      	movs	r3, #1
 80a12fa:	f7ff bfeb 	b.w	80a12d4 <_ZN7TwoWire11requestFromEhjh>

080a12fe <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a12fe:	2200      	movs	r2, #0
 80a1300:	7c00      	ldrb	r0, [r0, #16]
 80a1302:	f7ff bd6b 	b.w	80a0ddc <HAL_I2C_Begin_Transmission>

080a1306 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1306:	2200      	movs	r2, #0
 80a1308:	7c00      	ldrb	r0, [r0, #16]
 80a130a:	f7ff bd6f 	b.w	80a0dec <HAL_I2C_End_Transmission>

080a130e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a130e:	2101      	movs	r1, #1
 80a1310:	f7ff bff9 	b.w	80a1306 <_ZN7TwoWire15endTransmissionEh>

080a1314 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1314:	2100      	movs	r1, #0
 80a1316:	7c00      	ldrb	r0, [r0, #16]
 80a1318:	f7ff bd98 	b.w	80a0e4c <HAL_I2C_Is_Enabled>

080a131c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a131c:	4770      	bx	lr

080a131e <_ZN9IPAddressD0Ev>:
 80a131e:	b510      	push	{r4, lr}
 80a1320:	4604      	mov	r4, r0
 80a1322:	2118      	movs	r1, #24
 80a1324:	f001 f905 	bl	80a2532 <_ZdlPvj>
 80a1328:	4620      	mov	r0, r4
 80a132a:	bd10      	pop	{r4, pc}

080a132c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a132e:	460f      	mov	r7, r1
 80a1330:	f100 0608 	add.w	r6, r0, #8
 80a1334:	1d05      	adds	r5, r0, #4
 80a1336:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1338:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a133c:	220a      	movs	r2, #10
 80a133e:	4638      	mov	r0, r7
 80a1340:	f000 f8fb 	bl	80a153a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1344:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1346:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1348:	d007      	beq.n	80a135a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a134a:	2c00      	cmp	r4, #0
 80a134c:	d0f4      	beq.n	80a1338 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a134e:	212e      	movs	r1, #46	; 0x2e
 80a1350:	4638      	mov	r0, r7
 80a1352:	f000 f8ef 	bl	80a1534 <_ZN5Print5printEc>
 80a1356:	4404      	add	r4, r0
 80a1358:	e7ee      	b.n	80a1338 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a135a:	4620      	mov	r0, r4
 80a135c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1360 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1360:	b510      	push	{r4, lr}
 80a1362:	4604      	mov	r4, r0
 80a1364:	4b04      	ldr	r3, [pc, #16]	; (80a1378 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1366:	2211      	movs	r2, #17
 80a1368:	f840 3b04 	str.w	r3, [r0], #4
 80a136c:	2100      	movs	r1, #0
 80a136e:	f002 fb34 	bl	80a39da <memset>
{
    clear();
}
 80a1372:	4620      	mov	r0, r4
 80a1374:	bd10      	pop	{r4, pc}
 80a1376:	bf00      	nop
 80a1378:	080a3b10 	.word	0x080a3b10

080a137c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a137c:	4603      	mov	r3, r0
 80a137e:	4a07      	ldr	r2, [pc, #28]	; (80a139c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1380:	b510      	push	{r4, lr}
 80a1382:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1386:	f101 0210 	add.w	r2, r1, #16
 80a138a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a138e:	4291      	cmp	r1, r2
 80a1390:	f843 4b04 	str.w	r4, [r3], #4
 80a1394:	d1f9      	bne.n	80a138a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1396:	780a      	ldrb	r2, [r1, #0]
 80a1398:	701a      	strb	r2, [r3, #0]
}
 80a139a:	bd10      	pop	{r4, pc}
 80a139c:	080a3b10 	.word	0x080a3b10

080a13a0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a13a0:	4a02      	ldr	r2, [pc, #8]	; (80a13ac <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a13a2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a13a4:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a13a6:	2204      	movs	r2, #4
 80a13a8:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a13aa:	4770      	bx	lr
 80a13ac:	080a3b10 	.word	0x080a3b10

080a13b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a13b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a13b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a13b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a13ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a13be:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a13c2:	2304      	movs	r3, #4
 80a13c4:	6041      	str	r1, [r0, #4]
 80a13c6:	7503      	strb	r3, [r0, #20]
 80a13c8:	bd10      	pop	{r4, pc}
	...

080a13cc <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a13cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a13ce:	4d04      	ldr	r5, [pc, #16]	; (80a13e0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a13d0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a13d2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a13d6:	9500      	str	r5, [sp, #0]
 80a13d8:	f7ff ffea 	bl	80a13b0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a13dc:	b003      	add	sp, #12
 80a13de:	bd30      	pop	{r4, r5, pc}
 80a13e0:	080a3b10 	.word	0x080a3b10

080a13e4 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a13e4:	6800      	ldr	r0, [r0, #0]
 80a13e6:	f7ff bcb1 	b.w	80a0d4c <os_mutex_recursive_lock>
	...

080a13ec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a13ec:	4a01      	ldr	r2, [pc, #4]	; (80a13f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a13ee:	4b02      	ldr	r3, [pc, #8]	; (80a13f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a13f0:	601a      	str	r2, [r3, #0]
 80a13f2:	4770      	bx	lr
 80a13f4:	080a3b92 	.word	0x080a3b92
 80a13f8:	20000558 	.word	0x20000558

080a13fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a13fc:	2300      	movs	r3, #0
 80a13fe:	461a      	mov	r2, r3
 80a1400:	6840      	ldr	r0, [r0, #4]
 80a1402:	f7ff be93 	b.w	80a112c <network_connect>

080a1406 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1406:	2200      	movs	r2, #0
 80a1408:	2102      	movs	r1, #2
 80a140a:	6840      	ldr	r0, [r0, #4]
 80a140c:	f7ff be9e 	b.w	80a114c <network_disconnect>

080a1410 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1410:	2200      	movs	r2, #0
 80a1412:	4611      	mov	r1, r2
 80a1414:	6840      	ldr	r0, [r0, #4]
 80a1416:	f7ff be91 	b.w	80a113c <network_connecting>

080a141a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a141a:	2200      	movs	r2, #0
 80a141c:	4611      	mov	r1, r2
 80a141e:	6840      	ldr	r0, [r0, #4]
 80a1420:	f7ff be9c 	b.w	80a115c <network_ready>

080a1424 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1424:	2300      	movs	r3, #0
 80a1426:	461a      	mov	r2, r3
 80a1428:	4619      	mov	r1, r3
 80a142a:	6840      	ldr	r0, [r0, #4]
 80a142c:	f7ff be9e 	b.w	80a116c <network_on>

080a1430 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1430:	2300      	movs	r3, #0
 80a1432:	461a      	mov	r2, r3
 80a1434:	4619      	mov	r1, r3
 80a1436:	6840      	ldr	r0, [r0, #4]
 80a1438:	f7ff bea0 	b.w	80a117c <network_off>

080a143c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a143c:	2200      	movs	r2, #0
 80a143e:	f081 0101 	eor.w	r1, r1, #1
 80a1442:	6840      	ldr	r0, [r0, #4]
 80a1444:	f7ff bea2 	b.w	80a118c <network_listen>

080a1448 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1448:	2200      	movs	r2, #0
 80a144a:	6840      	ldr	r0, [r0, #4]
 80a144c:	f7ff beae 	b.w	80a11ac <network_set_listen_timeout>

080a1450 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1450:	2200      	movs	r2, #0
 80a1452:	4611      	mov	r1, r2
 80a1454:	6840      	ldr	r0, [r0, #4]
 80a1456:	f7ff beb1 	b.w	80a11bc <network_get_listen_timeout>

080a145a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a145a:	2200      	movs	r2, #0
 80a145c:	4611      	mov	r1, r2
 80a145e:	6840      	ldr	r0, [r0, #4]
 80a1460:	f7ff be9c 	b.w	80a119c <network_listening>

080a1464 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1464:	b570      	push	{r4, r5, r6, lr}
 80a1466:	4616      	mov	r6, r2
 80a1468:	b08e      	sub	sp, #56	; 0x38
 80a146a:	4604      	mov	r4, r0
    IPAddress addr;
 80a146c:	a808      	add	r0, sp, #32
 80a146e:	f7ff ff77 	bl	80a1360 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1472:	2211      	movs	r2, #17
 80a1474:	2100      	movs	r1, #0
 80a1476:	a803      	add	r0, sp, #12
 80a1478:	f002 faaf 	bl	80a39da <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a147c:	4630      	mov	r0, r6
 80a147e:	f002 fae5 	bl	80a3a4c <strlen>
 80a1482:	2500      	movs	r5, #0
 80a1484:	4b0a      	ldr	r3, [pc, #40]	; (80a14b0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1486:	9500      	str	r5, [sp, #0]
 80a1488:	b281      	uxth	r1, r0
 80a148a:	685b      	ldr	r3, [r3, #4]
 80a148c:	aa03      	add	r2, sp, #12
 80a148e:	4630      	mov	r0, r6
 80a1490:	f7ff fe08 	bl	80a10a4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1494:	b120      	cbz	r0, 80a14a0 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1496:	4629      	mov	r1, r5
 80a1498:	4620      	mov	r0, r4
 80a149a:	f7ff ff81 	bl	80a13a0 <_ZN9IPAddressC1Em>
 80a149e:	e003      	b.n	80a14a8 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a14a0:	a903      	add	r1, sp, #12
 80a14a2:	4620      	mov	r0, r4
 80a14a4:	f7ff ff6a 	bl	80a137c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a14a8:	4620      	mov	r0, r4
 80a14aa:	b00e      	add	sp, #56	; 0x38
 80a14ac:	bd70      	pop	{r4, r5, r6, pc}
 80a14ae:	bf00      	nop
 80a14b0:	200005d4 	.word	0x200005d4

080a14b4 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a14b4:	4b03      	ldr	r3, [pc, #12]	; (80a14c4 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a14b6:	4a04      	ldr	r2, [pc, #16]	; (80a14c8 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a14b8:	2804      	cmp	r0, #4
 80a14ba:	bf0c      	ite	eq
 80a14bc:	4610      	moveq	r0, r2
 80a14be:	4618      	movne	r0, r3
 80a14c0:	4770      	bx	lr
 80a14c2:	bf00      	nop
 80a14c4:	2000055c 	.word	0x2000055c
 80a14c8:	200005d4 	.word	0x200005d4

080a14cc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a14cc:	4b02      	ldr	r3, [pc, #8]	; (80a14d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a14ce:	4a03      	ldr	r2, [pc, #12]	; (80a14dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a14d0:	601a      	str	r2, [r3, #0]
 80a14d2:	2200      	movs	r2, #0
 80a14d4:	605a      	str	r2, [r3, #4]
 80a14d6:	4770      	bx	lr
 80a14d8:	2000055c 	.word	0x2000055c
 80a14dc:	080a3c08 	.word	0x080a3c08

080a14e0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a14e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a14e2:	4606      	mov	r6, r0
 80a14e4:	460d      	mov	r5, r1
 80a14e6:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a14e8:	2400      	movs	r4, #0
  while (size--) {
 80a14ea:	42bd      	cmp	r5, r7
 80a14ec:	d00c      	beq.n	80a1508 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a14ee:	6833      	ldr	r3, [r6, #0]
 80a14f0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a14f4:	689b      	ldr	r3, [r3, #8]
 80a14f6:	4630      	mov	r0, r6
 80a14f8:	4798      	blx	r3
     if (chunk>=0)
 80a14fa:	2800      	cmp	r0, #0
 80a14fc:	db01      	blt.n	80a1502 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a14fe:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1500:	e7f3      	b.n	80a14ea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1502:	2c00      	cmp	r4, #0
 80a1504:	bf08      	it	eq
 80a1506:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1508:	4620      	mov	r0, r4
 80a150a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a150c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a150c:	b570      	push	{r4, r5, r6, lr}
 80a150e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1510:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1512:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1514:	b149      	cbz	r1, 80a152a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1516:	f002 fa99 	bl	80a3a4c <strlen>
 80a151a:	682b      	ldr	r3, [r5, #0]
 80a151c:	4602      	mov	r2, r0
 80a151e:	4621      	mov	r1, r4
 80a1520:	4628      	mov	r0, r5
    }
 80a1522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1526:	68db      	ldr	r3, [r3, #12]
 80a1528:	4718      	bx	r3
    }
 80a152a:	bd70      	pop	{r4, r5, r6, pc}

080a152c <_ZN5Print5printEPKc>:
 80a152c:	b508      	push	{r3, lr}
 80a152e:	f7ff ffed 	bl	80a150c <_ZN5Print5writeEPKc>
 80a1532:	bd08      	pop	{r3, pc}

080a1534 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1534:	6803      	ldr	r3, [r0, #0]
 80a1536:	689b      	ldr	r3, [r3, #8]
 80a1538:	4718      	bx	r3

080a153a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a153a:	2a01      	cmp	r2, #1
 80a153c:	bf98      	it	ls
 80a153e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1540:	b530      	push	{r4, r5, lr}
 80a1542:	460b      	mov	r3, r1
 80a1544:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1546:	2100      	movs	r1, #0
 80a1548:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a154c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a1550:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a1554:	fb05 3312 	mls	r3, r5, r2, r3
 80a1558:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a155a:	2b09      	cmp	r3, #9
 80a155c:	bf94      	ite	ls
 80a155e:	3330      	addls	r3, #48	; 0x30
 80a1560:	3337      	addhi	r3, #55	; 0x37
 80a1562:	b2db      	uxtb	r3, r3
 80a1564:	4621      	mov	r1, r4
 80a1566:	f804 3901 	strb.w	r3, [r4], #-1
 80a156a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a156c:	2d00      	cmp	r5, #0
 80a156e:	d1ef      	bne.n	80a1550 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1570:	f7ff ffcc 	bl	80a150c <_ZN5Print5writeEPKc>
}
 80a1574:	b00b      	add	sp, #44	; 0x2c
 80a1576:	bd30      	pop	{r4, r5, pc}

080a1578 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a157c:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a157e:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1580:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1582:	4617      	mov	r7, r2
 80a1584:	461e      	mov	r6, r3
 80a1586:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a158a:	f001 fd89 	bl	80a30a0 <__aeabi_dcmpun>
 80a158e:	b108      	cbz	r0, 80a1594 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1590:	494d      	ldr	r1, [pc, #308]	; (80a16c8 <_ZN5Print10printFloatEdh+0x150>)
 80a1592:	e012      	b.n	80a15ba <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1594:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a1598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a159c:	4b4b      	ldr	r3, [pc, #300]	; (80a16cc <_ZN5Print10printFloatEdh+0x154>)
 80a159e:	4638      	mov	r0, r7
 80a15a0:	4621      	mov	r1, r4
 80a15a2:	f001 fd7d 	bl	80a30a0 <__aeabi_dcmpun>
 80a15a6:	b968      	cbnz	r0, 80a15c4 <_ZN5Print10printFloatEdh+0x4c>
 80a15a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a15ac:	4b47      	ldr	r3, [pc, #284]	; (80a16cc <_ZN5Print10printFloatEdh+0x154>)
 80a15ae:	4638      	mov	r0, r7
 80a15b0:	4621      	mov	r1, r4
 80a15b2:	f001 fd57 	bl	80a3064 <__aeabi_dcmple>
 80a15b6:	b928      	cbnz	r0, 80a15c4 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a15b8:	4945      	ldr	r1, [pc, #276]	; (80a16d0 <_ZN5Print10printFloatEdh+0x158>)
 80a15ba:	4640      	mov	r0, r8
 80a15bc:	f7ff ffa6 	bl	80a150c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a15c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a15c4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a15c8:	4b42      	ldr	r3, [pc, #264]	; (80a16d4 <_ZN5Print10printFloatEdh+0x15c>)
 80a15ca:	4638      	mov	r0, r7
 80a15cc:	4631      	mov	r1, r6
 80a15ce:	f001 fd5d 	bl	80a308c <__aeabi_dcmpgt>
 80a15d2:	b108      	cbz	r0, 80a15d8 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a15d4:	4940      	ldr	r1, [pc, #256]	; (80a16d8 <_ZN5Print10printFloatEdh+0x160>)
 80a15d6:	e7f0      	b.n	80a15ba <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a15d8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a15dc:	4b3f      	ldr	r3, [pc, #252]	; (80a16dc <_ZN5Print10printFloatEdh+0x164>)
 80a15de:	4638      	mov	r0, r7
 80a15e0:	4631      	mov	r1, r6
 80a15e2:	f001 fd35 	bl	80a3050 <__aeabi_dcmplt>
 80a15e6:	2800      	cmp	r0, #0
 80a15e8:	d1f4      	bne.n	80a15d4 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a15ea:	2200      	movs	r2, #0
 80a15ec:	2300      	movs	r3, #0
 80a15ee:	4638      	mov	r0, r7
 80a15f0:	4631      	mov	r1, r6
 80a15f2:	f001 fd2d 	bl	80a3050 <__aeabi_dcmplt>
 80a15f6:	b138      	cbz	r0, 80a1608 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a15f8:	212d      	movs	r1, #45	; 0x2d
 80a15fa:	4640      	mov	r0, r8
 80a15fc:	f7ff ff9a 	bl	80a1534 <_ZN5Print5printEc>
     number = -number;
 80a1600:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a1604:	4604      	mov	r4, r0
 80a1606:	e000      	b.n	80a160a <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1608:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a160a:	4935      	ldr	r1, [pc, #212]	; (80a16e0 <_ZN5Print10printFloatEdh+0x168>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a160c:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1610:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a1612:	fa5f f389 	uxtb.w	r3, r9
 80a1616:	429d      	cmp	r5, r3
 80a1618:	d906      	bls.n	80a1628 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a161a:	2200      	movs	r2, #0
 80a161c:	4b31      	ldr	r3, [pc, #196]	; (80a16e4 <_ZN5Print10printFloatEdh+0x16c>)
 80a161e:	f001 fbcf 	bl	80a2dc0 <__aeabi_ddiv>
 80a1622:	f109 0901 	add.w	r9, r9, #1
 80a1626:	e7f4      	b.n	80a1612 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a1628:	463a      	mov	r2, r7
 80a162a:	4633      	mov	r3, r6
 80a162c:	f001 f8ec 	bl	80a2808 <__adddf3>
 80a1630:	460f      	mov	r7, r1
 80a1632:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1634:	f001 fd72 	bl	80a311c <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1638:	220a      	movs	r2, #10
 80a163a:	4601      	mov	r1, r0
 80a163c:	4681      	mov	r9, r0
 80a163e:	4640      	mov	r0, r8
 80a1640:	f7ff ff7b 	bl	80a153a <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1644:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a1646:	b3e5      	cbz	r5, 80a16c2 <_ZN5Print10printFloatEdh+0x14a>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a1648:	4648      	mov	r0, r9
 80a164a:	f001 fa19 	bl	80a2a80 <__aeabi_ui2d>
 80a164e:	4602      	mov	r2, r0
 80a1650:	460b      	mov	r3, r1
 80a1652:	4630      	mov	r0, r6
 80a1654:	4639      	mov	r1, r7
 80a1656:	f001 f8d5 	bl	80a2804 <__aeabi_dsub>
 80a165a:	4606      	mov	r6, r0
 80a165c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a165e:	4640      	mov	r0, r8
 80a1660:	4921      	ldr	r1, [pc, #132]	; (80a16e8 <_ZN5Print10printFloatEdh+0x170>)
 80a1662:	f7ff ff53 	bl	80a150c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a1666:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a1668:	2200      	movs	r2, #0
 80a166a:	4b1e      	ldr	r3, [pc, #120]	; (80a16e4 <_ZN5Print10printFloatEdh+0x16c>)
 80a166c:	4630      	mov	r0, r6
 80a166e:	4639      	mov	r1, r7
 80a1670:	f001 fa7c 	bl	80a2b6c <__aeabi_dmul>
 80a1674:	4606      	mov	r6, r0
 80a1676:	460f      	mov	r7, r1
    int toPrint = int(remainder);
 80a1678:	f001 fd28 	bl	80a30cc <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a167c:	f1b0 0a00 	subs.w	sl, r0, #0
 80a1680:	da07      	bge.n	80a1692 <_ZN5Print10printFloatEdh+0x11a>
            t = print('-');
 80a1682:	212d      	movs	r1, #45	; 0x2d
 80a1684:	4640      	mov	r0, r8
 80a1686:	f7ff ff55 	bl	80a1534 <_ZN5Print5printEc>
            val = -n;
 80a168a:	f1ca 0100 	rsb	r1, sl, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 80a168e:	4681      	mov	r9, r0
 80a1690:	e002      	b.n	80a1698 <_ZN5Print10printFloatEdh+0x120>
            val = -n;
        } else {
            val = n;
 80a1692:	4651      	mov	r1, sl
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 80a1694:	f04f 0900 	mov.w	r9, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1698:	220a      	movs	r2, #10
 80a169a:	4640      	mov	r0, r8
 80a169c:	f7ff ff4d 	bl	80a153a <_ZN5Print11printNumberEmh>
    n += print(toPrint);
 80a16a0:	4448      	add	r0, r9
 80a16a2:	4404      	add	r4, r0
    remainder -= toPrint;
 80a16a4:	4650      	mov	r0, sl
 80a16a6:	f001 f9fb 	bl	80a2aa0 <__aeabi_i2d>
 80a16aa:	4602      	mov	r2, r0
 80a16ac:	460b      	mov	r3, r1
 80a16ae:	4630      	mov	r0, r6
 80a16b0:	4639      	mov	r1, r7
 80a16b2:	f001 f8a7 	bl	80a2804 <__aeabi_dsub>
 80a16b6:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a16b8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a16bc:	4606      	mov	r6, r0
 80a16be:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a16c0:	d1d2      	bne.n	80a1668 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a16c2:	4620      	mov	r0, r4
 80a16c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a16c8:	080a3c34 	.word	0x080a3c34
 80a16cc:	7fefffff 	.word	0x7fefffff
 80a16d0:	080a3c3e 	.word	0x080a3c3e
 80a16d4:	41efffff 	.word	0x41efffff
 80a16d8:	080a3c38 	.word	0x080a3c38
 80a16dc:	c1efffff 	.word	0xc1efffff
 80a16e0:	3fe00000 	.word	0x3fe00000
 80a16e4:	40240000 	.word	0x40240000
 80a16e8:	080a3c3c 	.word	0x080a3c3c

080a16ec <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
 80a16ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a16ee:	4605      	mov	r5, r0
 80a16f0:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a16f2:	4608      	mov	r0, r1
 80a16f4:	f001 f9e6 	bl	80a2ac4 <__aeabi_f2d>
 80a16f8:	b2e4      	uxtb	r4, r4
 80a16fa:	4602      	mov	r2, r0
 80a16fc:	9400      	str	r4, [sp, #0]
 80a16fe:	460b      	mov	r3, r1
 80a1700:	4628      	mov	r0, r5
 80a1702:	f7ff ff39 	bl	80a1578 <_ZN5Print10printFloatEdh>
}
 80a1706:	b003      	add	sp, #12
 80a1708:	bd30      	pop	{r4, r5, pc}

080a170a <_ZN5Print5printEdi>:

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a170a:	f89d 1000 	ldrb.w	r1, [sp]
 80a170e:	9100      	str	r1, [sp, #0]
 80a1710:	f7ff bf32 	b.w	80a1578 <_ZN5Print10printFloatEdh>

080a1714 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1714:	b510      	push	{r4, lr}
 80a1716:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1718:	f7ff fd73 	bl	80a1202 <_ZNSt14_Function_baseD1Ev>
 80a171c:	4620      	mov	r0, r4
 80a171e:	bd10      	pop	{r4, pc}

080a1720 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1720:	4803      	ldr	r0, [pc, #12]	; (80a1730 <_GLOBAL__sub_I_RGB+0x10>)
 80a1722:	2300      	movs	r3, #0
 80a1724:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1726:	4a03      	ldr	r2, [pc, #12]	; (80a1734 <_GLOBAL__sub_I_RGB+0x14>)
 80a1728:	4903      	ldr	r1, [pc, #12]	; (80a1738 <_GLOBAL__sub_I_RGB+0x18>)
 80a172a:	f000 befd 	b.w	80a2528 <__aeabi_atexit>
 80a172e:	bf00      	nop
 80a1730:	20000564 	.word	0x20000564
 80a1734:	20000068 	.word	0x20000068
 80a1738:	080a1715 	.word	0x080a1715

080a173c <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a173c:	6800      	ldr	r0, [r0, #0]
 80a173e:	f7ff bb0d 	b.w	80a0d5c <os_mutex_recursive_unlock>

080a1742 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1742:	b570      	push	{r4, r5, r6, lr}
 80a1744:	4604      	mov	r4, r0
 80a1746:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1748:	2500      	movs	r5, #0
 80a174a:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a174e:	f7ff faed 	bl	80a0d2c <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a1752:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a1754:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a1756:	f7ff fbfd 	bl	80a0f54 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a175a:	6065      	str	r5, [r4, #4]
}
 80a175c:	4620      	mov	r0, r4
 80a175e:	bd70      	pop	{r4, r5, r6, pc}

080a1760 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a1760:	b538      	push	{r3, r4, r5, lr}
 80a1762:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a1764:	f100 0408 	add.w	r4, r0, #8
 80a1768:	4620      	mov	r0, r4
 80a176a:	f7ff fe3b 	bl	80a13e4 <_ZN14RecursiveMutex4lockEv>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a176e:	7828      	ldrb	r0, [r5, #0]
 80a1770:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1774:	f7ff fbc6 	bl	80a0f04 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a1778:	4620      	mov	r0, r4
 80a177a:	f7ff ffdf 	bl	80a173c <_ZN14RecursiveMutex6unlockEv>
 80a177e:	bd38      	pop	{r3, r4, r5, pc}

080a1780 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 80a1780:	b570      	push	{r4, r5, r6, lr}
 80a1782:	4605      	mov	r5, r0
 80a1784:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a1786:	f100 0408 	add.w	r4, r0, #8
 80a178a:	4620      	mov	r0, r4
 80a178c:	f7ff fe2a 	bl	80a13e4 <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a1790:	7828      	ldrb	r0, [r5, #0]
 80a1792:	4631      	mov	r1, r6
 80a1794:	f7ff fbbe 	bl	80a0f14 <HAL_SPI_Set_Bit_Order>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a1798:	4620      	mov	r0, r4
 80a179a:	f7ff ffcf 	bl	80a173c <_ZN14RecursiveMutex6unlockEv>
 80a179e:	bd70      	pop	{r4, r5, r6, pc}

080a17a0 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 80a17a0:	b570      	push	{r4, r5, r6, lr}
 80a17a2:	4605      	mov	r5, r0
 80a17a4:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a17a6:	f100 0408 	add.w	r4, r0, #8
 80a17aa:	4620      	mov	r0, r4
 80a17ac:	f7ff fe1a 	bl	80a13e4 <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
 80a17b0:	7828      	ldrb	r0, [r5, #0]
 80a17b2:	4631      	mov	r1, r6
 80a17b4:	f7ff fbb6 	bl	80a0f24 <HAL_SPI_Set_Data_Mode>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a17b8:	4620      	mov	r0, r4
 80a17ba:	f7ff ffbf 	bl	80a173c <_ZN14RecursiveMutex6unlockEv>
 80a17be:	bd70      	pop	{r4, r5, r6, pc}

080a17c0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a17c0:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a17c2:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a17c4:	6018      	str	r0, [r3, #0]
 80a17c6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
 80a17c8:	6818      	ldr	r0, [r3, #0]
 80a17ca:	b2e5      	uxtb	r5, r4
 80a17cc:	4288      	cmp	r0, r1
 80a17ce:	d906      	bls.n	80a17de <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a17d0:	3401      	adds	r4, #1
 80a17d2:	2c08      	cmp	r4, #8
 80a17d4:	d002      	beq.n	80a17dc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a17d6:	0840      	lsrs	r0, r0, #1
 80a17d8:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
 80a17da:	e7f5      	b.n	80a17c8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a17dc:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a17de:	4b02      	ldr	r3, [pc, #8]	; (80a17e8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a17e0:	5d5b      	ldrb	r3, [r3, r5]
 80a17e2:	7013      	strb	r3, [r2, #0]
 80a17e4:	bd30      	pop	{r4, r5, pc}
 80a17e6:	bf00      	nop
 80a17e8:	080a3c42 	.word	0x080a3c42

080a17ec <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a17ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a17f0:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a17f2:	f100 0608 	add.w	r6, r0, #8
 80a17f6:	b088      	sub	sp, #32
    unsigned clock = 0;
 80a17f8:	2400      	movs	r4, #0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 80a17fa:	fb02 f701 	mul.w	r7, r2, r1
 80a17fe:	4630      	mov	r0, r6
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 80a1800:	9402      	str	r4, [sp, #8]
 80a1802:	f7ff fdef 	bl	80a13e4 <_ZN14RecursiveMutex4lockEv>

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 80a1806:	f895 8000 	ldrb.w	r8, [r5]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
 80a180a:	4621      	mov	r1, r4
 80a180c:	2214      	movs	r2, #20
 80a180e:	a803      	add	r0, sp, #12
 80a1810:	f002 f8e3 	bl	80a39da <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a1814:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
 80a1816:	4622      	mov	r2, r4
 80a1818:	a903      	add	r1, sp, #12
 80a181a:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
 80a181c:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
 80a1820:	f7ff fba8 	bl	80a0f74 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80a1824:	ab02      	add	r3, sp, #8
 80a1826:	f10d 0207 	add.w	r2, sp, #7
 80a182a:	4639      	mov	r1, r7
 80a182c:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
 80a182e:	f88d 4007 	strb.w	r4, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80a1832:	f7ff ffc5 	bl	80a17c0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
 80a1836:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a183a:	7828      	ldrb	r0, [r5, #0]
 80a183c:	f7ff fb7a 	bl	80a0f34 <HAL_SPI_Set_Clock_Divider>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a1840:	4630      	mov	r0, r6
 80a1842:	f7ff ff7b 	bl	80a173c <_ZN14RecursiveMutex6unlockEv>
        unlock();
    }

    return clock;
}
 80a1846:	9802      	ldr	r0, [sp, #8]
 80a1848:	b008      	add	sp, #32
 80a184a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a1850 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a1850:	b570      	push	{r4, r5, r6, lr}
 80a1852:	4604      	mov	r4, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a1854:	f100 0508 	add.w	r5, r0, #8
 80a1858:	4628      	mov	r0, r5
 80a185a:	460e      	mov	r6, r1
 80a185c:	f7ff fdc2 	bl	80a13e4 <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        if (_dividerReference)
 80a1860:	6861      	ldr	r1, [r4, #4]
 80a1862:	b179      	cbz	r1, 80a1884 <_ZN8SPIClass15setClockDividerEh+0x34>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
 80a1864:	4a0b      	ldr	r2, [pc, #44]	; (80a1894 <_ZN8SPIClass15setClockDividerEh+0x44>)
 80a1866:	2300      	movs	r3, #0
 80a1868:	5c98      	ldrb	r0, [r3, r2]
 80a186a:	42b0      	cmp	r0, r6
 80a186c:	d002      	beq.n	80a1874 <_ZN8SPIClass15setClockDividerEh+0x24>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
 80a186e:	3301      	adds	r3, #1
 80a1870:	2b08      	cmp	r3, #8
 80a1872:	d1f9      	bne.n	80a1868 <_ZN8SPIClass15setClockDividerEh+0x18>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
 80a1874:	3301      	adds	r3, #1
 80a1876:	b2db      	uxtb	r3, r3
 80a1878:	2201      	movs	r2, #1
 80a187a:	40d9      	lsrs	r1, r3
 80a187c:	4620      	mov	r0, r4
 80a187e:	f7ff ffb5 	bl	80a17ec <_ZN8SPIClass13setClockSpeedEjj>
 80a1882:	e003      	b.n	80a188c <_ZN8SPIClass15setClockDividerEh+0x3c>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1884:	4631      	mov	r1, r6
 80a1886:	7820      	ldrb	r0, [r4, #0]
 80a1888:	f7ff fb54 	bl	80a0f34 <HAL_SPI_Set_Clock_Divider>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a188c:	4628      	mov	r0, r5
 80a188e:	f7ff ff55 	bl	80a173c <_ZN14RecursiveMutex6unlockEv>
 80a1892:	bd70      	pop	{r4, r5, r6, pc}
 80a1894:	080a3c42 	.word	0x080a3c42

080a1898 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a1898:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
 80a189a:	7800      	ldrb	r0, [r0, #0]
 80a189c:	f7ff fb52 	bl	80a0f44 <HAL_SPI_Send_Receive_Data>
}
 80a18a0:	b2c0      	uxtb	r0, r0
 80a18a2:	bd08      	pop	{r3, pc}

080a18a4 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a18a4:	7800      	ldrb	r0, [r0, #0]
 80a18a6:	f7ff bb5d 	b.w	80a0f64 <HAL_SPI_Is_Enabled>

080a18aa <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a18aa:	b510      	push	{r4, lr}
 80a18ac:	4604      	mov	r4, r0
{
	free(buffer);
 80a18ae:	6800      	ldr	r0, [r0, #0]
 80a18b0:	f7ff fc94 	bl	80a11dc <free>
}
 80a18b4:	4620      	mov	r0, r4
 80a18b6:	bd10      	pop	{r4, pc}

080a18b8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a18b8:	b510      	push	{r4, lr}
 80a18ba:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a18bc:	6800      	ldr	r0, [r0, #0]
 80a18be:	b108      	cbz	r0, 80a18c4 <_ZN6String10invalidateEv+0xc>
 80a18c0:	f7ff fc8c 	bl	80a11dc <free>
	buffer = NULL;
 80a18c4:	2300      	movs	r3, #0
 80a18c6:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a18c8:	60a3      	str	r3, [r4, #8]
 80a18ca:	6063      	str	r3, [r4, #4]
 80a18cc:	bd10      	pop	{r4, pc}

080a18ce <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a18ce:	b538      	push	{r3, r4, r5, lr}
 80a18d0:	4604      	mov	r4, r0
 80a18d2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a18d4:	6800      	ldr	r0, [r0, #0]
 80a18d6:	3101      	adds	r1, #1
 80a18d8:	f7ff fc88 	bl	80a11ec <realloc>
	if (newbuffer) {
 80a18dc:	b110      	cbz	r0, 80a18e4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a18de:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a18e2:	2001      	movs	r0, #1
	}
	return 0;
}
 80a18e4:	bd38      	pop	{r3, r4, r5, pc}

080a18e6 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a18e6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a18e8:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a18ea:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a18ec:	b113      	cbz	r3, 80a18f4 <_ZN6String7reserveEj+0xe>
 80a18ee:	6843      	ldr	r3, [r0, #4]
 80a18f0:	428b      	cmp	r3, r1
 80a18f2:	d207      	bcs.n	80a1904 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a18f4:	4620      	mov	r0, r4
 80a18f6:	f7ff ffea 	bl	80a18ce <_ZN6String12changeBufferEj>
 80a18fa:	b120      	cbz	r0, 80a1906 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a18fc:	68a3      	ldr	r3, [r4, #8]
 80a18fe:	b90b      	cbnz	r3, 80a1904 <_ZN6String7reserveEj+0x1e>
 80a1900:	6822      	ldr	r2, [r4, #0]
 80a1902:	7013      	strb	r3, [r2, #0]
 80a1904:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1906:	bd10      	pop	{r4, pc}

080a1908 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1908:	b570      	push	{r4, r5, r6, lr}
 80a190a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a190c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a190e:	4604      	mov	r4, r0
 80a1910:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1912:	f7ff ffe8 	bl	80a18e6 <_ZN6String7reserveEj>
 80a1916:	b918      	cbnz	r0, 80a1920 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1918:	4620      	mov	r0, r4
 80a191a:	f7ff ffcd 	bl	80a18b8 <_ZN6String10invalidateEv>
		return *this;
 80a191e:	e009      	b.n	80a1934 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1920:	462a      	mov	r2, r5
 80a1922:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1924:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1926:	6820      	ldr	r0, [r4, #0]
 80a1928:	f002 f84c 	bl	80a39c4 <memcpy>
	buffer[len] = 0;
 80a192c:	6822      	ldr	r2, [r4, #0]
 80a192e:	68a3      	ldr	r3, [r4, #8]
 80a1930:	2100      	movs	r1, #0
 80a1932:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1934:	4620      	mov	r0, r4
 80a1936:	bd70      	pop	{r4, r5, r6, pc}

080a1938 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1938:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a193a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a193c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a193e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1940:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1942:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1944:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1946:	460d      	mov	r5, r1
 80a1948:	b139      	cbz	r1, 80a195a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a194a:	4608      	mov	r0, r1
 80a194c:	f002 f87e 	bl	80a3a4c <strlen>
 80a1950:	4629      	mov	r1, r5
 80a1952:	4602      	mov	r2, r0
 80a1954:	4620      	mov	r0, r4
 80a1956:	f7ff ffd7 	bl	80a1908 <_ZN6String4copyEPKcj>
}
 80a195a:	4620      	mov	r0, r4
 80a195c:	bd38      	pop	{r3, r4, r5, pc}

080a195e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a195e:	b538      	push	{r3, r4, r5, lr}
 80a1960:	4605      	mov	r5, r0
	if (buffer) {
 80a1962:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a1964:	460c      	mov	r4, r1
	if (buffer) {
 80a1966:	b160      	cbz	r0, 80a1982 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 80a1968:	686a      	ldr	r2, [r5, #4]
 80a196a:	688b      	ldr	r3, [r1, #8]
 80a196c:	429a      	cmp	r2, r3
 80a196e:	d306      	bcc.n	80a197e <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 80a1970:	6809      	ldr	r1, [r1, #0]
 80a1972:	f002 f863 	bl	80a3a3c <strcpy>
			len = rhs.len;
 80a1976:	68a3      	ldr	r3, [r4, #8]
 80a1978:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a197a:	2300      	movs	r3, #0
 80a197c:	e00a      	b.n	80a1994 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 80a197e:	f7ff fc2d 	bl	80a11dc <free>
		}
	}
	buffer = rhs.buffer;
 80a1982:	6823      	ldr	r3, [r4, #0]
 80a1984:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a1986:	6863      	ldr	r3, [r4, #4]
 80a1988:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a198a:	68a3      	ldr	r3, [r4, #8]
 80a198c:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a198e:	2300      	movs	r3, #0
 80a1990:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 80a1992:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 80a1994:	60a3      	str	r3, [r4, #8]
 80a1996:	bd38      	pop	{r3, r4, r5, pc}

080a1998 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a1998:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 80a199a:	b510      	push	{r4, lr}
 80a199c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a199e:	d001      	beq.n	80a19a4 <_ZN6StringaSEOS_+0xc>
 80a19a0:	f7ff ffdd 	bl	80a195e <_ZN6String4moveERS_>
	return *this;
}
 80a19a4:	4620      	mov	r0, r4
 80a19a6:	bd10      	pop	{r4, pc}

080a19a8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a19a8:	b510      	push	{r4, lr}
 80a19aa:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a19ac:	6800      	ldr	r0, [r0, #0]
 80a19ae:	b118      	cbz	r0, 80a19b8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a19b0:	f7ff fc14 	bl	80a11dc <free>
            wakeupSource_ = nullptr;
 80a19b4:	2300      	movs	r3, #0
 80a19b6:	6023      	str	r3, [r4, #0]
 80a19b8:	bd10      	pop	{r4, pc}

080a19ba <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a19ba:	b510      	push	{r4, lr}
 80a19bc:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a19be:	f7ff fff3 	bl	80a19a8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a19c2:	4620      	mov	r0, r4
 80a19c4:	bd10      	pop	{r4, pc}
	...

080a19c8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a19c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a19cc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a19ce:	4c08      	ldr	r4, [pc, #32]	; (80a19f0 <_GLOBAL__sub_I_System+0x28>)
 80a19d0:	2000      	movs	r0, #0
 80a19d2:	6020      	str	r0, [r4, #0]
 80a19d4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a19d6:	71a0      	strb	r0, [r4, #6]
 80a19d8:	8120      	strh	r0, [r4, #8]
 80a19da:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a19dc:	f7ff fb72 	bl	80a10c4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a19e0:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a19e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a19e6:	4a03      	ldr	r2, [pc, #12]	; (80a19f4 <_GLOBAL__sub_I_System+0x2c>)
 80a19e8:	4903      	ldr	r1, [pc, #12]	; (80a19f8 <_GLOBAL__sub_I_System+0x30>)
 80a19ea:	f000 bd9d 	b.w	80a2528 <__aeabi_atexit>
 80a19ee:	bf00      	nop
 80a19f0:	20000574 	.word	0x20000574
 80a19f4:	20000068 	.word	0x20000068
 80a19f8:	080a19bb 	.word	0x080a19bb

080a19fc <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a19fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a19fe:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1a00:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1a02:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1a06:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a1a08:	2201      	movs	r2, #1
 80a1a0a:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1a0e:	4621      	mov	r1, r4
 80a1a10:	47a8      	blx	r5
}
 80a1a12:	b003      	add	sp, #12
 80a1a14:	bd30      	pop	{r4, r5, pc}

080a1a16 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a1a16:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1a18:	6803      	ldr	r3, [r0, #0]
 80a1a1a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1a1c:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1a20:	46a4      	mov	ip, r4
}
 80a1a22:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1a24:	4760      	bx	ip

080a1a26 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a1a26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1a28:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a1a2a:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a1a2c:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a1a30:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a1a32:	4621      	mov	r1, r4
 80a1a34:	4613      	mov	r3, r2
 80a1a36:	2201      	movs	r2, #1
 80a1a38:	47a8      	blx	r5
}
 80a1a3a:	b003      	add	sp, #12
 80a1a3c:	bd30      	pop	{r4, r5, pc}

080a1a3e <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a1a3e:	4770      	bx	lr

080a1a40 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a1a40:	4770      	bx	lr

080a1a42 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a1a42:	2000      	movs	r0, #0
 80a1a44:	4770      	bx	lr

080a1a46 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a1a46:	b510      	push	{r4, lr}
 80a1a48:	4604      	mov	r4, r0
 80a1a4a:	2114      	movs	r1, #20
 80a1a4c:	f000 fd71 	bl	80a2532 <_ZdlPvj>
 80a1a50:	4620      	mov	r0, r4
 80a1a52:	bd10      	pop	{r4, pc}

080a1a54 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1a54:	f7fe bb25 	b.w	80a00a2 <_ZdlPv>

080a1a58 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a1a58:	b510      	push	{r4, lr}
 80a1a5a:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a1a5c:	6803      	ldr	r3, [r0, #0]
 80a1a5e:	689b      	ldr	r3, [r3, #8]
 80a1a60:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1a62:	68a3      	ldr	r3, [r4, #8]
 80a1a64:	3b01      	subs	r3, #1
 80a1a66:	60a3      	str	r3, [r4, #8]
 80a1a68:	b92b      	cbnz	r3, 80a1a76 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28+0x1e>
            _M_destroy();
 80a1a6a:	6823      	ldr	r3, [r4, #0]
 80a1a6c:	4620      	mov	r0, r4
        }
    }
 80a1a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a1a72:	68db      	ldr	r3, [r3, #12]
 80a1a74:	4718      	bx	r3
 80a1a76:	bd10      	pop	{r4, pc}

080a1a78 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a1a78:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1a7a:	4604      	mov	r4, r0
 80a1a7c:	4606      	mov	r6, r0
 80a1a7e:	694d      	ldr	r5, [r1, #20]
 80a1a80:	4b04      	ldr	r3, [pc, #16]	; (80a1a94 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a1a82:	358c      	adds	r5, #140	; 0x8c
 80a1a84:	f844 3b04 	str.w	r3, [r4], #4
 80a1a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1a8c:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a1a8e:	4630      	mov	r0, r6
 80a1a90:	7023      	strb	r3, [r4, #0]
 80a1a92:	bd70      	pop	{r4, r5, r6, pc}
 80a1a94:	080a3b10 	.word	0x080a3b10

080a1a98 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a1a98:	b510      	push	{r4, lr}
 80a1a9a:	6943      	ldr	r3, [r0, #20]
 80a1a9c:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a1a9e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1aa2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1aa6:	429a      	cmp	r2, r3
 80a1aa8:	d005      	beq.n	80a1ab6 <_ZN9TCPClient4peekEv+0x1e>
 80a1aaa:	6962      	ldr	r2, [r4, #20]
 80a1aac:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1ab0:	4413      	add	r3, r2
 80a1ab2:	7918      	ldrb	r0, [r3, #4]
 80a1ab4:	bd10      	pop	{r4, pc}
 80a1ab6:	6803      	ldr	r3, [r0, #0]
 80a1ab8:	691b      	ldr	r3, [r3, #16]
 80a1aba:	4798      	blx	r3
 80a1abc:	2800      	cmp	r0, #0
 80a1abe:	d1f4      	bne.n	80a1aaa <_ZN9TCPClient4peekEv+0x12>
 80a1ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1ac4:	bd10      	pop	{r4, pc}

080a1ac6 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a1ac6:	b510      	push	{r4, lr}
 80a1ac8:	6943      	ldr	r3, [r0, #20]
 80a1aca:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a1acc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1ad0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1ad4:	429a      	cmp	r2, r3
 80a1ad6:	d008      	beq.n	80a1aea <_ZN9TCPClient4readEv+0x24>
 80a1ad8:	6962      	ldr	r2, [r4, #20]
 80a1ada:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1ade:	1c59      	adds	r1, r3, #1
 80a1ae0:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a1ae4:	4413      	add	r3, r2
 80a1ae6:	7918      	ldrb	r0, [r3, #4]
 80a1ae8:	bd10      	pop	{r4, pc}
 80a1aea:	6803      	ldr	r3, [r0, #0]
 80a1aec:	691b      	ldr	r3, [r3, #16]
 80a1aee:	4798      	blx	r3
 80a1af0:	2800      	cmp	r0, #0
 80a1af2:	d1f1      	bne.n	80a1ad8 <_ZN9TCPClient4readEv+0x12>
 80a1af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a1af8:	bd10      	pop	{r4, pc}

080a1afa <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1afc:	6943      	ldr	r3, [r0, #20]
 80a1afe:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a1b00:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1b04:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1b08:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a1b0a:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1b0c:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a1b0e:	d106      	bne.n	80a1b1e <_ZN9TCPClient4readEPhj+0x24>
 80a1b10:	6803      	ldr	r3, [r0, #0]
 80a1b12:	691b      	ldr	r3, [r3, #16]
 80a1b14:	4798      	blx	r3
 80a1b16:	b910      	cbnz	r0, 80a1b1e <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a1b18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a1b1c:	e014      	b.n	80a1b48 <_ZN9TCPClient4readEPhj+0x4e>
 80a1b1e:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1b20:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1b22:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a1b26:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1b2a:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1b2c:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a1b2e:	42bc      	cmp	r4, r7
 80a1b30:	bf28      	it	cs
 80a1b32:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1b34:	3104      	adds	r1, #4
 80a1b36:	4622      	mov	r2, r4
 80a1b38:	f001 ff44 	bl	80a39c4 <memcpy>
 80a1b3c:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a1b3e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1b42:	4423      	add	r3, r4
 80a1b44:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a1b48:	4620      	mov	r0, r4
 80a1b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1b4c <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a1b4c:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a1b4e:	2300      	movs	r3, #0
 80a1b50:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a1b54:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a1b56:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a1b5a:	4770      	bx	lr

080a1b5c <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a1b5c:	b538      	push	{r3, r4, r5, lr}
 80a1b5e:	6942      	ldr	r2, [r0, #20]
 80a1b60:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a1b62:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1b66:	b11b      	cbz	r3, 80a1b70 <_ZN9TCPClient9availableEv+0x14>
 80a1b68:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a1b6c:	429a      	cmp	r2, r3
 80a1b6e:	d00c      	beq.n	80a1b8a <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1b70:	6920      	ldr	r0, [r4, #16]
 80a1b72:	f7ff fc9f 	bl	80a14b4 <_ZN5spark12NetworkClass4fromEm>
 80a1b76:	6803      	ldr	r3, [r0, #0]
 80a1b78:	68db      	ldr	r3, [r3, #12]
 80a1b7a:	4798      	blx	r3
 80a1b7c:	b318      	cbz	r0, 80a1bc6 <_ZN9TCPClient9availableEv+0x6a>
 80a1b7e:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1b80:	6818      	ldr	r0, [r3, #0]
 80a1b82:	f7ff f987 	bl	80a0e94 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1b86:	b918      	cbnz	r0, 80a1b90 <_ZN9TCPClient9availableEv+0x34>
 80a1b88:	e01d      	b.n	80a1bc6 <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a1b8a:	f7ff ffdf 	bl	80a1b4c <_ZN9TCPClient12flush_bufferEv>
 80a1b8e:	e7ef      	b.n	80a1b70 <_ZN9TCPClient9availableEv+0x14>
 80a1b90:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a1b92:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a1b96:	297f      	cmp	r1, #127	; 0x7f
 80a1b98:	d815      	bhi.n	80a1bc6 <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a1b9a:	1d05      	adds	r5, r0, #4
 80a1b9c:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a1ba0:	2300      	movs	r3, #0
 80a1ba2:	4429      	add	r1, r5
 80a1ba4:	6800      	ldr	r0, [r0, #0]
 80a1ba6:	f7ff f98d 	bl	80a0ec4 <socket_receive>
            if (ret > 0)
 80a1baa:	2800      	cmp	r0, #0
 80a1bac:	dd0b      	ble.n	80a1bc6 <_ZN9TCPClient9availableEv+0x6a>
 80a1bae:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a1bb0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1bb4:	b90a      	cbnz	r2, 80a1bba <_ZN9TCPClient9availableEv+0x5e>
 80a1bb6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a1bba:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a1bbc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1bc0:	4418      	add	r0, r3
 80a1bc2:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a1bc6:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a1bc8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1bcc:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a1bd0:	1a18      	subs	r0, r3, r0
}
 80a1bd2:	bd38      	pop	{r3, r4, r5, pc}

080a1bd4 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a1bd4:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1bd6:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a1bd8:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1bda:	6818      	ldr	r0, [r3, #0]
 80a1bdc:	f7ff f95a 	bl	80a0e94 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1be0:	b118      	cbz	r0, 80a1bea <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a1be2:	6963      	ldr	r3, [r4, #20]
 80a1be4:	6818      	ldr	r0, [r3, #0]
 80a1be6:	f7ff f975 	bl	80a0ed4 <socket_close>
 80a1bea:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a1bec:	f7ff f97a 	bl	80a0ee4 <socket_handle_invalid>
 80a1bf0:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1bf2:	6960      	ldr	r0, [r4, #20]
 80a1bf4:	2211      	movs	r2, #17
 80a1bf6:	2100      	movs	r1, #0
 80a1bf8:	308c      	adds	r0, #140	; 0x8c
 80a1bfa:	f001 feee 	bl	80a39da <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a1bfe:	4620      	mov	r0, r4
}
 80a1c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a1c04:	f7ff bfa2 	b.w	80a1b4c <_ZN9TCPClient12flush_bufferEv>

080a1c08 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1c0c:	461f      	mov	r7, r3
    stop();
 80a1c0e:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1c10:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a1c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1c14:	4606      	mov	r6, r0
 80a1c16:	460c      	mov	r4, r1
 80a1c18:	4615      	mov	r5, r2
    stop();
 80a1c1a:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a1c1c:	4638      	mov	r0, r7
 80a1c1e:	f7ff fc49 	bl	80a14b4 <_ZN5spark12NetworkClass4fromEm>
 80a1c22:	6803      	ldr	r3, [r0, #0]
 80a1c24:	68db      	ldr	r3, [r3, #12]
 80a1c26:	4798      	blx	r3
 80a1c28:	2800      	cmp	r0, #0
 80a1c2a:	d056      	beq.n	80a1cda <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1c2c:	9700      	str	r7, [sp, #0]
 80a1c2e:	462b      	mov	r3, r5
 80a1c30:	2206      	movs	r2, #6
 80a1c32:	2101      	movs	r1, #1
 80a1c34:	2002      	movs	r0, #2
 80a1c36:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a1c3a:	f7ff f933 	bl	80a0ea4 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1c3e:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1c40:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1c44:	2700      	movs	r7, #0
 80a1c46:	9302      	str	r3, [sp, #8]
 80a1c48:	6973      	ldr	r3, [r6, #20]
 80a1c4a:	9703      	str	r7, [sp, #12]
 80a1c4c:	681b      	ldr	r3, [r3, #0]
 80a1c4e:	2001      	movs	r0, #1
 80a1c50:	9301      	str	r3, [sp, #4]
 80a1c52:	4b23      	ldr	r3, [pc, #140]	; (80a1ce0 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a1c54:	aa02      	add	r2, sp, #8
 80a1c56:	9300      	str	r3, [sp, #0]
 80a1c58:	4922      	ldr	r1, [pc, #136]	; (80a1ce4 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a1c5a:	463b      	mov	r3, r7
 80a1c5c:	f7ff fa2a 	bl	80a10b4 <log_message>

          if (socket_handle_valid(d_->sock))
 80a1c60:	6973      	ldr	r3, [r6, #20]
 80a1c62:	6818      	ldr	r0, [r3, #0]
 80a1c64:	f7ff f916 	bl	80a0e94 <socket_handle_valid>
 80a1c68:	2800      	cmp	r0, #0
 80a1c6a:	d036      	beq.n	80a1cda <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a1c6c:	4630      	mov	r0, r6
 80a1c6e:	f7ff ff6d 	bl	80a1b4c <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a1c72:	2302      	movs	r3, #2
 80a1c74:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1c78:	0a2b      	lsrs	r3, r5, #8
 80a1c7a:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1c7e:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1c80:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1c84:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a1c88:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a1c8a:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a1c8e:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a1c92:	7963      	ldrb	r3, [r4, #5]
 80a1c94:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a1c98:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a1c9c:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1ca0:	f7ff f9f8 	bl	80a1094 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1ca4:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1ca6:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1ca8:	2210      	movs	r2, #16
 80a1caa:	a902      	add	r1, sp, #8
 80a1cac:	6818      	ldr	r0, [r3, #0]
 80a1cae:	f7ff f901 	bl	80a0eb4 <socket_connect>
 80a1cb2:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a1cb4:	4628      	mov	r0, r5
 80a1cb6:	f7ff f9ed 	bl	80a1094 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1cbc:	6975      	ldr	r5, [r6, #20]
 80a1cbe:	358c      	adds	r5, #140	; 0x8c
 80a1cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1cc2:	6823      	ldr	r3, [r4, #0]
 80a1cc4:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a1cc6:	f1b8 0f00 	cmp.w	r8, #0
 80a1cca:	d005      	beq.n	80a1cd8 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a1ccc:	6833      	ldr	r3, [r6, #0]
 80a1cce:	4630      	mov	r0, r6
 80a1cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1cd2:	4798      	blx	r3
 80a1cd4:	4638      	mov	r0, r7
 80a1cd6:	e000      	b.n	80a1cda <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a1cd8:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a1cda:	b00a      	add	sp, #40	; 0x28
 80a1cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1ce0:	080a3cbb 	.word	0x080a3cbb
 80a1ce4:	080a3cb4 	.word	0x080a3cb4

080a1ce8 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1ce8:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1cea:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1cec:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1cee:	6818      	ldr	r0, [r3, #0]
 80a1cf0:	f7ff f8d0 	bl	80a0e94 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1cf4:	b908      	cbnz	r0, 80a1cfa <_ZN9TCPClient6statusEv+0x12>
 80a1cf6:	2000      	movs	r0, #0
 80a1cf8:	bd10      	pop	{r4, pc}
 80a1cfa:	6920      	ldr	r0, [r4, #16]
 80a1cfc:	f7ff fbda 	bl	80a14b4 <_ZN5spark12NetworkClass4fromEm>
 80a1d00:	6803      	ldr	r3, [r0, #0]
 80a1d02:	68db      	ldr	r3, [r3, #12]
 80a1d04:	4798      	blx	r3
 80a1d06:	2800      	cmp	r0, #0
 80a1d08:	d0f5      	beq.n	80a1cf6 <_ZN9TCPClient6statusEv+0xe>
 80a1d0a:	6963      	ldr	r3, [r4, #20]
 80a1d0c:	6818      	ldr	r0, [r3, #0]
 80a1d0e:	f7ff f8b9 	bl	80a0e84 <socket_active_status>
 80a1d12:	fab0 f080 	clz	r0, r0
 80a1d16:	0940      	lsrs	r0, r0, #5
}
 80a1d18:	bd10      	pop	{r4, pc}

080a1d1a <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a1d1a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a1d1e:	2500      	movs	r5, #0
 80a1d20:	6045      	str	r5, [r0, #4]
 80a1d22:	4604      	mov	r4, r0
 80a1d24:	460e      	mov	r6, r1
 80a1d26:	4617      	mov	r7, r2
 80a1d28:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1d2a:	f7ff ffdd 	bl	80a1ce8 <_ZN9TCPClient6statusEv>
 80a1d2e:	b160      	cbz	r0, 80a1d4a <_ZN9TCPClient5writeEPKhjm+0x30>
 80a1d30:	6960      	ldr	r0, [r4, #20]
 80a1d32:	9501      	str	r5, [sp, #4]
 80a1d34:	f8cd 8000 	str.w	r8, [sp]
 80a1d38:	462b      	mov	r3, r5
 80a1d3a:	463a      	mov	r2, r7
 80a1d3c:	4631      	mov	r1, r6
 80a1d3e:	6800      	ldr	r0, [r0, #0]
 80a1d40:	f7ff f8d8 	bl	80a0ef4 <socket_send_ex>
    if (ret < 0) {
 80a1d44:	2800      	cmp	r0, #0
 80a1d46:	da03      	bge.n	80a1d50 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a1d48:	e001      	b.n	80a1d4e <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1d4e:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a1d50:	b002      	add	sp, #8
 80a1d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1d56 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a1d56:	b538      	push	{r3, r4, r5, lr}
 80a1d58:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1d5a:	f7ff ffc5 	bl	80a1ce8 <_ZN9TCPClient6statusEv>
 80a1d5e:	bb00      	cbnz	r0, 80a1da2 <_ZN9TCPClient9connectedEv+0x4c>
 80a1d60:	6963      	ldr	r3, [r4, #20]
 80a1d62:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a1d66:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1d6a:	4291      	cmp	r1, r2
 80a1d6c:	d119      	bne.n	80a1da2 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1d6e:	6818      	ldr	r0, [r3, #0]
 80a1d70:	f7ff f890 	bl	80a0e94 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a1d74:	b128      	cbz	r0, 80a1d82 <_ZN9TCPClient9connectedEv+0x2c>
 80a1d76:	6963      	ldr	r3, [r4, #20]
 80a1d78:	6818      	ldr	r0, [r3, #0]
 80a1d7a:	f7ff f883 	bl	80a0e84 <socket_active_status>
 80a1d7e:	2801      	cmp	r0, #1
 80a1d80:	d001      	beq.n	80a1d86 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1d82:	2500      	movs	r5, #0
 80a1d84:	e00e      	b.n	80a1da4 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a1d86:	6823      	ldr	r3, [r4, #0]
 80a1d88:	4620      	mov	r0, r4
 80a1d8a:	691b      	ldr	r3, [r3, #16]
 80a1d8c:	4798      	blx	r3
 80a1d8e:	2800      	cmp	r0, #0
 80a1d90:	bf14      	ite	ne
 80a1d92:	2501      	movne	r5, #1
 80a1d94:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a1d96:	d105      	bne.n	80a1da4 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a1d98:	6823      	ldr	r3, [r4, #0]
 80a1d9a:	4620      	mov	r0, r4
 80a1d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1d9e:	4798      	blx	r3
 80a1da0:	e000      	b.n	80a1da4 <_ZN9TCPClient9connectedEv+0x4e>
 80a1da2:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a1da4:	4628      	mov	r0, r5
 80a1da6:	bd38      	pop	{r3, r4, r5, pc}

080a1da8 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a1da8:	b508      	push	{r3, lr}
   return (status()!=0);
 80a1daa:	f7ff ff9d 	bl	80a1ce8 <_ZN9TCPClient6statusEv>
}
 80a1dae:	3000      	adds	r0, #0
 80a1db0:	bf18      	it	ne
 80a1db2:	2001      	movne	r0, #1
 80a1db4:	bd08      	pop	{r3, pc}

080a1db6 <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a1db6:	b510      	push	{r4, lr}
 80a1db8:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a1dba:	2300      	movs	r3, #0
 80a1dbc:	6001      	str	r1, [r0, #0]
 80a1dbe:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a1dc2:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a1dc6:	3088      	adds	r0, #136	; 0x88
 80a1dc8:	f7ff faca 	bl	80a1360 <_ZN9IPAddressC1Ev>
}
 80a1dcc:	4620      	mov	r0, r4
 80a1dce:	bd10      	pop	{r4, pc}

080a1dd0 <_ZN9TCPClientC1Em>:
 80a1dd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1dd4:	b570      	push	{r4, r5, r6, lr}
 80a1dd6:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a1dd8:	4a14      	ldr	r2, [pc, #80]	; (80a1e2c <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1dda:	2300      	movs	r3, #0
 80a1ddc:	6043      	str	r3, [r0, #4]
 80a1dde:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a1de0:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1de2:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1de4:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1de6:	20a0      	movs	r0, #160	; 0xa0
 80a1de8:	460e      	mov	r6, r1
 80a1dea:	f7fe f958 	bl	80a009e <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a1dee:	4605      	mov	r5, r0
 80a1df0:	b110      	cbz	r0, 80a1df8 <_ZN9TCPClientC1Em+0x28>
 80a1df2:	4631      	mov	r1, r6
 80a1df4:	f7ff ffdf 	bl	80a1db6 <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1df8:	2014      	movs	r0, #20
 80a1dfa:	f7fe f950 	bl	80a009e <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a1dfe:	4603      	mov	r3, r0
 80a1e00:	b128      	cbz	r0, 80a1e0e <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1e02:	2201      	movs	r2, #1
 80a1e04:	6042      	str	r2, [r0, #4]
 80a1e06:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a1e08:	4a09      	ldr	r2, [pc, #36]	; (80a1e30 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a1e0a:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a1e0c:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1e0e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a1e10:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1e12:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a1e14:	b128      	cbz	r0, 80a1e22 <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1e16:	6843      	ldr	r3, [r0, #4]
 80a1e18:	3b01      	subs	r3, #1
 80a1e1a:	6043      	str	r3, [r0, #4]
 80a1e1c:	b90b      	cbnz	r3, 80a1e22 <_ZN9TCPClientC1Em+0x52>
 80a1e1e:	f7ff fe1b 	bl	80a1a58 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a1e22:	4620      	mov	r0, r4
 80a1e24:	f7ff fe92 	bl	80a1b4c <_ZN9TCPClient12flush_bufferEv>
}
 80a1e28:	4620      	mov	r0, r4
 80a1e2a:	bd70      	pop	{r4, r5, r6, pc}
 80a1e2c:	080a3c70 	.word	0x080a3c70
 80a1e30:	080a3c54 	.word	0x080a3c54

080a1e34 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a1e34:	b510      	push	{r4, lr}
 80a1e36:	4604      	mov	r4, r0
 80a1e38:	f7ff f854 	bl	80a0ee4 <socket_handle_invalid>
 80a1e3c:	4601      	mov	r1, r0
 80a1e3e:	4620      	mov	r0, r4
 80a1e40:	f7ff ffc6 	bl	80a1dd0 <_ZN9TCPClientC1Em>
{
}
 80a1e44:	4620      	mov	r0, r4
 80a1e46:	bd10      	pop	{r4, pc}

080a1e48 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a1e48:	b510      	push	{r4, lr}
 80a1e4a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a1e4c:	6800      	ldr	r0, [r0, #0]
 80a1e4e:	f7ff f821 	bl	80a0e94 <socket_handle_valid>
 80a1e52:	b110      	cbz	r0, 80a1e5a <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a1e54:	6820      	ldr	r0, [r4, #0]
 80a1e56:	f7ff f83d 	bl	80a0ed4 <socket_close>
    }
}
 80a1e5a:	4620      	mov	r0, r4
 80a1e5c:	bd10      	pop	{r4, pc}

080a1e5e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a1e5e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a1e60:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a1e62:	4620      	mov	r0, r4
 80a1e64:	f7ff fff0 	bl	80a1e48 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a1e68:	b124      	cbz	r4, 80a1e74 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1e6a:	4620      	mov	r0, r4
 80a1e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1e70:	f7fe b917 	b.w	80a00a2 <_ZdlPv>
 80a1e74:	bd10      	pop	{r4, pc}
	...

080a1e78 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1e7c:	461f      	mov	r7, r3
    stop();
 80a1e7e:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1e80:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a1e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1e84:	4606      	mov	r6, r0
 80a1e86:	460d      	mov	r5, r1
 80a1e88:	4690      	mov	r8, r2
    stop();
 80a1e8a:	4798      	blx	r3
    if (Network.ready())
 80a1e8c:	4813      	ldr	r0, [pc, #76]	; (80a1edc <_ZN9TCPClient7connectEPKctm+0x64>)
 80a1e8e:	f7ff fac4 	bl	80a141a <_ZN5spark12NetworkClass5readyEv>
 80a1e92:	b300      	cbz	r0, 80a1ed6 <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a1e94:	a802      	add	r0, sp, #8
 80a1e96:	f7ff fa63 	bl	80a1360 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a1e9a:	4628      	mov	r0, r5
 80a1e9c:	f001 fdd6 	bl	80a3a4c <strlen>
 80a1ea0:	2400      	movs	r4, #0
 80a1ea2:	b281      	uxth	r1, r0
 80a1ea4:	9400      	str	r4, [sp, #0]
 80a1ea6:	463b      	mov	r3, r7
 80a1ea8:	aa03      	add	r2, sp, #12
 80a1eaa:	4628      	mov	r0, r5
 80a1eac:	f7ff f8fa 	bl	80a10a4 <inet_gethostbyname>
 80a1eb0:	b980      	cbnz	r0, 80a1ed4 <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a1eb2:	6833      	ldr	r3, [r6, #0]
 80a1eb4:	ad09      	add	r5, sp, #36	; 0x24
 80a1eb6:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a1eba:	4b09      	ldr	r3, [pc, #36]	; (80a1ee0 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a1ebc:	ac03      	add	r4, sp, #12
 80a1ebe:	9308      	str	r3, [sp, #32]
 80a1ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1ec4:	6823      	ldr	r3, [r4, #0]
 80a1ec6:	4642      	mov	r2, r8
 80a1ec8:	702b      	strb	r3, [r5, #0]
 80a1eca:	a908      	add	r1, sp, #32
 80a1ecc:	463b      	mov	r3, r7
 80a1ece:	4630      	mov	r0, r6
 80a1ed0:	47c8      	blx	r9
 80a1ed2:	e000      	b.n	80a1ed6 <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a1ed4:	4620      	mov	r0, r4
}
 80a1ed6:	b00f      	add	sp, #60	; 0x3c
 80a1ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1edc:	2000055c 	.word	0x2000055c
 80a1ee0:	080a3b10 	.word	0x080a3b10

080a1ee4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1ee4:	4b02      	ldr	r3, [pc, #8]	; (80a1ef0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1ee6:	681a      	ldr	r2, [r3, #0]
 80a1ee8:	4b02      	ldr	r3, [pc, #8]	; (80a1ef4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1eea:	601a      	str	r2, [r3, #0]
 80a1eec:	4770      	bx	lr
 80a1eee:	bf00      	nop
 80a1ef0:	20000000 	.word	0x20000000
 80a1ef4:	20000580 	.word	0x20000580

080a1ef8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1ef8:	4770      	bx	lr

080a1efa <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1efa:	7441      	strb	r1, [r0, #17]
 80a1efc:	4770      	bx	lr

080a1efe <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1efe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1f00:	7c00      	ldrb	r0, [r0, #16]
 80a1f02:	f7ff f877 	bl	80a0ff4 <HAL_USART_Available_Data_For_Write>
}
 80a1f06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f0a:	bd08      	pop	{r3, pc}

080a1f0c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1f0c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1f0e:	7c00      	ldrb	r0, [r0, #16]
 80a1f10:	f7ff f848 	bl	80a0fa4 <HAL_USART_Available_Data>
}
 80a1f14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f18:	bd08      	pop	{r3, pc}

080a1f1a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1f1a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1f1c:	7c00      	ldrb	r0, [r0, #16]
 80a1f1e:	f7ff f851 	bl	80a0fc4 <HAL_USART_Peek_Data>
}
 80a1f22:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1f26:	bf28      	it	cs
 80a1f28:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1f2c:	bd08      	pop	{r3, pc}

080a1f2e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1f2e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1f30:	7c00      	ldrb	r0, [r0, #16]
 80a1f32:	f7ff f83f 	bl	80a0fb4 <HAL_USART_Read_Data>
}
 80a1f36:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1f3a:	bf28      	it	cs
 80a1f3c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1f40:	bd08      	pop	{r3, pc}

080a1f42 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1f42:	7c00      	ldrb	r0, [r0, #16]
 80a1f44:	f7ff b846 	b.w	80a0fd4 <HAL_USART_Flush_Data>

080a1f48 <_ZN11USARTSerialD0Ev>:
 80a1f48:	b510      	push	{r4, lr}
 80a1f4a:	4604      	mov	r4, r0
 80a1f4c:	2114      	movs	r1, #20
 80a1f4e:	f000 faf0 	bl	80a2532 <_ZdlPvj>
 80a1f52:	4620      	mov	r0, r4
 80a1f54:	bd10      	pop	{r4, pc}

080a1f56 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1f56:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1f58:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1f5a:	4604      	mov	r4, r0
 80a1f5c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1f5e:	b925      	cbnz	r5, 80a1f6a <_ZN11USARTSerial5writeEh+0x14>
 80a1f60:	7c00      	ldrb	r0, [r0, #16]
 80a1f62:	f7ff f847 	bl	80a0ff4 <HAL_USART_Available_Data_For_Write>
 80a1f66:	2800      	cmp	r0, #0
 80a1f68:	dd05      	ble.n	80a1f76 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1f6a:	4631      	mov	r1, r6
 80a1f6c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1f72:	f7ff b80f 	b.w	80a0f94 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1f76:	4628      	mov	r0, r5
 80a1f78:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1f7c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1f7c:	b510      	push	{r4, lr}
 80a1f7e:	4604      	mov	r4, r0
 80a1f80:	4608      	mov	r0, r1
 80a1f82:	4611      	mov	r1, r2
 80a1f84:	2200      	movs	r2, #0
 80a1f86:	6062      	str	r2, [r4, #4]
 80a1f88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1f8c:	60a2      	str	r2, [r4, #8]
 80a1f8e:	4a05      	ldr	r2, [pc, #20]	; (80a1fa4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1f90:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1f92:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1f94:	2201      	movs	r2, #1
 80a1f96:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1f98:	461a      	mov	r2, r3
 80a1f9a:	f7fe fff3 	bl	80a0f84 <HAL_USART_Init>
}
 80a1f9e:	4620      	mov	r0, r4
 80a1fa0:	bd10      	pop	{r4, pc}
 80a1fa2:	bf00      	nop
 80a1fa4:	080a3d00 	.word	0x080a3d00

080a1fa8 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a1fa8:	2300      	movs	r3, #0
 80a1faa:	7c00      	ldrb	r0, [r0, #16]
 80a1fac:	f7ff b82a 	b.w	80a1004 <HAL_USART_BeginConfig>

080a1fb0 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a1fb0:	2200      	movs	r2, #0
 80a1fb2:	f7ff bff9 	b.w	80a1fa8 <_ZN11USARTSerial5beginEmm>

080a1fb6 <_ZN11USARTSerial5writeEt>:
  return 0;
}

size_t USARTSerial::write(uint16_t c)
{
  return HAL_USART_Write_NineBitData(_serial, c);
 80a1fb6:	7c00      	ldrb	r0, [r0, #16]
 80a1fb8:	f7ff b82c 	b.w	80a1014 <HAL_USART_Write_NineBitData>

080a1fbc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1fbc:	7c00      	ldrb	r0, [r0, #16]
 80a1fbe:	f7ff b811 	b.w	80a0fe4 <HAL_USART_Is_Enabled>
	...

080a1fc4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a1fc6:	4c19      	ldr	r4, [pc, #100]	; (80a202c <_Z22__fetch_global_Serial1v+0x68>)
 80a1fc8:	6825      	ldr	r5, [r4, #0]
 80a1fca:	b94d      	cbnz	r5, 80a1fe0 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a1fcc:	2084      	movs	r0, #132	; 0x84
 80a1fce:	f7fe f866 	bl	80a009e <_Znwj>
 80a1fd2:	4606      	mov	r6, r0
 80a1fd4:	b118      	cbz	r0, 80a1fde <_Z22__fetch_global_Serial1v+0x1a>
 80a1fd6:	2284      	movs	r2, #132	; 0x84
 80a1fd8:	4629      	mov	r1, r5
 80a1fda:	f001 fcfe 	bl	80a39da <memset>
 80a1fde:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a1fe0:	4d13      	ldr	r5, [pc, #76]	; (80a2030 <_Z22__fetch_global_Serial1v+0x6c>)
 80a1fe2:	682e      	ldr	r6, [r5, #0]
 80a1fe4:	b94e      	cbnz	r6, 80a1ffa <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a1fe6:	2084      	movs	r0, #132	; 0x84
 80a1fe8:	f7fe f859 	bl	80a009e <_Znwj>
 80a1fec:	4607      	mov	r7, r0
 80a1fee:	b118      	cbz	r0, 80a1ff8 <_Z22__fetch_global_Serial1v+0x34>
 80a1ff0:	2284      	movs	r2, #132	; 0x84
 80a1ff2:	4631      	mov	r1, r6
 80a1ff4:	f001 fcf1 	bl	80a39da <memset>
 80a1ff8:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a1ffa:	4f0e      	ldr	r7, [pc, #56]	; (80a2034 <_Z22__fetch_global_Serial1v+0x70>)
 80a1ffc:	6839      	ldr	r1, [r7, #0]
 80a1ffe:	f011 0601 	ands.w	r6, r1, #1
 80a2002:	d111      	bne.n	80a2028 <_Z22__fetch_global_Serial1v+0x64>
 80a2004:	4638      	mov	r0, r7
 80a2006:	f7fe f84e 	bl	80a00a6 <__cxa_guard_acquire>
 80a200a:	b168      	cbz	r0, 80a2028 <_Z22__fetch_global_Serial1v+0x64>
 80a200c:	6822      	ldr	r2, [r4, #0]
 80a200e:	4631      	mov	r1, r6
 80a2010:	682b      	ldr	r3, [r5, #0]
 80a2012:	4809      	ldr	r0, [pc, #36]	; (80a2038 <_Z22__fetch_global_Serial1v+0x74>)
 80a2014:	f7ff ffb2 	bl	80a1f7c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2018:	4638      	mov	r0, r7
 80a201a:	f7fe f849 	bl	80a00b0 <__cxa_guard_release>
 80a201e:	4a07      	ldr	r2, [pc, #28]	; (80a203c <_Z22__fetch_global_Serial1v+0x78>)
 80a2020:	4907      	ldr	r1, [pc, #28]	; (80a2040 <_Z22__fetch_global_Serial1v+0x7c>)
 80a2022:	4805      	ldr	r0, [pc, #20]	; (80a2038 <_Z22__fetch_global_Serial1v+0x74>)
 80a2024:	f000 fa80 	bl	80a2528 <__aeabi_atexit>
#endif
	return serial1;
}
 80a2028:	4803      	ldr	r0, [pc, #12]	; (80a2038 <_Z22__fetch_global_Serial1v+0x74>)
 80a202a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a202c:	200005a0 	.word	0x200005a0
 80a2030:	20000598 	.word	0x20000598
 80a2034:	2000059c 	.word	0x2000059c
 80a2038:	20000584 	.word	0x20000584
 80a203c:	20000068 	.word	0x20000068
 80a2040:	080a1ef9 	.word	0x080a1ef9

080a2044 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2044:	7441      	strb	r1, [r0, #17]
 80a2046:	4770      	bx	lr

080a2048 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2048:	4770      	bx	lr

080a204a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a204a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a204c:	2100      	movs	r1, #0
 80a204e:	7c00      	ldrb	r0, [r0, #16]
 80a2050:	f7ff f808 	bl	80a1064 <HAL_USB_USART_Receive_Data>
}
 80a2054:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2058:	bf28      	it	cs
 80a205a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a205e:	bd08      	pop	{r3, pc}

080a2060 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2060:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2062:	2101      	movs	r1, #1
 80a2064:	7c00      	ldrb	r0, [r0, #16]
 80a2066:	f7fe fffd 	bl	80a1064 <HAL_USB_USART_Receive_Data>
}
 80a206a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a206e:	bf28      	it	cs
 80a2070:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2074:	bd08      	pop	{r3, pc}

080a2076 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2076:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2078:	7c00      	ldrb	r0, [r0, #16]
 80a207a:	f7fe ffeb 	bl	80a1054 <HAL_USB_USART_Available_Data_For_Write>
}
 80a207e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2082:	bd08      	pop	{r3, pc}

080a2084 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2084:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2086:	7c00      	ldrb	r0, [r0, #16]
 80a2088:	f7fe ffdc 	bl	80a1044 <HAL_USB_USART_Available_Data>
}
 80a208c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2090:	bd08      	pop	{r3, pc}

080a2092 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2092:	7c00      	ldrb	r0, [r0, #16]
 80a2094:	f7fe bff6 	b.w	80a1084 <HAL_USB_USART_Flush_Data>

080a2098 <_ZN9USBSerialD0Ev>:
 80a2098:	b510      	push	{r4, lr}
 80a209a:	4604      	mov	r4, r0
 80a209c:	2114      	movs	r1, #20
 80a209e:	f000 fa48 	bl	80a2532 <_ZdlPvj>
 80a20a2:	4620      	mov	r0, r4
 80a20a4:	bd10      	pop	{r4, pc}

080a20a6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a20a6:	b538      	push	{r3, r4, r5, lr}
 80a20a8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a20aa:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a20ac:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a20ae:	f7fe ffd1 	bl	80a1054 <HAL_USB_USART_Available_Data_For_Write>
 80a20b2:	2800      	cmp	r0, #0
 80a20b4:	dc01      	bgt.n	80a20ba <_ZN9USBSerial5writeEh+0x14>
 80a20b6:	7c60      	ldrb	r0, [r4, #17]
 80a20b8:	b128      	cbz	r0, 80a20c6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a20ba:	4629      	mov	r1, r5
 80a20bc:	7c20      	ldrb	r0, [r4, #16]
 80a20be:	f7fe ffd9 	bl	80a1074 <HAL_USB_USART_Send_Data>
 80a20c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a20c6:	bd38      	pop	{r3, r4, r5, pc}

080a20c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a20c8:	b510      	push	{r4, lr}
 80a20ca:	4604      	mov	r4, r0
 80a20cc:	2300      	movs	r3, #0
 80a20ce:	6063      	str	r3, [r4, #4]
 80a20d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a20d4:	60a3      	str	r3, [r4, #8]
 80a20d6:	4b05      	ldr	r3, [pc, #20]	; (80a20ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a20d8:	4608      	mov	r0, r1
 80a20da:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a20dc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a20de:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a20e0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a20e2:	4611      	mov	r1, r2
 80a20e4:	f7fe ff9e 	bl	80a1024 <HAL_USB_USART_Init>
}
 80a20e8:	4620      	mov	r0, r4
 80a20ea:	bd10      	pop	{r4, pc}
 80a20ec:	080a3d30 	.word	0x080a3d30

080a20f0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a20f0:	2200      	movs	r2, #0
 80a20f2:	7c00      	ldrb	r0, [r0, #16]
 80a20f4:	f7fe bf9e 	b.w	80a1034 <HAL_USB_USART_Begin>

080a20f8 <_Z19acquireSerialBufferv>:
 80a20f8:	b510      	push	{r4, lr}
 80a20fa:	4604      	mov	r4, r0
 80a20fc:	2214      	movs	r2, #20
 80a20fe:	2100      	movs	r1, #0
 80a2100:	f001 fc6b 	bl	80a39da <memset>
 80a2104:	4620      	mov	r0, r4
 80a2106:	bd10      	pop	{r4, pc}

080a2108 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2108:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a210a:	4d0e      	ldr	r5, [pc, #56]	; (80a2144 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a210c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a210e:	a801      	add	r0, sp, #4
 80a2110:	f7ff fff2 	bl	80a20f8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2114:	6829      	ldr	r1, [r5, #0]
 80a2116:	f011 0401 	ands.w	r4, r1, #1
 80a211a:	d110      	bne.n	80a213e <_Z16_fetch_usbserialv+0x36>
 80a211c:	4628      	mov	r0, r5
 80a211e:	f7fd ffc2 	bl	80a00a6 <__cxa_guard_acquire>
 80a2122:	b160      	cbz	r0, 80a213e <_Z16_fetch_usbserialv+0x36>
 80a2124:	aa01      	add	r2, sp, #4
 80a2126:	4621      	mov	r1, r4
 80a2128:	4807      	ldr	r0, [pc, #28]	; (80a2148 <_Z16_fetch_usbserialv+0x40>)
 80a212a:	f7ff ffcd 	bl	80a20c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a212e:	4628      	mov	r0, r5
 80a2130:	f7fd ffbe 	bl	80a00b0 <__cxa_guard_release>
 80a2134:	4a05      	ldr	r2, [pc, #20]	; (80a214c <_Z16_fetch_usbserialv+0x44>)
 80a2136:	4906      	ldr	r1, [pc, #24]	; (80a2150 <_Z16_fetch_usbserialv+0x48>)
 80a2138:	4803      	ldr	r0, [pc, #12]	; (80a2148 <_Z16_fetch_usbserialv+0x40>)
 80a213a:	f000 f9f5 	bl	80a2528 <__aeabi_atexit>
	return _usbserial;
}
 80a213e:	4802      	ldr	r0, [pc, #8]	; (80a2148 <_Z16_fetch_usbserialv+0x40>)
 80a2140:	b007      	add	sp, #28
 80a2142:	bd30      	pop	{r4, r5, pc}
 80a2144:	200005a4 	.word	0x200005a4
 80a2148:	200005ac 	.word	0x200005ac
 80a214c:	20000068 	.word	0x20000068
 80a2150:	080a2049 	.word	0x080a2049

080a2154 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2154:	b510      	push	{r4, lr}
 80a2156:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2158:	2214      	movs	r2, #20
 80a215a:	2100      	movs	r1, #0
 80a215c:	f001 fc3d 	bl	80a39da <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2160:	4620      	mov	r0, r4
 80a2162:	bd10      	pop	{r4, pc}

080a2164 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2164:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2166:	4c0e      	ldr	r4, [pc, #56]	; (80a21a0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2168:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a216a:	a801      	add	r0, sp, #4
 80a216c:	f7ff fff2 	bl	80a2154 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2170:	6823      	ldr	r3, [r4, #0]
 80a2172:	07db      	lsls	r3, r3, #31
 80a2174:	d410      	bmi.n	80a2198 <_Z17_fetch_usbserial1v+0x34>
 80a2176:	4620      	mov	r0, r4
 80a2178:	f7fd ff95 	bl	80a00a6 <__cxa_guard_acquire>
 80a217c:	b160      	cbz	r0, 80a2198 <_Z17_fetch_usbserial1v+0x34>
 80a217e:	aa01      	add	r2, sp, #4
 80a2180:	2101      	movs	r1, #1
 80a2182:	4808      	ldr	r0, [pc, #32]	; (80a21a4 <_Z17_fetch_usbserial1v+0x40>)
 80a2184:	f7ff ffa0 	bl	80a20c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2188:	4620      	mov	r0, r4
 80a218a:	f7fd ff91 	bl	80a00b0 <__cxa_guard_release>
 80a218e:	4a06      	ldr	r2, [pc, #24]	; (80a21a8 <_Z17_fetch_usbserial1v+0x44>)
 80a2190:	4906      	ldr	r1, [pc, #24]	; (80a21ac <_Z17_fetch_usbserial1v+0x48>)
 80a2192:	4804      	ldr	r0, [pc, #16]	; (80a21a4 <_Z17_fetch_usbserial1v+0x40>)
 80a2194:	f000 f9c8 	bl	80a2528 <__aeabi_atexit>
  return _usbserial1;
}
 80a2198:	4802      	ldr	r0, [pc, #8]	; (80a21a4 <_Z17_fetch_usbserial1v+0x40>)
 80a219a:	b006      	add	sp, #24
 80a219c:	bd10      	pop	{r4, pc}
 80a219e:	bf00      	nop
 80a21a0:	200005a8 	.word	0x200005a8
 80a21a4:	200005c0 	.word	0x200005c0
 80a21a8:	20000068 	.word	0x20000068
 80a21ac:	080a2049 	.word	0x080a2049

080a21b0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a21b0:	2200      	movs	r2, #0
 80a21b2:	4611      	mov	r1, r2
 80a21b4:	6840      	ldr	r0, [r0, #4]
 80a21b6:	f7fe bfd1 	b.w	80a115c <network_ready>

080a21ba <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a21ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a21bc:	4616      	mov	r6, r2
 80a21be:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a21c0:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a21c2:	460f      	mov	r7, r1
 80a21c4:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a21c6:	2100      	movs	r1, #0
 80a21c8:	a803      	add	r0, sp, #12
 80a21ca:	f001 fc06 	bl	80a39da <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a21ce:	4630      	mov	r0, r6
 80a21d0:	f001 fc3c 	bl	80a3a4c <strlen>
 80a21d4:	2500      	movs	r5, #0
 80a21d6:	9500      	str	r5, [sp, #0]
 80a21d8:	b281      	uxth	r1, r0
 80a21da:	687b      	ldr	r3, [r7, #4]
 80a21dc:	aa03      	add	r2, sp, #12
 80a21de:	4630      	mov	r0, r6
 80a21e0:	f7fe ff60 	bl	80a10a4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a21e4:	b120      	cbz	r0, 80a21f0 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a21e6:	4629      	mov	r1, r5
 80a21e8:	4620      	mov	r0, r4
 80a21ea:	f7ff f8d9 	bl	80a13a0 <_ZN9IPAddressC1Em>
 80a21ee:	e003      	b.n	80a21f8 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a21f0:	a903      	add	r1, sp, #12
 80a21f2:	4620      	mov	r0, r4
 80a21f4:	f7ff f8c2 	bl	80a137c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a21f8:	4620      	mov	r0, r4
 80a21fa:	b009      	add	sp, #36	; 0x24
 80a21fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a21fe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a21fe:	2200      	movs	r2, #0
 80a2200:	4611      	mov	r1, r2
 80a2202:	6840      	ldr	r0, [r0, #4]
 80a2204:	f7fe bfca 	b.w	80a119c <network_listening>

080a2208 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2208:	2200      	movs	r2, #0
 80a220a:	4611      	mov	r1, r2
 80a220c:	6840      	ldr	r0, [r0, #4]
 80a220e:	f7fe bfd5 	b.w	80a11bc <network_get_listen_timeout>

080a2212 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2212:	2200      	movs	r2, #0
 80a2214:	6840      	ldr	r0, [r0, #4]
 80a2216:	f7fe bfc9 	b.w	80a11ac <network_set_listen_timeout>

080a221a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a221a:	2200      	movs	r2, #0
 80a221c:	f081 0101 	eor.w	r1, r1, #1
 80a2220:	6840      	ldr	r0, [r0, #4]
 80a2222:	f7fe bfb3 	b.w	80a118c <network_listen>

080a2226 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2226:	2300      	movs	r3, #0
 80a2228:	461a      	mov	r2, r3
 80a222a:	4619      	mov	r1, r3
 80a222c:	6840      	ldr	r0, [r0, #4]
 80a222e:	f7fe bfa5 	b.w	80a117c <network_off>

080a2232 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2232:	2300      	movs	r3, #0
 80a2234:	461a      	mov	r2, r3
 80a2236:	4619      	mov	r1, r3
 80a2238:	6840      	ldr	r0, [r0, #4]
 80a223a:	f7fe bf97 	b.w	80a116c <network_on>

080a223e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a223e:	2200      	movs	r2, #0
 80a2240:	4611      	mov	r1, r2
 80a2242:	6840      	ldr	r0, [r0, #4]
 80a2244:	f7fe bf7a 	b.w	80a113c <network_connecting>

080a2248 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2248:	2200      	movs	r2, #0
 80a224a:	2102      	movs	r1, #2
 80a224c:	6840      	ldr	r0, [r0, #4]
 80a224e:	f7fe bf7d 	b.w	80a114c <network_disconnect>

080a2252 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2252:	2300      	movs	r3, #0
 80a2254:	461a      	mov	r2, r3
 80a2256:	6840      	ldr	r0, [r0, #4]
 80a2258:	f7fe bf68 	b.w	80a112c <network_connect>

080a225c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a225c:	4b02      	ldr	r3, [pc, #8]	; (80a2268 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a225e:	2204      	movs	r2, #4
 80a2260:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2262:	4a02      	ldr	r2, [pc, #8]	; (80a226c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2264:	601a      	str	r2, [r3, #0]
 80a2266:	4770      	bx	lr
 80a2268:	200005d4 	.word	0x200005d4
 80a226c:	080a3d60 	.word	0x080a3d60

080a2270 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2270:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2272:	4b14      	ldr	r3, [pc, #80]	; (80a22c4 <serialEventRun+0x54>)
 80a2274:	b133      	cbz	r3, 80a2284 <serialEventRun+0x14>
 80a2276:	f7ff ff47 	bl	80a2108 <_Z16_fetch_usbserialv>
 80a227a:	6803      	ldr	r3, [r0, #0]
 80a227c:	691b      	ldr	r3, [r3, #16]
 80a227e:	4798      	blx	r3
 80a2280:	2800      	cmp	r0, #0
 80a2282:	dc16      	bgt.n	80a22b2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2284:	4b10      	ldr	r3, [pc, #64]	; (80a22c8 <serialEventRun+0x58>)
 80a2286:	b133      	cbz	r3, 80a2296 <serialEventRun+0x26>
 80a2288:	f7ff fe9c 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a228c:	6803      	ldr	r3, [r0, #0]
 80a228e:	691b      	ldr	r3, [r3, #16]
 80a2290:	4798      	blx	r3
 80a2292:	2800      	cmp	r0, #0
 80a2294:	dc10      	bgt.n	80a22b8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2296:	4b0d      	ldr	r3, [pc, #52]	; (80a22cc <serialEventRun+0x5c>)
 80a2298:	b10b      	cbz	r3, 80a229e <serialEventRun+0x2e>
 80a229a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a229e:	4b0c      	ldr	r3, [pc, #48]	; (80a22d0 <serialEventRun+0x60>)
 80a22a0:	b17b      	cbz	r3, 80a22c2 <serialEventRun+0x52>
 80a22a2:	f7ff ff5f 	bl	80a2164 <_Z17_fetch_usbserial1v>
 80a22a6:	6803      	ldr	r3, [r0, #0]
 80a22a8:	691b      	ldr	r3, [r3, #16]
 80a22aa:	4798      	blx	r3
 80a22ac:	2800      	cmp	r0, #0
 80a22ae:	dc06      	bgt.n	80a22be <serialEventRun+0x4e>
 80a22b0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a22b2:	f3af 8000 	nop.w
 80a22b6:	e7e5      	b.n	80a2284 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a22b8:	f3af 8000 	nop.w
 80a22bc:	e7eb      	b.n	80a2296 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a22be:	f3af 8000 	nop.w
 80a22c2:	bd08      	pop	{r3, pc}
	...

080a22d4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a22d4:	b508      	push	{r3, lr}
	serialEventRun();
 80a22d6:	f7ff ffcb 	bl	80a2270 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a22da:	f7fe fd4f 	bl	80a0d7c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a22de:	4b01      	ldr	r3, [pc, #4]	; (80a22e4 <_post_loop+0x10>)
 80a22e0:	6018      	str	r0, [r3, #0]
 80a22e2:	bd08      	pop	{r3, pc}
 80a22e4:	200005e4 	.word	0x200005e4

080a22e8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a22e8:	4802      	ldr	r0, [pc, #8]	; (80a22f4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a22ea:	4a03      	ldr	r2, [pc, #12]	; (80a22f8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a22ec:	4903      	ldr	r1, [pc, #12]	; (80a22fc <_Z33system_initialize_user_backup_ramv+0x14>)
 80a22ee:	1a12      	subs	r2, r2, r0
 80a22f0:	f001 bb68 	b.w	80a39c4 <memcpy>
 80a22f4:	40024000 	.word	0x40024000
 80a22f8:	40024004 	.word	0x40024004
 80a22fc:	080a3e38 	.word	0x080a3e38

080a2300 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2300:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2302:	2300      	movs	r3, #0
 80a2304:	9300      	str	r3, [sp, #0]
 80a2306:	461a      	mov	r2, r3
 80a2308:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a230c:	f7fe fefc 	bl	80a1108 <system_ctrl_set_result>
}
 80a2310:	b003      	add	sp, #12
 80a2312:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2318 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2318:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a231a:	8843      	ldrh	r3, [r0, #2]
 80a231c:	2b0a      	cmp	r3, #10
 80a231e:	d008      	beq.n	80a2332 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2320:	2b50      	cmp	r3, #80	; 0x50
 80a2322:	d109      	bne.n	80a2338 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2324:	4b09      	ldr	r3, [pc, #36]	; (80a234c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2326:	681b      	ldr	r3, [r3, #0]
 80a2328:	b13b      	cbz	r3, 80a233a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a232a:	b003      	add	sp, #12
 80a232c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2330:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2332:	f7ff ffe5 	bl	80a2300 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2336:	e006      	b.n	80a2346 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2338:	2300      	movs	r3, #0
 80a233a:	9300      	str	r3, [sp, #0]
 80a233c:	461a      	mov	r2, r3
 80a233e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2342:	f7fe fee1 	bl	80a1108 <system_ctrl_set_result>
        break;
    }
}
 80a2346:	b003      	add	sp, #12
 80a2348:	f85d fb04 	ldr.w	pc, [sp], #4
 80a234c:	200005dc 	.word	0x200005dc

080a2350 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2350:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2352:	4c10      	ldr	r4, [pc, #64]	; (80a2394 <module_user_init_hook+0x44>)
 80a2354:	4d10      	ldr	r5, [pc, #64]	; (80a2398 <module_user_init_hook+0x48>)
 80a2356:	6823      	ldr	r3, [r4, #0]
 80a2358:	42ab      	cmp	r3, r5
 80a235a:	4b10      	ldr	r3, [pc, #64]	; (80a239c <module_user_init_hook+0x4c>)
 80a235c:	bf0c      	ite	eq
 80a235e:	2201      	moveq	r2, #1
 80a2360:	2200      	movne	r2, #0
 80a2362:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2364:	d002      	beq.n	80a236c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2366:	f7ff ffbf 	bl	80a22e8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a236a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a236c:	f7fe fcfe 	bl	80a0d6c <HAL_RNG_GetRandomNumber>
 80a2370:	4604      	mov	r4, r0
    srand(seed);
 80a2372:	f001 fb3b 	bl	80a39ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2376:	4b0a      	ldr	r3, [pc, #40]	; (80a23a0 <module_user_init_hook+0x50>)
 80a2378:	b113      	cbz	r3, 80a2380 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a237a:	4620      	mov	r0, r4
 80a237c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2380:	2100      	movs	r1, #0
 80a2382:	4807      	ldr	r0, [pc, #28]	; (80a23a0 <module_user_init_hook+0x50>)
 80a2384:	f7fe feca 	bl	80a111c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a238c:	2100      	movs	r1, #0
 80a238e:	4805      	ldr	r0, [pc, #20]	; (80a23a4 <module_user_init_hook+0x54>)
 80a2390:	f7fe beb0 	b.w	80a10f4 <system_ctrl_set_app_request_handler>
 80a2394:	40024000 	.word	0x40024000
 80a2398:	9a271c1e 	.word	0x9a271c1e
 80a239c:	200005e0 	.word	0x200005e0
 80a23a0:	00000000 	.word	0x00000000
 80a23a4:	080a2319 	.word	0x080a2319

080a23a8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a23a8:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a23aa:	4e1a      	ldr	r6, [pc, #104]	; (80a2414 <pinAvailable+0x6c>)
 80a23ac:	4604      	mov	r4, r0
 80a23ae:	6831      	ldr	r1, [r6, #0]
 80a23b0:	f011 0501 	ands.w	r5, r1, #1
 80a23b4:	d10f      	bne.n	80a23d6 <pinAvailable+0x2e>
 80a23b6:	4630      	mov	r0, r6
 80a23b8:	f7fd fe75 	bl	80a00a6 <__cxa_guard_acquire>
 80a23bc:	b158      	cbz	r0, 80a23d6 <pinAvailable+0x2e>
 80a23be:	4629      	mov	r1, r5
 80a23c0:	4815      	ldr	r0, [pc, #84]	; (80a2418 <pinAvailable+0x70>)
 80a23c2:	f7ff f9be 	bl	80a1742 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a23c6:	4630      	mov	r0, r6
 80a23c8:	f7fd fe72 	bl	80a00b0 <__cxa_guard_release>
 80a23cc:	4a13      	ldr	r2, [pc, #76]	; (80a241c <pinAvailable+0x74>)
 80a23ce:	4914      	ldr	r1, [pc, #80]	; (80a2420 <pinAvailable+0x78>)
 80a23d0:	4811      	ldr	r0, [pc, #68]	; (80a2418 <pinAvailable+0x70>)
 80a23d2:	f000 f8a9 	bl	80a2528 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a23d6:	4810      	ldr	r0, [pc, #64]	; (80a2418 <pinAvailable+0x70>)
 80a23d8:	f7ff fa64 	bl	80a18a4 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a23dc:	b128      	cbz	r0, 80a23ea <pinAvailable+0x42>
 80a23de:	f1a4 030d 	sub.w	r3, r4, #13
 80a23e2:	2b02      	cmp	r3, #2
 80a23e4:	d801      	bhi.n	80a23ea <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a23e6:	2000      	movs	r0, #0
 80a23e8:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a23ea:	f000 f85f 	bl	80a24ac <_Z19__fetch_global_Wirev>
 80a23ee:	f7fe ff91 	bl	80a1314 <_ZN7TwoWire9isEnabledEv>
 80a23f2:	b108      	cbz	r0, 80a23f8 <pinAvailable+0x50>
 80a23f4:	2c01      	cmp	r4, #1
 80a23f6:	d9f6      	bls.n	80a23e6 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a23f8:	f7ff fde4 	bl	80a1fc4 <_Z22__fetch_global_Serial1v>
 80a23fc:	f7ff fdde 	bl	80a1fbc <_ZN11USARTSerial9isEnabledEv>
 80a2400:	b118      	cbz	r0, 80a240a <pinAvailable+0x62>
 80a2402:	f1a4 0312 	sub.w	r3, r4, #18
 80a2406:	2b01      	cmp	r3, #1
 80a2408:	d9ed      	bls.n	80a23e6 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a240a:	2c17      	cmp	r4, #23
 80a240c:	bf8c      	ite	hi
 80a240e:	2000      	movhi	r0, #0
 80a2410:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2412:	bd70      	pop	{r4, r5, r6, pc}
 80a2414:	20000548 	.word	0x20000548
 80a2418:	2000054c 	.word	0x2000054c
 80a241c:	20000068 	.word	0x20000068
 80a2420:	080a04e1 	.word	0x080a04e1

080a2424 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2424:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2426:	b538      	push	{r3, r4, r5, lr}
 80a2428:	4604      	mov	r4, r0
 80a242a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a242c:	d80a      	bhi.n	80a2444 <pinMode+0x20>
 80a242e:	29ff      	cmp	r1, #255	; 0xff
 80a2430:	d008      	beq.n	80a2444 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2432:	f7ff ffb9 	bl	80a23a8 <pinAvailable>
 80a2436:	b128      	cbz	r0, 80a2444 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2438:	4629      	mov	r1, r5
 80a243a:	4620      	mov	r0, r4
}
 80a243c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2440:	f7fe bcac 	b.w	80a0d9c <HAL_Pin_Mode>
 80a2444:	bd38      	pop	{r3, r4, r5, pc}

080a2446 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2446:	b538      	push	{r3, r4, r5, lr}
 80a2448:	4604      	mov	r4, r0
 80a244a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a244c:	f7fe fcae 	bl	80a0dac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2450:	28ff      	cmp	r0, #255	; 0xff
 80a2452:	d010      	beq.n	80a2476 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2454:	2806      	cmp	r0, #6
 80a2456:	d804      	bhi.n	80a2462 <digitalWrite+0x1c>
 80a2458:	234d      	movs	r3, #77	; 0x4d
 80a245a:	fa23 f000 	lsr.w	r0, r3, r0
 80a245e:	07c3      	lsls	r3, r0, #31
 80a2460:	d409      	bmi.n	80a2476 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2462:	4620      	mov	r0, r4
 80a2464:	f7ff ffa0 	bl	80a23a8 <pinAvailable>
 80a2468:	b128      	cbz	r0, 80a2476 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a246a:	4629      	mov	r1, r5
 80a246c:	4620      	mov	r0, r4
}
 80a246e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2472:	f7fe bca3 	b.w	80a0dbc <HAL_GPIO_Write>
 80a2476:	bd38      	pop	{r3, r4, r5, pc}

080a2478 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a2478:	b570      	push	{r4, r5, r6, lr}
 80a247a:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a247c:	2514      	movs	r5, #20
 80a247e:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2480:	4e09      	ldr	r6, [pc, #36]	; (80a24a8 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2482:	2100      	movs	r1, #0
 80a2484:	f001 faa9 	bl	80a39da <memset>
 80a2488:	8025      	strh	r5, [r4, #0]
 80a248a:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a248c:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a248e:	60a5      	str	r5, [r4, #8]
 80a2490:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2492:	4628      	mov	r0, r5
 80a2494:	f000 f867 	bl	80a2566 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2498:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a249a:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a249c:	4628      	mov	r0, r5
 80a249e:	f000 f862 	bl	80a2566 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a24a2:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a24a4:	4620      	mov	r0, r4
 80a24a6:	bd70      	pop	{r4, r5, r6, pc}
 80a24a8:	080a3d8c 	.word	0x080a3d8c

080a24ac <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a24ac:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a24ae:	4d0e      	ldr	r5, [pc, #56]	; (80a24e8 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a24b0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a24b2:	6829      	ldr	r1, [r5, #0]
 80a24b4:	f011 0401 	ands.w	r4, r1, #1
 80a24b8:	d113      	bne.n	80a24e2 <_Z19__fetch_global_Wirev+0x36>
 80a24ba:	4628      	mov	r0, r5
 80a24bc:	f7fd fdf3 	bl	80a00a6 <__cxa_guard_acquire>
 80a24c0:	b178      	cbz	r0, 80a24e2 <_Z19__fetch_global_Wirev+0x36>
 80a24c2:	a801      	add	r0, sp, #4
 80a24c4:	f7ff ffd8 	bl	80a2478 <_Z17acquireWireBufferv>
 80a24c8:	aa01      	add	r2, sp, #4
 80a24ca:	4621      	mov	r1, r4
 80a24cc:	4807      	ldr	r0, [pc, #28]	; (80a24ec <_Z19__fetch_global_Wirev+0x40>)
 80a24ce:	f7fe fecd 	bl	80a126c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a24d2:	4628      	mov	r0, r5
 80a24d4:	f7fd fdec 	bl	80a00b0 <__cxa_guard_release>
 80a24d8:	4a05      	ldr	r2, [pc, #20]	; (80a24f0 <_Z19__fetch_global_Wirev+0x44>)
 80a24da:	4906      	ldr	r1, [pc, #24]	; (80a24f4 <_Z19__fetch_global_Wirev+0x48>)
 80a24dc:	4803      	ldr	r0, [pc, #12]	; (80a24ec <_Z19__fetch_global_Wirev+0x40>)
 80a24de:	f000 f823 	bl	80a2528 <__aeabi_atexit>
	return wire;
}
 80a24e2:	4802      	ldr	r0, [pc, #8]	; (80a24ec <_Z19__fetch_global_Wirev+0x40>)
 80a24e4:	b007      	add	sp, #28
 80a24e6:	bd30      	pop	{r4, r5, pc}
 80a24e8:	200005e8 	.word	0x200005e8
 80a24ec:	200005ec 	.word	0x200005ec
 80a24f0:	20000068 	.word	0x20000068
 80a24f4:	080a1215 	.word	0x080a1215

080a24f8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a24f8:	b513      	push	{r0, r1, r4, lr}
 80a24fa:	4c08      	ldr	r4, [pc, #32]	; (80a251c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a24fc:	2300      	movs	r3, #0
 80a24fe:	461a      	mov	r2, r3
 80a2500:	4619      	mov	r1, r3
 80a2502:	9300      	str	r3, [sp, #0]
 80a2504:	4620      	mov	r0, r4
 80a2506:	f7fe ff61 	bl	80a13cc <_ZN9IPAddressC1Ehhhh>
 80a250a:	4620      	mov	r0, r4
 80a250c:	4a04      	ldr	r2, [pc, #16]	; (80a2520 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a250e:	4905      	ldr	r1, [pc, #20]	; (80a2524 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2510:	b002      	add	sp, #8
 80a2512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2516:	f000 b807 	b.w	80a2528 <__aeabi_atexit>
 80a251a:	bf00      	nop
 80a251c:	20000600 	.word	0x20000600
 80a2520:	20000068 	.word	0x20000068
 80a2524:	080a131d 	.word	0x080a131d

080a2528 <__aeabi_atexit>:
 80a2528:	460b      	mov	r3, r1
 80a252a:	4601      	mov	r1, r0
 80a252c:	4618      	mov	r0, r3
 80a252e:	f001 ba3b 	b.w	80a39a8 <__cxa_atexit>

080a2532 <_ZdlPvj>:
 80a2532:	f7fd bdb6 	b.w	80a00a2 <_ZdlPv>
	...

080a2538 <_ZSt15get_new_handlerv>:
 80a2538:	4b02      	ldr	r3, [pc, #8]	; (80a2544 <_ZSt15get_new_handlerv+0xc>)
 80a253a:	6818      	ldr	r0, [r3, #0]
 80a253c:	f3bf 8f5f 	dmb	sy
 80a2540:	4770      	bx	lr
 80a2542:	bf00      	nop
 80a2544:	20000618 	.word	0x20000618

080a2548 <_ZnwjRKSt9nothrow_t>:
 80a2548:	b510      	push	{r4, lr}
 80a254a:	2800      	cmp	r0, #0
 80a254c:	bf14      	ite	ne
 80a254e:	4604      	movne	r4, r0
 80a2550:	2401      	moveq	r4, #1
 80a2552:	4620      	mov	r0, r4
 80a2554:	f7fe fe3a 	bl	80a11cc <malloc>
 80a2558:	b920      	cbnz	r0, 80a2564 <_ZnwjRKSt9nothrow_t+0x1c>
 80a255a:	f7ff ffed 	bl	80a2538 <_ZSt15get_new_handlerv>
 80a255e:	b108      	cbz	r0, 80a2564 <_ZnwjRKSt9nothrow_t+0x1c>
 80a2560:	4780      	blx	r0
 80a2562:	e7f6      	b.n	80a2552 <_ZnwjRKSt9nothrow_t+0xa>
 80a2564:	bd10      	pop	{r4, pc}

080a2566 <_ZnajRKSt9nothrow_t>:
 80a2566:	f7ff bfef 	b.w	80a2548 <_ZnwjRKSt9nothrow_t>
	...

080a256c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a256c:	4b24      	ldr	r3, [pc, #144]	; (80a2600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a256e:	681a      	ldr	r2, [r3, #0]
 80a2570:	07d0      	lsls	r0, r2, #31
 80a2572:	bf5c      	itt	pl
 80a2574:	2201      	movpl	r2, #1
 80a2576:	601a      	strpl	r2, [r3, #0]
 80a2578:	4b22      	ldr	r3, [pc, #136]	; (80a2604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a257a:	681a      	ldr	r2, [r3, #0]
 80a257c:	07d1      	lsls	r1, r2, #31
 80a257e:	bf5c      	itt	pl
 80a2580:	2201      	movpl	r2, #1
 80a2582:	601a      	strpl	r2, [r3, #0]
 80a2584:	4b20      	ldr	r3, [pc, #128]	; (80a2608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2586:	681a      	ldr	r2, [r3, #0]
 80a2588:	07d2      	lsls	r2, r2, #31
 80a258a:	bf5c      	itt	pl
 80a258c:	2201      	movpl	r2, #1
 80a258e:	601a      	strpl	r2, [r3, #0]
 80a2590:	4b1e      	ldr	r3, [pc, #120]	; (80a260c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2592:	681a      	ldr	r2, [r3, #0]
 80a2594:	07d0      	lsls	r0, r2, #31
 80a2596:	bf5c      	itt	pl
 80a2598:	2201      	movpl	r2, #1
 80a259a:	601a      	strpl	r2, [r3, #0]
 80a259c:	4b1c      	ldr	r3, [pc, #112]	; (80a2610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a259e:	681a      	ldr	r2, [r3, #0]
 80a25a0:	07d1      	lsls	r1, r2, #31
 80a25a2:	bf5c      	itt	pl
 80a25a4:	2201      	movpl	r2, #1
 80a25a6:	601a      	strpl	r2, [r3, #0]
 80a25a8:	4b1a      	ldr	r3, [pc, #104]	; (80a2614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a25aa:	681a      	ldr	r2, [r3, #0]
 80a25ac:	07d2      	lsls	r2, r2, #31
 80a25ae:	bf5c      	itt	pl
 80a25b0:	2201      	movpl	r2, #1
 80a25b2:	601a      	strpl	r2, [r3, #0]
 80a25b4:	4b18      	ldr	r3, [pc, #96]	; (80a2618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a25b6:	681a      	ldr	r2, [r3, #0]
 80a25b8:	07d0      	lsls	r0, r2, #31
 80a25ba:	bf5c      	itt	pl
 80a25bc:	2201      	movpl	r2, #1
 80a25be:	601a      	strpl	r2, [r3, #0]
 80a25c0:	4b16      	ldr	r3, [pc, #88]	; (80a261c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a25c2:	681a      	ldr	r2, [r3, #0]
 80a25c4:	07d1      	lsls	r1, r2, #31
 80a25c6:	bf5c      	itt	pl
 80a25c8:	2201      	movpl	r2, #1
 80a25ca:	601a      	strpl	r2, [r3, #0]
 80a25cc:	4b14      	ldr	r3, [pc, #80]	; (80a2620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a25ce:	681a      	ldr	r2, [r3, #0]
 80a25d0:	07d2      	lsls	r2, r2, #31
 80a25d2:	bf5c      	itt	pl
 80a25d4:	2201      	movpl	r2, #1
 80a25d6:	601a      	strpl	r2, [r3, #0]
 80a25d8:	4b12      	ldr	r3, [pc, #72]	; (80a2624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a25da:	681a      	ldr	r2, [r3, #0]
 80a25dc:	07d0      	lsls	r0, r2, #31
 80a25de:	bf5c      	itt	pl
 80a25e0:	2201      	movpl	r2, #1
 80a25e2:	601a      	strpl	r2, [r3, #0]
 80a25e4:	4b10      	ldr	r3, [pc, #64]	; (80a2628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a25e6:	681a      	ldr	r2, [r3, #0]
 80a25e8:	07d1      	lsls	r1, r2, #31
 80a25ea:	bf5c      	itt	pl
 80a25ec:	2201      	movpl	r2, #1
 80a25ee:	601a      	strpl	r2, [r3, #0]
 80a25f0:	4b0e      	ldr	r3, [pc, #56]	; (80a262c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a25f2:	681a      	ldr	r2, [r3, #0]
 80a25f4:	07d2      	lsls	r2, r2, #31
 80a25f6:	bf5c      	itt	pl
 80a25f8:	2201      	movpl	r2, #1
 80a25fa:	601a      	strpl	r2, [r3, #0]
 80a25fc:	4770      	bx	lr
 80a25fe:	bf00      	nop
 80a2600:	20000648 	.word	0x20000648
 80a2604:	20000644 	.word	0x20000644
 80a2608:	20000640 	.word	0x20000640
 80a260c:	2000063c 	.word	0x2000063c
 80a2610:	20000638 	.word	0x20000638
 80a2614:	20000634 	.word	0x20000634
 80a2618:	20000630 	.word	0x20000630
 80a261c:	2000062c 	.word	0x2000062c
 80a2620:	20000628 	.word	0x20000628
 80a2624:	20000624 	.word	0x20000624
 80a2628:	20000620 	.word	0x20000620
 80a262c:	2000061c 	.word	0x2000061c

080a2630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2630:	4b18      	ldr	r3, [pc, #96]	; (80a2694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2632:	681a      	ldr	r2, [r3, #0]
 80a2634:	07d1      	lsls	r1, r2, #31
 80a2636:	bf5c      	itt	pl
 80a2638:	2201      	movpl	r2, #1
 80a263a:	601a      	strpl	r2, [r3, #0]
 80a263c:	4b16      	ldr	r3, [pc, #88]	; (80a2698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a263e:	681a      	ldr	r2, [r3, #0]
 80a2640:	07d2      	lsls	r2, r2, #31
 80a2642:	bf5c      	itt	pl
 80a2644:	2201      	movpl	r2, #1
 80a2646:	601a      	strpl	r2, [r3, #0]
 80a2648:	4b14      	ldr	r3, [pc, #80]	; (80a269c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a264a:	681a      	ldr	r2, [r3, #0]
 80a264c:	07d0      	lsls	r0, r2, #31
 80a264e:	bf5c      	itt	pl
 80a2650:	2201      	movpl	r2, #1
 80a2652:	601a      	strpl	r2, [r3, #0]
 80a2654:	4b12      	ldr	r3, [pc, #72]	; (80a26a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2656:	681a      	ldr	r2, [r3, #0]
 80a2658:	07d1      	lsls	r1, r2, #31
 80a265a:	bf5c      	itt	pl
 80a265c:	2201      	movpl	r2, #1
 80a265e:	601a      	strpl	r2, [r3, #0]
 80a2660:	4b10      	ldr	r3, [pc, #64]	; (80a26a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2662:	681a      	ldr	r2, [r3, #0]
 80a2664:	07d2      	lsls	r2, r2, #31
 80a2666:	bf5c      	itt	pl
 80a2668:	2201      	movpl	r2, #1
 80a266a:	601a      	strpl	r2, [r3, #0]
 80a266c:	4b0e      	ldr	r3, [pc, #56]	; (80a26a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a266e:	681a      	ldr	r2, [r3, #0]
 80a2670:	07d0      	lsls	r0, r2, #31
 80a2672:	bf5c      	itt	pl
 80a2674:	2201      	movpl	r2, #1
 80a2676:	601a      	strpl	r2, [r3, #0]
 80a2678:	4b0c      	ldr	r3, [pc, #48]	; (80a26ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a267a:	681a      	ldr	r2, [r3, #0]
 80a267c:	07d1      	lsls	r1, r2, #31
 80a267e:	bf5c      	itt	pl
 80a2680:	2201      	movpl	r2, #1
 80a2682:	601a      	strpl	r2, [r3, #0]
 80a2684:	4b0a      	ldr	r3, [pc, #40]	; (80a26b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2686:	681a      	ldr	r2, [r3, #0]
 80a2688:	07d2      	lsls	r2, r2, #31
 80a268a:	bf5c      	itt	pl
 80a268c:	2201      	movpl	r2, #1
 80a268e:	601a      	strpl	r2, [r3, #0]
 80a2690:	4770      	bx	lr
 80a2692:	bf00      	nop
 80a2694:	20000668 	.word	0x20000668
 80a2698:	20000664 	.word	0x20000664
 80a269c:	20000660 	.word	0x20000660
 80a26a0:	2000065c 	.word	0x2000065c
 80a26a4:	20000658 	.word	0x20000658
 80a26a8:	20000654 	.word	0x20000654
 80a26ac:	20000650 	.word	0x20000650
 80a26b0:	2000064c 	.word	0x2000064c

080a26b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a26b4:	4b18      	ldr	r3, [pc, #96]	; (80a2718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a26b6:	681a      	ldr	r2, [r3, #0]
 80a26b8:	07d1      	lsls	r1, r2, #31
 80a26ba:	bf5c      	itt	pl
 80a26bc:	2201      	movpl	r2, #1
 80a26be:	601a      	strpl	r2, [r3, #0]
 80a26c0:	4b16      	ldr	r3, [pc, #88]	; (80a271c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a26c2:	681a      	ldr	r2, [r3, #0]
 80a26c4:	07d2      	lsls	r2, r2, #31
 80a26c6:	bf5c      	itt	pl
 80a26c8:	2201      	movpl	r2, #1
 80a26ca:	601a      	strpl	r2, [r3, #0]
 80a26cc:	4b14      	ldr	r3, [pc, #80]	; (80a2720 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a26ce:	681a      	ldr	r2, [r3, #0]
 80a26d0:	07d0      	lsls	r0, r2, #31
 80a26d2:	bf5c      	itt	pl
 80a26d4:	2201      	movpl	r2, #1
 80a26d6:	601a      	strpl	r2, [r3, #0]
 80a26d8:	4b12      	ldr	r3, [pc, #72]	; (80a2724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a26da:	681a      	ldr	r2, [r3, #0]
 80a26dc:	07d1      	lsls	r1, r2, #31
 80a26de:	bf5c      	itt	pl
 80a26e0:	2201      	movpl	r2, #1
 80a26e2:	601a      	strpl	r2, [r3, #0]
 80a26e4:	4b10      	ldr	r3, [pc, #64]	; (80a2728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a26e6:	681a      	ldr	r2, [r3, #0]
 80a26e8:	07d2      	lsls	r2, r2, #31
 80a26ea:	bf5c      	itt	pl
 80a26ec:	2201      	movpl	r2, #1
 80a26ee:	601a      	strpl	r2, [r3, #0]
 80a26f0:	4b0e      	ldr	r3, [pc, #56]	; (80a272c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a26f2:	681a      	ldr	r2, [r3, #0]
 80a26f4:	07d0      	lsls	r0, r2, #31
 80a26f6:	bf5c      	itt	pl
 80a26f8:	2201      	movpl	r2, #1
 80a26fa:	601a      	strpl	r2, [r3, #0]
 80a26fc:	4b0c      	ldr	r3, [pc, #48]	; (80a2730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a26fe:	681a      	ldr	r2, [r3, #0]
 80a2700:	07d1      	lsls	r1, r2, #31
 80a2702:	bf5c      	itt	pl
 80a2704:	2201      	movpl	r2, #1
 80a2706:	601a      	strpl	r2, [r3, #0]
 80a2708:	4b0a      	ldr	r3, [pc, #40]	; (80a2734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a270a:	681a      	ldr	r2, [r3, #0]
 80a270c:	07d2      	lsls	r2, r2, #31
 80a270e:	bf5c      	itt	pl
 80a2710:	2201      	movpl	r2, #1
 80a2712:	601a      	strpl	r2, [r3, #0]
 80a2714:	4770      	bx	lr
 80a2716:	bf00      	nop
 80a2718:	20000688 	.word	0x20000688
 80a271c:	20000684 	.word	0x20000684
 80a2720:	20000680 	.word	0x20000680
 80a2724:	2000067c 	.word	0x2000067c
 80a2728:	20000678 	.word	0x20000678
 80a272c:	20000674 	.word	0x20000674
 80a2730:	20000670 	.word	0x20000670
 80a2734:	2000066c 	.word	0x2000066c

080a2738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2738:	4b24      	ldr	r3, [pc, #144]	; (80a27cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a273a:	681a      	ldr	r2, [r3, #0]
 80a273c:	07d0      	lsls	r0, r2, #31
 80a273e:	bf5c      	itt	pl
 80a2740:	2201      	movpl	r2, #1
 80a2742:	601a      	strpl	r2, [r3, #0]
 80a2744:	4b22      	ldr	r3, [pc, #136]	; (80a27d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2746:	681a      	ldr	r2, [r3, #0]
 80a2748:	07d1      	lsls	r1, r2, #31
 80a274a:	bf5c      	itt	pl
 80a274c:	2201      	movpl	r2, #1
 80a274e:	601a      	strpl	r2, [r3, #0]
 80a2750:	4b20      	ldr	r3, [pc, #128]	; (80a27d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2752:	681a      	ldr	r2, [r3, #0]
 80a2754:	07d2      	lsls	r2, r2, #31
 80a2756:	bf5c      	itt	pl
 80a2758:	2201      	movpl	r2, #1
 80a275a:	601a      	strpl	r2, [r3, #0]
 80a275c:	4b1e      	ldr	r3, [pc, #120]	; (80a27d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a275e:	681a      	ldr	r2, [r3, #0]
 80a2760:	07d0      	lsls	r0, r2, #31
 80a2762:	bf5c      	itt	pl
 80a2764:	2201      	movpl	r2, #1
 80a2766:	601a      	strpl	r2, [r3, #0]
 80a2768:	4b1c      	ldr	r3, [pc, #112]	; (80a27dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a276a:	681a      	ldr	r2, [r3, #0]
 80a276c:	07d1      	lsls	r1, r2, #31
 80a276e:	bf5c      	itt	pl
 80a2770:	2201      	movpl	r2, #1
 80a2772:	601a      	strpl	r2, [r3, #0]
 80a2774:	4b1a      	ldr	r3, [pc, #104]	; (80a27e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2776:	681a      	ldr	r2, [r3, #0]
 80a2778:	07d2      	lsls	r2, r2, #31
 80a277a:	bf5c      	itt	pl
 80a277c:	2201      	movpl	r2, #1
 80a277e:	601a      	strpl	r2, [r3, #0]
 80a2780:	4b18      	ldr	r3, [pc, #96]	; (80a27e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2782:	681a      	ldr	r2, [r3, #0]
 80a2784:	07d0      	lsls	r0, r2, #31
 80a2786:	bf5c      	itt	pl
 80a2788:	2201      	movpl	r2, #1
 80a278a:	601a      	strpl	r2, [r3, #0]
 80a278c:	4b16      	ldr	r3, [pc, #88]	; (80a27e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a278e:	681a      	ldr	r2, [r3, #0]
 80a2790:	07d1      	lsls	r1, r2, #31
 80a2792:	bf5c      	itt	pl
 80a2794:	2201      	movpl	r2, #1
 80a2796:	601a      	strpl	r2, [r3, #0]
 80a2798:	4b14      	ldr	r3, [pc, #80]	; (80a27ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a279a:	681a      	ldr	r2, [r3, #0]
 80a279c:	07d2      	lsls	r2, r2, #31
 80a279e:	bf5c      	itt	pl
 80a27a0:	2201      	movpl	r2, #1
 80a27a2:	601a      	strpl	r2, [r3, #0]
 80a27a4:	4b12      	ldr	r3, [pc, #72]	; (80a27f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a27a6:	681a      	ldr	r2, [r3, #0]
 80a27a8:	07d0      	lsls	r0, r2, #31
 80a27aa:	bf5c      	itt	pl
 80a27ac:	2201      	movpl	r2, #1
 80a27ae:	601a      	strpl	r2, [r3, #0]
 80a27b0:	4b10      	ldr	r3, [pc, #64]	; (80a27f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a27b2:	681a      	ldr	r2, [r3, #0]
 80a27b4:	07d1      	lsls	r1, r2, #31
 80a27b6:	bf5c      	itt	pl
 80a27b8:	2201      	movpl	r2, #1
 80a27ba:	601a      	strpl	r2, [r3, #0]
 80a27bc:	4b0e      	ldr	r3, [pc, #56]	; (80a27f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a27be:	681a      	ldr	r2, [r3, #0]
 80a27c0:	07d2      	lsls	r2, r2, #31
 80a27c2:	bf5c      	itt	pl
 80a27c4:	2201      	movpl	r2, #1
 80a27c6:	601a      	strpl	r2, [r3, #0]
 80a27c8:	4770      	bx	lr
 80a27ca:	bf00      	nop
 80a27cc:	200006b8 	.word	0x200006b8
 80a27d0:	200006b4 	.word	0x200006b4
 80a27d4:	200006b0 	.word	0x200006b0
 80a27d8:	200006ac 	.word	0x200006ac
 80a27dc:	200006a8 	.word	0x200006a8
 80a27e0:	200006a4 	.word	0x200006a4
 80a27e4:	200006a0 	.word	0x200006a0
 80a27e8:	2000069c 	.word	0x2000069c
 80a27ec:	20000698 	.word	0x20000698
 80a27f0:	20000694 	.word	0x20000694
 80a27f4:	20000690 	.word	0x20000690
 80a27f8:	2000068c 	.word	0x2000068c

080a27fc <__aeabi_drsub>:
 80a27fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2800:	e002      	b.n	80a2808 <__adddf3>
 80a2802:	bf00      	nop

080a2804 <__aeabi_dsub>:
 80a2804:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2808 <__adddf3>:
 80a2808:	b530      	push	{r4, r5, lr}
 80a280a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a280e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2812:	ea94 0f05 	teq	r4, r5
 80a2816:	bf08      	it	eq
 80a2818:	ea90 0f02 	teqeq	r0, r2
 80a281c:	bf1f      	itttt	ne
 80a281e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2822:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2826:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a282a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a282e:	f000 80e2 	beq.w	80a29f6 <__adddf3+0x1ee>
 80a2832:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2836:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a283a:	bfb8      	it	lt
 80a283c:	426d      	neglt	r5, r5
 80a283e:	dd0c      	ble.n	80a285a <__adddf3+0x52>
 80a2840:	442c      	add	r4, r5
 80a2842:	ea80 0202 	eor.w	r2, r0, r2
 80a2846:	ea81 0303 	eor.w	r3, r1, r3
 80a284a:	ea82 0000 	eor.w	r0, r2, r0
 80a284e:	ea83 0101 	eor.w	r1, r3, r1
 80a2852:	ea80 0202 	eor.w	r2, r0, r2
 80a2856:	ea81 0303 	eor.w	r3, r1, r3
 80a285a:	2d36      	cmp	r5, #54	; 0x36
 80a285c:	bf88      	it	hi
 80a285e:	bd30      	pophi	{r4, r5, pc}
 80a2860:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2864:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2868:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a286c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2870:	d002      	beq.n	80a2878 <__adddf3+0x70>
 80a2872:	4240      	negs	r0, r0
 80a2874:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2878:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a287c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2880:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2884:	d002      	beq.n	80a288c <__adddf3+0x84>
 80a2886:	4252      	negs	r2, r2
 80a2888:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a288c:	ea94 0f05 	teq	r4, r5
 80a2890:	f000 80a7 	beq.w	80a29e2 <__adddf3+0x1da>
 80a2894:	f1a4 0401 	sub.w	r4, r4, #1
 80a2898:	f1d5 0e20 	rsbs	lr, r5, #32
 80a289c:	db0d      	blt.n	80a28ba <__adddf3+0xb2>
 80a289e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a28a2:	fa22 f205 	lsr.w	r2, r2, r5
 80a28a6:	1880      	adds	r0, r0, r2
 80a28a8:	f141 0100 	adc.w	r1, r1, #0
 80a28ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80a28b0:	1880      	adds	r0, r0, r2
 80a28b2:	fa43 f305 	asr.w	r3, r3, r5
 80a28b6:	4159      	adcs	r1, r3
 80a28b8:	e00e      	b.n	80a28d8 <__adddf3+0xd0>
 80a28ba:	f1a5 0520 	sub.w	r5, r5, #32
 80a28be:	f10e 0e20 	add.w	lr, lr, #32
 80a28c2:	2a01      	cmp	r2, #1
 80a28c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a28c8:	bf28      	it	cs
 80a28ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a28ce:	fa43 f305 	asr.w	r3, r3, r5
 80a28d2:	18c0      	adds	r0, r0, r3
 80a28d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a28d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a28dc:	d507      	bpl.n	80a28ee <__adddf3+0xe6>
 80a28de:	f04f 0e00 	mov.w	lr, #0
 80a28e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a28e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a28ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80a28ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a28f2:	d31b      	bcc.n	80a292c <__adddf3+0x124>
 80a28f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a28f8:	d30c      	bcc.n	80a2914 <__adddf3+0x10c>
 80a28fa:	0849      	lsrs	r1, r1, #1
 80a28fc:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2900:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2904:	f104 0401 	add.w	r4, r4, #1
 80a2908:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a290c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2910:	f080 809a 	bcs.w	80a2a48 <__adddf3+0x240>
 80a2914:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2918:	bf08      	it	eq
 80a291a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a291e:	f150 0000 	adcs.w	r0, r0, #0
 80a2922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2926:	ea41 0105 	orr.w	r1, r1, r5
 80a292a:	bd30      	pop	{r4, r5, pc}
 80a292c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2930:	4140      	adcs	r0, r0
 80a2932:	eb41 0101 	adc.w	r1, r1, r1
 80a2936:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a293a:	f1a4 0401 	sub.w	r4, r4, #1
 80a293e:	d1e9      	bne.n	80a2914 <__adddf3+0x10c>
 80a2940:	f091 0f00 	teq	r1, #0
 80a2944:	bf04      	itt	eq
 80a2946:	4601      	moveq	r1, r0
 80a2948:	2000      	moveq	r0, #0
 80a294a:	fab1 f381 	clz	r3, r1
 80a294e:	bf08      	it	eq
 80a2950:	3320      	addeq	r3, #32
 80a2952:	f1a3 030b 	sub.w	r3, r3, #11
 80a2956:	f1b3 0220 	subs.w	r2, r3, #32
 80a295a:	da0c      	bge.n	80a2976 <__adddf3+0x16e>
 80a295c:	320c      	adds	r2, #12
 80a295e:	dd08      	ble.n	80a2972 <__adddf3+0x16a>
 80a2960:	f102 0c14 	add.w	ip, r2, #20
 80a2964:	f1c2 020c 	rsb	r2, r2, #12
 80a2968:	fa01 f00c 	lsl.w	r0, r1, ip
 80a296c:	fa21 f102 	lsr.w	r1, r1, r2
 80a2970:	e00c      	b.n	80a298c <__adddf3+0x184>
 80a2972:	f102 0214 	add.w	r2, r2, #20
 80a2976:	bfd8      	it	le
 80a2978:	f1c2 0c20 	rsble	ip, r2, #32
 80a297c:	fa01 f102 	lsl.w	r1, r1, r2
 80a2980:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2984:	bfdc      	itt	le
 80a2986:	ea41 010c 	orrle.w	r1, r1, ip
 80a298a:	4090      	lslle	r0, r2
 80a298c:	1ae4      	subs	r4, r4, r3
 80a298e:	bfa2      	ittt	ge
 80a2990:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2994:	4329      	orrge	r1, r5
 80a2996:	bd30      	popge	{r4, r5, pc}
 80a2998:	ea6f 0404 	mvn.w	r4, r4
 80a299c:	3c1f      	subs	r4, #31
 80a299e:	da1c      	bge.n	80a29da <__adddf3+0x1d2>
 80a29a0:	340c      	adds	r4, #12
 80a29a2:	dc0e      	bgt.n	80a29c2 <__adddf3+0x1ba>
 80a29a4:	f104 0414 	add.w	r4, r4, #20
 80a29a8:	f1c4 0220 	rsb	r2, r4, #32
 80a29ac:	fa20 f004 	lsr.w	r0, r0, r4
 80a29b0:	fa01 f302 	lsl.w	r3, r1, r2
 80a29b4:	ea40 0003 	orr.w	r0, r0, r3
 80a29b8:	fa21 f304 	lsr.w	r3, r1, r4
 80a29bc:	ea45 0103 	orr.w	r1, r5, r3
 80a29c0:	bd30      	pop	{r4, r5, pc}
 80a29c2:	f1c4 040c 	rsb	r4, r4, #12
 80a29c6:	f1c4 0220 	rsb	r2, r4, #32
 80a29ca:	fa20 f002 	lsr.w	r0, r0, r2
 80a29ce:	fa01 f304 	lsl.w	r3, r1, r4
 80a29d2:	ea40 0003 	orr.w	r0, r0, r3
 80a29d6:	4629      	mov	r1, r5
 80a29d8:	bd30      	pop	{r4, r5, pc}
 80a29da:	fa21 f004 	lsr.w	r0, r1, r4
 80a29de:	4629      	mov	r1, r5
 80a29e0:	bd30      	pop	{r4, r5, pc}
 80a29e2:	f094 0f00 	teq	r4, #0
 80a29e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a29ea:	bf06      	itte	eq
 80a29ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a29f0:	3401      	addeq	r4, #1
 80a29f2:	3d01      	subne	r5, #1
 80a29f4:	e74e      	b.n	80a2894 <__adddf3+0x8c>
 80a29f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a29fa:	bf18      	it	ne
 80a29fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2a00:	d029      	beq.n	80a2a56 <__adddf3+0x24e>
 80a2a02:	ea94 0f05 	teq	r4, r5
 80a2a06:	bf08      	it	eq
 80a2a08:	ea90 0f02 	teqeq	r0, r2
 80a2a0c:	d005      	beq.n	80a2a1a <__adddf3+0x212>
 80a2a0e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2a12:	bf04      	itt	eq
 80a2a14:	4619      	moveq	r1, r3
 80a2a16:	4610      	moveq	r0, r2
 80a2a18:	bd30      	pop	{r4, r5, pc}
 80a2a1a:	ea91 0f03 	teq	r1, r3
 80a2a1e:	bf1e      	ittt	ne
 80a2a20:	2100      	movne	r1, #0
 80a2a22:	2000      	movne	r0, #0
 80a2a24:	bd30      	popne	{r4, r5, pc}
 80a2a26:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2a2a:	d105      	bne.n	80a2a38 <__adddf3+0x230>
 80a2a2c:	0040      	lsls	r0, r0, #1
 80a2a2e:	4149      	adcs	r1, r1
 80a2a30:	bf28      	it	cs
 80a2a32:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2a36:	bd30      	pop	{r4, r5, pc}
 80a2a38:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2a3c:	bf3c      	itt	cc
 80a2a3e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2a42:	bd30      	popcc	{r4, r5, pc}
 80a2a44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2a48:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2a4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2a50:	f04f 0000 	mov.w	r0, #0
 80a2a54:	bd30      	pop	{r4, r5, pc}
 80a2a56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2a5a:	bf1a      	itte	ne
 80a2a5c:	4619      	movne	r1, r3
 80a2a5e:	4610      	movne	r0, r2
 80a2a60:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2a64:	bf1c      	itt	ne
 80a2a66:	460b      	movne	r3, r1
 80a2a68:	4602      	movne	r2, r0
 80a2a6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2a6e:	bf06      	itte	eq
 80a2a70:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2a74:	ea91 0f03 	teqeq	r1, r3
 80a2a78:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2a7c:	bd30      	pop	{r4, r5, pc}
 80a2a7e:	bf00      	nop

080a2a80 <__aeabi_ui2d>:
 80a2a80:	f090 0f00 	teq	r0, #0
 80a2a84:	bf04      	itt	eq
 80a2a86:	2100      	moveq	r1, #0
 80a2a88:	4770      	bxeq	lr
 80a2a8a:	b530      	push	{r4, r5, lr}
 80a2a8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2a90:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2a94:	f04f 0500 	mov.w	r5, #0
 80a2a98:	f04f 0100 	mov.w	r1, #0
 80a2a9c:	e750      	b.n	80a2940 <__adddf3+0x138>
 80a2a9e:	bf00      	nop

080a2aa0 <__aeabi_i2d>:
 80a2aa0:	f090 0f00 	teq	r0, #0
 80a2aa4:	bf04      	itt	eq
 80a2aa6:	2100      	moveq	r1, #0
 80a2aa8:	4770      	bxeq	lr
 80a2aaa:	b530      	push	{r4, r5, lr}
 80a2aac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2ab0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2ab4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2ab8:	bf48      	it	mi
 80a2aba:	4240      	negmi	r0, r0
 80a2abc:	f04f 0100 	mov.w	r1, #0
 80a2ac0:	e73e      	b.n	80a2940 <__adddf3+0x138>
 80a2ac2:	bf00      	nop

080a2ac4 <__aeabi_f2d>:
 80a2ac4:	0042      	lsls	r2, r0, #1
 80a2ac6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2aca:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2ace:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2ad2:	bf1f      	itttt	ne
 80a2ad4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2ad8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2adc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2ae0:	4770      	bxne	lr
 80a2ae2:	f092 0f00 	teq	r2, #0
 80a2ae6:	bf14      	ite	ne
 80a2ae8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2aec:	4770      	bxeq	lr
 80a2aee:	b530      	push	{r4, r5, lr}
 80a2af0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2af4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2af8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2afc:	e720      	b.n	80a2940 <__adddf3+0x138>
 80a2afe:	bf00      	nop

080a2b00 <__aeabi_ul2d>:
 80a2b00:	ea50 0201 	orrs.w	r2, r0, r1
 80a2b04:	bf08      	it	eq
 80a2b06:	4770      	bxeq	lr
 80a2b08:	b530      	push	{r4, r5, lr}
 80a2b0a:	f04f 0500 	mov.w	r5, #0
 80a2b0e:	e00a      	b.n	80a2b26 <__aeabi_l2d+0x16>

080a2b10 <__aeabi_l2d>:
 80a2b10:	ea50 0201 	orrs.w	r2, r0, r1
 80a2b14:	bf08      	it	eq
 80a2b16:	4770      	bxeq	lr
 80a2b18:	b530      	push	{r4, r5, lr}
 80a2b1a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2b1e:	d502      	bpl.n	80a2b26 <__aeabi_l2d+0x16>
 80a2b20:	4240      	negs	r0, r0
 80a2b22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2b26:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2b2a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2b2e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2b32:	f43f aedc 	beq.w	80a28ee <__adddf3+0xe6>
 80a2b36:	f04f 0203 	mov.w	r2, #3
 80a2b3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2b3e:	bf18      	it	ne
 80a2b40:	3203      	addne	r2, #3
 80a2b42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2b46:	bf18      	it	ne
 80a2b48:	3203      	addne	r2, #3
 80a2b4a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2b4e:	f1c2 0320 	rsb	r3, r2, #32
 80a2b52:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2b56:	fa20 f002 	lsr.w	r0, r0, r2
 80a2b5a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2b5e:	ea40 000e 	orr.w	r0, r0, lr
 80a2b62:	fa21 f102 	lsr.w	r1, r1, r2
 80a2b66:	4414      	add	r4, r2
 80a2b68:	e6c1      	b.n	80a28ee <__adddf3+0xe6>
 80a2b6a:	bf00      	nop

080a2b6c <__aeabi_dmul>:
 80a2b6c:	b570      	push	{r4, r5, r6, lr}
 80a2b6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2b72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2b76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2b7a:	bf1d      	ittte	ne
 80a2b7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2b80:	ea94 0f0c 	teqne	r4, ip
 80a2b84:	ea95 0f0c 	teqne	r5, ip
 80a2b88:	f000 f8de 	bleq	80a2d48 <__aeabi_dmul+0x1dc>
 80a2b8c:	442c      	add	r4, r5
 80a2b8e:	ea81 0603 	eor.w	r6, r1, r3
 80a2b92:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2b96:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2b9a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2b9e:	bf18      	it	ne
 80a2ba0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2ba4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2ba8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2bac:	d038      	beq.n	80a2c20 <__aeabi_dmul+0xb4>
 80a2bae:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2bb2:	f04f 0500 	mov.w	r5, #0
 80a2bb6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2bba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2bbe:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2bc2:	f04f 0600 	mov.w	r6, #0
 80a2bc6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2bca:	f09c 0f00 	teq	ip, #0
 80a2bce:	bf18      	it	ne
 80a2bd0:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2bd4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2bd8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2bdc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2be0:	d204      	bcs.n	80a2bec <__aeabi_dmul+0x80>
 80a2be2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2be6:	416d      	adcs	r5, r5
 80a2be8:	eb46 0606 	adc.w	r6, r6, r6
 80a2bec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2bf0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2bf4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2bf8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2bfc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2c00:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2c04:	bf88      	it	hi
 80a2c06:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2c0a:	d81e      	bhi.n	80a2c4a <__aeabi_dmul+0xde>
 80a2c0c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2c10:	bf08      	it	eq
 80a2c12:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2c16:	f150 0000 	adcs.w	r0, r0, #0
 80a2c1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2c1e:	bd70      	pop	{r4, r5, r6, pc}
 80a2c20:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2c24:	ea46 0101 	orr.w	r1, r6, r1
 80a2c28:	ea40 0002 	orr.w	r0, r0, r2
 80a2c2c:	ea81 0103 	eor.w	r1, r1, r3
 80a2c30:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2c34:	bfc2      	ittt	gt
 80a2c36:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2c3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2c3e:	bd70      	popgt	{r4, r5, r6, pc}
 80a2c40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2c44:	f04f 0e00 	mov.w	lr, #0
 80a2c48:	3c01      	subs	r4, #1
 80a2c4a:	f300 80ab 	bgt.w	80a2da4 <__aeabi_dmul+0x238>
 80a2c4e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2c52:	bfde      	ittt	le
 80a2c54:	2000      	movle	r0, #0
 80a2c56:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2c5a:	bd70      	pople	{r4, r5, r6, pc}
 80a2c5c:	f1c4 0400 	rsb	r4, r4, #0
 80a2c60:	3c20      	subs	r4, #32
 80a2c62:	da35      	bge.n	80a2cd0 <__aeabi_dmul+0x164>
 80a2c64:	340c      	adds	r4, #12
 80a2c66:	dc1b      	bgt.n	80a2ca0 <__aeabi_dmul+0x134>
 80a2c68:	f104 0414 	add.w	r4, r4, #20
 80a2c6c:	f1c4 0520 	rsb	r5, r4, #32
 80a2c70:	fa00 f305 	lsl.w	r3, r0, r5
 80a2c74:	fa20 f004 	lsr.w	r0, r0, r4
 80a2c78:	fa01 f205 	lsl.w	r2, r1, r5
 80a2c7c:	ea40 0002 	orr.w	r0, r0, r2
 80a2c80:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2c84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2c88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2c8c:	fa21 f604 	lsr.w	r6, r1, r4
 80a2c90:	eb42 0106 	adc.w	r1, r2, r6
 80a2c94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2c98:	bf08      	it	eq
 80a2c9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2c9e:	bd70      	pop	{r4, r5, r6, pc}
 80a2ca0:	f1c4 040c 	rsb	r4, r4, #12
 80a2ca4:	f1c4 0520 	rsb	r5, r4, #32
 80a2ca8:	fa00 f304 	lsl.w	r3, r0, r4
 80a2cac:	fa20 f005 	lsr.w	r0, r0, r5
 80a2cb0:	fa01 f204 	lsl.w	r2, r1, r4
 80a2cb4:	ea40 0002 	orr.w	r0, r0, r2
 80a2cb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2cbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2cc0:	f141 0100 	adc.w	r1, r1, #0
 80a2cc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2cc8:	bf08      	it	eq
 80a2cca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2cce:	bd70      	pop	{r4, r5, r6, pc}
 80a2cd0:	f1c4 0520 	rsb	r5, r4, #32
 80a2cd4:	fa00 f205 	lsl.w	r2, r0, r5
 80a2cd8:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2cdc:	fa20 f304 	lsr.w	r3, r0, r4
 80a2ce0:	fa01 f205 	lsl.w	r2, r1, r5
 80a2ce4:	ea43 0302 	orr.w	r3, r3, r2
 80a2ce8:	fa21 f004 	lsr.w	r0, r1, r4
 80a2cec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2cf0:	fa21 f204 	lsr.w	r2, r1, r4
 80a2cf4:	ea20 0002 	bic.w	r0, r0, r2
 80a2cf8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2cfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2d00:	bf08      	it	eq
 80a2d02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2d06:	bd70      	pop	{r4, r5, r6, pc}
 80a2d08:	f094 0f00 	teq	r4, #0
 80a2d0c:	d10f      	bne.n	80a2d2e <__aeabi_dmul+0x1c2>
 80a2d0e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2d12:	0040      	lsls	r0, r0, #1
 80a2d14:	eb41 0101 	adc.w	r1, r1, r1
 80a2d18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2d1c:	bf08      	it	eq
 80a2d1e:	3c01      	subeq	r4, #1
 80a2d20:	d0f7      	beq.n	80a2d12 <__aeabi_dmul+0x1a6>
 80a2d22:	ea41 0106 	orr.w	r1, r1, r6
 80a2d26:	f095 0f00 	teq	r5, #0
 80a2d2a:	bf18      	it	ne
 80a2d2c:	4770      	bxne	lr
 80a2d2e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2d32:	0052      	lsls	r2, r2, #1
 80a2d34:	eb43 0303 	adc.w	r3, r3, r3
 80a2d38:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2d3c:	bf08      	it	eq
 80a2d3e:	3d01      	subeq	r5, #1
 80a2d40:	d0f7      	beq.n	80a2d32 <__aeabi_dmul+0x1c6>
 80a2d42:	ea43 0306 	orr.w	r3, r3, r6
 80a2d46:	4770      	bx	lr
 80a2d48:	ea94 0f0c 	teq	r4, ip
 80a2d4c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2d50:	bf18      	it	ne
 80a2d52:	ea95 0f0c 	teqne	r5, ip
 80a2d56:	d00c      	beq.n	80a2d72 <__aeabi_dmul+0x206>
 80a2d58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2d5c:	bf18      	it	ne
 80a2d5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2d62:	d1d1      	bne.n	80a2d08 <__aeabi_dmul+0x19c>
 80a2d64:	ea81 0103 	eor.w	r1, r1, r3
 80a2d68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2d6c:	f04f 0000 	mov.w	r0, #0
 80a2d70:	bd70      	pop	{r4, r5, r6, pc}
 80a2d72:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2d76:	bf06      	itte	eq
 80a2d78:	4610      	moveq	r0, r2
 80a2d7a:	4619      	moveq	r1, r3
 80a2d7c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2d80:	d019      	beq.n	80a2db6 <__aeabi_dmul+0x24a>
 80a2d82:	ea94 0f0c 	teq	r4, ip
 80a2d86:	d102      	bne.n	80a2d8e <__aeabi_dmul+0x222>
 80a2d88:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2d8c:	d113      	bne.n	80a2db6 <__aeabi_dmul+0x24a>
 80a2d8e:	ea95 0f0c 	teq	r5, ip
 80a2d92:	d105      	bne.n	80a2da0 <__aeabi_dmul+0x234>
 80a2d94:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2d98:	bf1c      	itt	ne
 80a2d9a:	4610      	movne	r0, r2
 80a2d9c:	4619      	movne	r1, r3
 80a2d9e:	d10a      	bne.n	80a2db6 <__aeabi_dmul+0x24a>
 80a2da0:	ea81 0103 	eor.w	r1, r1, r3
 80a2da4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2da8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2dac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2db0:	f04f 0000 	mov.w	r0, #0
 80a2db4:	bd70      	pop	{r4, r5, r6, pc}
 80a2db6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2dba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2dbe:	bd70      	pop	{r4, r5, r6, pc}

080a2dc0 <__aeabi_ddiv>:
 80a2dc0:	b570      	push	{r4, r5, r6, lr}
 80a2dc2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2dc6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2dca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2dce:	bf1d      	ittte	ne
 80a2dd0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2dd4:	ea94 0f0c 	teqne	r4, ip
 80a2dd8:	ea95 0f0c 	teqne	r5, ip
 80a2ddc:	f000 f8a7 	bleq	80a2f2e <__aeabi_ddiv+0x16e>
 80a2de0:	eba4 0405 	sub.w	r4, r4, r5
 80a2de4:	ea81 0e03 	eor.w	lr, r1, r3
 80a2de8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2dec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2df0:	f000 8088 	beq.w	80a2f04 <__aeabi_ddiv+0x144>
 80a2df4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2df8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2dfc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2e00:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2e04:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2e08:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2e0c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2e10:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2e14:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2e18:	429d      	cmp	r5, r3
 80a2e1a:	bf08      	it	eq
 80a2e1c:	4296      	cmpeq	r6, r2
 80a2e1e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2e22:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2e26:	d202      	bcs.n	80a2e2e <__aeabi_ddiv+0x6e>
 80a2e28:	085b      	lsrs	r3, r3, #1
 80a2e2a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e2e:	1ab6      	subs	r6, r6, r2
 80a2e30:	eb65 0503 	sbc.w	r5, r5, r3
 80a2e34:	085b      	lsrs	r3, r3, #1
 80a2e36:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2e3e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2e42:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e46:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e4a:	bf22      	ittt	cs
 80a2e4c:	1ab6      	subcs	r6, r6, r2
 80a2e4e:	4675      	movcs	r5, lr
 80a2e50:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2e54:	085b      	lsrs	r3, r3, #1
 80a2e56:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e5a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e5e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e62:	bf22      	ittt	cs
 80a2e64:	1ab6      	subcs	r6, r6, r2
 80a2e66:	4675      	movcs	r5, lr
 80a2e68:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2e6c:	085b      	lsrs	r3, r3, #1
 80a2e6e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e72:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e76:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e7a:	bf22      	ittt	cs
 80a2e7c:	1ab6      	subcs	r6, r6, r2
 80a2e7e:	4675      	movcs	r5, lr
 80a2e80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2e84:	085b      	lsrs	r3, r3, #1
 80a2e86:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e8a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e92:	bf22      	ittt	cs
 80a2e94:	1ab6      	subcs	r6, r6, r2
 80a2e96:	4675      	movcs	r5, lr
 80a2e98:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2e9c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2ea0:	d018      	beq.n	80a2ed4 <__aeabi_ddiv+0x114>
 80a2ea2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2ea6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2eaa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2eae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2eb2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2eb6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2eba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2ebe:	d1c0      	bne.n	80a2e42 <__aeabi_ddiv+0x82>
 80a2ec0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2ec4:	d10b      	bne.n	80a2ede <__aeabi_ddiv+0x11e>
 80a2ec6:	ea41 0100 	orr.w	r1, r1, r0
 80a2eca:	f04f 0000 	mov.w	r0, #0
 80a2ece:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2ed2:	e7b6      	b.n	80a2e42 <__aeabi_ddiv+0x82>
 80a2ed4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2ed8:	bf04      	itt	eq
 80a2eda:	4301      	orreq	r1, r0
 80a2edc:	2000      	moveq	r0, #0
 80a2ede:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2ee2:	bf88      	it	hi
 80a2ee4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2ee8:	f63f aeaf 	bhi.w	80a2c4a <__aeabi_dmul+0xde>
 80a2eec:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2ef0:	bf04      	itt	eq
 80a2ef2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2ef6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2efa:	f150 0000 	adcs.w	r0, r0, #0
 80a2efe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2f02:	bd70      	pop	{r4, r5, r6, pc}
 80a2f04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2f08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2f0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2f10:	bfc2      	ittt	gt
 80a2f12:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2f16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2f1a:	bd70      	popgt	{r4, r5, r6, pc}
 80a2f1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2f20:	f04f 0e00 	mov.w	lr, #0
 80a2f24:	3c01      	subs	r4, #1
 80a2f26:	e690      	b.n	80a2c4a <__aeabi_dmul+0xde>
 80a2f28:	ea45 0e06 	orr.w	lr, r5, r6
 80a2f2c:	e68d      	b.n	80a2c4a <__aeabi_dmul+0xde>
 80a2f2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2f32:	ea94 0f0c 	teq	r4, ip
 80a2f36:	bf08      	it	eq
 80a2f38:	ea95 0f0c 	teqeq	r5, ip
 80a2f3c:	f43f af3b 	beq.w	80a2db6 <__aeabi_dmul+0x24a>
 80a2f40:	ea94 0f0c 	teq	r4, ip
 80a2f44:	d10a      	bne.n	80a2f5c <__aeabi_ddiv+0x19c>
 80a2f46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2f4a:	f47f af34 	bne.w	80a2db6 <__aeabi_dmul+0x24a>
 80a2f4e:	ea95 0f0c 	teq	r5, ip
 80a2f52:	f47f af25 	bne.w	80a2da0 <__aeabi_dmul+0x234>
 80a2f56:	4610      	mov	r0, r2
 80a2f58:	4619      	mov	r1, r3
 80a2f5a:	e72c      	b.n	80a2db6 <__aeabi_dmul+0x24a>
 80a2f5c:	ea95 0f0c 	teq	r5, ip
 80a2f60:	d106      	bne.n	80a2f70 <__aeabi_ddiv+0x1b0>
 80a2f62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2f66:	f43f aefd 	beq.w	80a2d64 <__aeabi_dmul+0x1f8>
 80a2f6a:	4610      	mov	r0, r2
 80a2f6c:	4619      	mov	r1, r3
 80a2f6e:	e722      	b.n	80a2db6 <__aeabi_dmul+0x24a>
 80a2f70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2f74:	bf18      	it	ne
 80a2f76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2f7a:	f47f aec5 	bne.w	80a2d08 <__aeabi_dmul+0x19c>
 80a2f7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2f82:	f47f af0d 	bne.w	80a2da0 <__aeabi_dmul+0x234>
 80a2f86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2f8a:	f47f aeeb 	bne.w	80a2d64 <__aeabi_dmul+0x1f8>
 80a2f8e:	e712      	b.n	80a2db6 <__aeabi_dmul+0x24a>

080a2f90 <__gedf2>:
 80a2f90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2f94:	e006      	b.n	80a2fa4 <__cmpdf2+0x4>
 80a2f96:	bf00      	nop

080a2f98 <__ledf2>:
 80a2f98:	f04f 0c01 	mov.w	ip, #1
 80a2f9c:	e002      	b.n	80a2fa4 <__cmpdf2+0x4>
 80a2f9e:	bf00      	nop

080a2fa0 <__cmpdf2>:
 80a2fa0:	f04f 0c01 	mov.w	ip, #1
 80a2fa4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2fa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2fac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2fb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2fb4:	bf18      	it	ne
 80a2fb6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2fba:	d01b      	beq.n	80a2ff4 <__cmpdf2+0x54>
 80a2fbc:	b001      	add	sp, #4
 80a2fbe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2fc2:	bf0c      	ite	eq
 80a2fc4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2fc8:	ea91 0f03 	teqne	r1, r3
 80a2fcc:	bf02      	ittt	eq
 80a2fce:	ea90 0f02 	teqeq	r0, r2
 80a2fd2:	2000      	moveq	r0, #0
 80a2fd4:	4770      	bxeq	lr
 80a2fd6:	f110 0f00 	cmn.w	r0, #0
 80a2fda:	ea91 0f03 	teq	r1, r3
 80a2fde:	bf58      	it	pl
 80a2fe0:	4299      	cmppl	r1, r3
 80a2fe2:	bf08      	it	eq
 80a2fe4:	4290      	cmpeq	r0, r2
 80a2fe6:	bf2c      	ite	cs
 80a2fe8:	17d8      	asrcs	r0, r3, #31
 80a2fea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2fee:	f040 0001 	orr.w	r0, r0, #1
 80a2ff2:	4770      	bx	lr
 80a2ff4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2ff8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2ffc:	d102      	bne.n	80a3004 <__cmpdf2+0x64>
 80a2ffe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3002:	d107      	bne.n	80a3014 <__cmpdf2+0x74>
 80a3004:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3008:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a300c:	d1d6      	bne.n	80a2fbc <__cmpdf2+0x1c>
 80a300e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3012:	d0d3      	beq.n	80a2fbc <__cmpdf2+0x1c>
 80a3014:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3018:	4770      	bx	lr
 80a301a:	bf00      	nop

080a301c <__aeabi_cdrcmple>:
 80a301c:	4684      	mov	ip, r0
 80a301e:	4610      	mov	r0, r2
 80a3020:	4662      	mov	r2, ip
 80a3022:	468c      	mov	ip, r1
 80a3024:	4619      	mov	r1, r3
 80a3026:	4663      	mov	r3, ip
 80a3028:	e000      	b.n	80a302c <__aeabi_cdcmpeq>
 80a302a:	bf00      	nop

080a302c <__aeabi_cdcmpeq>:
 80a302c:	b501      	push	{r0, lr}
 80a302e:	f7ff ffb7 	bl	80a2fa0 <__cmpdf2>
 80a3032:	2800      	cmp	r0, #0
 80a3034:	bf48      	it	mi
 80a3036:	f110 0f00 	cmnmi.w	r0, #0
 80a303a:	bd01      	pop	{r0, pc}

080a303c <__aeabi_dcmpeq>:
 80a303c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3040:	f7ff fff4 	bl	80a302c <__aeabi_cdcmpeq>
 80a3044:	bf0c      	ite	eq
 80a3046:	2001      	moveq	r0, #1
 80a3048:	2000      	movne	r0, #0
 80a304a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a304e:	bf00      	nop

080a3050 <__aeabi_dcmplt>:
 80a3050:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3054:	f7ff ffea 	bl	80a302c <__aeabi_cdcmpeq>
 80a3058:	bf34      	ite	cc
 80a305a:	2001      	movcc	r0, #1
 80a305c:	2000      	movcs	r0, #0
 80a305e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3062:	bf00      	nop

080a3064 <__aeabi_dcmple>:
 80a3064:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3068:	f7ff ffe0 	bl	80a302c <__aeabi_cdcmpeq>
 80a306c:	bf94      	ite	ls
 80a306e:	2001      	movls	r0, #1
 80a3070:	2000      	movhi	r0, #0
 80a3072:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3076:	bf00      	nop

080a3078 <__aeabi_dcmpge>:
 80a3078:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a307c:	f7ff ffce 	bl	80a301c <__aeabi_cdrcmple>
 80a3080:	bf94      	ite	ls
 80a3082:	2001      	movls	r0, #1
 80a3084:	2000      	movhi	r0, #0
 80a3086:	f85d fb08 	ldr.w	pc, [sp], #8
 80a308a:	bf00      	nop

080a308c <__aeabi_dcmpgt>:
 80a308c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3090:	f7ff ffc4 	bl	80a301c <__aeabi_cdrcmple>
 80a3094:	bf34      	ite	cc
 80a3096:	2001      	movcc	r0, #1
 80a3098:	2000      	movcs	r0, #0
 80a309a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a309e:	bf00      	nop

080a30a0 <__aeabi_dcmpun>:
 80a30a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a30a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a30a8:	d102      	bne.n	80a30b0 <__aeabi_dcmpun+0x10>
 80a30aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a30ae:	d10a      	bne.n	80a30c6 <__aeabi_dcmpun+0x26>
 80a30b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a30b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a30b8:	d102      	bne.n	80a30c0 <__aeabi_dcmpun+0x20>
 80a30ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a30be:	d102      	bne.n	80a30c6 <__aeabi_dcmpun+0x26>
 80a30c0:	f04f 0000 	mov.w	r0, #0
 80a30c4:	4770      	bx	lr
 80a30c6:	f04f 0001 	mov.w	r0, #1
 80a30ca:	4770      	bx	lr

080a30cc <__aeabi_d2iz>:
 80a30cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a30d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a30d4:	d215      	bcs.n	80a3102 <__aeabi_d2iz+0x36>
 80a30d6:	d511      	bpl.n	80a30fc <__aeabi_d2iz+0x30>
 80a30d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a30dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a30e0:	d912      	bls.n	80a3108 <__aeabi_d2iz+0x3c>
 80a30e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a30e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a30ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a30ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a30f2:	fa23 f002 	lsr.w	r0, r3, r2
 80a30f6:	bf18      	it	ne
 80a30f8:	4240      	negne	r0, r0
 80a30fa:	4770      	bx	lr
 80a30fc:	f04f 0000 	mov.w	r0, #0
 80a3100:	4770      	bx	lr
 80a3102:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3106:	d105      	bne.n	80a3114 <__aeabi_d2iz+0x48>
 80a3108:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a310c:	bf08      	it	eq
 80a310e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3112:	4770      	bx	lr
 80a3114:	f04f 0000 	mov.w	r0, #0
 80a3118:	4770      	bx	lr
 80a311a:	bf00      	nop

080a311c <__aeabi_d2uiz>:
 80a311c:	004a      	lsls	r2, r1, #1
 80a311e:	d211      	bcs.n	80a3144 <__aeabi_d2uiz+0x28>
 80a3120:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3124:	d211      	bcs.n	80a314a <__aeabi_d2uiz+0x2e>
 80a3126:	d50d      	bpl.n	80a3144 <__aeabi_d2uiz+0x28>
 80a3128:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a312c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3130:	d40e      	bmi.n	80a3150 <__aeabi_d2uiz+0x34>
 80a3132:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3136:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a313a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a313e:	fa23 f002 	lsr.w	r0, r3, r2
 80a3142:	4770      	bx	lr
 80a3144:	f04f 0000 	mov.w	r0, #0
 80a3148:	4770      	bx	lr
 80a314a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a314e:	d102      	bne.n	80a3156 <__aeabi_d2uiz+0x3a>
 80a3150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3154:	4770      	bx	lr
 80a3156:	f04f 0000 	mov.w	r0, #0
 80a315a:	4770      	bx	lr

080a315c <__aeabi_frsub>:
 80a315c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3160:	e002      	b.n	80a3168 <__addsf3>
 80a3162:	bf00      	nop

080a3164 <__aeabi_fsub>:
 80a3164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3168 <__addsf3>:
 80a3168:	0042      	lsls	r2, r0, #1
 80a316a:	bf1f      	itttt	ne
 80a316c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3170:	ea92 0f03 	teqne	r2, r3
 80a3174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a317c:	d06a      	beq.n	80a3254 <__addsf3+0xec>
 80a317e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3186:	bfc1      	itttt	gt
 80a3188:	18d2      	addgt	r2, r2, r3
 80a318a:	4041      	eorgt	r1, r0
 80a318c:	4048      	eorgt	r0, r1
 80a318e:	4041      	eorgt	r1, r0
 80a3190:	bfb8      	it	lt
 80a3192:	425b      	neglt	r3, r3
 80a3194:	2b19      	cmp	r3, #25
 80a3196:	bf88      	it	hi
 80a3198:	4770      	bxhi	lr
 80a319a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a319e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a31a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a31a6:	bf18      	it	ne
 80a31a8:	4240      	negne	r0, r0
 80a31aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a31ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a31b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a31b6:	bf18      	it	ne
 80a31b8:	4249      	negne	r1, r1
 80a31ba:	ea92 0f03 	teq	r2, r3
 80a31be:	d03f      	beq.n	80a3240 <__addsf3+0xd8>
 80a31c0:	f1a2 0201 	sub.w	r2, r2, #1
 80a31c4:	fa41 fc03 	asr.w	ip, r1, r3
 80a31c8:	eb10 000c 	adds.w	r0, r0, ip
 80a31cc:	f1c3 0320 	rsb	r3, r3, #32
 80a31d0:	fa01 f103 	lsl.w	r1, r1, r3
 80a31d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a31d8:	d502      	bpl.n	80a31e0 <__addsf3+0x78>
 80a31da:	4249      	negs	r1, r1
 80a31dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a31e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a31e4:	d313      	bcc.n	80a320e <__addsf3+0xa6>
 80a31e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a31ea:	d306      	bcc.n	80a31fa <__addsf3+0x92>
 80a31ec:	0840      	lsrs	r0, r0, #1
 80a31ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80a31f2:	f102 0201 	add.w	r2, r2, #1
 80a31f6:	2afe      	cmp	r2, #254	; 0xfe
 80a31f8:	d251      	bcs.n	80a329e <__addsf3+0x136>
 80a31fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a31fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3202:	bf08      	it	eq
 80a3204:	f020 0001 	biceq.w	r0, r0, #1
 80a3208:	ea40 0003 	orr.w	r0, r0, r3
 80a320c:	4770      	bx	lr
 80a320e:	0049      	lsls	r1, r1, #1
 80a3210:	eb40 0000 	adc.w	r0, r0, r0
 80a3214:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a3218:	f1a2 0201 	sub.w	r2, r2, #1
 80a321c:	d1ed      	bne.n	80a31fa <__addsf3+0x92>
 80a321e:	fab0 fc80 	clz	ip, r0
 80a3222:	f1ac 0c08 	sub.w	ip, ip, #8
 80a3226:	ebb2 020c 	subs.w	r2, r2, ip
 80a322a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a322e:	bfaa      	itet	ge
 80a3230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a3234:	4252      	neglt	r2, r2
 80a3236:	4318      	orrge	r0, r3
 80a3238:	bfbc      	itt	lt
 80a323a:	40d0      	lsrlt	r0, r2
 80a323c:	4318      	orrlt	r0, r3
 80a323e:	4770      	bx	lr
 80a3240:	f092 0f00 	teq	r2, #0
 80a3244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3248:	bf06      	itte	eq
 80a324a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a324e:	3201      	addeq	r2, #1
 80a3250:	3b01      	subne	r3, #1
 80a3252:	e7b5      	b.n	80a31c0 <__addsf3+0x58>
 80a3254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a325c:	bf18      	it	ne
 80a325e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3262:	d021      	beq.n	80a32a8 <__addsf3+0x140>
 80a3264:	ea92 0f03 	teq	r2, r3
 80a3268:	d004      	beq.n	80a3274 <__addsf3+0x10c>
 80a326a:	f092 0f00 	teq	r2, #0
 80a326e:	bf08      	it	eq
 80a3270:	4608      	moveq	r0, r1
 80a3272:	4770      	bx	lr
 80a3274:	ea90 0f01 	teq	r0, r1
 80a3278:	bf1c      	itt	ne
 80a327a:	2000      	movne	r0, #0
 80a327c:	4770      	bxne	lr
 80a327e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3282:	d104      	bne.n	80a328e <__addsf3+0x126>
 80a3284:	0040      	lsls	r0, r0, #1
 80a3286:	bf28      	it	cs
 80a3288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a328c:	4770      	bx	lr
 80a328e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3292:	bf3c      	itt	cc
 80a3294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3298:	4770      	bxcc	lr
 80a329a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a329e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a32a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a32a6:	4770      	bx	lr
 80a32a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a32ac:	bf16      	itet	ne
 80a32ae:	4608      	movne	r0, r1
 80a32b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a32b4:	4601      	movne	r1, r0
 80a32b6:	0242      	lsls	r2, r0, #9
 80a32b8:	bf06      	itte	eq
 80a32ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a32be:	ea90 0f01 	teqeq	r0, r1
 80a32c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a32c6:	4770      	bx	lr

080a32c8 <__aeabi_ui2f>:
 80a32c8:	f04f 0300 	mov.w	r3, #0
 80a32cc:	e004      	b.n	80a32d8 <__aeabi_i2f+0x8>
 80a32ce:	bf00      	nop

080a32d0 <__aeabi_i2f>:
 80a32d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a32d4:	bf48      	it	mi
 80a32d6:	4240      	negmi	r0, r0
 80a32d8:	ea5f 0c00 	movs.w	ip, r0
 80a32dc:	bf08      	it	eq
 80a32de:	4770      	bxeq	lr
 80a32e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a32e4:	4601      	mov	r1, r0
 80a32e6:	f04f 0000 	mov.w	r0, #0
 80a32ea:	e01c      	b.n	80a3326 <__aeabi_l2f+0x2a>

080a32ec <__aeabi_ul2f>:
 80a32ec:	ea50 0201 	orrs.w	r2, r0, r1
 80a32f0:	bf08      	it	eq
 80a32f2:	4770      	bxeq	lr
 80a32f4:	f04f 0300 	mov.w	r3, #0
 80a32f8:	e00a      	b.n	80a3310 <__aeabi_l2f+0x14>
 80a32fa:	bf00      	nop

080a32fc <__aeabi_l2f>:
 80a32fc:	ea50 0201 	orrs.w	r2, r0, r1
 80a3300:	bf08      	it	eq
 80a3302:	4770      	bxeq	lr
 80a3304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3308:	d502      	bpl.n	80a3310 <__aeabi_l2f+0x14>
 80a330a:	4240      	negs	r0, r0
 80a330c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3310:	ea5f 0c01 	movs.w	ip, r1
 80a3314:	bf02      	ittt	eq
 80a3316:	4684      	moveq	ip, r0
 80a3318:	4601      	moveq	r1, r0
 80a331a:	2000      	moveq	r0, #0
 80a331c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3320:	bf08      	it	eq
 80a3322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a3326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a332a:	fabc f28c 	clz	r2, ip
 80a332e:	3a08      	subs	r2, #8
 80a3330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a3334:	db10      	blt.n	80a3358 <__aeabi_l2f+0x5c>
 80a3336:	fa01 fc02 	lsl.w	ip, r1, r2
 80a333a:	4463      	add	r3, ip
 80a333c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3340:	f1c2 0220 	rsb	r2, r2, #32
 80a3344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3348:	fa20 f202 	lsr.w	r2, r0, r2
 80a334c:	eb43 0002 	adc.w	r0, r3, r2
 80a3350:	bf08      	it	eq
 80a3352:	f020 0001 	biceq.w	r0, r0, #1
 80a3356:	4770      	bx	lr
 80a3358:	f102 0220 	add.w	r2, r2, #32
 80a335c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3360:	f1c2 0220 	rsb	r2, r2, #32
 80a3364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3368:	fa21 f202 	lsr.w	r2, r1, r2
 80a336c:	eb43 0002 	adc.w	r0, r3, r2
 80a3370:	bf08      	it	eq
 80a3372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3376:	4770      	bx	lr

080a3378 <__aeabi_fmul>:
 80a3378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a337c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3380:	bf1e      	ittt	ne
 80a3382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3386:	ea92 0f0c 	teqne	r2, ip
 80a338a:	ea93 0f0c 	teqne	r3, ip
 80a338e:	d06f      	beq.n	80a3470 <__aeabi_fmul+0xf8>
 80a3390:	441a      	add	r2, r3
 80a3392:	ea80 0c01 	eor.w	ip, r0, r1
 80a3396:	0240      	lsls	r0, r0, #9
 80a3398:	bf18      	it	ne
 80a339a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a339e:	d01e      	beq.n	80a33de <__aeabi_fmul+0x66>
 80a33a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a33a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a33a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a33ac:	fba0 3101 	umull	r3, r1, r0, r1
 80a33b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a33b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a33b8:	bf3e      	ittt	cc
 80a33ba:	0049      	lslcc	r1, r1, #1
 80a33bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a33c0:	005b      	lslcc	r3, r3, #1
 80a33c2:	ea40 0001 	orr.w	r0, r0, r1
 80a33c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a33ca:	2afd      	cmp	r2, #253	; 0xfd
 80a33cc:	d81d      	bhi.n	80a340a <__aeabi_fmul+0x92>
 80a33ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a33d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a33d6:	bf08      	it	eq
 80a33d8:	f020 0001 	biceq.w	r0, r0, #1
 80a33dc:	4770      	bx	lr
 80a33de:	f090 0f00 	teq	r0, #0
 80a33e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a33e6:	bf08      	it	eq
 80a33e8:	0249      	lsleq	r1, r1, #9
 80a33ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a33ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a33f2:	3a7f      	subs	r2, #127	; 0x7f
 80a33f4:	bfc2      	ittt	gt
 80a33f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a33fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a33fe:	4770      	bxgt	lr
 80a3400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3404:	f04f 0300 	mov.w	r3, #0
 80a3408:	3a01      	subs	r2, #1
 80a340a:	dc5d      	bgt.n	80a34c8 <__aeabi_fmul+0x150>
 80a340c:	f112 0f19 	cmn.w	r2, #25
 80a3410:	bfdc      	itt	le
 80a3412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a3416:	4770      	bxle	lr
 80a3418:	f1c2 0200 	rsb	r2, r2, #0
 80a341c:	0041      	lsls	r1, r0, #1
 80a341e:	fa21 f102 	lsr.w	r1, r1, r2
 80a3422:	f1c2 0220 	rsb	r2, r2, #32
 80a3426:	fa00 fc02 	lsl.w	ip, r0, r2
 80a342a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a342e:	f140 0000 	adc.w	r0, r0, #0
 80a3432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a3436:	bf08      	it	eq
 80a3438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a343c:	4770      	bx	lr
 80a343e:	f092 0f00 	teq	r2, #0
 80a3442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3446:	bf02      	ittt	eq
 80a3448:	0040      	lsleq	r0, r0, #1
 80a344a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a344e:	3a01      	subeq	r2, #1
 80a3450:	d0f9      	beq.n	80a3446 <__aeabi_fmul+0xce>
 80a3452:	ea40 000c 	orr.w	r0, r0, ip
 80a3456:	f093 0f00 	teq	r3, #0
 80a345a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a345e:	bf02      	ittt	eq
 80a3460:	0049      	lsleq	r1, r1, #1
 80a3462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3466:	3b01      	subeq	r3, #1
 80a3468:	d0f9      	beq.n	80a345e <__aeabi_fmul+0xe6>
 80a346a:	ea41 010c 	orr.w	r1, r1, ip
 80a346e:	e78f      	b.n	80a3390 <__aeabi_fmul+0x18>
 80a3470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3474:	ea92 0f0c 	teq	r2, ip
 80a3478:	bf18      	it	ne
 80a347a:	ea93 0f0c 	teqne	r3, ip
 80a347e:	d00a      	beq.n	80a3496 <__aeabi_fmul+0x11e>
 80a3480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3484:	bf18      	it	ne
 80a3486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a348a:	d1d8      	bne.n	80a343e <__aeabi_fmul+0xc6>
 80a348c:	ea80 0001 	eor.w	r0, r0, r1
 80a3490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3494:	4770      	bx	lr
 80a3496:	f090 0f00 	teq	r0, #0
 80a349a:	bf17      	itett	ne
 80a349c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a34a0:	4608      	moveq	r0, r1
 80a34a2:	f091 0f00 	teqne	r1, #0
 80a34a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a34aa:	d014      	beq.n	80a34d6 <__aeabi_fmul+0x15e>
 80a34ac:	ea92 0f0c 	teq	r2, ip
 80a34b0:	d101      	bne.n	80a34b6 <__aeabi_fmul+0x13e>
 80a34b2:	0242      	lsls	r2, r0, #9
 80a34b4:	d10f      	bne.n	80a34d6 <__aeabi_fmul+0x15e>
 80a34b6:	ea93 0f0c 	teq	r3, ip
 80a34ba:	d103      	bne.n	80a34c4 <__aeabi_fmul+0x14c>
 80a34bc:	024b      	lsls	r3, r1, #9
 80a34be:	bf18      	it	ne
 80a34c0:	4608      	movne	r0, r1
 80a34c2:	d108      	bne.n	80a34d6 <__aeabi_fmul+0x15e>
 80a34c4:	ea80 0001 	eor.w	r0, r0, r1
 80a34c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a34cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a34d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a34d4:	4770      	bx	lr
 80a34d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a34da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a34de:	4770      	bx	lr

080a34e0 <__aeabi_fdiv>:
 80a34e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a34e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a34e8:	bf1e      	ittt	ne
 80a34ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a34ee:	ea92 0f0c 	teqne	r2, ip
 80a34f2:	ea93 0f0c 	teqne	r3, ip
 80a34f6:	d069      	beq.n	80a35cc <__aeabi_fdiv+0xec>
 80a34f8:	eba2 0203 	sub.w	r2, r2, r3
 80a34fc:	ea80 0c01 	eor.w	ip, r0, r1
 80a3500:	0249      	lsls	r1, r1, #9
 80a3502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a3506:	d037      	beq.n	80a3578 <__aeabi_fdiv+0x98>
 80a3508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a350c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a3514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3518:	428b      	cmp	r3, r1
 80a351a:	bf38      	it	cc
 80a351c:	005b      	lslcc	r3, r3, #1
 80a351e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a3522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a3526:	428b      	cmp	r3, r1
 80a3528:	bf24      	itt	cs
 80a352a:	1a5b      	subcs	r3, r3, r1
 80a352c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a3534:	bf24      	itt	cs
 80a3536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a353a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a353e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a3542:	bf24      	itt	cs
 80a3544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a354c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3550:	bf24      	itt	cs
 80a3552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a3556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a355a:	011b      	lsls	r3, r3, #4
 80a355c:	bf18      	it	ne
 80a355e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a3562:	d1e0      	bne.n	80a3526 <__aeabi_fdiv+0x46>
 80a3564:	2afd      	cmp	r2, #253	; 0xfd
 80a3566:	f63f af50 	bhi.w	80a340a <__aeabi_fmul+0x92>
 80a356a:	428b      	cmp	r3, r1
 80a356c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3570:	bf08      	it	eq
 80a3572:	f020 0001 	biceq.w	r0, r0, #1
 80a3576:	4770      	bx	lr
 80a3578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a357c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3580:	327f      	adds	r2, #127	; 0x7f
 80a3582:	bfc2      	ittt	gt
 80a3584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a358c:	4770      	bxgt	lr
 80a358e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3592:	f04f 0300 	mov.w	r3, #0
 80a3596:	3a01      	subs	r2, #1
 80a3598:	e737      	b.n	80a340a <__aeabi_fmul+0x92>
 80a359a:	f092 0f00 	teq	r2, #0
 80a359e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a35a2:	bf02      	ittt	eq
 80a35a4:	0040      	lsleq	r0, r0, #1
 80a35a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a35aa:	3a01      	subeq	r2, #1
 80a35ac:	d0f9      	beq.n	80a35a2 <__aeabi_fdiv+0xc2>
 80a35ae:	ea40 000c 	orr.w	r0, r0, ip
 80a35b2:	f093 0f00 	teq	r3, #0
 80a35b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a35ba:	bf02      	ittt	eq
 80a35bc:	0049      	lsleq	r1, r1, #1
 80a35be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a35c2:	3b01      	subeq	r3, #1
 80a35c4:	d0f9      	beq.n	80a35ba <__aeabi_fdiv+0xda>
 80a35c6:	ea41 010c 	orr.w	r1, r1, ip
 80a35ca:	e795      	b.n	80a34f8 <__aeabi_fdiv+0x18>
 80a35cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a35d0:	ea92 0f0c 	teq	r2, ip
 80a35d4:	d108      	bne.n	80a35e8 <__aeabi_fdiv+0x108>
 80a35d6:	0242      	lsls	r2, r0, #9
 80a35d8:	f47f af7d 	bne.w	80a34d6 <__aeabi_fmul+0x15e>
 80a35dc:	ea93 0f0c 	teq	r3, ip
 80a35e0:	f47f af70 	bne.w	80a34c4 <__aeabi_fmul+0x14c>
 80a35e4:	4608      	mov	r0, r1
 80a35e6:	e776      	b.n	80a34d6 <__aeabi_fmul+0x15e>
 80a35e8:	ea93 0f0c 	teq	r3, ip
 80a35ec:	d104      	bne.n	80a35f8 <__aeabi_fdiv+0x118>
 80a35ee:	024b      	lsls	r3, r1, #9
 80a35f0:	f43f af4c 	beq.w	80a348c <__aeabi_fmul+0x114>
 80a35f4:	4608      	mov	r0, r1
 80a35f6:	e76e      	b.n	80a34d6 <__aeabi_fmul+0x15e>
 80a35f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a35fc:	bf18      	it	ne
 80a35fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3602:	d1ca      	bne.n	80a359a <__aeabi_fdiv+0xba>
 80a3604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3608:	f47f af5c 	bne.w	80a34c4 <__aeabi_fmul+0x14c>
 80a360c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3610:	f47f af3c 	bne.w	80a348c <__aeabi_fmul+0x114>
 80a3614:	e75f      	b.n	80a34d6 <__aeabi_fmul+0x15e>
 80a3616:	bf00      	nop

080a3618 <__aeabi_ldivmod>:
 80a3618:	b97b      	cbnz	r3, 80a363a <__aeabi_ldivmod+0x22>
 80a361a:	b972      	cbnz	r2, 80a363a <__aeabi_ldivmod+0x22>
 80a361c:	2900      	cmp	r1, #0
 80a361e:	bfbe      	ittt	lt
 80a3620:	2000      	movlt	r0, #0
 80a3622:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a3626:	e006      	blt.n	80a3636 <__aeabi_ldivmod+0x1e>
 80a3628:	bf08      	it	eq
 80a362a:	2800      	cmpeq	r0, #0
 80a362c:	bf1c      	itt	ne
 80a362e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a3632:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80a3636:	f000 b9b5 	b.w	80a39a4 <__aeabi_idiv0>
 80a363a:	f1ad 0c08 	sub.w	ip, sp, #8
 80a363e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a3642:	2900      	cmp	r1, #0
 80a3644:	db09      	blt.n	80a365a <__aeabi_ldivmod+0x42>
 80a3646:	2b00      	cmp	r3, #0
 80a3648:	db1a      	blt.n	80a3680 <__aeabi_ldivmod+0x68>
 80a364a:	f000 f835 	bl	80a36b8 <__udivmoddi4>
 80a364e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a3652:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3656:	b004      	add	sp, #16
 80a3658:	4770      	bx	lr
 80a365a:	4240      	negs	r0, r0
 80a365c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3660:	2b00      	cmp	r3, #0
 80a3662:	db1b      	blt.n	80a369c <__aeabi_ldivmod+0x84>
 80a3664:	f000 f828 	bl	80a36b8 <__udivmoddi4>
 80a3668:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a366c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3670:	b004      	add	sp, #16
 80a3672:	4240      	negs	r0, r0
 80a3674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3678:	4252      	negs	r2, r2
 80a367a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a367e:	4770      	bx	lr
 80a3680:	4252      	negs	r2, r2
 80a3682:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3686:	f000 f817 	bl	80a36b8 <__udivmoddi4>
 80a368a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a368e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3692:	b004      	add	sp, #16
 80a3694:	4240      	negs	r0, r0
 80a3696:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a369a:	4770      	bx	lr
 80a369c:	4252      	negs	r2, r2
 80a369e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a36a2:	f000 f809 	bl	80a36b8 <__udivmoddi4>
 80a36a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a36aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a36ae:	b004      	add	sp, #16
 80a36b0:	4252      	negs	r2, r2
 80a36b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a36b6:	4770      	bx	lr

080a36b8 <__udivmoddi4>:
 80a36b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a36bc:	468c      	mov	ip, r1
 80a36be:	460c      	mov	r4, r1
 80a36c0:	4605      	mov	r5, r0
 80a36c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a36c4:	2b00      	cmp	r3, #0
 80a36c6:	d14f      	bne.n	80a3768 <__udivmoddi4+0xb0>
 80a36c8:	428a      	cmp	r2, r1
 80a36ca:	4617      	mov	r7, r2
 80a36cc:	d96b      	bls.n	80a37a6 <__udivmoddi4+0xee>
 80a36ce:	fab2 fe82 	clz	lr, r2
 80a36d2:	f1be 0f00 	cmp.w	lr, #0
 80a36d6:	d00b      	beq.n	80a36f0 <__udivmoddi4+0x38>
 80a36d8:	f1ce 0520 	rsb	r5, lr, #32
 80a36dc:	fa20 f505 	lsr.w	r5, r0, r5
 80a36e0:	fa01 f30e 	lsl.w	r3, r1, lr
 80a36e4:	ea45 0c03 	orr.w	ip, r5, r3
 80a36e8:	fa02 f70e 	lsl.w	r7, r2, lr
 80a36ec:	fa00 f50e 	lsl.w	r5, r0, lr
 80a36f0:	0c39      	lsrs	r1, r7, #16
 80a36f2:	fbbc f0f1 	udiv	r0, ip, r1
 80a36f6:	b2ba      	uxth	r2, r7
 80a36f8:	fb01 c310 	mls	r3, r1, r0, ip
 80a36fc:	fb00 f802 	mul.w	r8, r0, r2
 80a3700:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a3704:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a3708:	45a0      	cmp	r8, r4
 80a370a:	d909      	bls.n	80a3720 <__udivmoddi4+0x68>
 80a370c:	19e4      	adds	r4, r4, r7
 80a370e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a3712:	f080 8128 	bcs.w	80a3966 <__udivmoddi4+0x2ae>
 80a3716:	45a0      	cmp	r8, r4
 80a3718:	f240 8125 	bls.w	80a3966 <__udivmoddi4+0x2ae>
 80a371c:	3802      	subs	r0, #2
 80a371e:	443c      	add	r4, r7
 80a3720:	ebc8 0404 	rsb	r4, r8, r4
 80a3724:	fbb4 f3f1 	udiv	r3, r4, r1
 80a3728:	fb01 4c13 	mls	ip, r1, r3, r4
 80a372c:	fb03 f202 	mul.w	r2, r3, r2
 80a3730:	b2ac      	uxth	r4, r5
 80a3732:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a3736:	428a      	cmp	r2, r1
 80a3738:	d909      	bls.n	80a374e <__udivmoddi4+0x96>
 80a373a:	19c9      	adds	r1, r1, r7
 80a373c:	f103 34ff 	add.w	r4, r3, #4294967295	; 0xffffffff
 80a3740:	f080 810f 	bcs.w	80a3962 <__udivmoddi4+0x2aa>
 80a3744:	428a      	cmp	r2, r1
 80a3746:	f240 810c 	bls.w	80a3962 <__udivmoddi4+0x2aa>
 80a374a:	3b02      	subs	r3, #2
 80a374c:	4439      	add	r1, r7
 80a374e:	1a8a      	subs	r2, r1, r2
 80a3750:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a3754:	2100      	movs	r1, #0
 80a3756:	2e00      	cmp	r6, #0
 80a3758:	d063      	beq.n	80a3822 <__udivmoddi4+0x16a>
 80a375a:	fa22 f20e 	lsr.w	r2, r2, lr
 80a375e:	2300      	movs	r3, #0
 80a3760:	e886 000c 	stmia.w	r6, {r2, r3}
 80a3764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3768:	428b      	cmp	r3, r1
 80a376a:	d907      	bls.n	80a377c <__udivmoddi4+0xc4>
 80a376c:	2e00      	cmp	r6, #0
 80a376e:	d056      	beq.n	80a381e <__udivmoddi4+0x166>
 80a3770:	2100      	movs	r1, #0
 80a3772:	e886 0011 	stmia.w	r6, {r0, r4}
 80a3776:	4608      	mov	r0, r1
 80a3778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a377c:	fab3 f183 	clz	r1, r3
 80a3780:	2900      	cmp	r1, #0
 80a3782:	f040 8093 	bne.w	80a38ac <__udivmoddi4+0x1f4>
 80a3786:	42a3      	cmp	r3, r4
 80a3788:	d302      	bcc.n	80a3790 <__udivmoddi4+0xd8>
 80a378a:	4282      	cmp	r2, r0
 80a378c:	f200 80fe 	bhi.w	80a398c <__udivmoddi4+0x2d4>
 80a3790:	1a85      	subs	r5, r0, r2
 80a3792:	eb64 0303 	sbc.w	r3, r4, r3
 80a3796:	469c      	mov	ip, r3
 80a3798:	2001      	movs	r0, #1
 80a379a:	2e00      	cmp	r6, #0
 80a379c:	d041      	beq.n	80a3822 <__udivmoddi4+0x16a>
 80a379e:	e886 1020 	stmia.w	r6, {r5, ip}
 80a37a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a37a6:	b912      	cbnz	r2, 80a37ae <__udivmoddi4+0xf6>
 80a37a8:	2701      	movs	r7, #1
 80a37aa:	fbb7 f7f2 	udiv	r7, r7, r2
 80a37ae:	fab7 fe87 	clz	lr, r7
 80a37b2:	f1be 0f00 	cmp.w	lr, #0
 80a37b6:	d136      	bne.n	80a3826 <__udivmoddi4+0x16e>
 80a37b8:	1be4      	subs	r4, r4, r7
 80a37ba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a37be:	fa1f f987 	uxth.w	r9, r7
 80a37c2:	2101      	movs	r1, #1
 80a37c4:	fbb4 f3f8 	udiv	r3, r4, r8
 80a37c8:	fb08 4413 	mls	r4, r8, r3, r4
 80a37cc:	fb09 f203 	mul.w	r2, r9, r3
 80a37d0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a37d4:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a37d8:	42a2      	cmp	r2, r4
 80a37da:	d907      	bls.n	80a37ec <__udivmoddi4+0x134>
 80a37dc:	19e4      	adds	r4, r4, r7
 80a37de:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80a37e2:	d202      	bcs.n	80a37ea <__udivmoddi4+0x132>
 80a37e4:	42a2      	cmp	r2, r4
 80a37e6:	f200 80d3 	bhi.w	80a3990 <__udivmoddi4+0x2d8>
 80a37ea:	4603      	mov	r3, r0
 80a37ec:	1aa4      	subs	r4, r4, r2
 80a37ee:	fbb4 f0f8 	udiv	r0, r4, r8
 80a37f2:	fb08 4810 	mls	r8, r8, r0, r4
 80a37f6:	fb09 f900 	mul.w	r9, r9, r0
 80a37fa:	b2ac      	uxth	r4, r5
 80a37fc:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a3800:	4591      	cmp	r9, r2
 80a3802:	d907      	bls.n	80a3814 <__udivmoddi4+0x15c>
 80a3804:	19d2      	adds	r2, r2, r7
 80a3806:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80a380a:	d202      	bcs.n	80a3812 <__udivmoddi4+0x15a>
 80a380c:	4591      	cmp	r9, r2
 80a380e:	f200 80ba 	bhi.w	80a3986 <__udivmoddi4+0x2ce>
 80a3812:	4620      	mov	r0, r4
 80a3814:	ebc9 0202 	rsb	r2, r9, r2
 80a3818:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a381c:	e79b      	b.n	80a3756 <__udivmoddi4+0x9e>
 80a381e:	4631      	mov	r1, r6
 80a3820:	4630      	mov	r0, r6
 80a3822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3826:	fa07 f70e 	lsl.w	r7, r7, lr
 80a382a:	f1ce 0c20 	rsb	ip, lr, #32
 80a382e:	fa24 f30c 	lsr.w	r3, r4, ip
 80a3832:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a3836:	fbb3 faf8 	udiv	sl, r3, r8
 80a383a:	fa1f f987 	uxth.w	r9, r7
 80a383e:	fb08 351a 	mls	r5, r8, sl, r3
 80a3842:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3846:	fa04 f40e 	lsl.w	r4, r4, lr
 80a384a:	fb0a fb09 	mul.w	fp, sl, r9
 80a384e:	ea4c 0c04 	orr.w	ip, ip, r4
 80a3852:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a3856:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a385a:	459b      	cmp	fp, r3
 80a385c:	fa00 f50e 	lsl.w	r5, r0, lr
 80a3860:	d90a      	bls.n	80a3878 <__udivmoddi4+0x1c0>
 80a3862:	19db      	adds	r3, r3, r7
 80a3864:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a3868:	f080 808b 	bcs.w	80a3982 <__udivmoddi4+0x2ca>
 80a386c:	459b      	cmp	fp, r3
 80a386e:	f240 8088 	bls.w	80a3982 <__udivmoddi4+0x2ca>
 80a3872:	f1aa 0a02 	sub.w	sl, sl, #2
 80a3876:	443b      	add	r3, r7
 80a3878:	ebcb 0303 	rsb	r3, fp, r3
 80a387c:	fbb3 f0f8 	udiv	r0, r3, r8
 80a3880:	fb08 3310 	mls	r3, r8, r0, r3
 80a3884:	fb00 f409 	mul.w	r4, r0, r9
 80a3888:	fa1f fc8c 	uxth.w	ip, ip
 80a388c:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a3890:	429c      	cmp	r4, r3
 80a3892:	d907      	bls.n	80a38a4 <__udivmoddi4+0x1ec>
 80a3894:	19db      	adds	r3, r3, r7
 80a3896:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a389a:	d26e      	bcs.n	80a397a <__udivmoddi4+0x2c2>
 80a389c:	429c      	cmp	r4, r3
 80a389e:	d96c      	bls.n	80a397a <__udivmoddi4+0x2c2>
 80a38a0:	3802      	subs	r0, #2
 80a38a2:	443b      	add	r3, r7
 80a38a4:	1b1c      	subs	r4, r3, r4
 80a38a6:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a38aa:	e78b      	b.n	80a37c4 <__udivmoddi4+0x10c>
 80a38ac:	f1c1 0e20 	rsb	lr, r1, #32
 80a38b0:	408b      	lsls	r3, r1
 80a38b2:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a38b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80a38ba:	fa24 f70e 	lsr.w	r7, r4, lr
 80a38be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a38c2:	fbb7 faf9 	udiv	sl, r7, r9
 80a38c6:	fa1f f38c 	uxth.w	r3, ip
 80a38ca:	fb09 771a 	mls	r7, r9, sl, r7
 80a38ce:	fa20 f80e 	lsr.w	r8, r0, lr
 80a38d2:	408c      	lsls	r4, r1
 80a38d4:	fb0a f503 	mul.w	r5, sl, r3
 80a38d8:	ea48 0404 	orr.w	r4, r8, r4
 80a38dc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a38e0:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a38e4:	42bd      	cmp	r5, r7
 80a38e6:	fa02 f201 	lsl.w	r2, r2, r1
 80a38ea:	fa00 fb01 	lsl.w	fp, r0, r1
 80a38ee:	d909      	bls.n	80a3904 <__udivmoddi4+0x24c>
 80a38f0:	eb17 070c 	adds.w	r7, r7, ip
 80a38f4:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 80a38f8:	d241      	bcs.n	80a397e <__udivmoddi4+0x2c6>
 80a38fa:	42bd      	cmp	r5, r7
 80a38fc:	d93f      	bls.n	80a397e <__udivmoddi4+0x2c6>
 80a38fe:	f1aa 0a02 	sub.w	sl, sl, #2
 80a3902:	4467      	add	r7, ip
 80a3904:	1b7f      	subs	r7, r7, r5
 80a3906:	fbb7 f5f9 	udiv	r5, r7, r9
 80a390a:	fb09 7715 	mls	r7, r9, r5, r7
 80a390e:	fb05 f303 	mul.w	r3, r5, r3
 80a3912:	b2a4      	uxth	r4, r4
 80a3914:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a3918:	42bb      	cmp	r3, r7
 80a391a:	d908      	bls.n	80a392e <__udivmoddi4+0x276>
 80a391c:	eb17 070c 	adds.w	r7, r7, ip
 80a3920:	f105 30ff 	add.w	r0, r5, #4294967295	; 0xffffffff
 80a3924:	d227      	bcs.n	80a3976 <__udivmoddi4+0x2be>
 80a3926:	42bb      	cmp	r3, r7
 80a3928:	d925      	bls.n	80a3976 <__udivmoddi4+0x2be>
 80a392a:	3d02      	subs	r5, #2
 80a392c:	4467      	add	r7, ip
 80a392e:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a3932:	fba0 8902 	umull	r8, r9, r0, r2
 80a3936:	1aff      	subs	r7, r7, r3
 80a3938:	454f      	cmp	r7, r9
 80a393a:	4645      	mov	r5, r8
 80a393c:	464c      	mov	r4, r9
 80a393e:	d314      	bcc.n	80a396a <__udivmoddi4+0x2b2>
 80a3940:	d029      	beq.n	80a3996 <__udivmoddi4+0x2de>
 80a3942:	b366      	cbz	r6, 80a399e <__udivmoddi4+0x2e6>
 80a3944:	ebbb 0305 	subs.w	r3, fp, r5
 80a3948:	eb67 0704 	sbc.w	r7, r7, r4
 80a394c:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a3950:	40cb      	lsrs	r3, r1
 80a3952:	40cf      	lsrs	r7, r1
 80a3954:	ea4e 0303 	orr.w	r3, lr, r3
 80a3958:	e886 0088 	stmia.w	r6, {r3, r7}
 80a395c:	2100      	movs	r1, #0
 80a395e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3962:	4623      	mov	r3, r4
 80a3964:	e6f3      	b.n	80a374e <__udivmoddi4+0x96>
 80a3966:	4618      	mov	r0, r3
 80a3968:	e6da      	b.n	80a3720 <__udivmoddi4+0x68>
 80a396a:	ebb8 0502 	subs.w	r5, r8, r2
 80a396e:	eb69 040c 	sbc.w	r4, r9, ip
 80a3972:	3801      	subs	r0, #1
 80a3974:	e7e5      	b.n	80a3942 <__udivmoddi4+0x28a>
 80a3976:	4605      	mov	r5, r0
 80a3978:	e7d9      	b.n	80a392e <__udivmoddi4+0x276>
 80a397a:	4610      	mov	r0, r2
 80a397c:	e792      	b.n	80a38a4 <__udivmoddi4+0x1ec>
 80a397e:	4682      	mov	sl, r0
 80a3980:	e7c0      	b.n	80a3904 <__udivmoddi4+0x24c>
 80a3982:	4692      	mov	sl, r2
 80a3984:	e778      	b.n	80a3878 <__udivmoddi4+0x1c0>
 80a3986:	3802      	subs	r0, #2
 80a3988:	443a      	add	r2, r7
 80a398a:	e743      	b.n	80a3814 <__udivmoddi4+0x15c>
 80a398c:	4608      	mov	r0, r1
 80a398e:	e704      	b.n	80a379a <__udivmoddi4+0xe2>
 80a3990:	3b02      	subs	r3, #2
 80a3992:	443c      	add	r4, r7
 80a3994:	e72a      	b.n	80a37ec <__udivmoddi4+0x134>
 80a3996:	45c3      	cmp	fp, r8
 80a3998:	d3e7      	bcc.n	80a396a <__udivmoddi4+0x2b2>
 80a399a:	463c      	mov	r4, r7
 80a399c:	e7d1      	b.n	80a3942 <__udivmoddi4+0x28a>
 80a399e:	4631      	mov	r1, r6
 80a39a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a39a4 <__aeabi_idiv0>:
 80a39a4:	4770      	bx	lr
 80a39a6:	bf00      	nop

080a39a8 <__cxa_atexit>:
 80a39a8:	b510      	push	{r4, lr}
 80a39aa:	4c05      	ldr	r4, [pc, #20]	; (80a39c0 <__cxa_atexit+0x18>)
 80a39ac:	4613      	mov	r3, r2
 80a39ae:	b12c      	cbz	r4, 80a39bc <__cxa_atexit+0x14>
 80a39b0:	460a      	mov	r2, r1
 80a39b2:	4601      	mov	r1, r0
 80a39b4:	2002      	movs	r0, #2
 80a39b6:	f3af 8000 	nop.w
 80a39ba:	bd10      	pop	{r4, pc}
 80a39bc:	4620      	mov	r0, r4
 80a39be:	bd10      	pop	{r4, pc}
 80a39c0:	00000000 	.word	0x00000000

080a39c4 <memcpy>:
 80a39c4:	b510      	push	{r4, lr}
 80a39c6:	1e43      	subs	r3, r0, #1
 80a39c8:	440a      	add	r2, r1
 80a39ca:	4291      	cmp	r1, r2
 80a39cc:	d004      	beq.n	80a39d8 <memcpy+0x14>
 80a39ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a39d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a39d6:	e7f8      	b.n	80a39ca <memcpy+0x6>
 80a39d8:	bd10      	pop	{r4, pc}

080a39da <memset>:
 80a39da:	4603      	mov	r3, r0
 80a39dc:	4402      	add	r2, r0
 80a39de:	4293      	cmp	r3, r2
 80a39e0:	d002      	beq.n	80a39e8 <memset+0xe>
 80a39e2:	f803 1b01 	strb.w	r1, [r3], #1
 80a39e6:	e7fa      	b.n	80a39de <memset+0x4>
 80a39e8:	4770      	bx	lr
	...

080a39ec <srand>:
 80a39ec:	b538      	push	{r3, r4, r5, lr}
 80a39ee:	4b12      	ldr	r3, [pc, #72]	; (80a3a38 <srand+0x4c>)
 80a39f0:	4605      	mov	r5, r0
 80a39f2:	681c      	ldr	r4, [r3, #0]
 80a39f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a39f6:	b9d3      	cbnz	r3, 80a3a2e <srand+0x42>
 80a39f8:	2018      	movs	r0, #24
 80a39fa:	f7fd fbe7 	bl	80a11cc <malloc>
 80a39fe:	f243 330e 	movw	r3, #13070	; 0x330e
 80a3a02:	63a0      	str	r0, [r4, #56]	; 0x38
 80a3a04:	8003      	strh	r3, [r0, #0]
 80a3a06:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a3a0a:	8043      	strh	r3, [r0, #2]
 80a3a0c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a3a10:	8083      	strh	r3, [r0, #4]
 80a3a12:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a3a16:	80c3      	strh	r3, [r0, #6]
 80a3a18:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a3a1c:	8103      	strh	r3, [r0, #8]
 80a3a1e:	2305      	movs	r3, #5
 80a3a20:	8143      	strh	r3, [r0, #10]
 80a3a22:	230b      	movs	r3, #11
 80a3a24:	8183      	strh	r3, [r0, #12]
 80a3a26:	2201      	movs	r2, #1
 80a3a28:	2300      	movs	r3, #0
 80a3a2a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3a2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3a30:	2200      	movs	r2, #0
 80a3a32:	611d      	str	r5, [r3, #16]
 80a3a34:	615a      	str	r2, [r3, #20]
 80a3a36:	bd38      	pop	{r3, r4, r5, pc}
 80a3a38:	20000064 	.word	0x20000064

080a3a3c <strcpy>:
 80a3a3c:	4603      	mov	r3, r0
 80a3a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3a42:	f803 2b01 	strb.w	r2, [r3], #1
 80a3a46:	2a00      	cmp	r2, #0
 80a3a48:	d1f9      	bne.n	80a3a3e <strcpy+0x2>
 80a3a4a:	4770      	bx	lr

080a3a4c <strlen>:
 80a3a4c:	4603      	mov	r3, r0
 80a3a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3a52:	2a00      	cmp	r2, #0
 80a3a54:	d1fb      	bne.n	80a3a4e <strlen+0x2>
 80a3a56:	1a18      	subs	r0, r3, r0
 80a3a58:	3801      	subs	r0, #1
 80a3a5a:	4770      	bx	lr

080a3a5c <dynalib_user>:
 80a3a5c:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a3a6c:	0000 0000 612f 6970 762f 2f31 4e64 4645     ..../api/v1/dNEF
 80a3a7c:	4752 3532 4643 674a 584d 6b4b 5676 3238     RG25CFJgMXKkvV82
 80a3a8c:	742f 6c65 6d65 7465 7972 4100 7269 2051     /telemetry.AirQ 
 80a3a9c:	2c00 4300 0020 2025 6800 6150 0000 0000     .,.C .% .hPa....
 80a3aac:	0000 0000 0040 0000 0010 0000 0050 0000     ....@.......P...
 80a3abc:	0000 0000 0040 0000 0014 0000 0054 0000     ....@.......T...

080a3acc <CSWTCH.23>:
 80a3acc:	0100 0102 0103 0101 0104 0101 0101 0101     ................
 80a3adc:	0005 0000                                   ....

080a3ae0 <_ZTV7TwoWire>:
	...
 80a3ae8:	1215 080a 125f 080a 1237 080a 1217 080a     ...._...7.......
 80a3af8:	123f 080a 1247 080a 124f 080a 1257 080a     ?...G...O...W...

080a3b08 <_ZTV9IPAddress>:
	...
 80a3b10:	132d 080a 131d 080a 131f 080a 6162 6475     -...........baud
 80a3b20:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a3b30:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a3b40:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a3b50:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a3b60:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a3b70:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a3b80:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a3b90:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a3ba0:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a3bb0:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a3bc0:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a3bd0:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a3be0:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a3bf0:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a3c00 <_ZTVN5spark12NetworkClassE>:
	...
 80a3c08:	13fd 080a 1407 080a 1411 080a 141b 080a     ................
 80a3c18:	1425 080a 1431 080a 143d 080a 1449 080a     %...1...=...I...
 80a3c28:	1451 080a 145b 080a 1465 080a 616e 006e     Q...[...e...nan.
 80a3c38:	766f 0066 002e 6e69 0066                    ovf...inf.

080a3c42 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a3c42:	0800 1810 2820 3830 0000                    .... (08..

080a3c4c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a3c54:	1a41 080a 1a47 080a 1e5f 080a 1a55 080a     A...G..._...U...
 80a3c64:	1a43 080a                                   C...

080a3c68 <_ZTV9TCPClient>:
	...
 80a3c70:	00e1 080a 0121 080a 19fd 080a 1a17 080a     ....!...........
 80a3c80:	1b5d 080a 1ac7 080a 1a99 080a 1a3f 080a     ]...........?...
 80a3c90:	1c09 080a 1e79 080a 1afb 080a 1bd5 080a     ....y...........
 80a3ca0:	1d57 080a 1da9 080a 1a27 080a 1d1b 080a     W.......'.......
 80a3cb0:	1a79 080a 6977 6972 676e 5400 5043 6c43     y...wiring.TCPCl
 80a3cc0:	6569 746e 7320 636f 656b 3d74 7825 5a00     ient socket=%x.Z
 80a3cd0:	2500 302b 6433 253a 3230 0075 5925 252d     .%+03d:%02u.%Y-%
 80a3ce0:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a3cf0:	7361 7463 6d69 0065                         asctime.

080a3cf8 <_ZTV11USARTSerial>:
	...
 80a3d00:	1ef9 080a 1f49 080a 1f57 080a 14e1 080a     ....I...W.......
 80a3d10:	1f0d 080a 1f2f 080a 1f1b 080a 1f43 080a     ..../.......C...
 80a3d20:	1efb 080a 1eff 080a                         ........

080a3d28 <_ZTV9USBSerial>:
	...
 80a3d30:	2049 080a 2099 080a 20a7 080a 14e1 080a     I ... ... ......
 80a3d40:	2085 080a 204b 080a 2061 080a 2093 080a     . ..K ..a ... ..
 80a3d50:	2077 080a 2045 080a                         w ..E ..

080a3d58 <_ZTVN5spark9WiFiClassE>:
	...
 80a3d60:	2253 080a 2249 080a 223f 080a 21b1 080a     S"..I"..?"...!..
 80a3d70:	2233 080a 2227 080a 221b 080a 2213 080a     3"..'"..."..."..
 80a3d80:	2209 080a 21ff 080a 21bb 080a               ."...!...!..

080a3d8c <_ZSt7nothrow>:
 80a3d8c:	0000 0000                                   ....

080a3d90 <__sf_fake_stdin>:
	...

080a3db0 <__sf_fake_stdout>:
	...

080a3dd0 <__sf_fake_stderr>:
	...
 80a3df0:	0043                                        C.

080a3df2 <link_const_variable_data_end>:
	...

080a3df4 <link_constructors_location>:
 80a3df4:	080a0341 	.word	0x080a0341
 80a3df8:	080a03ed 	.word	0x080a03ed
 80a3dfc:	080a04dd 	.word	0x080a04dd
 80a3e00:	080a0d29 	.word	0x080a0d29
 80a3e04:	080a13ed 	.word	0x080a13ed
 80a3e08:	080a14cd 	.word	0x080a14cd
 80a3e0c:	080a1721 	.word	0x080a1721
 80a3e10:	080a19c9 	.word	0x080a19c9
 80a3e14:	080a1ee5 	.word	0x080a1ee5
 80a3e18:	080a225d 	.word	0x080a225d
 80a3e1c:	080a24f9 	.word	0x080a24f9
 80a3e20:	080a256d 	.word	0x080a256d
 80a3e24:	080a2631 	.word	0x080a2631
 80a3e28:	080a26b5 	.word	0x080a26b5
 80a3e2c:	080a2739 	.word	0x080a2739
