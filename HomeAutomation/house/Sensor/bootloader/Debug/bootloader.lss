
bootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00001098  0000112c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001098  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018b  00800116  00800116  00001142  2**0
                  ALLOC
  3 .stab         00001638  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000067a  00000000  00000000  0000277c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002df6  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00002e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000602  00000000  00000000  00002e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001d7  00000000  00000000  0000346f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000445  00000000  00000000  00003646  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000ec  00000000  00000000  00003a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001c3  00000000  00000000  00003b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001e2  00000000  00000000  00003d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00003f1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	c0 e0       	ldi	r28, 0x00	; 0
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e9       	ldi	r30, 0x98	; 152
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 31       	cpi	r26, 0x16	; 22
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a6 e1       	ldi	r26, 0x16	; 22
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 3a       	cpi	r26, 0xA1	; 161
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

// -------------------------------------------------------------------------------
//		Main
// -------------------------------------------------------------------------------
int main(void)
{
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	cf 93       	push	r28
      ac:	df 93       	push	r29
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	c4 54       	subi	r28, 0x44	; 68
      b4:	d1 09       	sbc	r29, r1
      b6:	0f b6       	in	r0, 0x3f	; 63
      b8:	f8 94       	cli
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	0f be       	out	0x3f, r0	; 63
      be:	cd bf       	out	0x3d, r28	; 61
	uint8_t mcusr = MCUSR;
      c0:	84 e5       	ldi	r24, 0x54	; 84
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	fc 01       	movw	r30, r24
      c6:	80 81       	ld	r24, Z
      c8:	8c 87       	std	Y+12, r24	; 0x0c
	GPIOR0 = mcusr;  // Save MCUSR so that main() can get to it
      ca:	8e e3       	ldi	r24, 0x3E	; 62
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	2c 85       	ldd	r18, Y+12	; 0x0c
      d0:	fc 01       	movw	r30, r24
      d2:	20 83       	st	Z, r18
    MCUSR = 0;
      d4:	84 e5       	ldi	r24, 0x54	; 84
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	fc 01       	movw	r30, r24
      da:	10 82       	st	Z, r1
	
	// disable watchdog timer
	wdt_reset();
      dc:	a8 95       	wdr
	wdt_disable();
      de:	88 e1       	ldi	r24, 0x18	; 24
      e0:	0f b6       	in	r0, 0x3f	; 63
      e2:	f8 94       	cli
      e4:	80 93 60 00 	sts	0x0060, r24
      e8:	10 92 60 00 	sts	0x0060, r1
      ec:	0f be       	out	0x3f, r0	; 63
	
	//set LED pin as output
	LED_DDR |= (1<<LED);
      ee:	84 e2       	ldi	r24, 0x24	; 36
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	24 e2       	ldi	r18, 0x24	; 36
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	f9 01       	movw	r30, r18
      f8:	20 81       	ld	r18, Z
      fa:	20 62       	ori	r18, 0x20	; 32
      fc:	fc 01       	movw	r30, r24
      fe:	20 83       	st	Z, r18

	// Proceed with the bootloader only on external reset.
    if ((mcusr & 1<<PORF) != 0) {
     100:	8c 85       	ldd	r24, Y+12	; 0x0c
     102:	88 2f       	mov	r24, r24
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	81 70       	andi	r24, 0x01	; 1
     108:	99 27       	eor	r25, r25
     10a:	00 97       	sbiw	r24, 0x00	; 0
     10c:	31 f0       	breq	.+12     	; 0x11a <main+0x74>
	    main_start();
     10e:	80 91 16 01 	lds	r24, 0x0116
     112:	90 91 17 01 	lds	r25, 0x0117
     116:	fc 01       	movw	r30, r24
     118:	09 95       	icall
	}
			
	uint8_t check_sum = 0;
     11a:	19 82       	std	Y+1, r1	; 0x01
	uint16_t i;
	uint32_t count = 0;
     11c:	1c 82       	std	Y+4, r1	; 0x04
     11e:	1d 82       	std	Y+5, r1	; 0x05
     120:	1e 82       	std	Y+6, r1	; 0x06
     122:	1f 82       	std	Y+7, r1	; 0x07
	page_content_length = 0;
     124:	10 92 9b 02 	sts	0x029B, r1
     128:	10 92 9a 02 	sts	0x029A, r1
	
    UBRRxH = MYUBRR >> 8;
     12c:	85 ec       	ldi	r24, 0xC5	; 197
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	fc 01       	movw	r30, r24
     132:	10 82       	st	Z, r1
    UBRRxL = MYUBRR;
     134:	84 ec       	ldi	r24, 0xC4	; 196
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	2c e0       	ldi	r18, 0x0C	; 12
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18
    UCSRxA = 0x00;
     13e:	80 ec       	ldi	r24, 0xC0	; 192
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	fc 01       	movw	r30, r24
     144:	10 82       	st	Z, r1
    UCSRxB = (1<<RXENx)|(1<<TXENx);
     146:	81 ec       	ldi	r24, 0xC1	; 193
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	28 e1       	ldi	r18, 0x18	; 24
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
	UCSRxC = (1<<UCSZx1)|(1<<UCSZx0);
     150:	82 ec       	ldi	r24, 0xC2	; 194
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	26 e0       	ldi	r18, 0x06	; 6
     156:	fc 01       	movw	r30, r24
     158:	20 83       	st	Z, r18

	//sbi(PORTD, RTS); //Tell XBee to hold serial characters, we are busy doing other things
	flash_led(3);	// signal we booted
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <flash_led>
	//cbi(PORTD, RTS); //Tell XBee it is now okay to send us serial characters

	while((UCSRxA & (1<<RXCx)) == 0)
     160:	94 c0       	rjmp	.+296    	; 0x28a <main+0x1e4>
	{
		count++;
     162:	8c 81       	ldd	r24, Y+4	; 0x04
     164:	9d 81       	ldd	r25, Y+5	; 0x05
     166:	ae 81       	ldd	r26, Y+6	; 0x06
     168:	bf 81       	ldd	r27, Y+7	; 0x07
     16a:	01 96       	adiw	r24, 0x01	; 1
     16c:	a1 1d       	adc	r26, r1
     16e:	b1 1d       	adc	r27, r1
     170:	8c 83       	std	Y+4, r24	; 0x04
     172:	9d 83       	std	Y+5, r25	; 0x05
     174:	ae 83       	std	Y+6, r26	; 0x06
     176:	bf 83       	std	Y+7, r27	; 0x07
		if (count > 30000) {
     178:	8c 81       	ldd	r24, Y+4	; 0x04
     17a:	9d 81       	ldd	r25, Y+5	; 0x05
     17c:	ae 81       	ldd	r26, Y+6	; 0x06
     17e:	bf 81       	ldd	r27, Y+7	; 0x07
     180:	81 33       	cpi	r24, 0x31	; 49
     182:	f5 e7       	ldi	r31, 0x75	; 117
     184:	9f 07       	cpc	r25, r31
     186:	a1 05       	cpc	r26, r1
     188:	b1 05       	cpc	r27, r1
     18a:	38 f0       	brcs	.+14     	; 0x19a <main+0xf4>
			main_start();
     18c:	80 91 16 01 	lds	r24, 0x0116
     190:	90 91 17 01 	lds	r25, 0x0117
     194:	fc 01       	movw	r30, r24
     196:	09 95       	icall
     198:	78 c0       	rjmp	.+240    	; 0x28a <main+0x1e4>
     19a:	8d ec       	ldi	r24, 0xCD	; 205
     19c:	9c ec       	ldi	r25, 0xCC	; 204
     19e:	ac ec       	ldi	r26, 0xCC	; 204
     1a0:	bd e3       	ldi	r27, 0x3D	; 61
     1a2:	8d 87       	std	Y+13, r24	; 0x0d
     1a4:	9e 87       	std	Y+14, r25	; 0x0e
     1a6:	af 87       	std	Y+15, r26	; 0x0f
     1a8:	b8 8b       	std	Y+16, r27	; 0x10
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	4a ef       	ldi	r20, 0xFA	; 250
     1b0:	54 e4       	ldi	r21, 0x44	; 68
     1b2:	6d 85       	ldd	r22, Y+13	; 0x0d
     1b4:	7e 85       	ldd	r23, Y+14	; 0x0e
     1b6:	8f 85       	ldd	r24, Y+15	; 0x0f
     1b8:	98 89       	ldd	r25, Y+16	; 0x10
     1ba:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__mulsf3>
     1be:	dc 01       	movw	r26, r24
     1c0:	cb 01       	movw	r24, r22
     1c2:	89 8b       	std	Y+17, r24	; 0x11
     1c4:	9a 8b       	std	Y+18, r25	; 0x12
     1c6:	ab 8b       	std	Y+19, r26	; 0x13
     1c8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	40 e8       	ldi	r20, 0x80	; 128
     1d0:	5f e3       	ldi	r21, 0x3F	; 63
     1d2:	69 89       	ldd	r22, Y+17	; 0x11
     1d4:	7a 89       	ldd	r23, Y+18	; 0x12
     1d6:	8b 89       	ldd	r24, Y+19	; 0x13
     1d8:	9c 89       	ldd	r25, Y+20	; 0x14
     1da:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__cmpsf2>
     1de:	88 23       	and	r24, r24
     1e0:	2c f4       	brge	.+10     	; 0x1ec <main+0x146>
		__ticks = 1;
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	9e 8b       	std	Y+22, r25	; 0x16
     1e8:	8d 8b       	std	Y+21, r24	; 0x15
     1ea:	42 c0       	rjmp	.+132    	; 0x270 <main+0x1ca>
	else if (__tmp > 65535)
     1ec:	20 e0       	ldi	r18, 0x00	; 0
     1ee:	3f ef       	ldi	r19, 0xFF	; 255
     1f0:	4f e7       	ldi	r20, 0x7F	; 127
     1f2:	57 e4       	ldi	r21, 0x47	; 71
     1f4:	69 89       	ldd	r22, Y+17	; 0x11
     1f6:	7a 89       	ldd	r23, Y+18	; 0x12
     1f8:	8b 89       	ldd	r24, Y+19	; 0x13
     1fa:	9c 89       	ldd	r25, Y+20	; 0x14
     1fc:	0e 94 bb 07 	call	0xf76	; 0xf76 <__gesf2>
     200:	18 16       	cp	r1, r24
     202:	64 f5       	brge	.+88     	; 0x25c <main+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	40 e2       	ldi	r20, 0x20	; 32
     20a:	51 e4       	ldi	r21, 0x41	; 65
     20c:	6d 85       	ldd	r22, Y+13	; 0x0d
     20e:	7e 85       	ldd	r23, Y+14	; 0x0e
     210:	8f 85       	ldd	r24, Y+15	; 0x0f
     212:	98 89       	ldd	r25, Y+16	; 0x10
     214:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__mulsf3>
     218:	dc 01       	movw	r26, r24
     21a:	cb 01       	movw	r24, r22
     21c:	bc 01       	movw	r22, r24
     21e:	cd 01       	movw	r24, r26
     220:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixunssfsi>
     224:	dc 01       	movw	r26, r24
     226:	cb 01       	movw	r24, r22
     228:	9e 8b       	std	Y+22, r25	; 0x16
     22a:	8d 8b       	std	Y+21, r24	; 0x15
     22c:	12 c0       	rjmp	.+36     	; 0x252 <main+0x1ac>
     22e:	88 ec       	ldi	r24, 0xC8	; 200
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	98 8f       	std	Y+24, r25	; 0x18
     234:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     236:	8f 89       	ldd	r24, Y+23	; 0x17
     238:	98 8d       	ldd	r25, Y+24	; 0x18
     23a:	8c 01       	movw	r16, r24
     23c:	c8 01       	movw	r24, r16
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <main+0x198>
     242:	8c 01       	movw	r16, r24
     244:	18 8f       	std	Y+24, r17	; 0x18
     246:	0f 8b       	std	Y+23, r16	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     248:	8d 89       	ldd	r24, Y+21	; 0x15
     24a:	9e 89       	ldd	r25, Y+22	; 0x16
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	9e 8b       	std	Y+22, r25	; 0x16
     250:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     252:	8d 89       	ldd	r24, Y+21	; 0x15
     254:	9e 89       	ldd	r25, Y+22	; 0x16
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	51 f7       	brne	.-44     	; 0x22e <main+0x188>
     25a:	17 c0       	rjmp	.+46     	; 0x28a <main+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	69 89       	ldd	r22, Y+17	; 0x11
     25e:	7a 89       	ldd	r23, Y+18	; 0x12
     260:	8b 89       	ldd	r24, Y+19	; 0x13
     262:	9c 89       	ldd	r25, Y+20	; 0x14
     264:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixunssfsi>
     268:	dc 01       	movw	r26, r24
     26a:	cb 01       	movw	r24, r22
     26c:	9e 8b       	std	Y+22, r25	; 0x16
     26e:	8d 8b       	std	Y+21, r24	; 0x15
     270:	8d 89       	ldd	r24, Y+21	; 0x15
     272:	9e 89       	ldd	r25, Y+22	; 0x16
     274:	9a 8f       	std	Y+26, r25	; 0x1a
     276:	89 8f       	std	Y+25, r24	; 0x19
     278:	89 8d       	ldd	r24, Y+25	; 0x19
     27a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     27c:	8c 01       	movw	r16, r24
     27e:	f8 01       	movw	r30, r16
     280:	31 97       	sbiw	r30, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <main+0x1da>
     284:	8f 01       	movw	r16, r30
     286:	1a 8f       	std	Y+26, r17	; 0x1a
     288:	09 8f       	std	Y+25, r16	; 0x19

	//sbi(PORTD, RTS); //Tell XBee to hold serial characters, we are busy doing other things
	flash_led(3);	// signal we booted
	//cbi(PORTD, RTS); //Tell XBee it is now okay to send us serial characters

	while((UCSRxA & (1<<RXCx)) == 0)
     28a:	80 ec       	ldi	r24, 0xC0	; 192
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	fc 01       	movw	r30, r24
     290:	80 81       	ld	r24, Z
     292:	88 23       	and	r24, r24
     294:	0c f0       	brlt	.+2      	; 0x298 <main+0x1f2>
     296:	65 cf       	rjmp	.-310    	; 0x162 <main+0xbc>
		} else {
			_delay_ms(.1);
		}
	}

	bIsEscaped = 0;
     298:	10 92 9c 02 	sts	0x029C, r1
	page_address = 0;
     29c:	10 92 9d 02 	sts	0x029D, r1
     2a0:	10 92 9e 02 	sts	0x029E, r1
     2a4:	10 92 9f 02 	sts	0x029F, r1
     2a8:	10 92 a0 02 	sts	0x02A0, r1
     2ac:	0f c0       	rjmp	.+30     	; 0x2cc <main+0x226>
		while(1) // Wait for the computer to initiate transfer
		{
			if (getch() == 0x7E) 	// start of packet?
				break;				 //This is the "gimme the next chunk" command
			if (retransmit_flag == TRUE)
				goto RESTART;
     2ae:	00 00       	nop
     2b0:	0d c0       	rjmp	.+26     	; 0x2cc <main+0x226>
		}
		getch();							// the msb of the length is always 0 for now
		if (retransmit_flag == TRUE)
			goto RESTART;
     2b2:	00 00       	nop
     2b4:	0b c0       	rjmp	.+22     	; 0x2cc <main+0x226>
        page_length = getch(); 				// Get the length of this block
		if (retransmit_flag == TRUE)
			goto RESTART;
     2b6:	00 00       	nop
     2b8:	09 c0       	rjmp	.+18     	; 0x2cc <main+0x226>
		if ( page_length == ESCAPE_CHAR)	// length may be escaped
			page_length = 0x20 ^ getch();

		if (retransmit_flag == TRUE)
			goto RESTART;
     2ba:	00 00       	nop
     2bc:	07 c0       	rjmp	.+14     	; 0x2cc <main+0x226>
					i--;
					bIsEscaped = 1;
				}
			}
			if (retransmit_flag == TRUE)
				goto RESTART;
     2be:	00 00       	nop
     2c0:	05 c0       	rjmp	.+10     	; 0x2cc <main+0x226>
		}
		if ( 0x90 != incoming_page_data[APIID_OFFSET])
			goto RESTART;			// not a packet we care about
     2c2:	00 00       	nop
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <main+0x226>

		// now we should get the checksum
		check_sum = getch();
		if (retransmit_flag == TRUE)
			goto RESTART;
     2c6:	00 00       	nop
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <main+0x226>
		if ( check_sum == ESCAPE_CHAR)
			check_sum = 0x20 ^ getch();
		if (retransmit_flag == TRUE)
			goto RESTART;
     2ca:	00 00       	nop
	{
RESTART:

		while(1) // Wait for the computer to initiate transfer
		{
			if (getch() == 0x7E) 	// start of packet?
     2cc:	0e 94 17 05 	call	0xa2e	; 0xa2e <getch>
     2d0:	8e 37       	cpi	r24, 0x7E	; 126
     2d2:	69 f7       	brne	.-38     	; 0x2ae <main+0x208>
				break;				 //This is the "gimme the next chunk" command
     2d4:	00 00       	nop
			if (retransmit_flag == TRUE)
				goto RESTART;
		}
		getch();							// the msb of the length is always 0 for now
     2d6:	0e 94 17 05 	call	0xa2e	; 0xa2e <getch>
		if (retransmit_flag == TRUE)
     2da:	80 91 00 01 	lds	r24, 0x0100
     2de:	88 23       	and	r24, r24
     2e0:	41 f3       	breq	.-48     	; 0x2b2 <main+0x20c>
			goto RESTART;
        page_length = getch(); 				// Get the length of this block
     2e2:	0e 94 17 05 	call	0xa2e	; 0xa2e <getch>
     2e6:	88 2f       	mov	r24, r24
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	90 93 19 01 	sts	0x0119, r25
     2ee:	80 93 18 01 	sts	0x0118, r24
		if (retransmit_flag == TRUE)
     2f2:	80 91 00 01 	lds	r24, 0x0100
     2f6:	88 23       	and	r24, r24
     2f8:	f1 f2       	breq	.-68     	; 0x2b6 <main+0x210>
			goto RESTART;
		if ( page_length == ESCAPE_CHAR)	// length may be escaped
     2fa:	80 91 18 01 	lds	r24, 0x0118
     2fe:	90 91 19 01 	lds	r25, 0x0119
     302:	8d 37       	cpi	r24, 0x7D	; 125
     304:	91 05       	cpc	r25, r1
     306:	59 f4       	brne	.+22     	; 0x31e <main+0x278>
			page_length = 0x20 ^ getch();
     308:	0e 94 17 05 	call	0xa2e	; 0xa2e <getch>
     30c:	98 2f       	mov	r25, r24
     30e:	80 e2       	ldi	r24, 0x20	; 32
     310:	89 27       	eor	r24, r25
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	90 93 19 01 	sts	0x0119, r25
     31a:	80 93 18 01 	sts	0x0118, r24

		if (retransmit_flag == TRUE)
     31e:	80 91 00 01 	lds	r24, 0x0100
     322:	88 23       	and	r24, r24
     324:	51 f2       	breq	.-108    	; 0x2ba <main+0x214>
			goto RESTART;

		// now read the data
		bIsEscaped = 0;
     326:	10 92 9c 02 	sts	0x029C, r1
		for(i = 0 ; i < page_length ; i++) //Read the program data
     32a:	1b 82       	std	Y+3, r1	; 0x03
     32c:	1a 82       	std	Y+2, r1	; 0x02
     32e:	36 c0       	rjmp	.+108    	; 0x39c <main+0x2f6>
		{
			if ( bIsEscaped)
     330:	80 91 9c 02 	lds	r24, 0x029C
     334:	88 23       	and	r24, r24
     336:	79 f0       	breq	.+30     	; 0x356 <main+0x2b0>
			{
            	incoming_page_data[i] = 0x20 ^ getch();
     338:	0e 94 17 05 	call	0xa2e	; 0xa2e <getch>
     33c:	98 2f       	mov	r25, r24
     33e:	80 e2       	ldi	r24, 0x20	; 32
     340:	29 2f       	mov	r18, r25
     342:	28 27       	eor	r18, r24
     344:	8a 81       	ldd	r24, Y+2	; 0x02
     346:	9b 81       	ldd	r25, Y+3	; 0x03
     348:	86 56       	subi	r24, 0x66	; 102
     34a:	9e 4f       	sbci	r25, 0xFE	; 254
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
				bIsEscaped = 0;
     350:	10 92 9c 02 	sts	0x029C, r1
     354:	19 c0       	rjmp	.+50     	; 0x388 <main+0x2e2>
			}
			else
			{
            	incoming_page_data[i] = getch();
     356:	0e 94 17 05 	call	0xa2e	; 0xa2e <getch>
     35a:	28 2f       	mov	r18, r24
     35c:	8a 81       	ldd	r24, Y+2	; 0x02
     35e:	9b 81       	ldd	r25, Y+3	; 0x03
     360:	86 56       	subi	r24, 0x66	; 102
     362:	9e 4f       	sbci	r25, 0xFE	; 254
     364:	fc 01       	movw	r30, r24
     366:	20 83       	st	Z, r18
				if ( incoming_page_data[i] == ESCAPE_CHAR)
     368:	8a 81       	ldd	r24, Y+2	; 0x02
     36a:	9b 81       	ldd	r25, Y+3	; 0x03
     36c:	86 56       	subi	r24, 0x66	; 102
     36e:	9e 4f       	sbci	r25, 0xFE	; 254
     370:	fc 01       	movw	r30, r24
     372:	80 81       	ld	r24, Z
     374:	8d 37       	cpi	r24, 0x7D	; 125
     376:	41 f4       	brne	.+16     	; 0x388 <main+0x2e2>
				{
					i--;
     378:	8a 81       	ldd	r24, Y+2	; 0x02
     37a:	9b 81       	ldd	r25, Y+3	; 0x03
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	9b 83       	std	Y+3, r25	; 0x03
     380:	8a 83       	std	Y+2, r24	; 0x02
					bIsEscaped = 1;
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	80 93 9c 02 	sts	0x029C, r24
				}
			}
			if (retransmit_flag == TRUE)
     388:	80 91 00 01 	lds	r24, 0x0100
     38c:	88 23       	and	r24, r24
     38e:	09 f4       	brne	.+2      	; 0x392 <main+0x2ec>
     390:	96 cf       	rjmp	.-212    	; 0x2be <main+0x218>
		if (retransmit_flag == TRUE)
			goto RESTART;

		// now read the data
		bIsEscaped = 0;
		for(i = 0 ; i < page_length ; i++) //Read the program data
     392:	8a 81       	ldd	r24, Y+2	; 0x02
     394:	9b 81       	ldd	r25, Y+3	; 0x03
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	9b 83       	std	Y+3, r25	; 0x03
     39a:	8a 83       	std	Y+2, r24	; 0x02
     39c:	80 91 18 01 	lds	r24, 0x0118
     3a0:	90 91 19 01 	lds	r25, 0x0119
     3a4:	2a 81       	ldd	r18, Y+2	; 0x02
     3a6:	3b 81       	ldd	r19, Y+3	; 0x03
     3a8:	28 17       	cp	r18, r24
     3aa:	39 07       	cpc	r19, r25
     3ac:	08 f2       	brcs	.-126    	; 0x330 <main+0x28a>
				}
			}
			if (retransmit_flag == TRUE)
				goto RESTART;
		}
		if ( 0x90 != incoming_page_data[APIID_OFFSET])
     3ae:	80 91 9a 01 	lds	r24, 0x019A
     3b2:	80 39       	cpi	r24, 0x90	; 144
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <main+0x312>
     3b6:	85 cf       	rjmp	.-246    	; 0x2c2 <main+0x21c>
			goto RESTART;			// not a packet we care about

		// now we should get the checksum
		check_sum = getch();
     3b8:	0e 94 17 05 	call	0xa2e	; 0xa2e <getch>
     3bc:	89 83       	std	Y+1, r24	; 0x01
		if (retransmit_flag == TRUE)
     3be:	80 91 00 01 	lds	r24, 0x0100
     3c2:	88 23       	and	r24, r24
     3c4:	09 f4       	brne	.+2      	; 0x3c8 <main+0x322>
     3c6:	7f cf       	rjmp	.-258    	; 0x2c6 <main+0x220>
			goto RESTART;
		if ( check_sum == ESCAPE_CHAR)
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	8d 37       	cpi	r24, 0x7D	; 125
     3cc:	31 f4       	brne	.+12     	; 0x3da <main+0x334>
			check_sum = 0x20 ^ getch();
     3ce:	0e 94 17 05 	call	0xa2e	; 0xa2e <getch>
     3d2:	98 2f       	mov	r25, r24
     3d4:	80 e2       	ldi	r24, 0x20	; 32
     3d6:	89 27       	eor	r24, r25
     3d8:	89 83       	std	Y+1, r24	; 0x01
		if (retransmit_flag == TRUE)
     3da:	80 91 00 01 	lds	r24, 0x0100
     3de:	88 23       	and	r24, r24
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <main+0x33e>
     3e2:	73 cf       	rjmp	.-282    	; 0x2ca <main+0x224>
			goto RESTART;

		// ------------- Output Packet setup
		// to prep the ACK we need to set the XB address and the checksum
		for( i=0; i<8; i++)
     3e4:	1b 82       	std	Y+3, r1	; 0x03
     3e6:	1a 82       	std	Y+2, r1	; 0x02
     3e8:	14 c0       	rjmp	.+40     	; 0x412 <main+0x36c>
		{
			bPacketRFAck[i+XBADDR_DEST] = incoming_page_data[i+XBADDR_OFFSET];			// copy the xb address
     3ea:	8a 81       	ldd	r24, Y+2	; 0x02
     3ec:	9b 81       	ldd	r25, Y+3	; 0x03
     3ee:	05 96       	adiw	r24, 0x05	; 5
     3f0:	2a 81       	ldd	r18, Y+2	; 0x02
     3f2:	3b 81       	ldd	r19, Y+3	; 0x03
     3f4:	2f 5f       	subi	r18, 0xFF	; 255
     3f6:	3f 4f       	sbci	r19, 0xFF	; 255
     3f8:	26 56       	subi	r18, 0x66	; 102
     3fa:	3e 4f       	sbci	r19, 0xFE	; 254
     3fc:	f9 01       	movw	r30, r18
     3fe:	20 81       	ld	r18, Z
     400:	8f 5f       	subi	r24, 0xFF	; 255
     402:	9e 4f       	sbci	r25, 0xFE	; 254
     404:	fc 01       	movw	r30, r24
     406:	20 83       	st	Z, r18
		if (retransmit_flag == TRUE)
			goto RESTART;

		// ------------- Output Packet setup
		// to prep the ACK we need to set the XB address and the checksum
		for( i=0; i<8; i++)
     408:	8a 81       	ldd	r24, Y+2	; 0x02
     40a:	9b 81       	ldd	r25, Y+3	; 0x03
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	9b 83       	std	Y+3, r25	; 0x03
     410:	8a 83       	std	Y+2, r24	; 0x02
     412:	8a 81       	ldd	r24, Y+2	; 0x02
     414:	9b 81       	ldd	r25, Y+3	; 0x03
     416:	88 30       	cpi	r24, 0x08	; 8
     418:	91 05       	cpc	r25, r1
     41a:	38 f3       	brcs	.-50     	; 0x3ea <main+0x344>
		{
			bPacketRFAck[i+XBADDR_DEST] = incoming_page_data[i+XBADDR_OFFSET];			// copy the xb address
		}
		bPacketRFAck[ FRAMEID_DEST] = incoming_page_data[FRAMEID_OFFSET];
     41c:	80 91 9b 01 	lds	r24, 0x019B
     420:	80 93 14 01 	sts	0x0114, r24
		// get the checksum of the packet
		int iCheck = 0;
     424:	19 86       	std	Y+9, r1	; 0x09
     426:	18 86       	std	Y+8, r1	; 0x08
		for( i=3; i<(OK_LENGTH-1); i++)
     428:	83 e0       	ldi	r24, 0x03	; 3
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	9b 83       	std	Y+3, r25	; 0x03
     42e:	8a 83       	std	Y+2, r24	; 0x02
     430:	13 c0       	rjmp	.+38     	; 0x458 <main+0x3b2>
		{
			iCheck = iCheck + bPacketRFAck[i];
     432:	8a 81       	ldd	r24, Y+2	; 0x02
     434:	9b 81       	ldd	r25, Y+3	; 0x03
     436:	8f 5f       	subi	r24, 0xFF	; 255
     438:	9e 4f       	sbci	r25, 0xFE	; 254
     43a:	fc 01       	movw	r30, r24
     43c:	80 81       	ld	r24, Z
     43e:	88 2f       	mov	r24, r24
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	28 85       	ldd	r18, Y+8	; 0x08
     444:	39 85       	ldd	r19, Y+9	; 0x09
     446:	82 0f       	add	r24, r18
     448:	93 1f       	adc	r25, r19
     44a:	99 87       	std	Y+9, r25	; 0x09
     44c:	88 87       	std	Y+8, r24	; 0x08
			bPacketRFAck[i+XBADDR_DEST] = incoming_page_data[i+XBADDR_OFFSET];			// copy the xb address
		}
		bPacketRFAck[ FRAMEID_DEST] = incoming_page_data[FRAMEID_OFFSET];
		// get the checksum of the packet
		int iCheck = 0;
		for( i=3; i<(OK_LENGTH-1); i++)
     44e:	8a 81       	ldd	r24, Y+2	; 0x02
     450:	9b 81       	ldd	r25, Y+3	; 0x03
     452:	01 96       	adiw	r24, 0x01	; 1
     454:	9b 83       	std	Y+3, r25	; 0x03
     456:	8a 83       	std	Y+2, r24	; 0x02
     458:	8a 81       	ldd	r24, Y+2	; 0x02
     45a:	9b 81       	ldd	r25, Y+3	; 0x03
     45c:	84 31       	cpi	r24, 0x14	; 20
     45e:	91 05       	cpc	r25, r1
     460:	40 f3       	brcs	.-48     	; 0x432 <main+0x38c>
		{
			iCheck = iCheck + bPacketRFAck[i];
		}
		iCheck = 0xff - iCheck;
     462:	2f ef       	ldi	r18, 0xFF	; 255
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	88 85       	ldd	r24, Y+8	; 0x08
     468:	99 85       	ldd	r25, Y+9	; 0x09
     46a:	a9 01       	movw	r20, r18
     46c:	48 1b       	sub	r20, r24
     46e:	59 0b       	sbc	r21, r25
     470:	ca 01       	movw	r24, r20
     472:	99 87       	std	Y+9, r25	; 0x09
     474:	88 87       	std	Y+8, r24	; 0x08
		bPacketRFAck[OK_LENGTH-1] = iCheck;				// now the ACK is created
     476:	88 85       	ldd	r24, Y+8	; 0x08
     478:	80 93 15 01 	sts	0x0115, r24


		// ------------- Sending
        //Calculate the checksum
		for(i = 0 ; i < page_length ; i++)
     47c:	1b 82       	std	Y+3, r1	; 0x03
     47e:	1a 82       	std	Y+2, r1	; 0x02
     480:	0e c0       	rjmp	.+28     	; 0x49e <main+0x3f8>
            check_sum = check_sum + incoming_page_data[i];
     482:	8a 81       	ldd	r24, Y+2	; 0x02
     484:	9b 81       	ldd	r25, Y+3	; 0x03
     486:	86 56       	subi	r24, 0x66	; 102
     488:	9e 4f       	sbci	r25, 0xFE	; 254
     48a:	fc 01       	movw	r30, r24
     48c:	80 81       	ld	r24, Z
     48e:	99 81       	ldd	r25, Y+1	; 0x01
     490:	89 0f       	add	r24, r25
     492:	89 83       	std	Y+1, r24	; 0x01
		bPacketRFAck[OK_LENGTH-1] = iCheck;				// now the ACK is created


		// ------------- Sending
        //Calculate the checksum
		for(i = 0 ; i < page_length ; i++)
     494:	8a 81       	ldd	r24, Y+2	; 0x02
     496:	9b 81       	ldd	r25, Y+3	; 0x03
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	9b 83       	std	Y+3, r25	; 0x03
     49c:	8a 83       	std	Y+2, r24	; 0x02
     49e:	80 91 18 01 	lds	r24, 0x0118
     4a2:	90 91 19 01 	lds	r25, 0x0119
     4a6:	2a 81       	ldd	r18, Y+2	; 0x02
     4a8:	3b 81       	ldd	r19, Y+3	; 0x03
     4aa:	28 17       	cp	r18, r24
     4ac:	39 07       	cpc	r19, r25
     4ae:	48 f3       	brcs	.-46     	; 0x482 <main+0x3dc>
            check_sum = check_sum + incoming_page_data[i];

        if(check_sum == 0xff) 						// If we have a good transmission, put it in ink
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	8f 3f       	cpi	r24, 0xFF	; 255
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <main+0x412>
     4b6:	b8 c1       	rjmp	.+880    	; 0x828 <__stack+0x28>
		{
			if ( 'P' == incoming_page_data[MSG_OFFSET] && 'R' == incoming_page_data[MSG_OFFSET+1])
     4b8:	80 91 a6 01 	lds	r24, 0x01A6
     4bc:	80 35       	cpi	r24, 0x50	; 80
     4be:	09 f0       	breq	.+2      	; 0x4c2 <main+0x41c>
     4c0:	76 c0       	rjmp	.+236    	; 0x5ae <main+0x508>
     4c2:	80 91 a7 01 	lds	r24, 0x01A7
     4c6:	82 35       	cpi	r24, 0x52	; 82
     4c8:	09 f0       	breq	.+2      	; 0x4cc <main+0x426>
     4ca:	71 c0       	rjmp	.+226    	; 0x5ae <main+0x508>
			{
				if ( page_content_length == 0)		// no content yet
     4cc:	80 91 9a 02 	lds	r24, 0x029A
     4d0:	90 91 9b 02 	lds	r25, 0x029B
     4d4:	00 97       	sbiw	r24, 0x00	; 0
     4d6:	81 f4       	brne	.+32     	; 0x4f8 <main+0x452>
					page_address = *(uint16_t *)&incoming_page_data[MSG_OFFSET+2];	// stored low byte first in the data
     4d8:	88 ea       	ldi	r24, 0xA8	; 168
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	fc 01       	movw	r30, r24
     4de:	80 81       	ld	r24, Z
     4e0:	91 81       	ldd	r25, Z+1	; 0x01
     4e2:	cc 01       	movw	r24, r24
     4e4:	a0 e0       	ldi	r26, 0x00	; 0
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	80 93 9d 02 	sts	0x029D, r24
     4ec:	90 93 9e 02 	sts	0x029E, r25
     4f0:	a0 93 9f 02 	sts	0x029F, r26
     4f4:	b0 93 a0 02 	sts	0x02A0, r27
				int j;
				for( j=(4+MSG_OFFSET); j<page_length; j++)
     4f8:	80 e1       	ldi	r24, 0x10	; 16
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	9b 87       	std	Y+11, r25	; 0x0b
     4fe:	8a 87       	std	Y+10, r24	; 0x0a
     500:	49 c0       	rjmp	.+146    	; 0x594 <main+0x4ee>
				{
					page_content[page_content_length++] = incoming_page_data[j];
     502:	80 91 9a 02 	lds	r24, 0x029A
     506:	90 91 9b 02 	lds	r25, 0x029B
     50a:	2a 85       	ldd	r18, Y+10	; 0x0a
     50c:	3b 85       	ldd	r19, Y+11	; 0x0b
     50e:	26 56       	subi	r18, 0x66	; 102
     510:	3e 4f       	sbci	r19, 0xFE	; 254
     512:	f9 01       	movw	r30, r18
     514:	40 81       	ld	r20, Z
     516:	9c 01       	movw	r18, r24
     518:	26 5e       	subi	r18, 0xE6	; 230
     51a:	3e 4f       	sbci	r19, 0xFE	; 254
     51c:	f9 01       	movw	r30, r18
     51e:	40 83       	st	Z, r20
     520:	01 96       	adiw	r24, 0x01	; 1
     522:	90 93 9b 02 	sts	0x029B, r25
     526:	80 93 9a 02 	sts	0x029A, r24
					if ( page_content_length == SPM_PAGESIZE)
     52a:	80 91 9a 02 	lds	r24, 0x029A
     52e:	90 91 9b 02 	lds	r25, 0x029B
     532:	80 38       	cpi	r24, 0x80	; 128
     534:	91 05       	cpc	r25, r1
     536:	49 f5       	brne	.+82     	; 0x58a <main+0x4e4>
					{
						flash_led(1);			// flash once to indicate write operation
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <flash_led>
			            onboard_program_write(page_address, page_content);
     53e:	80 91 9d 02 	lds	r24, 0x029D
     542:	90 91 9e 02 	lds	r25, 0x029E
     546:	a0 91 9f 02 	lds	r26, 0x029F
     54a:	b0 91 a0 02 	lds	r27, 0x02A0
     54e:	4a e1       	ldi	r20, 0x1A	; 26
     550:	51 e0       	ldi	r21, 0x01	; 1
     552:	bc 01       	movw	r22, r24
     554:	cd 01       	movw	r24, r26
     556:	0e 94 72 06 	call	0xce4	; 0xce4 <onboard_program_write>
						page_content_length = 0;
     55a:	10 92 9b 02 	sts	0x029B, r1
     55e:	10 92 9a 02 	sts	0x029A, r1
						page_address += SPM_PAGESIZE;
     562:	80 91 9d 02 	lds	r24, 0x029D
     566:	90 91 9e 02 	lds	r25, 0x029E
     56a:	a0 91 9f 02 	lds	r26, 0x029F
     56e:	b0 91 a0 02 	lds	r27, 0x02A0
     572:	80 58       	subi	r24, 0x80	; 128
     574:	9f 4f       	sbci	r25, 0xFF	; 255
     576:	af 4f       	sbci	r26, 0xFF	; 255
     578:	bf 4f       	sbci	r27, 0xFF	; 255
     57a:	80 93 9d 02 	sts	0x029D, r24
     57e:	90 93 9e 02 	sts	0x029E, r25
     582:	a0 93 9f 02 	sts	0x029F, r26
     586:	b0 93 a0 02 	sts	0x02A0, r27
			if ( 'P' == incoming_page_data[MSG_OFFSET] && 'R' == incoming_page_data[MSG_OFFSET+1])
			{
				if ( page_content_length == 0)		// no content yet
					page_address = *(uint16_t *)&incoming_page_data[MSG_OFFSET+2];	// stored low byte first in the data
				int j;
				for( j=(4+MSG_OFFSET); j<page_length; j++)
     58a:	8a 85       	ldd	r24, Y+10	; 0x0a
     58c:	9b 85       	ldd	r25, Y+11	; 0x0b
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	9b 87       	std	Y+11, r25	; 0x0b
     592:	8a 87       	std	Y+10, r24	; 0x0a
     594:	2a 85       	ldd	r18, Y+10	; 0x0a
     596:	3b 85       	ldd	r19, Y+11	; 0x0b
     598:	80 91 18 01 	lds	r24, 0x0118
     59c:	90 91 19 01 	lds	r25, 0x0119
     5a0:	28 17       	cp	r18, r24
     5a2:	39 07       	cpc	r19, r25
     5a4:	08 f4       	brcc	.+2      	; 0x5a8 <main+0x502>
     5a6:	ad cf       	rjmp	.-166    	; 0x502 <main+0x45c>
			            onboard_program_write(page_address, page_content);
						page_content_length = 0;
						page_address += SPM_PAGESIZE;
					}
				}
				SendPacket();
     5a8:	0e 94 c6 04 	call	0x98c	; 0x98c <SendPacket>
            check_sum = check_sum + incoming_page_data[i];

        if(check_sum == 0xff) 						// If we have a good transmission, put it in ink
		{
			if ( 'P' == incoming_page_data[MSG_OFFSET] && 'R' == incoming_page_data[MSG_OFFSET+1])
			{
     5ac:	3c c1       	rjmp	.+632    	; 0x826 <__stack+0x26>
						page_address += SPM_PAGESIZE;
					}
				}
				SendPacket();
			}
			else if ( 'E' == incoming_page_data[MSG_OFFSET] && 'N' == incoming_page_data[MSG_OFFSET+1])
     5ae:	80 91 a6 01 	lds	r24, 0x01A6
     5b2:	85 34       	cpi	r24, 0x45	; 69
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <main+0x512>
     5b6:	b8 c0       	rjmp	.+368    	; 0x728 <main+0x682>
     5b8:	80 91 a7 01 	lds	r24, 0x01A7
     5bc:	8e 34       	cpi	r24, 0x4E	; 78
     5be:	09 f0       	breq	.+2      	; 0x5c2 <main+0x51c>
     5c0:	b3 c0       	rjmp	.+358    	; 0x728 <main+0x682>
			{
				if ( page_content_length > 0)
     5c2:	80 91 9a 02 	lds	r24, 0x029A
     5c6:	90 91 9b 02 	lds	r25, 0x029B
     5ca:	00 97       	sbiw	r24, 0x00	; 0
     5cc:	49 f1       	breq	.+82     	; 0x620 <main+0x57a>
				{
						flash_led(1);			// flash once to indicate receipt
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	0e 94 4e 05 	call	0xa9c	; 0xa9c <flash_led>
			            onboard_program_write(page_address, page_content);
     5d4:	80 91 9d 02 	lds	r24, 0x029D
     5d8:	90 91 9e 02 	lds	r25, 0x029E
     5dc:	a0 91 9f 02 	lds	r26, 0x029F
     5e0:	b0 91 a0 02 	lds	r27, 0x02A0
     5e4:	4a e1       	ldi	r20, 0x1A	; 26
     5e6:	51 e0       	ldi	r21, 0x01	; 1
     5e8:	bc 01       	movw	r22, r24
     5ea:	cd 01       	movw	r24, r26
     5ec:	0e 94 72 06 	call	0xce4	; 0xce4 <onboard_program_write>
						page_content_length = 0;
     5f0:	10 92 9b 02 	sts	0x029B, r1
     5f4:	10 92 9a 02 	sts	0x029A, r1
						page_address += SPM_PAGESIZE;
     5f8:	80 91 9d 02 	lds	r24, 0x029D
     5fc:	90 91 9e 02 	lds	r25, 0x029E
     600:	a0 91 9f 02 	lds	r26, 0x029F
     604:	b0 91 a0 02 	lds	r27, 0x02A0
     608:	80 58       	subi	r24, 0x80	; 128
     60a:	9f 4f       	sbci	r25, 0xFF	; 255
     60c:	af 4f       	sbci	r26, 0xFF	; 255
     60e:	bf 4f       	sbci	r27, 0xFF	; 255
     610:	80 93 9d 02 	sts	0x029D, r24
     614:	90 93 9e 02 	sts	0x029E, r25
     618:	a0 93 9f 02 	sts	0x029F, r26
     61c:	b0 93 a0 02 	sts	0x02A0, r27
				}
				SendPacket();
     620:	0e 94 c6 04 	call	0x98c	; 0x98c <SendPacket>
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	a8 ec       	ldi	r26, 0xC8	; 200
     62a:	b2 e4       	ldi	r27, 0x42	; 66
     62c:	8b 8f       	std	Y+27, r24	; 0x1b
     62e:	9c 8f       	std	Y+28, r25	; 0x1c
     630:	ad 8f       	std	Y+29, r26	; 0x1d
     632:	be 8f       	std	Y+30, r27	; 0x1e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	4a ef       	ldi	r20, 0xFA	; 250
     63a:	54 e4       	ldi	r21, 0x44	; 68
     63c:	6b 8d       	ldd	r22, Y+27	; 0x1b
     63e:	7c 8d       	ldd	r23, Y+28	; 0x1c
     640:	8d 8d       	ldd	r24, Y+29	; 0x1d
     642:	9e 8d       	ldd	r25, Y+30	; 0x1e
     644:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__mulsf3>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	8f 8f       	std	Y+31, r24	; 0x1f
     64e:	98 a3       	std	Y+32, r25	; 0x20
     650:	a9 a3       	std	Y+33, r26	; 0x21
     652:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	40 e8       	ldi	r20, 0x80	; 128
     65a:	5f e3       	ldi	r21, 0x3F	; 63
     65c:	6f 8d       	ldd	r22, Y+31	; 0x1f
     65e:	78 a1       	ldd	r23, Y+32	; 0x20
     660:	89 a1       	ldd	r24, Y+33	; 0x21
     662:	9a a1       	ldd	r25, Y+34	; 0x22
     664:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__cmpsf2>
     668:	88 23       	and	r24, r24
     66a:	2c f4       	brge	.+10     	; 0x676 <main+0x5d0>
		__ticks = 1;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	9c a3       	std	Y+36, r25	; 0x24
     672:	8b a3       	std	Y+35, r24	; 0x23
     674:	42 c0       	rjmp	.+132    	; 0x6fa <main+0x654>
	else if (__tmp > 65535)
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	3f ef       	ldi	r19, 0xFF	; 255
     67a:	4f e7       	ldi	r20, 0x7F	; 127
     67c:	57 e4       	ldi	r21, 0x47	; 71
     67e:	6f 8d       	ldd	r22, Y+31	; 0x1f
     680:	78 a1       	ldd	r23, Y+32	; 0x20
     682:	89 a1       	ldd	r24, Y+33	; 0x21
     684:	9a a1       	ldd	r25, Y+34	; 0x22
     686:	0e 94 bb 07 	call	0xf76	; 0xf76 <__gesf2>
     68a:	18 16       	cp	r1, r24
     68c:	64 f5       	brge	.+88     	; 0x6e6 <main+0x640>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	40 e2       	ldi	r20, 0x20	; 32
     694:	51 e4       	ldi	r21, 0x41	; 65
     696:	6b 8d       	ldd	r22, Y+27	; 0x1b
     698:	7c 8d       	ldd	r23, Y+28	; 0x1c
     69a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     69c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     69e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__mulsf3>
     6a2:	dc 01       	movw	r26, r24
     6a4:	cb 01       	movw	r24, r22
     6a6:	bc 01       	movw	r22, r24
     6a8:	cd 01       	movw	r24, r26
     6aa:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixunssfsi>
     6ae:	dc 01       	movw	r26, r24
     6b0:	cb 01       	movw	r24, r22
     6b2:	9c a3       	std	Y+36, r25	; 0x24
     6b4:	8b a3       	std	Y+35, r24	; 0x23
     6b6:	12 c0       	rjmp	.+36     	; 0x6dc <main+0x636>
     6b8:	88 ec       	ldi	r24, 0xC8	; 200
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	9e a3       	std	Y+38, r25	; 0x26
     6be:	8d a3       	std	Y+37, r24	; 0x25
     6c0:	8d a1       	ldd	r24, Y+37	; 0x25
     6c2:	9e a1       	ldd	r25, Y+38	; 0x26
     6c4:	8c 01       	movw	r16, r24
     6c6:	c8 01       	movw	r24, r16
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	f1 f7       	brne	.-4      	; 0x6c8 <main+0x622>
     6cc:	8c 01       	movw	r16, r24
     6ce:	1e a3       	std	Y+38, r17	; 0x26
     6d0:	0d a3       	std	Y+37, r16	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d2:	8b a1       	ldd	r24, Y+35	; 0x23
     6d4:	9c a1       	ldd	r25, Y+36	; 0x24
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	9c a3       	std	Y+36, r25	; 0x24
     6da:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6dc:	8b a1       	ldd	r24, Y+35	; 0x23
     6de:	9c a1       	ldd	r25, Y+36	; 0x24
     6e0:	00 97       	sbiw	r24, 0x00	; 0
     6e2:	51 f7       	brne	.-44     	; 0x6b8 <main+0x612>
     6e4:	17 c0       	rjmp	.+46     	; 0x714 <main+0x66e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6e6:	6f 8d       	ldd	r22, Y+31	; 0x1f
     6e8:	78 a1       	ldd	r23, Y+32	; 0x20
     6ea:	89 a1       	ldd	r24, Y+33	; 0x21
     6ec:	9a a1       	ldd	r25, Y+34	; 0x22
     6ee:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixunssfsi>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	9c a3       	std	Y+36, r25	; 0x24
     6f8:	8b a3       	std	Y+35, r24	; 0x23
     6fa:	8b a1       	ldd	r24, Y+35	; 0x23
     6fc:	9c a1       	ldd	r25, Y+36	; 0x24
     6fe:	98 a7       	std	Y+40, r25	; 0x28
     700:	8f a3       	std	Y+39, r24	; 0x27
     702:	8f a1       	ldd	r24, Y+39	; 0x27
     704:	98 a5       	ldd	r25, Y+40	; 0x28
     706:	8c 01       	movw	r16, r24
     708:	f8 01       	movw	r30, r16
     70a:	31 97       	sbiw	r30, 0x01	; 1
     70c:	f1 f7       	brne	.-4      	; 0x70a <main+0x664>
     70e:	8f 01       	movw	r16, r30
     710:	18 a7       	std	Y+40, r17	; 0x28
     712:	0f a3       	std	Y+39, r16	; 0x27
				// the reboot will crash the send packet so wait a bit...
				_delay_ms(100);
				flash_led(2);
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	0e 94 4e 05 	call	0xa9c	; 0xa9c <flash_led>
				main_start();			// we're done so start the program
     71a:	80 91 16 01 	lds	r24, 0x0116
     71e:	90 91 17 01 	lds	r25, 0x0117
     722:	fc 01       	movw	r30, r24
     724:	09 95       	icall
     726:	7f c0       	rjmp	.+254    	; 0x826 <__stack+0x26>
			}
			else
			{
				flash_led(3);		// bad Command indicator
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <flash_led>
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	aa e7       	ldi	r26, 0x7A	; 122
     734:	b3 e4       	ldi	r27, 0x43	; 67
     736:	89 a7       	std	Y+41, r24	; 0x29
     738:	9a a7       	std	Y+42, r25	; 0x2a
     73a:	ab a7       	std	Y+43, r26	; 0x2b
     73c:	bc a7       	std	Y+44, r27	; 0x2c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	4a ef       	ldi	r20, 0xFA	; 250
     744:	54 e4       	ldi	r21, 0x44	; 68
     746:	69 a5       	ldd	r22, Y+41	; 0x29
     748:	7a a5       	ldd	r23, Y+42	; 0x2a
     74a:	8b a5       	ldd	r24, Y+43	; 0x2b
     74c:	9c a5       	ldd	r25, Y+44	; 0x2c
     74e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__mulsf3>
     752:	dc 01       	movw	r26, r24
     754:	cb 01       	movw	r24, r22
     756:	8d a7       	std	Y+45, r24	; 0x2d
     758:	9e a7       	std	Y+46, r25	; 0x2e
     75a:	af a7       	std	Y+47, r26	; 0x2f
     75c:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	40 e8       	ldi	r20, 0x80	; 128
     764:	5f e3       	ldi	r21, 0x3F	; 63
     766:	6d a5       	ldd	r22, Y+45	; 0x2d
     768:	7e a5       	ldd	r23, Y+46	; 0x2e
     76a:	8f a5       	ldd	r24, Y+47	; 0x2f
     76c:	98 a9       	ldd	r25, Y+48	; 0x30
     76e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__cmpsf2>
     772:	88 23       	and	r24, r24
     774:	2c f4       	brge	.+10     	; 0x780 <main+0x6da>
		__ticks = 1;
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	9a ab       	std	Y+50, r25	; 0x32
     77c:	89 ab       	std	Y+49, r24	; 0x31
     77e:	42 c0       	rjmp	.+132    	; 0x804 <__stack+0x4>
	else if (__tmp > 65535)
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	3f ef       	ldi	r19, 0xFF	; 255
     784:	4f e7       	ldi	r20, 0x7F	; 127
     786:	57 e4       	ldi	r21, 0x47	; 71
     788:	6d a5       	ldd	r22, Y+45	; 0x2d
     78a:	7e a5       	ldd	r23, Y+46	; 0x2e
     78c:	8f a5       	ldd	r24, Y+47	; 0x2f
     78e:	98 a9       	ldd	r25, Y+48	; 0x30
     790:	0e 94 bb 07 	call	0xf76	; 0xf76 <__gesf2>
     794:	18 16       	cp	r1, r24
     796:	64 f5       	brge	.+88     	; 0x7f0 <main+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	40 e2       	ldi	r20, 0x20	; 32
     79e:	51 e4       	ldi	r21, 0x41	; 65
     7a0:	69 a5       	ldd	r22, Y+41	; 0x29
     7a2:	7a a5       	ldd	r23, Y+42	; 0x2a
     7a4:	8b a5       	ldd	r24, Y+43	; 0x2b
     7a6:	9c a5       	ldd	r25, Y+44	; 0x2c
     7a8:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__mulsf3>
     7ac:	dc 01       	movw	r26, r24
     7ae:	cb 01       	movw	r24, r22
     7b0:	bc 01       	movw	r22, r24
     7b2:	cd 01       	movw	r24, r26
     7b4:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixunssfsi>
     7b8:	dc 01       	movw	r26, r24
     7ba:	cb 01       	movw	r24, r22
     7bc:	9a ab       	std	Y+50, r25	; 0x32
     7be:	89 ab       	std	Y+49, r24	; 0x31
     7c0:	12 c0       	rjmp	.+36     	; 0x7e6 <main+0x740>
     7c2:	88 ec       	ldi	r24, 0xC8	; 200
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	9c ab       	std	Y+52, r25	; 0x34
     7c8:	8b ab       	std	Y+51, r24	; 0x33
     7ca:	8b a9       	ldd	r24, Y+51	; 0x33
     7cc:	9c a9       	ldd	r25, Y+52	; 0x34
     7ce:	8c 01       	movw	r16, r24
     7d0:	c8 01       	movw	r24, r16
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	f1 f7       	brne	.-4      	; 0x7d2 <main+0x72c>
     7d6:	8c 01       	movw	r16, r24
     7d8:	1c ab       	std	Y+52, r17	; 0x34
     7da:	0b ab       	std	Y+51, r16	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7dc:	89 a9       	ldd	r24, Y+49	; 0x31
     7de:	9a a9       	ldd	r25, Y+50	; 0x32
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	9a ab       	std	Y+50, r25	; 0x32
     7e4:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7e6:	89 a9       	ldd	r24, Y+49	; 0x31
     7e8:	9a a9       	ldd	r25, Y+50	; 0x32
     7ea:	00 97       	sbiw	r24, 0x00	; 0
     7ec:	51 f7       	brne	.-44     	; 0x7c2 <main+0x71c>
     7ee:	17 c0       	rjmp	.+46     	; 0x81e <__stack+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7f0:	6d a5       	ldd	r22, Y+45	; 0x2d
     7f2:	7e a5       	ldd	r23, Y+46	; 0x2e
     7f4:	8f a5       	ldd	r24, Y+47	; 0x2f
     7f6:	98 a9       	ldd	r25, Y+48	; 0x30
     7f8:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixunssfsi>
     7fc:	dc 01       	movw	r26, r24
     7fe:	cb 01       	movw	r24, r22
     800:	9a ab       	std	Y+50, r25	; 0x32
     802:	89 ab       	std	Y+49, r24	; 0x31
     804:	89 a9       	ldd	r24, Y+49	; 0x31
     806:	9a a9       	ldd	r25, Y+50	; 0x32
     808:	9e ab       	std	Y+54, r25	; 0x36
     80a:	8d ab       	std	Y+53, r24	; 0x35
     80c:	8d a9       	ldd	r24, Y+53	; 0x35
     80e:	9e a9       	ldd	r25, Y+54	; 0x36
     810:	8c 01       	movw	r16, r24
     812:	f8 01       	movw	r30, r16
     814:	31 97       	sbiw	r30, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <__stack+0x14>
     818:	8f 01       	movw	r16, r30
     81a:	1e ab       	std	Y+54, r17	; 0x36
     81c:	0d ab       	std	Y+53, r16	; 0x35
				_delay_ms(250);
				flash_led(3);		// bad Command indicator
     81e:	83 e0       	ldi	r24, 0x03	; 3
     820:	0e 94 4e 05 	call	0xa9c	; 0xa9c <flash_led>
		{
			flash_led(2);		// bad Checksum indicator
			_delay_ms(250);
			flash_led(2);		// bad Checksum indicator
		}
	}
     824:	53 cd       	rjmp	.-1370   	; 0x2cc <main+0x226>
     826:	52 cd       	rjmp	.-1372   	; 0x2cc <main+0x226>
				flash_led(3);		// bad Command indicator
			}
		}
		else
		{
			flash_led(2);		// bad Checksum indicator
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <flash_led>
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	aa e7       	ldi	r26, 0x7A	; 122
     834:	b3 e4       	ldi	r27, 0x43	; 67
     836:	8f ab       	std	Y+55, r24	; 0x37
     838:	98 af       	std	Y+56, r25	; 0x38
     83a:	a9 af       	std	Y+57, r26	; 0x39
     83c:	ba af       	std	Y+58, r27	; 0x3a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	4a ef       	ldi	r20, 0xFA	; 250
     844:	54 e4       	ldi	r21, 0x44	; 68
     846:	6f a9       	ldd	r22, Y+55	; 0x37
     848:	78 ad       	ldd	r23, Y+56	; 0x38
     84a:	89 ad       	ldd	r24, Y+57	; 0x39
     84c:	9a ad       	ldd	r25, Y+58	; 0x3a
     84e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__mulsf3>
     852:	dc 01       	movw	r26, r24
     854:	cb 01       	movw	r24, r22
     856:	8b af       	std	Y+59, r24	; 0x3b
     858:	9c af       	std	Y+60, r25	; 0x3c
     85a:	ad af       	std	Y+61, r26	; 0x3d
     85c:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	40 e8       	ldi	r20, 0x80	; 128
     864:	5f e3       	ldi	r21, 0x3F	; 63
     866:	6b ad       	ldd	r22, Y+59	; 0x3b
     868:	7c ad       	ldd	r23, Y+60	; 0x3c
     86a:	8d ad       	ldd	r24, Y+61	; 0x3d
     86c:	9e ad       	ldd	r25, Y+62	; 0x3e
     86e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__cmpsf2>
     872:	88 23       	and	r24, r24
     874:	44 f4       	brge	.+16     	; 0x886 <__stack+0x86>
		__ticks = 1;
     876:	21 e0       	ldi	r18, 0x01	; 1
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	ce 01       	movw	r24, r28
     87c:	cf 96       	adiw	r24, 0x3f	; 63
     87e:	fc 01       	movw	r30, r24
     880:	31 83       	std	Z+1, r19	; 0x01
     882:	20 83       	st	Z, r18
     884:	62 c0       	rjmp	.+196    	; 0x94a <__stack+0x14a>
	else if (__tmp > 65535)
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	3f ef       	ldi	r19, 0xFF	; 255
     88a:	4f e7       	ldi	r20, 0x7F	; 127
     88c:	57 e4       	ldi	r21, 0x47	; 71
     88e:	6b ad       	ldd	r22, Y+59	; 0x3b
     890:	7c ad       	ldd	r23, Y+60	; 0x3c
     892:	8d ad       	ldd	r24, Y+61	; 0x3d
     894:	9e ad       	ldd	r25, Y+62	; 0x3e
     896:	0e 94 bb 07 	call	0xf76	; 0xf76 <__gesf2>
     89a:	18 16       	cp	r1, r24
     89c:	0c f0       	brlt	.+2      	; 0x8a0 <__stack+0xa0>
     89e:	47 c0       	rjmp	.+142    	; 0x92e <__stack+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	40 e2       	ldi	r20, 0x20	; 32
     8a6:	51 e4       	ldi	r21, 0x41	; 65
     8a8:	6f a9       	ldd	r22, Y+55	; 0x37
     8aa:	78 ad       	ldd	r23, Y+56	; 0x38
     8ac:	89 ad       	ldd	r24, Y+57	; 0x39
     8ae:	9a ad       	ldd	r25, Y+58	; 0x3a
     8b0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__mulsf3>
     8b4:	dc 01       	movw	r26, r24
     8b6:	cb 01       	movw	r24, r22
     8b8:	bc 01       	movw	r22, r24
     8ba:	cd 01       	movw	r24, r26
     8bc:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixunssfsi>
     8c0:	dc 01       	movw	r26, r24
     8c2:	cb 01       	movw	r24, r22
     8c4:	9e 01       	movw	r18, r28
     8c6:	21 5c       	subi	r18, 0xC1	; 193
     8c8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ca:	f9 01       	movw	r30, r18
     8cc:	91 83       	std	Z+1, r25	; 0x01
     8ce:	80 83       	st	Z, r24
     8d0:	26 c0       	rjmp	.+76     	; 0x91e <__stack+0x11e>
     8d2:	ce 01       	movw	r24, r28
     8d4:	8f 5b       	subi	r24, 0xBF	; 191
     8d6:	9f 4f       	sbci	r25, 0xFF	; 255
     8d8:	28 ec       	ldi	r18, 0xC8	; 200
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	fc 01       	movw	r30, r24
     8de:	31 83       	std	Z+1, r19	; 0x01
     8e0:	20 83       	st	Z, r18
     8e2:	ce 01       	movw	r24, r28
     8e4:	8f 5b       	subi	r24, 0xBF	; 191
     8e6:	9f 4f       	sbci	r25, 0xFF	; 255
     8e8:	fc 01       	movw	r30, r24
     8ea:	80 81       	ld	r24, Z
     8ec:	91 81       	ldd	r25, Z+1	; 0x01
     8ee:	8c 01       	movw	r16, r24
     8f0:	c8 01       	movw	r24, r16
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <__stack+0xf2>
     8f6:	8c 01       	movw	r16, r24
     8f8:	ce 01       	movw	r24, r28
     8fa:	8f 5b       	subi	r24, 0xBF	; 191
     8fc:	9f 4f       	sbci	r25, 0xFF	; 255
     8fe:	fc 01       	movw	r30, r24
     900:	11 83       	std	Z+1, r17	; 0x01
     902:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     904:	ce 01       	movw	r24, r28
     906:	cf 96       	adiw	r24, 0x3f	; 63
     908:	fc 01       	movw	r30, r24
     90a:	80 81       	ld	r24, Z
     90c:	91 81       	ldd	r25, Z+1	; 0x01
     90e:	9c 01       	movw	r18, r24
     910:	21 50       	subi	r18, 0x01	; 1
     912:	31 09       	sbc	r19, r1
     914:	ce 01       	movw	r24, r28
     916:	cf 96       	adiw	r24, 0x3f	; 63
     918:	fc 01       	movw	r30, r24
     91a:	31 83       	std	Z+1, r19	; 0x01
     91c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     91e:	ce 01       	movw	r24, r28
     920:	cf 96       	adiw	r24, 0x3f	; 63
     922:	fc 01       	movw	r30, r24
     924:	80 81       	ld	r24, Z
     926:	91 81       	ldd	r25, Z+1	; 0x01
     928:	00 97       	sbiw	r24, 0x00	; 0
     92a:	99 f6       	brne	.-90     	; 0x8d2 <__stack+0xd2>
     92c:	2b c0       	rjmp	.+86     	; 0x984 <__stack+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     92e:	6b ad       	ldd	r22, Y+59	; 0x3b
     930:	7c ad       	ldd	r23, Y+60	; 0x3c
     932:	8d ad       	ldd	r24, Y+61	; 0x3d
     934:	9e ad       	ldd	r25, Y+62	; 0x3e
     936:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixunssfsi>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	9e 01       	movw	r18, r28
     940:	21 5c       	subi	r18, 0xC1	; 193
     942:	3f 4f       	sbci	r19, 0xFF	; 255
     944:	f9 01       	movw	r30, r18
     946:	91 83       	std	Z+1, r25	; 0x01
     948:	80 83       	st	Z, r24
     94a:	ce 01       	movw	r24, r28
     94c:	8d 5b       	subi	r24, 0xBD	; 189
     94e:	9f 4f       	sbci	r25, 0xFF	; 255
     950:	9e 01       	movw	r18, r28
     952:	21 5c       	subi	r18, 0xC1	; 193
     954:	3f 4f       	sbci	r19, 0xFF	; 255
     956:	f9 01       	movw	r30, r18
     958:	20 81       	ld	r18, Z
     95a:	31 81       	ldd	r19, Z+1	; 0x01
     95c:	fc 01       	movw	r30, r24
     95e:	31 83       	std	Z+1, r19	; 0x01
     960:	20 83       	st	Z, r18
     962:	ce 01       	movw	r24, r28
     964:	8d 5b       	subi	r24, 0xBD	; 189
     966:	9f 4f       	sbci	r25, 0xFF	; 255
     968:	fc 01       	movw	r30, r24
     96a:	80 81       	ld	r24, Z
     96c:	91 81       	ldd	r25, Z+1	; 0x01
     96e:	8c 01       	movw	r16, r24
     970:	c8 01       	movw	r24, r16
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <__stack+0x172>
     976:	8c 01       	movw	r16, r24
     978:	ce 01       	movw	r24, r28
     97a:	8d 5b       	subi	r24, 0xBD	; 189
     97c:	9f 4f       	sbci	r25, 0xFF	; 255
     97e:	fc 01       	movw	r30, r24
     980:	11 83       	std	Z+1, r17	; 0x01
     982:	00 83       	st	Z, r16
			_delay_ms(250);
			flash_led(2);		// bad Checksum indicator
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	0e 94 4e 05 	call	0xa9c	; 0xa9c <flash_led>
		}
	}
     98a:	a0 cc       	rjmp	.-1728   	; 0x2cc <main+0x226>

0000098c <SendPacket>:
// -------------------------------------------------------------------------------
//		SendPacket
//			Send the OK packet to the caller
// -------------------------------------------------------------------------------
void SendPacket()
{
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	00 d0       	rcall	.+0      	; 0x992 <SendPacket+0x6>
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint8_t iData;
	putch( bPacketRFAck[0]);			// send the leader
     996:	80 91 01 01 	lds	r24, 0x0101
     99a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <putch>
	for( i=1; i<OK_LENGTH; i++)
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	89 83       	std	Y+1, r24	; 0x01
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <SendPacket+0x5e>
	{
		iData = bPacketRFAck[i];
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	88 2f       	mov	r24, r24
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	8f 5f       	subi	r24, 0xFF	; 255
     9ac:	9e 4f       	sbci	r25, 0xFE	; 254
     9ae:	fc 01       	movw	r30, r24
     9b0:	80 81       	ld	r24, Z
     9b2:	8a 83       	std	Y+2, r24	; 0x02
		if ( iData == 0x11 || iData == 0x13 || iData == 0x7d || iData==0x7e)
     9b4:	8a 81       	ldd	r24, Y+2	; 0x02
     9b6:	81 31       	cpi	r24, 0x11	; 17
     9b8:	49 f0       	breq	.+18     	; 0x9cc <SendPacket+0x40>
     9ba:	8a 81       	ldd	r24, Y+2	; 0x02
     9bc:	83 31       	cpi	r24, 0x13	; 19
     9be:	31 f0       	breq	.+12     	; 0x9cc <SendPacket+0x40>
     9c0:	8a 81       	ldd	r24, Y+2	; 0x02
     9c2:	8d 37       	cpi	r24, 0x7D	; 125
     9c4:	19 f0       	breq	.+6      	; 0x9cc <SendPacket+0x40>
     9c6:	8a 81       	ldd	r24, Y+2	; 0x02
     9c8:	8e 37       	cpi	r24, 0x7E	; 126
     9ca:	49 f4       	brne	.+18     	; 0x9de <SendPacket+0x52>
		{
			putch( 0x7d);
     9cc:	8d e7       	ldi	r24, 0x7D	; 125
     9ce:	0e 94 fd 04 	call	0x9fa	; 0x9fa <putch>
			putch( 0x20 ^ iData);
     9d2:	9a 81       	ldd	r25, Y+2	; 0x02
     9d4:	80 e2       	ldi	r24, 0x20	; 32
     9d6:	89 27       	eor	r24, r25
     9d8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <putch>
     9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <SendPacket+0x58>
		}
		else
			putch( iData);
     9de:	8a 81       	ldd	r24, Y+2	; 0x02
     9e0:	0e 94 fd 04 	call	0x9fa	; 0x9fa <putch>
void SendPacket()
{
	uint8_t i;
	uint8_t iData;
	putch( bPacketRFAck[0]);			// send the leader
	for( i=1; i<OK_LENGTH; i++)
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	8f 5f       	subi	r24, 0xFF	; 255
     9e8:	89 83       	std	Y+1, r24	; 0x01
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	85 31       	cpi	r24, 0x15	; 21
     9ee:	d0 f2       	brcs	.-76     	; 0x9a4 <SendPacket+0x18>
			putch( 0x20 ^ iData);
		}
		else
			putch( iData);
	}
}
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	08 95       	ret

000009fa <putch>:
// -------------------------------------------------------------------------------
//		putch
//			Write a character to the serial port
// -------------------------------------------------------------------------------
void putch(char ch)
{
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	1f 92       	push	r1
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	89 83       	std	Y+1, r24	; 0x01
	//Adding flow control - xbee testing
#if HANDSHAKE
	while( (PIND & (1<<CTS)) != 0); //Don't send anything to the XBee, it is thinking
#endif

	while ((UCSRxA & (1<<UDREx)) == 0);
     a06:	00 00       	nop
     a08:	80 ec       	ldi	r24, 0xC0	; 192
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	fc 01       	movw	r30, r24
     a0e:	80 81       	ld	r24, Z
     a10:	88 2f       	mov	r24, r24
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	80 72       	andi	r24, 0x20	; 32
     a16:	99 27       	eor	r25, r25
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	b1 f3       	breq	.-20     	; 0xa08 <putch+0xe>
		UDRx = ch;
     a1c:	86 ec       	ldi	r24, 0xC6	; 198
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	29 81       	ldd	r18, Y+1	; 0x01
     a22:	fc 01       	movw	r30, r24
     a24:	20 83       	st	Z, r18
}
     a26:	0f 90       	pop	r0
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	08 95       	ret

00000a2e <getch>:
// -------------------------------------------------------------------------------
//		getch
//			Get a character from the serial port
// -------------------------------------------------------------------------------
char getch(void)
{
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	00 d0       	rcall	.+0      	; 0xa34 <getch+0x6>
     a34:	00 d0       	rcall	.+0      	; 0xa36 <getch+0x8>
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
	retransmit_flag = FALSE;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	80 93 00 01 	sts	0x0100, r24

	//Adding flow control - xbee testing
	//cbi(PORTD, RTS); //Tell XBee it is now okay to send us serial characters

	uint32_t count = 0;
     a40:	19 82       	std	Y+1, r1	; 0x01
     a42:	1a 82       	std	Y+2, r1	; 0x02
     a44:	1b 82       	std	Y+3, r1	; 0x03
     a46:	1c 82       	std	Y+4, r1	; 0x04
	while((UCSRxA & (1<<RXCx)) == 0)
     a48:	18 c0       	rjmp	.+48     	; 0xa7a <getch+0x4c>
	{
		count++;
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
     a4c:	9a 81       	ldd	r25, Y+2	; 0x02
     a4e:	ab 81       	ldd	r26, Y+3	; 0x03
     a50:	bc 81       	ldd	r27, Y+4	; 0x04
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	a1 1d       	adc	r26, r1
     a56:	b1 1d       	adc	r27, r1
     a58:	89 83       	std	Y+1, r24	; 0x01
     a5a:	9a 83       	std	Y+2, r25	; 0x02
     a5c:	ab 83       	std	Y+3, r26	; 0x03
     a5e:	bc 83       	std	Y+4, r27	; 0x04
		if (count > MAX_WAIT_IN_CYCLES) //
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	9a 81       	ldd	r25, Y+2	; 0x02
     a64:	ab 81       	ldd	r26, Y+3	; 0x03
     a66:	bc 81       	ldd	r27, Y+4	; 0x04
     a68:	89 3a       	cpi	r24, 0xA9	; 169
     a6a:	21 e6       	ldi	r18, 0x61	; 97
     a6c:	92 07       	cpc	r25, r18
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	18 f0       	brcs	.+6      	; 0xa7a <getch+0x4c>
		{
			retransmit_flag = TRUE;
     a74:	10 92 00 01 	sts	0x0100, r1
			break;
     a78:	06 c0       	rjmp	.+12     	; 0xa86 <getch+0x58>

	//Adding flow control - xbee testing
	//cbi(PORTD, RTS); //Tell XBee it is now okay to send us serial characters

	uint32_t count = 0;
	while((UCSRxA & (1<<RXCx)) == 0)
     a7a:	80 ec       	ldi	r24, 0xC0	; 192
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	fc 01       	movw	r30, r24
     a80:	80 81       	ld	r24, Z
     a82:	88 23       	and	r24, r24
     a84:	14 f7       	brge	.-60     	; 0xa4a <getch+0x1c>
	}

	//Adding flow control - xbee testing
	//sbi(PORTD, RTS); //Tell XBee to hold serial characters, we are busy doing other things

	return UDRx;
     a86:	86 ec       	ldi	r24, 0xC6	; 198
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	fc 01       	movw	r30, r24
     a8c:	80 81       	ld	r24, Z
}
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <flash_led>:
// -------------------------------------------------------------------------------
//		flash_led
//			Blink the led on/off <count> times
// -------------------------------------------------------------------------------
void flash_led(uint8_t count)
{
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	6e 97       	sbiw	r28, 0x1e	; 30
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8_t i;

	for (i = 0; i < count; i++)
     ab6:	19 82       	std	Y+1, r1	; 0x01
     ab8:	05 c1       	rjmp	.+522    	; 0xcc4 <flash_led+0x228>
	{
		LED_PORT |= (1<<LED);
     aba:	85 e2       	ldi	r24, 0x25	; 37
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	25 e2       	ldi	r18, 0x25	; 37
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	f9 01       	movw	r30, r18
     ac4:	20 81       	ld	r18, Z
     ac6:	20 62       	ori	r18, 0x20	; 32
     ac8:	fc 01       	movw	r30, r24
     aca:	20 83       	st	Z, r18
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	a8 e4       	ldi	r26, 0x48	; 72
     ad2:	b2 e4       	ldi	r27, 0x42	; 66
     ad4:	8a 83       	std	Y+2, r24	; 0x02
     ad6:	9b 83       	std	Y+3, r25	; 0x03
     ad8:	ac 83       	std	Y+4, r26	; 0x04
     ada:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	4a ef       	ldi	r20, 0xFA	; 250
     ae2:	54 e4       	ldi	r21, 0x44	; 68
     ae4:	6a 81       	ldd	r22, Y+2	; 0x02
     ae6:	7b 81       	ldd	r23, Y+3	; 0x03
     ae8:	8c 81       	ldd	r24, Y+4	; 0x04
     aea:	9d 81       	ldd	r25, Y+5	; 0x05
     aec:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__mulsf3>
     af0:	dc 01       	movw	r26, r24
     af2:	cb 01       	movw	r24, r22
     af4:	8e 83       	std	Y+6, r24	; 0x06
     af6:	9f 83       	std	Y+7, r25	; 0x07
     af8:	a8 87       	std	Y+8, r26	; 0x08
     afa:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	40 e8       	ldi	r20, 0x80	; 128
     b02:	5f e3       	ldi	r21, 0x3F	; 63
     b04:	6e 81       	ldd	r22, Y+6	; 0x06
     b06:	7f 81       	ldd	r23, Y+7	; 0x07
     b08:	88 85       	ldd	r24, Y+8	; 0x08
     b0a:	99 85       	ldd	r25, Y+9	; 0x09
     b0c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__cmpsf2>
     b10:	88 23       	and	r24, r24
     b12:	2c f4       	brge	.+10     	; 0xb1e <flash_led+0x82>
		__ticks = 1;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	9b 87       	std	Y+11, r25	; 0x0b
     b1a:	8a 87       	std	Y+10, r24	; 0x0a
     b1c:	42 c0       	rjmp	.+132    	; 0xba2 <flash_led+0x106>
	else if (__tmp > 65535)
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	3f ef       	ldi	r19, 0xFF	; 255
     b22:	4f e7       	ldi	r20, 0x7F	; 127
     b24:	57 e4       	ldi	r21, 0x47	; 71
     b26:	6e 81       	ldd	r22, Y+6	; 0x06
     b28:	7f 81       	ldd	r23, Y+7	; 0x07
     b2a:	88 85       	ldd	r24, Y+8	; 0x08
     b2c:	99 85       	ldd	r25, Y+9	; 0x09
     b2e:	0e 94 bb 07 	call	0xf76	; 0xf76 <__gesf2>
     b32:	18 16       	cp	r1, r24
     b34:	64 f5       	brge	.+88     	; 0xb8e <flash_led+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	40 e2       	ldi	r20, 0x20	; 32
     b3c:	51 e4       	ldi	r21, 0x41	; 65
     b3e:	6a 81       	ldd	r22, Y+2	; 0x02
     b40:	7b 81       	ldd	r23, Y+3	; 0x03
     b42:	8c 81       	ldd	r24, Y+4	; 0x04
     b44:	9d 81       	ldd	r25, Y+5	; 0x05
     b46:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__mulsf3>
     b4a:	dc 01       	movw	r26, r24
     b4c:	cb 01       	movw	r24, r22
     b4e:	bc 01       	movw	r22, r24
     b50:	cd 01       	movw	r24, r26
     b52:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixunssfsi>
     b56:	dc 01       	movw	r26, r24
     b58:	cb 01       	movw	r24, r22
     b5a:	9b 87       	std	Y+11, r25	; 0x0b
     b5c:	8a 87       	std	Y+10, r24	; 0x0a
     b5e:	12 c0       	rjmp	.+36     	; 0xb84 <flash_led+0xe8>
     b60:	88 ec       	ldi	r24, 0xC8	; 200
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	9d 87       	std	Y+13, r25	; 0x0d
     b66:	8c 87       	std	Y+12, r24	; 0x0c
     b68:	8c 85       	ldd	r24, Y+12	; 0x0c
     b6a:	9d 85       	ldd	r25, Y+13	; 0x0d
     b6c:	8c 01       	movw	r16, r24
     b6e:	c8 01       	movw	r24, r16
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	f1 f7       	brne	.-4      	; 0xb70 <flash_led+0xd4>
     b74:	8c 01       	movw	r16, r24
     b76:	1d 87       	std	Y+13, r17	; 0x0d
     b78:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b7a:	8a 85       	ldd	r24, Y+10	; 0x0a
     b7c:	9b 85       	ldd	r25, Y+11	; 0x0b
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	9b 87       	std	Y+11, r25	; 0x0b
     b82:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b84:	8a 85       	ldd	r24, Y+10	; 0x0a
     b86:	9b 85       	ldd	r25, Y+11	; 0x0b
     b88:	00 97       	sbiw	r24, 0x00	; 0
     b8a:	51 f7       	brne	.-44     	; 0xb60 <flash_led+0xc4>
     b8c:	17 c0       	rjmp	.+46     	; 0xbbc <flash_led+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b8e:	6e 81       	ldd	r22, Y+6	; 0x06
     b90:	7f 81       	ldd	r23, Y+7	; 0x07
     b92:	88 85       	ldd	r24, Y+8	; 0x08
     b94:	99 85       	ldd	r25, Y+9	; 0x09
     b96:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixunssfsi>
     b9a:	dc 01       	movw	r26, r24
     b9c:	cb 01       	movw	r24, r22
     b9e:	9b 87       	std	Y+11, r25	; 0x0b
     ba0:	8a 87       	std	Y+10, r24	; 0x0a
     ba2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ba4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ba6:	9f 87       	std	Y+15, r25	; 0x0f
     ba8:	8e 87       	std	Y+14, r24	; 0x0e
     baa:	8e 85       	ldd	r24, Y+14	; 0x0e
     bac:	9f 85       	ldd	r25, Y+15	; 0x0f
     bae:	8c 01       	movw	r16, r24
     bb0:	f8 01       	movw	r30, r16
     bb2:	31 97       	sbiw	r30, 0x01	; 1
     bb4:	f1 f7       	brne	.-4      	; 0xbb2 <flash_led+0x116>
     bb6:	8f 01       	movw	r16, r30
     bb8:	1f 87       	std	Y+15, r17	; 0x0f
     bba:	0e 87       	std	Y+14, r16	; 0x0e
		_delay_ms(50);
		LED_PORT &= ~(1<<LED);
     bbc:	85 e2       	ldi	r24, 0x25	; 37
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	25 e2       	ldi	r18, 0x25	; 37
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	f9 01       	movw	r30, r18
     bc6:	20 81       	ld	r18, Z
     bc8:	2f 7d       	andi	r18, 0xDF	; 223
     bca:	fc 01       	movw	r30, r24
     bcc:	20 83       	st	Z, r18
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	a8 e4       	ldi	r26, 0x48	; 72
     bd4:	b2 e4       	ldi	r27, 0x42	; 66
     bd6:	88 8b       	std	Y+16, r24	; 0x10
     bd8:	99 8b       	std	Y+17, r25	; 0x11
     bda:	aa 8b       	std	Y+18, r26	; 0x12
     bdc:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	4a ef       	ldi	r20, 0xFA	; 250
     be4:	54 e4       	ldi	r21, 0x44	; 68
     be6:	68 89       	ldd	r22, Y+16	; 0x10
     be8:	79 89       	ldd	r23, Y+17	; 0x11
     bea:	8a 89       	ldd	r24, Y+18	; 0x12
     bec:	9b 89       	ldd	r25, Y+19	; 0x13
     bee:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__mulsf3>
     bf2:	dc 01       	movw	r26, r24
     bf4:	cb 01       	movw	r24, r22
     bf6:	8c 8b       	std	Y+20, r24	; 0x14
     bf8:	9d 8b       	std	Y+21, r25	; 0x15
     bfa:	ae 8b       	std	Y+22, r26	; 0x16
     bfc:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e8       	ldi	r20, 0x80	; 128
     c04:	5f e3       	ldi	r21, 0x3F	; 63
     c06:	6c 89       	ldd	r22, Y+20	; 0x14
     c08:	7d 89       	ldd	r23, Y+21	; 0x15
     c0a:	8e 89       	ldd	r24, Y+22	; 0x16
     c0c:	9f 89       	ldd	r25, Y+23	; 0x17
     c0e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__cmpsf2>
     c12:	88 23       	and	r24, r24
     c14:	2c f4       	brge	.+10     	; 0xc20 <flash_led+0x184>
		__ticks = 1;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	99 8f       	std	Y+25, r25	; 0x19
     c1c:	88 8f       	std	Y+24, r24	; 0x18
     c1e:	42 c0       	rjmp	.+132    	; 0xca4 <flash_led+0x208>
	else if (__tmp > 65535)
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	3f ef       	ldi	r19, 0xFF	; 255
     c24:	4f e7       	ldi	r20, 0x7F	; 127
     c26:	57 e4       	ldi	r21, 0x47	; 71
     c28:	6c 89       	ldd	r22, Y+20	; 0x14
     c2a:	7d 89       	ldd	r23, Y+21	; 0x15
     c2c:	8e 89       	ldd	r24, Y+22	; 0x16
     c2e:	9f 89       	ldd	r25, Y+23	; 0x17
     c30:	0e 94 bb 07 	call	0xf76	; 0xf76 <__gesf2>
     c34:	18 16       	cp	r1, r24
     c36:	64 f5       	brge	.+88     	; 0xc90 <flash_led+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	40 e2       	ldi	r20, 0x20	; 32
     c3e:	51 e4       	ldi	r21, 0x41	; 65
     c40:	68 89       	ldd	r22, Y+16	; 0x10
     c42:	79 89       	ldd	r23, Y+17	; 0x11
     c44:	8a 89       	ldd	r24, Y+18	; 0x12
     c46:	9b 89       	ldd	r25, Y+19	; 0x13
     c48:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__mulsf3>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	bc 01       	movw	r22, r24
     c52:	cd 01       	movw	r24, r26
     c54:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixunssfsi>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	99 8f       	std	Y+25, r25	; 0x19
     c5e:	88 8f       	std	Y+24, r24	; 0x18
     c60:	12 c0       	rjmp	.+36     	; 0xc86 <flash_led+0x1ea>
     c62:	88 ec       	ldi	r24, 0xC8	; 200
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	9b 8f       	std	Y+27, r25	; 0x1b
     c68:	8a 8f       	std	Y+26, r24	; 0x1a
     c6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c6c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c6e:	8c 01       	movw	r16, r24
     c70:	c8 01       	movw	r24, r16
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <flash_led+0x1d6>
     c76:	8c 01       	movw	r16, r24
     c78:	1b 8f       	std	Y+27, r17	; 0x1b
     c7a:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c7c:	88 8d       	ldd	r24, Y+24	; 0x18
     c7e:	99 8d       	ldd	r25, Y+25	; 0x19
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	99 8f       	std	Y+25, r25	; 0x19
     c84:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c86:	88 8d       	ldd	r24, Y+24	; 0x18
     c88:	99 8d       	ldd	r25, Y+25	; 0x19
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	51 f7       	brne	.-44     	; 0xc62 <flash_led+0x1c6>
     c8e:	17 c0       	rjmp	.+46     	; 0xcbe <flash_led+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c90:	6c 89       	ldd	r22, Y+20	; 0x14
     c92:	7d 89       	ldd	r23, Y+21	; 0x15
     c94:	8e 89       	ldd	r24, Y+22	; 0x16
     c96:	9f 89       	ldd	r25, Y+23	; 0x17
     c98:	0e 94 42 07 	call	0xe84	; 0xe84 <__fixunssfsi>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	99 8f       	std	Y+25, r25	; 0x19
     ca2:	88 8f       	std	Y+24, r24	; 0x18
     ca4:	88 8d       	ldd	r24, Y+24	; 0x18
     ca6:	99 8d       	ldd	r25, Y+25	; 0x19
     ca8:	9d 8f       	std	Y+29, r25	; 0x1d
     caa:	8c 8f       	std	Y+28, r24	; 0x1c
     cac:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cae:	9d 8d       	ldd	r25, Y+29	; 0x1d
     cb0:	8c 01       	movw	r16, r24
     cb2:	f8 01       	movw	r30, r16
     cb4:	31 97       	sbiw	r30, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <flash_led+0x218>
     cb8:	8f 01       	movw	r16, r30
     cba:	1d 8f       	std	Y+29, r17	; 0x1d
     cbc:	0c 8f       	std	Y+28, r16	; 0x1c
// -------------------------------------------------------------------------------
void flash_led(uint8_t count)
{
	uint8_t i;

	for (i = 0; i < count; i++)
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	8f 5f       	subi	r24, 0xFF	; 255
     cc2:	89 83       	std	Y+1, r24	; 0x01
     cc4:	99 81       	ldd	r25, Y+1	; 0x01
     cc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cc8:	98 17       	cp	r25, r24
     cca:	08 f4       	brcc	.+2      	; 0xcce <flash_led+0x232>
     ccc:	f6 ce       	rjmp	.-532    	; 0xaba <flash_led+0x1e>
		LED_PORT |= (1<<LED);
		_delay_ms(50);
		LED_PORT &= ~(1<<LED);
		_delay_ms(50);
	}
}
     cce:	6e 96       	adiw	r28, 0x1e	; 30
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	08 95       	ret

00000ce4 <onboard_program_write>:
// -------------------------------------------------------------------------------
//		onboard_program_write
//			Write a page to the flash
// -------------------------------------------------------------------------------
void onboard_program_write(uint32_t page, uint8_t *buf)
{
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	2b 97       	sbiw	r28, 0x0b	; 11
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	6e 83       	std	Y+6, r22	; 0x06
     cfa:	7f 83       	std	Y+7, r23	; 0x07
     cfc:	88 87       	std	Y+8, r24	; 0x08
     cfe:	99 87       	std	Y+9, r25	; 0x09
     d00:	5b 87       	std	Y+11, r21	; 0x0b
     d02:	4a 87       	std	Y+10, r20	; 0x0a

	// Disable interrupts.
	uint8_t sreg = SREG;
     d04:	8f e5       	ldi	r24, 0x5F	; 95
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	fc 01       	movw	r30, r24
     d0a:	80 81       	ld	r24, Z
     d0c:	8b 83       	std	Y+3, r24	; 0x03
	cli();
     d0e:	f8 94       	cli
	
	EECR &= 1<<EEPE;
     d10:	8f e3       	ldi	r24, 0x3F	; 63
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	2f e3       	ldi	r18, 0x3F	; 63
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	f9 01       	movw	r30, r18
     d1a:	20 81       	ld	r18, Z
     d1c:	22 70       	andi	r18, 0x02	; 2
     d1e:	fc 01       	movw	r30, r24
     d20:	20 83       	st	Z, r18


	boot_page_erase_safe(page);
     d22:	87 e5       	ldi	r24, 0x57	; 87
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	fc 01       	movw	r30, r24
     d28:	80 81       	ld	r24, Z
     d2a:	88 2f       	mov	r24, r24
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	81 70       	andi	r24, 0x01	; 1
     d30:	99 27       	eor	r25, r25
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	b1 f7       	brne	.-20     	; 0xd22 <onboard_program_write+0x3e>
     d36:	8f e3       	ldi	r24, 0x3F	; 63
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	fc 01       	movw	r30, r24
     d3c:	80 81       	ld	r24, Z
     d3e:	88 2f       	mov	r24, r24
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	82 70       	andi	r24, 0x02	; 2
     d44:	99 27       	eor	r25, r25
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	b1 f7       	brne	.-20     	; 0xd36 <onboard_program_write+0x52>
     d4a:	8e 81       	ldd	r24, Y+6	; 0x06
     d4c:	9f 81       	ldd	r25, Y+7	; 0x07
     d4e:	23 e0       	ldi	r18, 0x03	; 3
     d50:	fc 01       	movw	r30, r24
     d52:	20 93 57 00 	sts	0x0057, r18
     d56:	e8 95       	spm

	uint16_t i;
	for (i=0; i<SPM_PAGESIZE; i+=2)
     d58:	1a 82       	std	Y+2, r1	; 0x02
     d5a:	19 82       	std	Y+1, r1	; 0x01
     d5c:	48 c0       	rjmp	.+144    	; 0xdee <onboard_program_write+0x10a>
	{
		// Set up little-endian word.
		uint16_t w = (uint8_t)*buf++;
     d5e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d60:	9b 85       	ldd	r25, Y+11	; 0x0b
     d62:	fc 01       	movw	r30, r24
     d64:	80 81       	ld	r24, Z
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	9d 83       	std	Y+5, r25	; 0x05
     d6c:	8c 83       	std	Y+4, r24	; 0x04
     d6e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d70:	9b 85       	ldd	r25, Y+11	; 0x0b
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	9b 87       	std	Y+11, r25	; 0x0b
     d76:	8a 87       	std	Y+10, r24	; 0x0a
		w += (*buf++) << 8;
     d78:	8a 85       	ldd	r24, Y+10	; 0x0a
     d7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d7c:	fc 01       	movw	r30, r24
     d7e:	80 81       	ld	r24, Z
     d80:	88 2f       	mov	r24, r24
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	98 2f       	mov	r25, r24
     d86:	88 27       	eor	r24, r24
     d88:	2c 81       	ldd	r18, Y+4	; 0x04
     d8a:	3d 81       	ldd	r19, Y+5	; 0x05
     d8c:	82 0f       	add	r24, r18
     d8e:	93 1f       	adc	r25, r19
     d90:	9d 83       	std	Y+5, r25	; 0x05
     d92:	8c 83       	std	Y+4, r24	; 0x04
     d94:	8a 85       	ldd	r24, Y+10	; 0x0a
     d96:	9b 85       	ldd	r25, Y+11	; 0x0b
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	9b 87       	std	Y+11, r25	; 0x0b
     d9c:	8a 87       	std	Y+10, r24	; 0x0a
		boot_page_fill_safe(page + i, w);
     d9e:	87 e5       	ldi	r24, 0x57	; 87
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	fc 01       	movw	r30, r24
     da4:	80 81       	ld	r24, Z
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	81 70       	andi	r24, 0x01	; 1
     dac:	99 27       	eor	r25, r25
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	b1 f7       	brne	.-20     	; 0xd9e <onboard_program_write+0xba>
     db2:	8f e3       	ldi	r24, 0x3F	; 63
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	fc 01       	movw	r30, r24
     db8:	80 81       	ld	r24, Z
     dba:	88 2f       	mov	r24, r24
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	82 70       	andi	r24, 0x02	; 2
     dc0:	99 27       	eor	r25, r25
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	b1 f7       	brne	.-20     	; 0xdb2 <onboard_program_write+0xce>
     dc6:	2e 81       	ldd	r18, Y+6	; 0x06
     dc8:	3f 81       	ldd	r19, Y+7	; 0x07
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	9a 81       	ldd	r25, Y+2	; 0x02
     dce:	82 0f       	add	r24, r18
     dd0:	93 1f       	adc	r25, r19
     dd2:	41 e0       	ldi	r20, 0x01	; 1
     dd4:	2c 81       	ldd	r18, Y+4	; 0x04
     dd6:	3d 81       	ldd	r19, Y+5	; 0x05
     dd8:	fc 01       	movw	r30, r24
     dda:	09 01       	movw	r0, r18
     ddc:	40 93 57 00 	sts	0x0057, r20
     de0:	e8 95       	spm
     de2:	11 24       	eor	r1, r1


	boot_page_erase_safe(page);

	uint16_t i;
	for (i=0; i<SPM_PAGESIZE; i+=2)
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	9a 81       	ldd	r25, Y+2	; 0x02
     de8:	02 96       	adiw	r24, 0x02	; 2
     dea:	9a 83       	std	Y+2, r25	; 0x02
     dec:	89 83       	std	Y+1, r24	; 0x01
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	80 38       	cpi	r24, 0x80	; 128
     df4:	91 05       	cpc	r25, r1
     df6:	08 f4       	brcc	.+2      	; 0xdfa <onboard_program_write+0x116>
     df8:	b2 cf       	rjmp	.-156    	; 0xd5e <onboard_program_write+0x7a>
		uint16_t w = (uint8_t)*buf++;
		w += (*buf++) << 8;
		boot_page_fill_safe(page + i, w);
	}

	boot_page_write_safe(page);     // Store buffer in flash page.
     dfa:	87 e5       	ldi	r24, 0x57	; 87
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	fc 01       	movw	r30, r24
     e00:	80 81       	ld	r24, Z
     e02:	88 2f       	mov	r24, r24
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	81 70       	andi	r24, 0x01	; 1
     e08:	99 27       	eor	r25, r25
     e0a:	00 97       	sbiw	r24, 0x00	; 0
     e0c:	b1 f7       	brne	.-20     	; 0xdfa <onboard_program_write+0x116>
     e0e:	8f e3       	ldi	r24, 0x3F	; 63
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	fc 01       	movw	r30, r24
     e14:	80 81       	ld	r24, Z
     e16:	88 2f       	mov	r24, r24
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	82 70       	andi	r24, 0x02	; 2
     e1c:	99 27       	eor	r25, r25
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	b1 f7       	brne	.-20     	; 0xe0e <onboard_program_write+0x12a>
     e22:	8e 81       	ldd	r24, Y+6	; 0x06
     e24:	9f 81       	ldd	r25, Y+7	; 0x07
     e26:	25 e0       	ldi	r18, 0x05	; 5
     e28:	fc 01       	movw	r30, r24
     e2a:	20 93 57 00 	sts	0x0057, r18
     e2e:	e8 95       	spm
    boot_rww_enable_safe();
     e30:	87 e5       	ldi	r24, 0x57	; 87
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	fc 01       	movw	r30, r24
     e36:	80 81       	ld	r24, Z
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	81 70       	andi	r24, 0x01	; 1
     e3e:	99 27       	eor	r25, r25
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	b1 f7       	brne	.-20     	; 0xe30 <onboard_program_write+0x14c>
     e44:	8f e3       	ldi	r24, 0x3F	; 63
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	fc 01       	movw	r30, r24
     e4a:	80 81       	ld	r24, Z
     e4c:	88 2f       	mov	r24, r24
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	82 70       	andi	r24, 0x02	; 2
     e52:	99 27       	eor	r25, r25
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	b1 f7       	brne	.-20     	; 0xe44 <onboard_program_write+0x160>
     e58:	81 e1       	ldi	r24, 0x11	; 17
     e5a:	80 93 57 00 	sts	0x0057, r24
     e5e:	e8 95       	spm


	// Re-enable interrupts (if they were ever enabled).
	SREG = sreg;
     e60:	8f e5       	ldi	r24, 0x5F	; 95
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	2b 81       	ldd	r18, Y+3	; 0x03
     e66:	fc 01       	movw	r30, r24
     e68:	20 83       	st	Z, r18
}
     e6a:	2b 96       	adiw	r28, 0x0b	; 11
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	08 95       	ret

00000e7c <__cmpsf2>:
     e7c:	2f d0       	rcall	.+94     	; 0xedc <__fp_cmp>
     e7e:	08 f4       	brcc	.+2      	; 0xe82 <__cmpsf2+0x6>
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	08 95       	ret

00000e84 <__fixunssfsi>:
     e84:	57 d0       	rcall	.+174    	; 0xf34 <__fp_splitA>
     e86:	88 f0       	brcs	.+34     	; 0xeaa <__fixunssfsi+0x26>
     e88:	9f 57       	subi	r25, 0x7F	; 127
     e8a:	90 f0       	brcs	.+36     	; 0xeb0 <__fixunssfsi+0x2c>
     e8c:	b9 2f       	mov	r27, r25
     e8e:	99 27       	eor	r25, r25
     e90:	b7 51       	subi	r27, 0x17	; 23
     e92:	a0 f0       	brcs	.+40     	; 0xebc <__fixunssfsi+0x38>
     e94:	d1 f0       	breq	.+52     	; 0xeca <__fixunssfsi+0x46>
     e96:	66 0f       	add	r22, r22
     e98:	77 1f       	adc	r23, r23
     e9a:	88 1f       	adc	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	1a f0       	brmi	.+6      	; 0xea6 <__fixunssfsi+0x22>
     ea0:	ba 95       	dec	r27
     ea2:	c9 f7       	brne	.-14     	; 0xe96 <__fixunssfsi+0x12>
     ea4:	12 c0       	rjmp	.+36     	; 0xeca <__fixunssfsi+0x46>
     ea6:	b1 30       	cpi	r27, 0x01	; 1
     ea8:	81 f0       	breq	.+32     	; 0xeca <__fixunssfsi+0x46>
     eaa:	5e d0       	rcall	.+188    	; 0xf68 <__fp_zero>
     eac:	b1 e0       	ldi	r27, 0x01	; 1
     eae:	08 95       	ret
     eb0:	5b c0       	rjmp	.+182    	; 0xf68 <__fp_zero>
     eb2:	67 2f       	mov	r22, r23
     eb4:	78 2f       	mov	r23, r24
     eb6:	88 27       	eor	r24, r24
     eb8:	b8 5f       	subi	r27, 0xF8	; 248
     eba:	39 f0       	breq	.+14     	; 0xeca <__fixunssfsi+0x46>
     ebc:	b9 3f       	cpi	r27, 0xF9	; 249
     ebe:	cc f3       	brlt	.-14     	; 0xeb2 <__fixunssfsi+0x2e>
     ec0:	86 95       	lsr	r24
     ec2:	77 95       	ror	r23
     ec4:	67 95       	ror	r22
     ec6:	b3 95       	inc	r27
     ec8:	d9 f7       	brne	.-10     	; 0xec0 <__fixunssfsi+0x3c>
     eca:	3e f4       	brtc	.+14     	; 0xeda <__fixunssfsi+0x56>
     ecc:	90 95       	com	r25
     ece:	80 95       	com	r24
     ed0:	70 95       	com	r23
     ed2:	61 95       	neg	r22
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	8f 4f       	sbci	r24, 0xFF	; 255
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	08 95       	ret

00000edc <__fp_cmp>:
     edc:	99 0f       	add	r25, r25
     ede:	00 08       	sbc	r0, r0
     ee0:	55 0f       	add	r21, r21
     ee2:	aa 0b       	sbc	r26, r26
     ee4:	e0 e8       	ldi	r30, 0x80	; 128
     ee6:	fe ef       	ldi	r31, 0xFE	; 254
     ee8:	16 16       	cp	r1, r22
     eea:	17 06       	cpc	r1, r23
     eec:	e8 07       	cpc	r30, r24
     eee:	f9 07       	cpc	r31, r25
     ef0:	c0 f0       	brcs	.+48     	; 0xf22 <__fp_cmp+0x46>
     ef2:	12 16       	cp	r1, r18
     ef4:	13 06       	cpc	r1, r19
     ef6:	e4 07       	cpc	r30, r20
     ef8:	f5 07       	cpc	r31, r21
     efa:	98 f0       	brcs	.+38     	; 0xf22 <__fp_cmp+0x46>
     efc:	62 1b       	sub	r22, r18
     efe:	73 0b       	sbc	r23, r19
     f00:	84 0b       	sbc	r24, r20
     f02:	95 0b       	sbc	r25, r21
     f04:	39 f4       	brne	.+14     	; 0xf14 <__fp_cmp+0x38>
     f06:	0a 26       	eor	r0, r26
     f08:	61 f0       	breq	.+24     	; 0xf22 <__fp_cmp+0x46>
     f0a:	23 2b       	or	r18, r19
     f0c:	24 2b       	or	r18, r20
     f0e:	25 2b       	or	r18, r21
     f10:	21 f4       	brne	.+8      	; 0xf1a <__fp_cmp+0x3e>
     f12:	08 95       	ret
     f14:	0a 26       	eor	r0, r26
     f16:	09 f4       	brne	.+2      	; 0xf1a <__fp_cmp+0x3e>
     f18:	a1 40       	sbci	r26, 0x01	; 1
     f1a:	a6 95       	lsr	r26
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
     f1e:	81 1d       	adc	r24, r1
     f20:	81 1d       	adc	r24, r1
     f22:	08 95       	ret

00000f24 <__fp_split3>:
     f24:	57 fd       	sbrc	r21, 7
     f26:	90 58       	subi	r25, 0x80	; 128
     f28:	44 0f       	add	r20, r20
     f2a:	55 1f       	adc	r21, r21
     f2c:	59 f0       	breq	.+22     	; 0xf44 <__fp_splitA+0x10>
     f2e:	5f 3f       	cpi	r21, 0xFF	; 255
     f30:	71 f0       	breq	.+28     	; 0xf4e <__fp_splitA+0x1a>
     f32:	47 95       	ror	r20

00000f34 <__fp_splitA>:
     f34:	88 0f       	add	r24, r24
     f36:	97 fb       	bst	r25, 7
     f38:	99 1f       	adc	r25, r25
     f3a:	61 f0       	breq	.+24     	; 0xf54 <__fp_splitA+0x20>
     f3c:	9f 3f       	cpi	r25, 0xFF	; 255
     f3e:	79 f0       	breq	.+30     	; 0xf5e <__fp_splitA+0x2a>
     f40:	87 95       	ror	r24
     f42:	08 95       	ret
     f44:	12 16       	cp	r1, r18
     f46:	13 06       	cpc	r1, r19
     f48:	14 06       	cpc	r1, r20
     f4a:	55 1f       	adc	r21, r21
     f4c:	f2 cf       	rjmp	.-28     	; 0xf32 <__fp_split3+0xe>
     f4e:	46 95       	lsr	r20
     f50:	f1 df       	rcall	.-30     	; 0xf34 <__fp_splitA>
     f52:	08 c0       	rjmp	.+16     	; 0xf64 <__fp_splitA+0x30>
     f54:	16 16       	cp	r1, r22
     f56:	17 06       	cpc	r1, r23
     f58:	18 06       	cpc	r1, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	f1 cf       	rjmp	.-30     	; 0xf40 <__fp_splitA+0xc>
     f5e:	86 95       	lsr	r24
     f60:	71 05       	cpc	r23, r1
     f62:	61 05       	cpc	r22, r1
     f64:	08 94       	sec
     f66:	08 95       	ret

00000f68 <__fp_zero>:
     f68:	e8 94       	clt

00000f6a <__fp_szero>:
     f6a:	bb 27       	eor	r27, r27
     f6c:	66 27       	eor	r22, r22
     f6e:	77 27       	eor	r23, r23
     f70:	cb 01       	movw	r24, r22
     f72:	97 f9       	bld	r25, 7
     f74:	08 95       	ret

00000f76 <__gesf2>:
     f76:	b2 df       	rcall	.-156    	; 0xedc <__fp_cmp>
     f78:	08 f4       	brcc	.+2      	; 0xf7c <__gesf2+0x6>
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	08 95       	ret

00000f7e <__mulsf3>:
     f7e:	0b d0       	rcall	.+22     	; 0xf96 <__mulsf3x>
     f80:	78 c0       	rjmp	.+240    	; 0x1072 <__fp_round>
     f82:	69 d0       	rcall	.+210    	; 0x1056 <__fp_pscA>
     f84:	28 f0       	brcs	.+10     	; 0xf90 <__mulsf3+0x12>
     f86:	6e d0       	rcall	.+220    	; 0x1064 <__fp_pscB>
     f88:	18 f0       	brcs	.+6      	; 0xf90 <__mulsf3+0x12>
     f8a:	95 23       	and	r25, r21
     f8c:	09 f0       	breq	.+2      	; 0xf90 <__mulsf3+0x12>
     f8e:	5a c0       	rjmp	.+180    	; 0x1044 <__fp_inf>
     f90:	5f c0       	rjmp	.+190    	; 0x1050 <__fp_nan>
     f92:	11 24       	eor	r1, r1
     f94:	ea cf       	rjmp	.-44     	; 0xf6a <__fp_szero>

00000f96 <__mulsf3x>:
     f96:	c6 df       	rcall	.-116    	; 0xf24 <__fp_split3>
     f98:	a0 f3       	brcs	.-24     	; 0xf82 <__mulsf3+0x4>

00000f9a <__mulsf3_pse>:
     f9a:	95 9f       	mul	r25, r21
     f9c:	d1 f3       	breq	.-12     	; 0xf92 <__mulsf3+0x14>
     f9e:	95 0f       	add	r25, r21
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	55 1f       	adc	r21, r21
     fa4:	62 9f       	mul	r22, r18
     fa6:	f0 01       	movw	r30, r0
     fa8:	72 9f       	mul	r23, r18
     faa:	bb 27       	eor	r27, r27
     fac:	f0 0d       	add	r31, r0
     fae:	b1 1d       	adc	r27, r1
     fb0:	63 9f       	mul	r22, r19
     fb2:	aa 27       	eor	r26, r26
     fb4:	f0 0d       	add	r31, r0
     fb6:	b1 1d       	adc	r27, r1
     fb8:	aa 1f       	adc	r26, r26
     fba:	64 9f       	mul	r22, r20
     fbc:	66 27       	eor	r22, r22
     fbe:	b0 0d       	add	r27, r0
     fc0:	a1 1d       	adc	r26, r1
     fc2:	66 1f       	adc	r22, r22
     fc4:	82 9f       	mul	r24, r18
     fc6:	22 27       	eor	r18, r18
     fc8:	b0 0d       	add	r27, r0
     fca:	a1 1d       	adc	r26, r1
     fcc:	62 1f       	adc	r22, r18
     fce:	73 9f       	mul	r23, r19
     fd0:	b0 0d       	add	r27, r0
     fd2:	a1 1d       	adc	r26, r1
     fd4:	62 1f       	adc	r22, r18
     fd6:	83 9f       	mul	r24, r19
     fd8:	a0 0d       	add	r26, r0
     fda:	61 1d       	adc	r22, r1
     fdc:	22 1f       	adc	r18, r18
     fde:	74 9f       	mul	r23, r20
     fe0:	33 27       	eor	r19, r19
     fe2:	a0 0d       	add	r26, r0
     fe4:	61 1d       	adc	r22, r1
     fe6:	23 1f       	adc	r18, r19
     fe8:	84 9f       	mul	r24, r20
     fea:	60 0d       	add	r22, r0
     fec:	21 1d       	adc	r18, r1
     fee:	82 2f       	mov	r24, r18
     ff0:	76 2f       	mov	r23, r22
     ff2:	6a 2f       	mov	r22, r26
     ff4:	11 24       	eor	r1, r1
     ff6:	9f 57       	subi	r25, 0x7F	; 127
     ff8:	50 40       	sbci	r21, 0x00	; 0
     ffa:	8a f0       	brmi	.+34     	; 0x101e <__mulsf3_pse+0x84>
     ffc:	e1 f0       	breq	.+56     	; 0x1036 <__mulsf3_pse+0x9c>
     ffe:	88 23       	and	r24, r24
    1000:	4a f0       	brmi	.+18     	; 0x1014 <__mulsf3_pse+0x7a>
    1002:	ee 0f       	add	r30, r30
    1004:	ff 1f       	adc	r31, r31
    1006:	bb 1f       	adc	r27, r27
    1008:	66 1f       	adc	r22, r22
    100a:	77 1f       	adc	r23, r23
    100c:	88 1f       	adc	r24, r24
    100e:	91 50       	subi	r25, 0x01	; 1
    1010:	50 40       	sbci	r21, 0x00	; 0
    1012:	a9 f7       	brne	.-22     	; 0xffe <__mulsf3_pse+0x64>
    1014:	9e 3f       	cpi	r25, 0xFE	; 254
    1016:	51 05       	cpc	r21, r1
    1018:	70 f0       	brcs	.+28     	; 0x1036 <__mulsf3_pse+0x9c>
    101a:	14 c0       	rjmp	.+40     	; 0x1044 <__fp_inf>
    101c:	a6 cf       	rjmp	.-180    	; 0xf6a <__fp_szero>
    101e:	5f 3f       	cpi	r21, 0xFF	; 255
    1020:	ec f3       	brlt	.-6      	; 0x101c <__mulsf3_pse+0x82>
    1022:	98 3e       	cpi	r25, 0xE8	; 232
    1024:	dc f3       	brlt	.-10     	; 0x101c <__mulsf3_pse+0x82>
    1026:	86 95       	lsr	r24
    1028:	77 95       	ror	r23
    102a:	67 95       	ror	r22
    102c:	b7 95       	ror	r27
    102e:	f7 95       	ror	r31
    1030:	e7 95       	ror	r30
    1032:	9f 5f       	subi	r25, 0xFF	; 255
    1034:	c1 f7       	brne	.-16     	; 0x1026 <__mulsf3_pse+0x8c>
    1036:	fe 2b       	or	r31, r30
    1038:	88 0f       	add	r24, r24
    103a:	91 1d       	adc	r25, r1
    103c:	96 95       	lsr	r25
    103e:	87 95       	ror	r24
    1040:	97 f9       	bld	r25, 7
    1042:	08 95       	ret

00001044 <__fp_inf>:
    1044:	97 f9       	bld	r25, 7
    1046:	9f 67       	ori	r25, 0x7F	; 127
    1048:	80 e8       	ldi	r24, 0x80	; 128
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	08 95       	ret

00001050 <__fp_nan>:
    1050:	9f ef       	ldi	r25, 0xFF	; 255
    1052:	80 ec       	ldi	r24, 0xC0	; 192
    1054:	08 95       	ret

00001056 <__fp_pscA>:
    1056:	00 24       	eor	r0, r0
    1058:	0a 94       	dec	r0
    105a:	16 16       	cp	r1, r22
    105c:	17 06       	cpc	r1, r23
    105e:	18 06       	cpc	r1, r24
    1060:	09 06       	cpc	r0, r25
    1062:	08 95       	ret

00001064 <__fp_pscB>:
    1064:	00 24       	eor	r0, r0
    1066:	0a 94       	dec	r0
    1068:	12 16       	cp	r1, r18
    106a:	13 06       	cpc	r1, r19
    106c:	14 06       	cpc	r1, r20
    106e:	05 06       	cpc	r0, r21
    1070:	08 95       	ret

00001072 <__fp_round>:
    1072:	09 2e       	mov	r0, r25
    1074:	03 94       	inc	r0
    1076:	00 0c       	add	r0, r0
    1078:	11 f4       	brne	.+4      	; 0x107e <__fp_round+0xc>
    107a:	88 23       	and	r24, r24
    107c:	52 f0       	brmi	.+20     	; 0x1092 <__fp_round+0x20>
    107e:	bb 0f       	add	r27, r27
    1080:	40 f4       	brcc	.+16     	; 0x1092 <__fp_round+0x20>
    1082:	bf 2b       	or	r27, r31
    1084:	11 f4       	brne	.+4      	; 0x108a <__fp_round+0x18>
    1086:	60 ff       	sbrs	r22, 0
    1088:	04 c0       	rjmp	.+8      	; 0x1092 <__fp_round+0x20>
    108a:	6f 5f       	subi	r22, 0xFF	; 255
    108c:	7f 4f       	sbci	r23, 0xFF	; 255
    108e:	8f 4f       	sbci	r24, 0xFF	; 255
    1090:	9f 4f       	sbci	r25, 0xFF	; 255
    1092:	08 95       	ret

00001094 <_exit>:
    1094:	f8 94       	cli

00001096 <__stop_program>:
    1096:	ff cf       	rjmp	.-2      	; 0x1096 <__stop_program>
