


#ifndef FONT_H
#define FONT_H

#include <stm32f4xx.h>
#include <stm32f4xx_conf.h>

class Font {
    public:
        virtual uint32_t getHeight()=0;
        virtual uint32_t getCharWidth(uint8_t charCode)=0;
        virtual uint8_t* getFontData(uint8_t charCode)=0;

    private:
        virtual uint8_t getCharCount()=0;
        virtual uint8_t getFirstChar()=0;
        virtual uint32_t getCharIndex(uint8_t charCode)=0;
};

#endif

#ifndef FontGeorgia7x5_H
#define FontGeorgia7x5_H

class FontGeorgia7x5 : public Font {

    public:
        uint32_t getHeight() {return 0x08;}
        uint32_t getCharWidth(uint8_t charCode) {return charWidths[charCode - getFirstChar()];}
        uint8_t* getFontData(uint8_t charCode) {return &fontData[getCharIndex(charCode)];}

    private:
        uint8_t getCharCount() {return 0x60;}
        uint8_t getFirstChar() {return 0x20;}
        uint32_t getCharIndex(uint8_t charCode) {return charIndexes[charCode - getFirstChar()];}


        uint8_t charWidths[0x60] = {0x00, 0x01, 0x03, 0x03, 0x03, 0x06, 0x06, 0x01, 0x02, 0x03, 
    0x03, 0x02, 0x02, 0x03, 0x01, 0x03, 0x04, 0x01, 0x04, 0x04, 
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x01, 0x01, 0x03, 0x04, 
    0x03, 0x03, 0x06, 0x05, 0x05, 0x05, 0x06, 0x05, 0x05, 0x06, 
    0x06, 0x03, 0x04, 0x05, 0x05, 0x07, 0x06, 0x06, 0x05, 0x06, 
    0x05, 0x04, 0x05, 0x06, 0x05, 0x08, 0x06, 0x05, 0x05, 0x01, 
    0x04, 0x01, 0x03, 0x05, 0x02, 0x03, 0x04, 0x03, 0x04, 0x04, 
    0x03, 0x04, 0x03, 0x02, 0x02, 0x03, 0x01, 0x05, 0x03, 0x04, 
    0x04, 0x04, 0x02, 0x03, 0x03, 0x04, 0x04, 0x06, 0x04, 0x04, 
    0x03, 0x02, 0x01, 0x02, 0x03, 0x06, };
        uint32_t charIndexes[0x60] = {0x00, 0x00, 0x01, 0x04, 0x07, 0x0A, 0x10, 0x16, 0x17, 0x19, 
    0x1C, 0x1F, 0x21, 0x23, 0x26, 0x27, 0x2A, 0x2E, 0x2F, 0x33, 
    0x37, 0x3B, 0x3F, 0x43, 0x47, 0x4B, 0x4F, 0x50, 0x51, 0x54, 
    0x58, 0x5B, 0x5E, 0x64, 0x69, 0x6E, 0x73, 0x79, 0x7E, 0x83, 
    0x89, 0x8F, 0x92, 0x96, 0x9B, 0xA0, 0xA7, 0xAD, 0xB3, 0xB8, 
    0xBE, 0xC3, 0xC7, 0xCC, 0xD2, 0xD7, 0xDF, 0xE5, 0xEA, 0xEF, 
    0xF0, 0xF4, 0xF5, 0xF8, 0xFD, 0xFF, 0x102, 0x106, 0x109, 0x10D, 
    0x111, 0x114, 0x118, 0x11B, 0x11D, 0x11F, 0x122, 0x123, 0x128, 0x12B, 
    0x12F, 0x133, 0x137, 0x139, 0x13C, 0x13F, 0x143, 0x147, 0x14D, 0x151, 
    0x155, 0x158, 0x15A, 0x15B, 0x15D, 0x160 };
        uint8_t fontData[0x166] = {0x2F, // 33
    0x01, 0x00, 0x03, // 34
    0x3C, 0x3A, 0x14, // 35
    0x26, 0x7F, 0x3A, // 36
    0x06, 0x39, 0x0E, 0x34, 0x2A, 0x39, // 37
    0x18, 0x27, 0x2F, 0x10, 0x2C, 0x04, // 38
    0x01, // 39
    0x3C, 0x43, // 40
    0x01, 0x66, 0x18, // 41
    0x02, 0x07, 0x07, // 42
    0x3C, 0x10, // 43
    0x40, 0x20, // 44
    0x10, 0x10, 0x10, // 45
    0x20, // 46
    0xE0, 0x18, 0x06, // 47
    0x18, 0x24, 0x24, 0x3C, // 48
    0x3C, // 49
    0x24, 0x24, 0x34, 0x2C, // 50
    0x44, 0x44, 0x54, 0x6C, // 51
    0x30, 0x28, 0x3C, 0x20, // 52
    0x48, 0x54, 0x54, 0x74, // 53
    0x1C, 0x2A, 0x26, 0x38, // 54
    0x04, 0x64, 0x1C, 0x04, // 55
    0x12, 0x2E, 0x29, 0x3E, // 56
    0x1C, 0x24, 0x64, 0x3C, // 57
    0x24, // 58
    0x64, // 59
    0x08, 0x18, 0x24, // 60
    0x10, 0x18, 0x18, 0x10, // 61
    0x24, 0x18, 0x08, // 62
    0x02, 0x39, 0x07, // 63
    0x7C, 0x5A, 0x66, 0x5E, 0x52, 0x0C, // 64
    0x30, 0x0C, 0x12, 0x1C, 0x20, // 65
    0x01, 0x3F, 0x29, 0x2D, 0x12, // 66
    0x0C, 0x32, 0x21, 0x21, 0x23, // 67
    0x01, 0x3F, 0x21, 0x22, 0x12, 0x0C, // 68
    0x01, 0x3F, 0x29, 0x29, 0x23, // 69
    0x01, 0x3F, 0x09, 0x09, 0x03, // 70
    0x1C, 0x22, 0x21, 0x29, 0x3A, 0x08, // 71
    0x21, 0x3F, 0x09, 0x08, 0x3F, 0x21, // 72
    0x21, 0x3F, 0x21, // 73
    0x30, 0x21, 0x3F, 0x01, // 74
    0x01, 0x3F, 0x0C, 0x13, 0x21, // 75
    0x01, 0x3F, 0x21, 0x20, 0x30, // 76
    0x1F, 0x21, 0x06, 0x38, 0x04, 0x3F, 0x01, // 77
    0x1D, 0x23, 0x04, 0x08, 0x3F, 0x01, // 78
    0x1C, 0x22, 0x21, 0x21, 0x32, 0x0C, // 79
    0x01, 0x3F, 0x09, 0x06, 0x02, // 80
    0x1C, 0x22, 0x41, 0x41, 0xB2, 0x0C, // 81
    0x01, 0x3F, 0x09, 0x19, 0x26, // 82
    0x32, 0x25, 0x29, 0x3A, // 83
    0x03, 0x01, 0x3F, 0x01, 0x03, // 84
    0x01, 0x3F, 0x21, 0x20, 0x3F, 0x01, // 85
    0x01, 0x0F, 0x30, 0x0D, 0x03, // 86
    0x01, 0x0F, 0x38, 0x04, 0x0E, 0x38, 0x07, 0x01, // 87
    0x21, 0x13, 0x0C, 0x1F, 0x21, 0x01, // 88
    0x01, 0x07, 0x38, 0x07, 0x01, // 89
    0x23, 0x31, 0x2D, 0x23, 0x31, // 90
    0x7F, // 91
    0x03, 0x1C, 0x60, 0x80, // 92
    0x7F, // 93
    0x06, 0x01, 0x02, // 94
    0x80, 0x80, 0x80, 0x80, 0x80, // 95
    0x01, 0x02, // 96
    0x34, 0x34, 0x3C, // 97
    0x1F, 0x24, 0x24, 0x3C, // 98
    0x18, 0x24, 0x24, // 99
    0x18, 0x24, 0x24, 0x3F, // 100
    0x18, 0x34, 0x34, 0x08, // 101
    0x04, 0x3F, 0x05, // 102
    0x4C, 0xB4, 0xAC, 0x44, // 103
    0x3F, 0x04, 0x3C, // 104
    0x04, 0x3D, // 105
    0x84, 0x7D, // 106
    0x3F, 0x1C, 0x24, // 107
    0x3F, // 108
    0x3C, 0x04, 0x3C, 0x24, 0x3C, // 109
    0x3C, 0x04, 0x3C, // 110
    0x38, 0x24, 0x24, 0x38, // 111
    0x84, 0xFC, 0x44, 0x3C, // 112
    0x18, 0x24, 0xC4, 0xFC, // 113
    0x3C, 0x04, // 114
    0x2C, 0x34, 0x34, // 115
    0x1C, 0x24, 0x04, // 116
    0x1C, 0x20, 0x20, 0x3C, // 117
    0x04, 0x18, 0x18, 0x04, // 118
    0x04, 0x38, 0x10, 0x18, 0x38, 0x04, // 119
    0x24, 0x1C, 0x3C, 0x04, // 120
    0x84, 0x78, 0x18, 0x04, // 121
    0x24, 0x34, 0x2C, // 122
    0x08, 0x77, // 123
    0xFF, // 124
    0x77, 0x08, // 125
    0x08, 0x08, 0x08, // 126
    0x3F, 0x21, 0x21, 0x21, 0x21, 0x3F // 127
    };
};

#endif
